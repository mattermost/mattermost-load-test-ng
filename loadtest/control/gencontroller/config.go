// Copyright (c) 2019-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.

package gencontroller

import (
	"errors"
	"math"
	"strings"

	"github.com/mattermost/mattermost-load-test-ng/config"

	"github.com/spf13/viper"
)

// Config holds information about the data to be generated by the
// GenController.
type Config struct {
	// The target number of teams to be created.
	NumTeams int64
	// The target number of channels to be created.
	NumChannels int64
	// The target number of posts to be created.
	NumPosts int64
	// The target number of reactions to be created.
	NumReactions int64

	// The percentage of replies to be created.
	PctReplies float64
	// The percentage of public channels to be created.
	PctPublicChannels float64
	// The percentage of private channels to be created.
	PctPrivateChannels float64
	// The percentage of direct channels to be created.
	PctDirectChannels float64
	// The percentage of group channels to be created.
	PctGroupChannels float64
}

// ReadConfig reads the configuration file from the given string. If the string
// is empty, it will search a config file in predefined folders.
func ReadConfig(configFilePath string) (*Config, error) {
	v := viper.New()

	configName := "gencontroller"
	v.SetConfigName(configName)
	v.AddConfigPath(".")
	v.AddConfigPath("./config/")
	v.AddConfigPath("./../config/")
	v.AddConfigPath("./../../../config/")
	v.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
	v.AutomaticEnv()

	if configFilePath != "" {
		v.SetConfigFile(configFilePath)
	}

	if err := config.ReadConfigFile(v, configName); err != nil {
		return nil, err
	}

	var cfg *Config
	if err := v.Unmarshal(&cfg); err != nil {
		return nil, err
	}

	return cfg, nil
}

// IsValid reports whether a given gencontroller.Config is valid or not.
// Returns an error if the validation fails.
func (c *Config) IsValid() error {
	if c.NumTeams < 0 {
		return errors.New("NumTeams should be > 0")
	}

	if c.NumChannels < 0 {
		return errors.New("NumChannels should be > 0")
	}

	if c.NumPosts < 0 {
		return errors.New("NumPosts should be > 0")
	}

	if c.NumReactions < 0 {
		return errors.New("NumReactions should be > 0")
	}

	if c.PctReplies < 0 || c.PctReplies > 1.0 {
		return errors.New("PctReplies should be >= 0 and <= 1.0")
	}

	if c.PctPublicChannels < 0 || c.PctPublicChannels > 1.0 {
		return errors.New("PctPublicChannels should be >= 0 and <= 1.0")
	}

	if c.PctPrivateChannels < 0 || c.PctPrivateChannels > 1.0 {
		return errors.New("PctPrivateChannels should be >= 0 and <= 1.0")
	}

	if c.PctDirectChannels < 0 || c.PctDirectChannels > 1.0 {
		return errors.New("PctDirectChannels should be >= 0 and <= 1.0")
	}

	if c.PctGroupChannels < 0 || c.PctGroupChannels > 1.0 {
		return errors.New("PctGroupChannels should be >= 0 and <= 1.0")
	}

	percentChannels := c.PctPublicChannels + c.PctPrivateChannels + c.PctDirectChannels + c.PctGroupChannels
	if (math.Round(percentChannels*100) / 100) != 1 {
		return errors.New("sum of percentages for channels should be equal to 1")
	}

	return nil
}
