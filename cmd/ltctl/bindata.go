// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/comparison.tmpl.json (25.571kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _comparisonTmplJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x6f\xdb\xba\x15\xfe\x9e\x5f\x41\x10\xdb\x90\x6e\x49\x67\x3b\x6f\x37\x01\xf6\x21\x37\x45\xbb\x02\xe9\x96\x25\xcd\xdd\x80\xde\xc0\xa0\xa5\x63\x99\x08\x45\xaa\x24\xe5\xc4\x0d\xbc\xdf\x7e\x41\x4a\x96\xa9\x97\xd8\x8e\x6b\x27\x4e\xcb\x2f\xad\x79\x48\x51\xe7\x3c\x3c\x3c\x7c\x0e\x45\x29\x0f\x5b\x08\x61\xc2\xb9\xd0\x44\x53\xc1\x15\x3e\x41\x46\x84\x10\x66\x54\x69\x7c\x82\xbe\xd8\x12\xca\xa5\xb6\xa6\x97\x52\xa6\x3f\x72\x7c\x82\xda\x3b\x53\x69\x48\x34\x51\x22\x95\x01\xe0\x13\x84\x77\x77\xd1\x07\x49\xfa\x84\x13\xb4\xbb\x8b\x9d\x66\xc0\x49\x8f\x99\x26\x5a\xa6\xe0\xc8\x07\x34\x6c\x90\xd2\x40\xf0\x33\xc1\x84\x34\x7d\xca\xa8\x47\xb6\x5b\x3b\xa8\xd3\x6e\xef\xa0\xce\xc1\xc1\x0e\x6a\xbf\x71\xbb\xe6\x24\xb6\xf7\x3e\x9d\x9a\x83\xfe\x82\x4e\x19\x48\xad\xdc\x76\x7a\x94\xd8\x76\x21\x51\x83\x9e\x20\x32\xc4\x79\xdd\xd8\xfe\x7f\xb3\x85\xd0\xd8\x34\xc7\x10\x52\x5d\xd1\x16\x47\x1c\xf4\xc7\x10\x9f\xa0\xce\xc1\x7e\x27\x93\x48\x92\x0c\x3e\x0b\xc1\x34\x4d\x26\x98\x60\x6a\x9a\xf0\x94\xb1\xac\xa4\x41\x5a\x85\x4c\xfd\x61\x6b\xef\xf8\xe8\xe8\xf0\x60\xff\xf0\x60\xdf\xd6\x32\xca\x6f\x0d\xf0\x5f\x6e\x6c\x31\x21\x1c\x98\x2a\xa0\x9f\x00\x8f\x09\xa3\x44\x59\x30\xec\x28\x8d\x27\x16\xe1\x1e\xb1\x92\x3e\x61\xaa\xc0\xce\x1a\x77\x0e\x3c\xd2\x03\x73\xcf\x56\x49\x0e\x4d\xcd\xdd\xd1\x63\x82\x84\x1a\x94\xde\xcd\x45\x45\xb3\x06\x44\x32\xb9\x94\x76\x8c\xca\x9d\xf6\x29\x63\xae\x97\x58\xc1\x07\x49\x42\x0a\xdc\xf8\xd6\x54\xab\x48\xd2\xf0\x42\x4c\xbd\x2f\x73\x09\x7c\x82\x8e\x9d\x71\xbb\x33\x7d\x75\x1c\xc1\xbd\xdb\x07\x42\x78\x64\xca\x93\xb1\x2c\xfa\x1e\xd0\x30\x04\x7e\x05\x92\x36\xd8\x6d\xc7\xe9\xa8\x28\x32\x88\x80\x87\x65\x35\xc8\x30\xaa\x3b\x66\x90\x4a\x99\x19\x51\xea\x0f\x21\x1c\x93\xfb\x7a\xf3\x98\xf2\xba\x50\x0d\xc4\x5d\x5d\xaa\x85\x26\xac\xa1\xdf\x21\x61\xa9\x35\xc0\xb4\xaf\x19\xc9\x28\x2f\x2a\x4b\xc2\x3b\x1a\x66\x2e\xe0\x4a\x1d\x77\xcb\x66\x4e\xca\xd8\x85\xa0\x5c\x7f\x12\x76\x16\xe2\x40\x70\x0e\x81\x86\x70\x3a\xf4\x22\x29\x07\x88\xc2\x6d\xce\x8b\xfe\x6a\x5a\x25\x20\x03\xe0\x9a\x44\x50\x03\x3e\x31\xb7\x33\xae\x90\x9a\x6b\x0f\xca\xf2\xfa\x38\x49\xe0\x21\x48\xb0\x71\xa0\xcf\x84\x9e\xea\xa5\xec\xc0\xfe\x7b\x08\x52\xd2\x10\x2a\x86\xa9\x84\x04\xd0\x34\x0d\x94\x26\xc1\x6d\xed\x2e\x4a\x43\x92\x40\x78\x4e\x79\x5d\x61\x4d\x64\x04\x5a\x39\x21\xd1\x0d\x8a\x66\x0e\xdc\x27\x56\x3d\x95\xc6\xdb\x92\x68\xd8\x8e\x89\xd6\x20\x63\xa1\x74\x37\x31\xff\xd8\x91\x7d\xa0\x5c\x69\xc2\x03\xf8\xc7\xff\x7f\xc7\x7f\x52\x20\x87\x20\x7f\xc7\xe3\x2f\xed\xf8\x06\x89\x7e\x5f\x81\x46\x0f\x0f\x6f\xb3\x5f\xe3\xb1\x7a\xe3\x46\x38\x33\x83\x84\x8c\x89\x71\x3b\xac\x69\x0c\xdd\xcc\xf8\x72\x13\xca\x35\xc8\x21\x61\xef\x49\xa0\xed\xa4\x6c\x97\xaa\x33\x17\x7f\x5f\xf4\xf3\xf0\xf0\xb6\x47\x14\x9c\x93\x1e\xb0\xf1\xb8\xdc\x55\x0c\x5a\xd2\xc0\xb4\x6a\xb4\xa5\xdc\x58\x42\xdf\x06\x46\x7c\x5a\x96\x1b\x50\xcd\x10\x17\xb2\xf1\xce\x9a\x00\x7c\x16\xb0\x38\xdc\xad\x10\xab\x5f\xe7\x61\x95\xff\x9a\xba\xb4\x1e\x48\x50\x03\xc1\xc2\x8a\xab\x1b\x13\xdf\x4b\x11\x3b\xeb\x4e\x21\xbf\x84\x28\x9f\xbb\x95\x0b\xae\x06\xb4\xaf\xeb\x57\x68\x1b\xe1\xf1\x85\x50\x5a\xa1\x04\x24\xba\x82\x40\x70\x27\x18\xe8\x62\xb9\x73\x82\x41\xac\x2e\x41\x09\x96\xe6\x0b\x5d\x35\x80\xa9\x01\x91\x10\x36\x84\x41\x21\x75\x25\x90\xdb\x58\xd7\x9d\xac\xd3\x94\x87\x74\x48\xc3\x94\x30\x5c\x8b\x30\x93\x36\x76\x11\x9e\xea\x77\x4f\xee\x69\x25\x54\xf5\xd2\xe0\x36\x9b\xbf\xae\xb1\x46\xed\x3c\xe6\x19\x3c\x1a\xe8\x44\xa5\x75\x73\xd0\x2e\x82\x73\x43\x10\x1c\x91\x7b\x98\x11\x36\xa6\x4e\xaa\x06\x06\x89\xb2\xff\x19\x4f\x33\x75\x67\x22\xe5\xd5\x3a\x11\xfd\x4a\x14\xd4\x7c\x36\x5b\x80\xca\x6a\x17\x4b\x50\x4d\xec\xd8\x33\x77\x82\x2e\xa4\x6a\xed\x0e\x6b\xd4\xb3\x36\x39\x46\xf5\x71\x27\x8c\x46\x4d\xee\x68\xe5\xe7\x30\x2c\x94\x2e\x91\xc0\x1c\x02\x4f\xbe\x26\xe5\x46\xf2\x55\x12\x2c\xcb\xbe\x1c\x7c\x3c\xfd\xf2\xf4\x6b\x1d\xf4\x6b\xa0\x75\xd2\x95\xf0\x35\x05\xa5\xd5\x8f\xc2\xc3\xac\x51\x76\xee\xab\x67\xa7\x63\x4f\x03\x74\xf3\x78\xd9\xa2\xd8\x6d\x34\x3d\xbb\xcc\xf1\xf7\x0c\xcd\x33\xb4\xa7\xa8\xea\x19\xda\xcf\xc3\xd0\xaa\xdb\x63\xc7\x4b\x10\xb4\xc3\x05\xf8\x59\x75\xec\xe6\x11\xb4\x9a\x94\x36\x07\xa4\xa5\x28\x9a\xad\xf0\x1c\x6d\xb3\x39\x5a\x75\x35\xbe\x83\x9e\x12\x76\x01\x98\xc9\x27\x1a\xc9\x19\x5e\x9a\x59\x39\x2c\xe9\x49\x84\x68\x49\xed\x5f\x92\x08\xbd\x0e\x52\xf3\xaf\x34\xee\x81\x44\xa2\x8f\xce\x26\x13\x0c\xbd\x83\x21\x0d\x40\xa1\xed\xff\x42\xef\xca\xa2\x3c\xa9\x34\x77\x78\xe3\x49\x8f\x27\x3d\x9e\xf4\x78\xd2\x83\xd0\x63\xdb\x52\xcb\xb0\x9e\xf6\x02\xac\xc7\xef\x4a\x79\xc6\xb3\x14\xe3\x09\x7b\xdd\x98\x28\x0d\xb2\x1b\x4c\x17\xb2\xef\xe5\x3d\x1b\xb0\x27\x35\xc3\xae\x35\xee\x4e\x7d\x17\xb0\x1b\xb7\x37\xf5\x74\x0c\x5f\x17\xa1\xb3\xe7\x72\xb4\x40\x9f\xac\x91\xe8\x1d\xd1\xc4\x38\x99\x67\x71\x9e\xc5\x79\x16\xe7\x59\x1c\x42\x8f\x6c\x5d\xb5\x7f\x59\x86\xc5\x79\x1a\xe7\x69\x1c\x5a\x29\x8d\xab\x3e\x0b\x23\x09\xed\x66\x5c\x21\x8d\x1f\x7f\x7c\x88\xfe\x8e\x66\x5e\x1c\x98\x18\xec\x5e\xde\x6e\xed\x1f\xb6\x96\x79\xee\x98\x9f\xa4\xad\xf8\xd8\xd3\x79\x0b\x19\x46\xe8\xc9\x04\xd0\x05\xe3\x19\x9f\x47\x56\xc7\xe0\x09\x78\xbf\x3c\xc2\x4f\x62\x87\x0b\x00\x3c\x97\x0e\xce\x01\x78\x40\x95\x16\x91\x24\x71\xf7\x6b\x4a\xb8\xa6\x0c\xb6\x5b\x6f\x8f\x8f\x77\x66\x03\x9a\x51\xa0\x19\x13\xa0\x37\x42\xdb\x0c\x56\x09\x77\x15\xcf\xe4\xf8\x78\xa6\xc7\x16\x08\x9d\x2d\xbe\xd9\xfb\xbd\x60\x3c\xa7\xe1\x73\x77\x7e\xdf\xe1\xcd\xc8\x09\x4e\x2f\x3e\xa2\xfc\xe9\x35\xfa\x4c\x63\x40\xdb\x57\x36\x1d\xf3\x5b\xb9\x6b\x4e\x02\x1e\x49\x00\x1e\xe3\xfe\x1d\xcf\xfd\xa7\x10\x7b\xee\x9f\x0f\xd6\x4b\xec\xe0\x2e\x45\xfe\xf7\x3a\x9e\xfc\x7b\xf2\xbf\x7a\xf2\x3f\x99\x48\xa5\x63\x70\x33\xf8\xe7\x8c\xf6\x1b\x44\x43\x37\x97\xe8\xcf\xc7\x7b\x7e\xce\xb5\xc8\x18\x6c\x5a\xea\xf5\xfa\x12\x83\x19\x28\xff\xb4\xf9\xc1\x42\x98\xf8\x34\x61\xa1\x34\xe1\x8c\x19\x92\xe1\xd3\x04\x9f\x26\xf8\x34\x21\xab\xf8\xa9\xd3\x84\xea\x23\x82\xce\xd1\x12\x59\x42\x7b\xcf\x67\x09\x3e\x4b\x58\x59\x96\x40\x86\x51\xfd\xed\x65\x29\x02\x50\xaa\x1b\x24\x69\x57\xd9\x17\x35\x96\x7d\x0b\xe9\xaf\xa8\xdd\x6a\xbd\xe4\xb1\x8f\x95\xb1\xfb\x55\xe1\xf4\x7c\x98\xbc\xee\x83\xb5\x67\x17\xd7\xe8\x5a\x53\x46\xbf\xd9\x2f\x91\xa0\x4b\xa2\x01\x6d\xff\xd9\x73\xa9\x97\x3b\x77\x31\x73\x38\xd0\x9a\xb9\x8b\xe7\x58\x9e\x63\x2d\xb5\x15\xbb\x14\xc9\x3a\xf0\x1c\xcb\x73\xac\x95\x72\xac\x48\x74\x63\x88\x95\x26\x5a\x75\xed\xad\xba\x94\xa7\x0a\xba\xbd\x91\x06\xb5\xd6\x43\xb4\xab\xda\xe5\xbb\x32\x5a\x9f\x32\x26\x82\x05\xb7\x5f\x5d\x93\x89\xb9\x2e\x33\x76\xad\xe7\x6b\x97\x85\x7a\x53\x60\x9d\xbf\x87\xba\x0c\xaa\xdf\xbb\x93\x5a\x45\x75\x00\x24\x79\x75\xfe\xfb\x4f\x20\xc9\xba\xdd\xf7\xec\x65\x80\xde\x10\x50\xd7\xe3\xbc\xef\x36\x39\x4d\xf9\x04\xb1\x90\x23\x74\xad\xcc\x8a\xe6\x53\x93\x75\xa6\x26\xd6\x53\x9e\xb8\xd5\xfb\x13\xa5\x21\xee\x5b\xe4\x3e\x0f\x99\xc8\x37\x27\x0f\xd9\x3b\x5c\x22\x0f\xd9\xf7\x79\x88\xcf\x43\x56\x96\x87\xa8\x34\x36\xec\x22\x12\x52\xa4\xda\x0c\xcb\xeb\x7b\x79\xaf\xa4\xfe\x1a\x0f\x72\x2c\x02\xd3\x66\xbc\x8a\xb7\x08\x22\x1b\xbd\xd3\x3b\x7d\xe3\xee\x83\x40\x97\x55\x43\x3c\x97\xf2\xaf\xd7\xfd\xe0\xfb\xba\x5b\x79\xb7\x66\xbe\x9a\x59\xe7\xf6\x80\x55\x30\x80\x98\xfc\x06\x52\x65\xae\xde\xc9\xbe\xe2\xae\xf4\x88\xe5\x5f\x85\x97\xb7\x16\x1d\xac\x49\x34\x9d\x7b\x58\x43\x9c\x30\xa2\x29\x8f\x16\xf9\x46\x3e\x61\xec\x37\xe3\x57\x75\x27\x9c\xd2\x89\xd2\xf8\x68\xb8\xcf\x8e\x7e\x25\xc9\x6e\xeb\xe4\x97\xd6\xe1\x11\xfa\x1b\x32\x85\xb6\x2d\x94\xc7\x6b\x98\x77\xfd\xc5\x11\x22\xf7\xda\x52\xf3\xbc\x26\xef\xc8\xa9\xb8\x69\xf2\x9a\x05\x19\xa2\x69\x08\x7d\xca\x69\x1e\x31\x32\x1f\xea\x66\x93\x69\x7b\x12\xdf\x4b\xdf\xe7\xcf\x53\x64\x37\x58\x50\x1e\xb0\x34\x84\x53\xd6\x44\x83\x8a\x09\x94\x2d\x10\x6e\x57\x71\xca\x34\xad\x4f\xe5\xc9\x5f\x00\xa8\x5f\x30\xa5\x34\xd3\x50\x8a\x10\xfe\x9a\x82\x1c\x2d\xa6\xfd\xd4\x97\xda\x25\x69\x04\xf7\x95\x84\x09\xab\x5b\x9a\x5c\x4b\x76\x35\xe2\x41\x53\x2c\xad\xc7\x4c\x4d\x22\xeb\x2d\xea\x3f\x13\x7d\x70\xb9\xb6\xa6\xb8\x91\x35\x37\xce\x83\x6a\x66\x99\x53\x91\x2a\xf8\x9c\x75\x54\xfa\x3c\xd6\x16\x2a\xfd\xc9\x03\x1b\x48\x0b\xff\xee\x67\x0b\x93\x59\x37\xcd\xcf\x62\xcd\xc4\x5a\xe4\x62\x2d\xc6\x63\x5c\xba\x3a\xa1\xc1\xad\x25\x6f\x79\x1f\x39\x6e\xdd\xc9\x52\xed\x86\x53\x7c\xe0\xac\x4b\xed\x96\x53\xd8\x73\x0b\xed\xe9\x81\x46\x7c\xe0\xfc\x6e\xbb\x85\xbd\x96\x5b\xe3\xac\x27\x1d\xe7\x77\x3b\xff\x5b\x0f\x37\x13\x3b\x0c\xb1\x70\x7c\x63\xee\x5d\xdc\x8e\x0f\xdd\x8e\xdd\xbb\x74\xf6\xdd\x82\x43\xac\x8f\x42\x57\xdf\x89\x2e\x25\xf8\xbe\x09\x4b\x48\x71\x4f\x8a\x3b\x95\xfb\xf0\x74\x69\x37\x88\x9b\xdf\xf9\x48\xe0\xd4\x26\x35\xf8\xdb\xff\x0e\xbb\xfb\xd7\xfa\x53\x2f\x93\x0e\x8b\xe0\xb6\xbf\x35\xde\xfa\x23\x00\x00\xff\xff\x5e\x57\x31\x96\xe3\x63\x00\x00")

func comparisonTmplJsonBytes() ([]byte, error) {
	return bindataRead(
		_comparisonTmplJson,
		"comparison.tmpl.json",
	)
}

func comparisonTmplJson() (*asset, error) {
	bytes, err := comparisonTmplJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "comparison.tmpl.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x96, 0x6e, 0xb, 0xb7, 0x42, 0x97, 0xb3, 0xc5, 0xe8, 0xe, 0x5b, 0x26, 0x5b, 0xc7, 0xd0, 0x3b, 0x74, 0x39, 0x57, 0x21, 0xc1, 0xb8, 0xc1, 0x7a, 0x71, 0xd4, 0xfb, 0xcb, 0xc8, 0x6c, 0x64, 0x36}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"comparison.tmpl.json": comparisonTmplJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"comparison.tmpl.json": {comparisonTmplJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
