// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (10.463kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (40.38kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (327B)
// assets/variables.tf (779B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xe3\x36\x12\xfe\xee\x5f\x31\xa7\x5d\xa0\xed\x61\x25\xd9\x49\x9a\x4d\x5a\xa4\x45\xef\x0d\x38\xa0\xbd\x16\xb8\x02\xf7\x61\x11\x08\x34\x39\x96\x08\x53\x24\x8f\xa4\x9c\x78\xf7\x72\xbf\xfd\x40\x4a\xb2\x65\x59\x72\xbc\xde\x4d\x77\x7b\xbb\xc9\x17\x63\x38\x33\x1c\x3e\x33\xf3\xf0\x45\xda\xa8\x15\x67\x68\x20\x22\x77\x36\x82\x37\x13\x00\x6d\xd4\x82\x0b\x84\x1b\x88\xca\x32\x16\x8a\x30\x87\xd6\x45\x13\x00\x83\x39\x57\x12\xfc\x48\x65\x63\x24\xd6\xc5\x67\x5e\xbe\x42\x63\xfd\xc0\x0d\x44\xff\xfd\x0e\xce\x92\x8b\x97\xd1\xe4\x61\x32\x31\x68\x55\x65\x28\x06\xdf\xd9\x12\xd7\x99\x26\xdc\x44\x10\x2d\x71\x5d\x4f\xe5\x65\x92\x94\x08\xc1\xe7\xf3\x37\x2b\x62\x12\x2a\x2a\xeb\xd0\x04\xf9\x43\xbc\xc4\x75\x30\xf2\x71\x55\x73\xc1\xa9\xf7\x03\x37\xe0\x23\xfc\xd2\xab\x5b\x5b\x64\xdb\x91\xaf\xf6\xe7\xe5\xd2\x3a\x22\x29\x46\x10\x11\xad\x33\x8b\x66\x85\xa6\x9e\xde\x91\xdc\xc2\x4d\xf8\x09\xf0\x0f\x1f\xc7\x48\x14\x44\xeb\xf8\xf9\x1b\xaa\x2a\xe9\x12\x2e\x19\xde\x3f\xf8\x80\x1e\x26\x13\x00\xaa\xa4\x44\xea\xfc\xf2\x6b\x3f\xcf\xe0\xd7\x02\x81\xe1\x82\x54\xc2\x41\x65\xd1\x84\x15\x2e\x94\x01\x55\x19\xf8\xe1\xa7\xbf\x07\x35\xb7\xd6\x61\x3a\x6b\x8b\x28\x08\xbc\x66\x40\x76\x5e\x49\x57\xd5\xb2\x42\x59\x07\x37\x60\x51\x2c\x92\x66\x91\x5c\xb7\x33\x93\x92\xc3\xf6\xef\x06\x22\x52\xf2\x78\xba\xa0\x67\x53\xc6\x66\x8c\x5c\x4c\x2f\x5f\x5e\x4d\xe7\x11\x3c\x83\xd9\x55\x32\xbd\x80\x1f\x7f\xfd\xe7\x04\xa0\x85\x23\x6b\x02\xf0\x8b\xf5\xb8\xec\xc8\x77\x53\x13\xbc\x77\x53\x98\x2c\x71\x9d\x70\x16\x56\x5f\x49\xd7\x89\x61\xcf\x5b\x50\xf0\x25\xa2\x69\x66\x91\x56\x86\xbb\x75\x96\x1b\x55\xe9\x8c\x33\x0f\xfe\xab\xb0\xd0\xe8\xf9\x1b\x3f\xc1\xae\x86\xf7\x94\x70\xf6\x10\xbd\x38\xac\x93\xe5\xca\x5a\x5e\xab\x4e\x00\x6e\x3d\x38\x6c\x2d\x49\xc9\x29\x44\x46\x29\x97\xcd\x85\xa2\xcb\x8c\xe1\x8a\xfb\x3a\xa8\xf3\xb4\x50\x26\x43\x42\x8b\x26\xea\x3d\xbd\xa0\x44\x95\x74\x28\x5d\x63\x02\xb0\x52\xa2\x2a\x31\xb3\xfc\xb5\xc7\x4e\x28\xb5\xac\xf4\x97\x7b\xa6\xc9\x8a\x88\x0a\x5f\x40\xd4\x51\x8f\x5e\x80\xac\x84\xf8\x6a\xd7\x51\x93\x84\x63\x1d\x79\xf5\x1d\x47\x0f\x6d\x31\x84\x3e\xf6\x4d\xe8\x5b\xd9\x37\x47\xbb\xcc\xa6\x15\x3a\xf9\x29\x89\x73\x68\x4a\x65\x5d\x26\x38\x45\x69\x31\xf3\x06\x41\x9b\xa1\x75\x5c\x12\xd7\x74\x73\x5a\xa8\x12\xd3\xba\x22\xd3\xad\x5d\xc7\x45\xdc\xb8\x88\x06\x03\x31\x58\x2a\x87\x31\xde\x23\x6d\xe3\xe1\x52\x70\x89\x9b\xc4\x03\x44\x77\x85\x67\x9b\x57\xf0\x07\x88\x17\x90\xae\x88\x49\x05\x9f\xa7\x54\xa8\x8a\xa5\x6d\x1d\xa5\x73\xa5\x5c\xbc\xe0\x92\xdb\x02\x19\xdc\x7e\x0b\x4c\x01\xd2\x42\xc1\x17\xff\x22\xdc\x71\x99\x87\x06\x0b\x46\x31\x97\xdc\x25\x49\xf2\xc5\xb7\x60\x05\xa2\x86\x99\xd7\x96\xd8\x94\x91\x9f\x31\x47\x07\x71\x2c\x55\x4c\x0b\xa4\xcb\x98\xa2\x71\x7c\xc1\x29\x71\x08\xf1\xbf\x7f\x86\x18\x0a\xe7\xb4\xfd\x26\x4d\xed\x79\x8c\x55\x7c\x87\xd6\xc5\xb3\x84\x94\xe4\xb5\x92\xe4\xce\x26\x54\x95\x29\xc3\x79\x62\xd4\xbc\xb2\x4e\xa3\xa1\xa8\x3d\x66\x09\x57\xe9\xc5\xec\xaf\x7f\xfb\xf3\xf5\xf5\x5f\x92\x5c\xe7\xf0\x1f\xb0\x15\x53\x40\xb4\xf3\x4c\x06\x84\x31\x88\xb7\x71\x6c\xc6\x42\x3c\x6b\xa8\x34\x23\x0e\x47\xc6\x03\x14\x42\x78\x3d\x6d\x54\x89\xae\xc0\xca\xc6\x52\x31\x8f\xaf\x56\xc6\xa1\xe9\xaf\xf0\x67\xe8\x24\x8a\x71\xeb\x12\x47\x4c\x92\xbf\x86\x9a\xe3\x3a\x85\xc0\xd4\x9d\xf4\x4c\x9f\x55\x46\x3c\x6c\xdd\x38\x62\xe0\xfe\xf5\x62\xc4\x4d\x2f\xd0\x72\xd5\xd1\x83\x54\x69\x97\xd6\x2c\x76\x1b\x6a\xe3\x10\x31\x97\xe8\x0c\xa7\xf6\x34\x72\x6e\x8c\xff\x6f\x18\x39\x72\x67\x89\x20\x26\x0f\x3d\x75\x0c\x0d\x9f\x4a\xaf\x0d\x70\x1b\x8a\xfd\x4c\x9c\x9f\xf9\xea\x89\xf9\xaa\xa7\x6b\xd7\xd6\x61\x49\x9d\x00\x94\x64\x2e\x70\x5c\x73\xc0\x2b\x61\x2c\x74\xa8\xe0\xf3\x85\x92\x8e\x2a\xb9\xe0\xf9\xac\x87\x5a\x0b\x0c\x13\x49\x6e\xc8\x82\x48\x12\xc0\x50\xd6\xa6\x06\x05\x12\x8b\x69\x23\xcf\x2e\x93\xcb\xe4\x2c\x23\x25\xbb\xbc\x48\x18\xce\x7b\x01\x30\xbd\xcc\x21\xe6\x70\x9c\xf6\x76\x61\x8c\x60\xa9\x64\x6c\xd0\xd3\xeb\x63\xcb\x6f\x9c\xc7\x0d\x0f\xf6\xb4\xd1\xf8\xd2\xee\x29\x81\x75\xc4\xb8\x63\x89\x56\x1b\x75\xbf\x3e\x8d\x66\x83\x69\x4d\xb2\x7d\xa6\xdb\xfd\x1b\xe5\xbd\x3d\xae\xeb\xdb\xf9\x49\xeb\x08\xfb\xa7\xd1\xdd\x73\xe6\x90\xdd\xfe\xa9\x13\xbe\x83\x19\x7c\x0f\x33\xf8\x06\xa6\x3e\x64\x6b\x15\xe5\xc4\x61\xb6\xe1\xed\x8c\x30\x66\xd0\xfa\xf5\x3b\x53\xe1\xa9\x3c\x1a\x42\xde\x9e\x3e\x3b\xa4\x3d\xca\xd7\x9f\x1a\xcb\x7e\xb8\x3d\xf9\xf7\xc0\xef\x4f\x77\x0e\x1c\xb3\x94\x39\x97\xf7\xef\x87\xb3\x86\x5c\x99\x32\x60\x87\x8e\xa6\x61\x38\xb5\xdc\xa1\x8d\x6b\x0b\x96\x36\x69\xef\x19\x09\x09\xf1\xc2\xee\x5b\x91\x15\xe1\xc2\x1b\xa6\xdd\xe3\xe5\x98\xef\xad\x4e\x8f\x13\x7b\xa4\x68\x98\xcd\x5a\x82\xeb\x10\x64\x5f\xd4\xbc\x89\x1c\xe0\x9f\xba\x3f\xd9\x7c\xff\xce\xcb\x19\x4a\xbf\x4f\xa3\x19\xe2\xc8\x21\x8e\x65\xf3\x81\x67\x86\x4d\x48\xfb\xee\x6a\x7e\xe9\x2c\xc5\xc7\xd1\xfe\x0c\x17\xf4\x6d\x50\x82\x58\xfb\x58\xe0\x5e\x67\x02\x80\x1e\xd8\x3e\x3d\x8f\x19\xd5\xca\x9e\x60\xb5\x16\xeb\x8c\x97\x25\x32\x4f\xb3\x62\xdd\xb5\x6a\xf8\x95\x54\x4e\x65\x25\x97\xca\x64\xcd\xa3\x51\x56\xe9\xdc\x10\xe6\x3b\x70\x41\x84\xc5\xfd\xed\xab\xb3\xbc\x08\xa2\xed\x02\x9b\xcc\x0c\xa0\x33\x8a\xae\x87\x93\x11\x47\xe6\xc4\x62\xe7\x58\x3d\x62\x50\xeb\x97\x24\x48\x36\x14\xb5\x83\x42\x2b\xdd\xea\x69\x62\xed\x9d\x32\x6c\x57\xaf\x95\x4e\x00\xec\x92\xeb\x6c\xc1\x25\x11\x99\x95\x44\xdb\x42\xb9\x0e\x3e\x03\x18\x6e\x06\x87\xd2\x72\x20\x1f\xf5\x8f\x16\xe7\x9e\xfa\xee\xe0\xab\x61\x27\xb7\x87\xaf\x16\xc3\xbb\x21\x9b\x87\xad\xf0\xf6\xe0\x39\xa4\x7d\x55\xcc\x48\x8e\xd2\xbd\xed\x6b\x9c\xb7\x39\xfa\x3d\xee\x37\xbb\xd6\x8d\x3d\xae\xf9\x68\xdf\xe7\xf3\xda\xae\xbf\x9a\x6c\x4e\xc8\x53\xf0\xd3\xa4\xea\x13\x3c\x91\x7c\xda\xe7\x82\xf6\x7d\xc8\x95\x7a\xf7\x4d\x28\x3c\x02\x85\xce\x7c\xe4\x49\x68\x6b\xb9\x1d\xdb\x79\x01\x0a\x5f\x0e\x62\xef\x2a\x96\xf9\x1f\xc7\x06\xb6\xc6\xa6\xec\xfa\x3c\x74\x9f\xd9\x2d\xe4\xfa\x5d\xbf\x4e\x5b\x87\xd2\x0f\x3d\xe5\xb7\x0e\xe2\xda\xc1\x24\xbc\x7b\x52\xc3\x75\xfb\xee\xf9\x83\xd6\xd0\x2a\x41\x50\x0a\x69\x6b\x59\xab\xdd\x74\x60\x60\x82\x68\x12\x78\x20\x0f\xf7\x8a\xa6\x71\x8c\x2a\x33\x9f\x81\x10\xd5\xd9\x59\x4d\x4b\xaa\x15\x75\x84\xda\x28\xa7\xa8\x12\x4d\xfc\x8e\xea\x1a\x08\xca\x99\xa9\xeb\xbc\x6e\xe8\x69\x12\xfe\xd3\x69\x74\xdb\x5c\xc8\x0e\xcd\x78\x35\xbd\xfc\x7a\x60\xce\x8d\xf8\xfd\xcf\x1a\x9c\xbf\xec\xcd\xd9\x11\x6e\x67\xec\xce\xf7\x0c\x7e\x22\xeb\x39\x82\x41\xeb\x0c\xa7\x0e\x94\x14\xeb\xe0\x15\x7e\xd9\x54\x34\x34\xd7\xde\xef\x1b\x93\x3f\x55\x0e\x0a\x22\xd9\x1a\xea\xfe\x74\x64\xe9\xbb\xac\xf9\x88\x65\xe1\x8e\xbb\x42\x55\x0e\x4a\x22\x2b\x22\xc4\x1a\xac\x2d\x62\xaf\xc1\xa5\x53\xe0\x0a\x6c\x1c\x26\xef\x0c\x74\x0d\xdf\xf5\x6c\x3a\xdd\x03\xbb\x37\xd4\x05\xbc\x0f\xfa\x6e\x71\x1f\xe0\xef\xee\xeb\x5d\x1b\x1c\x8e\x17\xc1\x7e\x50\xad\xac\x97\xfe\x78\x76\x5c\xf6\x8f\x6a\xcb\xe6\xd3\xcc\x3b\x74\x67\xdc\x78\x38\xba\x49\x6b\xfd\x23\x7b\xf5\xf1\x7c\x5e\x4d\x5f\x5e\x8c\xe4\x73\x33\x34\x90\xcf\x8a\xbd\x6d\x3e\xdb\x8f\x5d\xc7\x16\xda\x89\x81\xbd\x7d\xa1\x9d\x10\xd8\x3e\xdd\xf4\x86\x3e\x14\x62\xa7\x04\xf6\xee\x88\xfd\xc6\x6d\xf9\x58\x5f\xb2\x79\xa7\x1f\xc7\x6f\xa2\xfd\x5d\xf2\x08\x84\xcf\xcf\xa7\x97\x23\x08\x6f\x86\x9e\x00\xe1\x23\x22\xfb\xfa\xe2\x7c\x7f\xdf\xed\x0d\x3d\x41\x64\x47\x90\xe4\xf6\x02\x74\x0c\x3f\x86\xab\xcf\xa3\xe7\x97\x1f\x5b\xf2\x0b\xfa\xbf\xab\xa3\xcc\xc1\x53\xc5\xc5\x74\x6f\x73\xed\x08\x87\x4f\x15\xfe\x4e\xd7\x62\xda\x5c\xa4\x8f\xaa\x98\x0f\xb8\x91\x7f\x74\x3b\x79\xfb\x89\xf5\x51\xda\x68\x14\xdf\x8e\x3b\x3e\xc4\x99\xf8\x7a\x7a\x3d\x84\xe3\x46\xfc\x34\xb3\x9e\xef\xd7\xef\x8e\xf8\xf4\x59\x3f\xae\x7a\xa9\xbf\x15\x1d\x4b\x6a\x41\xfb\x71\x52\xfb\xc5\xab\x3d\x19\x97\x5d\x0d\xc1\x74\xf5\x6e\x69\xf9\xb8\xe8\xf3\x53\x24\xb6\xff\x05\x00\x00\xff\xff\x25\x99\xf8\x63\xdf\x28\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x5d, 0x68, 0xc3, 0xaa, 0x14, 0xa7, 0xeb, 0xc5, 0x5c, 0xf7, 0x6, 0x28, 0x9f, 0x7b, 0x22, 0xb1, 0x92, 0x0, 0xa1, 0x16, 0x8e, 0xfe, 0xb4, 0xda, 0xf5, 0x14, 0x55, 0xf3, 0xa1, 0xba, 0x3d}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\x38\xf2\xc0\xdf\xf7\x53\x10\x44\xff\x7f\x24\x45\xd2\x8d\x93\x3a\xdd\x14\x58\x1c\xd2\x74\xdb\x2b\xd0\xee\xe6\x92\x74\x6f\x71\x6d\x20\xd0\xd2\xd8\x26\x42\x89\x2a\x49\xe5\x61\x73\xd9\xcf\x7e\x10\xf5\x44\x3d\xd8\x96\x15\x3b\x76\x1a\xee\x8b\x6d\x4c\x51\x12\x67\x38\xc3\xf9\x69\x38\x96\x6f\x9f\x21\x84\x49\x10\x70\x45\x14\xe5\x81\xc4\x6f\x50\xdc\x84\x10\x66\x54\x2a\xfc\x06\x7d\xd5\x9f\x50\xda\xaa\x8f\x0c\x22\xca\xd4\xc7\x00\xbf\x41\xbd\xad\xa2\xd5\x23\x8a\x48\x1e\x09\x17\xf0\x1b\x84\xb7\xb7\xd1\x07\x41\x86\x24\x20\x68\x7b\x1b\x1b\xdd\x20\x20\x03\x16\x77\x51\x22\x02\xa3\x7d\x4c\xbd\x86\x56\xea\xf2\xe0\x88\x33\x2e\xe2\x6b\x8a\xd1\x80\x6c\xec\x6c\xa1\xdd\x5e\x6f\x0b\xed\xf6\xfb\x5b\xa8\xb7\x69\x5e\x3a\x20\xbe\xbe\xf7\x61\x21\x0e\xfa\x7f\x74\xc8\x40\x28\x69\xf6\x53\x37\xa1\xee\xe7\x11\x39\x1e\x70\x22\x3c\x9c\x1e\xbb\xd3\xff\x9e\x3f\x43\xe8\x2e\xee\x8e\xc1\xa3\xaa\x32\x5a\x3c\x0a\x40\x7d\xf4\xf0\x1b\xb4\xdb\x7f\xb5\x9b\xb4\x08\x12\x8e\xcf\x38\x67\x8a\x86\x99\x4e\x30\xd5\x5d\x92\x3f\x15\x08\x3d\x9a\xf8\x60\xff\xe7\x83\xbd\xd7\xfb\x07\xbd\xfd\xde\x41\xd2\x91\xd1\xe0\x22\xd6\xfa\xd7\x73\xfd\x31\x24\x01\x30\x99\xeb\x3d\xd3\x3a\x26\x8c\x12\xa9\x35\xa1\xa7\xe8\x2e\x13\x07\x0f\x88\x6e\x19\x12\x26\x73\xc5\x69\xc9\x3e\x41\x30\x52\xe3\xf8\x9e\x3b\xa5\x76\x68\xea\x6e\x4c\x5d\x10\x31\x96\x1f\x19\x52\xc6\xcc\x79\xd6\x0d\x1f\x04\xf1\x28\x04\xb1\x75\x14\x97\x1e\x09\xea\x1d\xf3\xc2\x7e\x92\x49\xc5\x6f\xd0\x81\xa1\xf9\xab\xf8\x5a\xbb\x46\xc3\xb5\x79\x0d\x84\xf0\x4d\xfc\x39\x9b\x8d\xfc\xda\x63\xea\x79\x10\x9c\x82\xa0\x0d\x83\xd7\x9a\xee\xe5\x77\xc1\x0c\x46\x10\x78\xe5\x71\x90\xcb\x51\xf5\x3c\x84\xb0\x1b\x09\x91\x88\x51\x3d\xe2\x93\xeb\xa6\x56\x1a\x34\xb4\xca\x31\xbf\x6a\x68\x56\x5c\x11\xd6\xd0\x7e\x49\x58\x54\x48\x51\x13\x95\xd1\x40\x1f\x35\xfd\x40\x37\x5e\x51\x2f\x99\xcd\xbc\x35\x9e\xa8\x63\x4e\x03\xf5\x99\x6b\xd7\xd1\x0d\xb9\x9d\x63\x1e\x96\x1d\x3a\x9f\xe9\x4f\xb9\xc5\xd5\xee\x1e\x82\x70\x21\x50\x64\x04\x35\x35\x87\xf1\x9d\xe2\x89\x8f\x64\x66\xd9\x45\x7b\x7d\x56\x04\x04\x1e\x08\xd0\x7e\x3b\x64\x5c\x15\xe3\x92\x7a\x1a\x7f\xbf\x04\x21\xa8\x07\x85\xe9\x27\x07\x43\xe2\x42\x93\xe5\x4a\x45\xdc\x8b\xda\x5d\xa4\x82\x30\x04\xef\x13\x0d\xea\x03\x56\x44\x8c\x40\x49\x63\x09\x33\x17\xb1\xd8\xbb\xaf\x43\x3d\x3c\x19\xf9\x1b\x34\x70\x05\x10\x09\x1b\x3e\x51\x0a\x84\xcf\xa5\x72\xbc\x81\x23\x15\x17\xe0\x28\xea\x83\xe3\xf2\x28\x50\xb7\x3e\xa8\x31\xf7\x7e\xf9\xfb\x1b\x7e\xae\x78\x18\x77\xd1\xed\xdf\xf0\xdd\xd7\xe7\x8e\x23\x48\x30\x82\xf3\xcd\x4d\x34\xb8\x41\x1b\x49\x57\x73\x81\xca\x8d\xf3\x3d\x17\x3e\x89\xed\x0e\xdf\xa6\x57\xbc\xbb\x2b\xf7\x13\x30\xd4\x8b\x0c\x3e\xc4\x79\xf3\x5d\xfa\x57\xa1\x2d\x35\x16\x20\xc7\x9c\x79\x15\x2d\xc6\x03\x7e\x2f\xb8\x5f\xf5\xe6\xb8\xfd\x04\x46\xa9\x59\x54\x4e\x38\x1d\xd3\xa1\xaa\x9f\xa1\xf4\xf2\x87\xcf\x78\x88\x4e\x63\x6d\xa0\x23\xc2\x98\x8c\x25\x3c\x8a\x25\x2f\xe6\x55\xe5\x2b\xe0\xad\xe9\x1c\x44\x80\x57\x5f\xd7\x25\x17\xca\x34\xa3\xcc\x31\x9c\x6c\x6d\xa6\x81\x47\x2f\xa9\x17\x11\x86\x6b\x56\x9a\xf5\xd1\x0b\x6f\x31\x80\x6b\x72\x4d\x2b\xe6\x3e\x88\xdc\x8b\xc4\x06\x4c\xa9\x62\x57\x4e\x5d\x26\x16\xbc\x21\x84\x54\x7a\xa7\x2e\x5e\x91\x21\xf7\xe4\x06\x47\xba\x21\xd7\x30\xc5\xf4\x86\xb9\x01\xc8\x71\xac\x89\xb2\x8d\x90\x01\xb0\xda\x20\xe2\x03\x7c\xf4\x96\x48\x28\xc7\xdd\x7c\xb5\xaa\x75\x4f\x96\xab\x5a\xb3\x21\x4c\x61\x5a\x5b\x6b\x3b\x4e\x73\x99\x6c\xf2\x81\x9b\xfa\xac\x13\x46\x47\x4d\x2b\xb5\x6e\xff\x04\x97\xf9\xa8\x4b\x61\x3f\xd5\xc1\x53\x88\xb8\xa5\x86\xce\x21\xf7\xf5\xca\x42\xae\xa0\xa3\xb1\x3a\x4d\x80\xd1\x86\xe3\x27\x12\x8e\x49\x48\xcd\x48\x3c\x26\x81\xc7\x40\xe4\xa1\x38\x3e\x3c\x31\x16\xa7\x9d\x2b\xc1\x98\x06\x0a\xc4\x25\x61\xef\x89\xab\xf4\x13\x46\x6f\x46\xac\x4e\x2f\xf3\x28\x82\xf5\xe1\xf1\x47\x1b\xaa\x4b\x03\xb6\xa1\xda\x86\xea\x47\x17\xaa\xab\x0f\xc7\x07\x1d\x22\xf5\xde\x8e\x7d\x38\xb6\xd1\x78\x99\x0f\xc7\x32\xf2\x3b\x3c\x1a\xa3\x9f\xd0\x6a\x9f\xbd\x51\xd2\x0f\x3d\x8a\x80\x5e\x79\xfa\x7e\x17\xa5\x49\x45\x1b\xd5\xef\x17\xd5\x6d\x44\xb7\x11\xfd\x21\x23\x7a\xed\xe1\xbb\x53\x48\xef\xd9\x90\x6e\x43\xfa\x92\x1e\xb0\xe3\x68\xde\xe9\xf1\x7a\x4a\x40\x5f\xfc\xd3\x7b\x43\x38\x4f\x3b\x3e\x8e\x78\x5e\x7a\x40\xb7\xd1\xdc\x46\x73\x1b\xcd\x93\xc6\xfb\x44\x73\xcc\x38\xf1\x14\x48\xb5\x9d\x36\xe5\xdd\x1a\xf6\xf2\x93\x76\x21\x74\xee\xaf\x7c\xd1\x55\x3c\xda\xf7\x7e\xee\x00\x02\xab\x4b\xc2\x37\x7b\xf1\xf2\x31\xa0\x5c\x30\x81\x1a\xc9\xc0\xe5\x41\x00\xae\x02\xef\x81\xf0\xa0\xff\x03\xe1\x81\x20\xaa\x14\xb9\xc3\xf8\x7f\x7a\x5a\x6f\x69\x20\x15\x09\x5c\xd0\x61\x5b\x82\xb8\x04\x11\xc7\xeb\x9e\x7f\x5e\x89\xcd\xc5\x62\x97\x00\x45\x62\xc0\xa5\x2e\x73\x27\xdf\xb3\x9b\x57\x83\xbb\x0f\x4a\x50\x37\xee\xd3\x38\xe8\x89\x24\x50\x5e\x21\x15\xc4\xa1\xb6\x3f\x73\x19\x37\x21\xaa\x9b\xa6\x96\xae\xaa\xb3\xba\xd8\xdd\x74\xf4\x76\x96\x8e\x56\x89\x50\xc7\x5c\x2a\x89\x42\x10\xe8\x14\x5c\x1e\x78\x33\xc8\xc9\x97\x27\x20\x39\x8b\xd2\x3a\xac\xfa\x62\x36\x15\xac\x76\x2c\x58\x4d\x86\x16\x5c\xde\x5d\x42\x4f\x96\xaf\xca\xe3\xb4\x78\xb5\x5a\xbc\xaa\xe5\x59\x3a\xf1\x55\xaf\xcd\xde\x49\xc5\xe1\x66\xf1\x55\xa5\x7b\x62\x54\xd5\x85\xa7\x1b\x5d\x19\x26\x68\xe1\xea\x11\xc0\xd5\x58\xa9\xd0\x11\xf0\x3d\x02\xa9\xe4\x3a\x50\x16\xca\xee\x5e\x4b\xa2\x34\x32\x84\x1e\xbf\xf6\x71\xf9\xe0\xb8\x35\xa7\xee\xd6\x86\xbb\xda\xea\x6c\xad\xf1\xeb\x24\xd5\xbb\x25\x30\x4b\x60\xf3\x0c\xd5\x12\xd8\xd3\x21\xb0\x6a\x82\x6b\xf7\x75\x07\x00\xdb\x6f\xc1\x5f\x36\xc1\x65\x19\xac\x3d\x83\x55\x43\xf1\x15\x0c\x24\xd7\xab\xff\x54\x88\x58\xb3\x0c\x57\xe3\xd0\x97\x48\x5f\x1d\xb5\xb6\x0a\xea\x7a\x1c\x04\xf5\x5b\xe4\x0f\x40\x20\x3e\x44\x47\x99\x33\xa3\x77\x70\x49\x5d\x90\x68\xe3\xdf\x30\x38\xd5\xda\xcd\x0e\xc6\x77\xd8\xb4\x84\x65\x09\xcb\x12\x96\x25\x2c\x84\x26\xe5\xb8\x3a\x21\xd6\xca\x6b\x89\x2c\x62\xfd\xb8\x88\xe5\x0d\x1c\x9f\x48\x05\xc2\x71\x8b\x48\xf6\x98\x40\x6b\x8a\x00\x0f\x83\x5b\xf3\x6b\x70\x6d\x52\x5d\xf3\xeb\xee\x71\x21\x9b\x7e\xc5\x84\xe2\xe8\xb3\x16\x12\xbd\x23\x8a\x0c\xe2\x50\x6b\x39\xcd\x72\x9a\xe5\x34\xcb\x69\x68\x42\x26\x6c\x6f\xbf\x0b\xa6\x59\x4e\xb3\x9c\xb6\x58\x4e\x6b\x53\x0a\x9e\x6c\x9e\xe9\x42\xec\x8c\x36\xda\x17\x7a\x37\x9d\x3c\x37\x9c\x8c\x1b\xbf\xe9\xff\x00\xbb\x9b\xa6\x1a\x96\xc4\x7a\x63\x2a\x15\x1f\x09\xe2\x3b\xdf\x23\x12\x28\xca\x60\x63\xe7\xe5\xc1\x16\x6a\xda\xf0\xcc\x87\x93\x84\xe8\x06\xdd\x6e\x31\xe8\xb0\xcf\x39\x51\xbf\x55\x05\x1e\xec\x84\xdb\x93\xe9\xd9\x60\xb8\xf5\xc0\xb5\xcf\x40\x02\x5d\x66\x9f\x6e\x56\xa2\x33\x93\x5c\x2c\x9b\x3d\x60\x01\x3e\xb6\x48\x66\x91\x6c\xad\x90\xac\x96\x3a\xeb\xc4\x64\x7d\x8b\x64\x16\xc9\x16\x8a\x64\x23\xee\xf8\xe0\x4b\x45\x94\x74\x08\x63\xdc\x75\x06\x37\x0a\xe4\x8a\x72\x65\x87\xf1\x08\xa6\xc4\xfc\x02\x9b\x26\x8c\x7b\xa9\x89\x32\xf3\x9e\x7a\x4a\x1c\x1a\x44\x12\x16\xab\xb1\x45\xd1\xe7\x69\x3c\xc0\xe5\xea\x73\x66\xf2\x6c\x0e\x7d\x8e\x81\x84\xeb\xac\xce\x7f\x02\x09\x97\xab\xcd\xa3\x75\x4e\x45\x7e\x06\x9f\x8b\x1b\xf4\x45\xc6\xab\xa3\x45\xda\x65\x22\xad\xb6\x14\x8b\xb5\xf6\x5b\xa5\x8f\x82\x6b\xab\xa9\xc6\x57\xfd\x0e\x58\xdb\xdb\xb3\x5c\x6b\xb9\x76\xa1\x5c\x4b\x6b\xdf\x96\x14\xdc\x05\x29\x1d\x37\x8c\x1c\xa9\x0b\xc8\x5b\x14\xf1\xbf\x40\xbd\x9d\x9d\xd5\x6d\x10\xb7\x27\xd7\x55\xb2\xc1\xd1\xf1\x17\xf4\x45\x51\x46\xff\xd2\xef\x94\x40\x27\x44\x01\xda\xf8\x3f\x5b\x3e\xb6\xba\x6d\xc9\xa9\xd3\x81\x9e\x2c\x3b\xd8\x94\xd8\x3a\xa1\x43\x2d\x25\xd6\x89\x1d\x5e\x59\x74\xb0\xe8\xb0\x50\x74\x18\x71\x67\xc4\x05\x8f\x54\x3c\x25\x6b\x5c\x34\x56\x1a\xe7\x12\x6b\xc3\xda\xe8\x63\xb5\x25\x60\x6d\x34\xf1\x48\x2a\xbd\x3e\x70\x74\x52\x15\xc4\xf2\x93\x2d\xeb\xb2\xc0\x84\x96\x02\x4c\x25\x7f\xf4\x40\xba\x82\x86\xa9\x47\x15\xd9\xb6\x95\x64\x52\xfa\xaf\x3a\xd0\xd0\x6e\x9b\xa2\xad\x89\xef\x8f\xa8\xbe\x29\xa2\xf5\xeb\x23\x5a\xfc\x42\xc6\x43\xbf\x5a\xc2\xbe\xbe\x73\x71\x35\x5b\x3a\x97\x12\x70\x0f\x1c\x37\x8c\x9a\x09\x60\x2b\x5e\xd7\x7f\xf9\x86\x23\x69\xbc\x02\x61\x5a\x21\xd6\x94\x8d\x99\xb8\x7f\x03\x9c\x37\x50\xc1\x17\x09\x02\xb5\xca\x9f\xcc\x45\x3c\x73\xc8\x2b\x6f\xa4\x02\xff\x7e\x12\xd7\xb6\xee\xf4\x35\xdb\xc8\xf5\x76\x69\x72\x51\x8f\xc1\x62\xa5\xfa\xe8\x31\x68\x23\xd3\xd1\x92\x64\xfa\xfb\x1b\xa6\xe2\xfb\x7f\x25\x1f\xaa\xf8\x5f\xca\xaf\x08\x55\x8b\x15\xf1\x77\x35\x6e\x67\x8f\xef\xd6\xa4\x64\xed\xe8\xf8\x0b\xfa\xc4\x89\x87\x36\x7a\xfe\xac\x7c\x9d\x05\xca\x46\x5b\x5c\x3b\x4a\xb3\x34\xb9\x36\x34\xe9\x52\x9f\xb0\xaa\xc9\xae\x26\xb7\xd6\x8d\x26\x17\xbb\x2f\x17\xaf\xa3\xbf\xfa\xa1\xba\x99\x70\xec\x3f\x20\xf8\x3d\x73\x72\x4b\x00\xd1\x7b\xe7\xeb\x2c\x89\x2e\x86\x44\x93\x28\xef\xeb\x4a\x14\xe7\x33\xf8\x67\x53\x76\xef\xd0\x36\xaa\xf4\x7e\x2f\x00\xda\x75\x7e\x1b\x0d\x87\x20\x26\x65\xba\x2a\x9d\x8f\x88\x3b\x06\xaf\x5d\x56\x6c\x51\xc8\xeb\xa1\x69\x5f\x2d\xe8\x02\xbd\x73\x68\x16\x4f\x1d\x9d\x3e\xb3\xdd\xf0\xd6\xa7\x6c\xbf\x75\x69\x93\x45\xa0\x46\x2b\x6a\x55\xbb\x64\x11\xe8\x89\x54\x2f\x3d\x38\xeb\x54\x13\x67\xfb\x7b\x5d\x50\xa7\xd8\xc1\xca\x76\x26\xca\x29\xc0\xa7\xf0\x3a\x56\x4b\x2a\x0b\x22\x95\x72\x62\x22\x00\x75\xc5\xc5\x85\xa3\x04\x09\xa4\x4f\xd5\xd4\x0a\xe7\xa6\x74\xc4\xe6\x8b\x9f\x9b\x37\xcf\xea\x35\xa1\xf3\x6e\xab\xfd\x99\xd4\x87\x2c\x1a\x28\x26\x68\x40\x80\x0b\xf4\x72\x7a\x89\x77\x2b\x05\x74\x42\xa9\x39\x75\x73\x32\x8f\x6e\xd6\x85\x66\x7e\x4b\x34\x8d\x4e\xfe\xfc\x29\x9d\xdb\x59\xfb\x88\x16\x6a\x1a\x2d\xd9\x80\x9a\xd0\x22\x8d\x45\x9a\x07\x45\x9a\x5a\xfa\xa6\x1b\xd3\xb4\xf9\xb5\x1e\x4b\x2f\x1d\xe9\x85\x45\x23\x1a\xfc\x01\x42\xa6\xbb\xc5\xfb\x2f\xf7\x5f\xee\xe2\x27\x40\x37\x59\x44\x97\x8a\x28\xe7\xcc\x0d\x9d\xa3\x48\x88\x5f\xa5\x22\x83\x56\x29\x83\x85\x64\x41\xf4\xed\x18\x95\xe3\x25\x24\x43\x68\x89\x5b\x32\x29\x7f\xbd\x56\xce\xd9\xd1\xf1\x19\xf5\x81\x47\x6a\x2a\xbc\x2c\x41\xde\xec\xb6\xf3\xc3\xc8\x0c\x61\x63\x4e\x9b\x7b\x42\xbb\xee\x8f\x25\xd9\x21\x63\xee\x16\xb3\x05\x78\xef\x09\xbb\x9f\x3c\xd9\x1d\xd6\x7c\xaf\xef\xec\xe8\xd8\x7c\x8f\x98\xa5\x42\xbb\xdb\xf7\x83\x70\xe1\xb3\xf4\xb2\xb1\xcf\xc5\xee\x14\x8b\xdd\xdb\x49\x2c\x1c\x4b\x77\x0c\x3e\x29\xe2\xf4\xee\x6e\xd2\xac\x6e\x12\xb7\xf0\x88\xb8\x48\x7a\x2a\x32\x2a\x66\xde\x78\x2f\x4f\xaa\x3c\xa3\x65\x3b\x04\x31\xc4\xf9\x6d\x15\xf8\x21\x23\x8a\x06\xa3\x5c\x1c\xcc\xa8\x54\x86\x19\x95\x84\x64\x7f\xc4\x06\x58\xb7\xd6\x82\xbd\x4a\x73\xa9\xe0\x5a\xd5\x1f\xf4\x2f\xd3\x6b\x7c\x35\x1a\x11\xc2\xd8\xf8\x78\xde\x64\x26\x2d\xbf\x2f\xa0\xf7\x2f\x87\x34\xa0\x59\x31\x9c\x36\x1a\x27\x71\x9d\xc6\x42\x89\x6c\xd9\x34\x97\x06\x1a\xb8\x2c\xf2\xe0\x90\x35\x81\x5f\x5e\x6d\x99\x2c\xc6\xe6\xa5\xfc\x88\x29\x5a\x77\xdc\xd4\xc9\x1b\x4e\x28\xe0\xae\x58\x13\x11\xc2\xdf\x23\x10\x37\xed\x46\x5f\xd8\x4e\xaf\xd4\x3a\x82\xeb\x8a\xf2\xb1\xbc\xa0\xe1\x17\xc1\x4e\x6f\x02\xb7\x69\x9b\xb1\xbe\x42\x2a\x32\xd2\x53\x2e\xff\x95\x8e\xa7\x32\xf1\x99\xe5\x9d\x57\xda\x26\x75\x4f\x97\xd1\x44\x3a\xe3\x40\x24\xe1\x2c\xb9\x54\xe3\xa6\xe5\x22\x8c\xf0\x90\xb1\x56\x76\xf8\xdc\x71\x08\x63\x4b\xb3\x46\x2d\xba\x23\x40\x46\x4c\x6d\x28\x1e\x5e\x6c\xf4\x76\xb6\xda\xbe\x24\xec\xf9\x6d\xfa\x8b\xcf\x8e\xbc\x93\xd5\x5f\x7d\xde\x9c\xcb\xa6\x2b\x06\xda\xbc\xb2\xce\x32\xe7\xd2\x2f\x52\xcf\x63\xd5\x0f\xa5\x85\x19\xbe\xf1\xf2\x45\xf6\xfb\xda\xdf\xf0\xc6\xcb\x17\xff\xd8\xfc\x86\x5f\xbe\x58\xac\xc3\x94\xfc\x6f\x96\xbb\x94\x3b\x5b\x67\x99\xcf\x4c\xbc\x81\x23\x15\x17\x60\xda\x4a\x3f\x4f\xc9\xfa\xa0\xc6\xdc\x5b\x95\x97\x78\x83\x65\x3b\x49\x07\xe9\x67\x7a\x47\x72\xd6\x8f\xe0\x1c\xcf\x32\xdb\xbc\x4b\xc0\x87\xea\xa9\x49\x91\x67\x98\x3c\xaf\xe0\x80\x5f\x6d\xf7\xfa\xd9\x1b\x0c\xb1\xe2\x69\x23\x2e\x9d\x17\x52\xf7\x42\xa7\x3b\xd2\xb3\x53\x2d\x3a\x59\x92\xde\x84\x70\xdc\x37\x1e\x57\x32\xb2\xd3\x1f\xf6\xcc\x0f\xbd\xe2\xad\x89\xb8\x6f\xfc\xdd\x33\x3f\xec\xed\x98\x47\x8c\xa7\x90\x5d\xe3\xef\x9e\x97\x38\xe3\x79\x26\x43\x6c\x0c\x86\xa1\xcd\xbc\x8b\x79\xe1\x7d\xf3\xc2\xe6\x5d\x76\x5f\x99\x1f\x8c\xaf\xea\xbd\xf6\xcc\xf1\x66\x63\x29\xa9\xef\x2f\xae\x53\x38\x78\x20\xf8\x95\x4c\x59\xc8\xa8\x69\xc8\x0d\x5a\x97\x77\x6e\x9f\x81\x54\xe8\x18\x84\x7e\x2c\x08\x5c\x40\x9f\x79\x40\x15\x17\x31\xb2\xea\x33\x23\x9d\x30\xc4\x3b\xc9\x7f\xbd\x5e\xd2\x7a\x99\x53\xf3\xc1\xb3\xbb\x67\xff\x0b\x00\x00\xff\xff\x8a\x38\x51\x2d\xbc\x9d\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0x14, 0xd5, 0xf2, 0x6c, 0x6, 0xda, 0x85, 0xa8, 0x8d, 0xd6, 0xb0, 0xcb, 0xe2, 0x39, 0xb, 0xa2, 0x14, 0xcc, 0x6a, 0x6a, 0xd, 0xf4, 0xd7, 0xa0, 0xa3, 0x52, 0x73, 0xa3, 0x56, 0x36, 0x37}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6e\x83\x30\x10\x85\xf7\x9c\x62\xe4\x75\x6b\x45\xa9\xd2\x9f\x05\x27\xa9\x2a\xcb\xd8\x13\x6a\xc5\xd8\xae\xc7\x26\xa5\x15\x77\xaf\x30\x55\xd3\x08\x14\x58\xce\xf7\xcd\x63\xf4\xa0\x97\xd1\xc8\xc6\x22\x30\x65\x33\x25\x8c\xc2\xc9\x0e\x19\x7c\x57\x63\x55\x5d\xa0\x0c\x41\x18\x47\x49\x3a\x85\x42\xf9\xec\xd2\x6d\x25\x0d\x61\x25\xa4\x45\x97\x36\x63\xae\xa5\xd5\xa0\x10\xfd\xe7\xb0\xe1\xe8\x66\xeb\x4d\xff\x0d\x74\xad\x71\x1b\x21\x56\x12\xad\x19\xf3\xae\xe8\x31\x92\xf1\x6e\x32\x00\xa6\x93\xa0\x86\x4e\x86\x0a\x40\xe3\x51\x66\x9b\xa0\x2e\x08\x80\xc9\x1c\x7d\x94\xf7\xdd\x40\x1f\x96\x41\x79\x6a\x60\x07\xfe\xc4\xcb\x48\xcc\x9c\xef\xf9\xee\x81\xef\xd9\xd5\x4e\xf0\x94\xda\x88\x65\xb1\x06\xf6\xc2\x1f\xf9\xf3\x64\x8c\x8b\xb3\x32\x61\x5c\xfd\x96\xba\x11\x41\x12\x9d\x7d\xd4\x0b\x46\xf4\x2e\x42\x6e\xac\x51\xe2\x84\xc3\x02\x77\x32\x25\x8c\x9d\xa7\x24\xb4\x3f\x3b\xeb\xa5\x16\x39\xda\x5b\x9e\x35\x0a\x1d\xa1\x38\x1a\xbb\x3c\xa5\x04\x24\xdc\x8a\x8b\xde\x27\xd1\x58\xaf\x4e\x42\x63\x6f\x14\xce\x25\x5f\x7a\x7d\x2d\x1d\xcd\xed\x02\xf4\xde\xe6\x6e\xfe\x2d\xa6\x8e\xda\xf0\xdb\xe1\x1f\x21\xf3\x35\x91\xc3\xae\x8c\xc7\xbb\x0a\xe0\xad\x1a\x7f\x02\x00\x00\xff\xff\x13\x26\x6f\x52\x0b\x03\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x86, 0xe, 0x94, 0xf, 0xf5, 0xd6, 0xbc, 0x4d, 0x91, 0xd2, 0xcd, 0x71, 0x7a, 0x6a, 0x8f, 0x4c, 0x1f, 0xeb, 0xe7, 0x50, 0x1b, 0xf, 0xb4, 0x63, 0xa9, 0xb4, 0x10, 0x3c, 0x21, 0x8e, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// Debug is true if the assets were built with the debug flag enabled.
const Debug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
