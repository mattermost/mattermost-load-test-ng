// Code generated by go-bindata. DO NOT EDIT.
// sources:
// .terraform.lock.hcl (1.181kB)
// cluster.tf (21.376kB)
// dashboard.yaml (231B)
// dashboard_data.json (40.142kB)
// datasource.yaml (296B)
// es_dashboard_data.json (8.51kB)
// outputs.tf (655B)
// variables.tf (1.737kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TerraformLockHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xd2\x4d\xab\x5b\x47\x0f\x07\xf0\xbd\x3f\xc5\xe0\x2c\xf3\xe0\x8c\x34\x6f\x52\x20\xcf\xaa\x2f\x90\x52\xba\x69\x49\x69\xe9\x42\x1a\x49\xb9\x87\xfa\xda\x89\x7d\x9c\xe6\xde\xd2\x7e\xf6\x72\x08\x14\x77\x96\x23\xfe\x3f\x84\xa4\x17\xe9\xc7\x87\xe5\x9a\x62\x39\x7a\x5a\xae\xe9\x51\x96\xd3\x2a\xcb\xc9\x2d\xc9\x6d\x3d\x3f\xca\xba\x4c\x39\x1e\x9f\x92\x3e\xa5\xfd\xea\x97\x8b\xc4\xf9\xf2\x98\x96\xd3\xb2\xee\x0f\xbb\x17\xe9\x7b\x39\xdd\xe4\x98\xdc\x96\x75\x0b\x3f\x25\xf5\x74\x3c\x5f\xd7\xb4\x9c\x52\xdc\xd6\xdb\xc5\xd3\xed\x83\xc9\xea\xd7\xc3\x6e\xf7\xe1\x72\xfe\xb4\x98\x5f\xd2\xfe\xe2\xef\x97\xeb\x7a\x79\x3a\xfc\x4b\x1e\x96\xf3\xab\x07\xb9\x3e\x2c\xf3\x7c\xf9\xf0\x4a\xfe\xb8\xee\xd3\x9f\xbb\x94\x3e\xf9\xe5\xba\x9c\x4f\x69\x7b\x6f\xd2\xbe\x1c\x46\x3b\xe0\x7e\x97\xd2\x3c\x9f\xae\xeb\x65\xeb\xf6\xba\x15\xfe\xfe\x7f\x2a\x87\xbc\x15\x36\xc4\xb7\xbf\x5f\x77\x5b\x68\xff\x00\xaf\x3f\xe7\xf7\xc7\xdb\xcf\xfc\xcb\x77\x5f\x3f\x3e\xbf\x7c\xfb\xf6\x5d\xf9\x69\x6d\xdf\xbe\x7f\xf7\xd5\x37\x3f\x7c\x7c\x75\x7c\xb8\xe2\xa7\xdf\x3f\xbe\x7d\xf9\x79\x6d\xe3\xf9\xfa\x66\xff\xbf\x2f\xb1\xe7\x87\xd7\xd9\x47\x0b\x85\xea\xb3\xa2\x75\xd6\x59\x7b\xed\x60\xd6\x6a\x86\xae\x8a\x95\x86\x15\x32\x29\x58\x11\x71\xfa\xc4\x4c\xbd\x30\x90\x12\xb7\x3a\xeb\x1d\x55\x32\x15\x10\x08\x47\x8e\x9c\x9b\x91\x52\x66\x6c\x59\x6b\xb1\xcc\x0d\x11\x89\x4c\x6b\xb3\x3a\xea\x64\xc3\x42\x8a\x3d\x6a\x56\x9b\x82\x85\xe8\x9e\xea\xd0\x8b\x75\x6c\xa2\xc8\xcc\x93\xa7\x15\xf0\xc0\x3a\x9a\xf1\xa0\xe0\xc8\xa5\x08\x59\x48\xb6\x46\x2d\xa0\xf7\x16\x68\xbd\x32\x86\xcc\xaa\x77\x54\x25\x9f\x85\x3b\xb5\x56\xc1\xab\x99\x91\x99\x01\x77\xc7\x19\x3a\xb0\x41\x57\x1a\x51\x07\x18\x75\x99\x85\x18\x75\x02\x04\x95\xd9\x46\x01\xe6\x3b\x6a\xe4\xa1\x3c\x69\x8c\xe6\x61\x9d\x3b\x6a\x47\xec\xc6\x50\x45\xb1\x45\xc9\x94\xa1\xa8\x0a\x44\x27\x6e\xc5\x44\xc6\x10\x9b\xc2\x1c\xd1\x29\x8f\x7b\x0a\xd5\x38\x6a\xcf\x2c\x84\x43\x42\x4a\xef\xb3\x07\x00\xcf\x61\x3e\x87\x8d\x22\xa5\xd9\x00\x34\x31\xa8\x6d\xcc\x5c\x79\x18\x0d\x0d\x32\xe8\xf9\x8e\xe2\x92\xbd\x88\x17\xcb\x53\xa1\xa1\xc3\x70\x6f\x42\xe2\xde\xa6\xd6\x11\xa3\x43\xb1\x5e\x11\x74\x8e\x89\xe8\x23\x5a\x9e\xc0\x26\x95\xaa\x40\xfe\x0f\xa5\x80\x12\xd4\x2a\x75\xe1\x2e\xbe\x0d\x6b\x30\x55\xcd\x11\x04\x20\x55\x2b\x7a\x31\xa2\xad\x29\x29\xa1\x75\x66\x6d\x94\x2d\xd7\x90\x8a\xed\x8e\x12\x60\x8d\xca\x4a\x19\x32\x48\x8e\x8c\x03\x95\xb9\x42\x2b\xee\x11\x14\x34\x31\x77\x9f\xb3\x31\x6e\x73\x0d\x9d\x3e\x5a\x2f\xa5\x35\xed\x44\x78\x4f\x95\xaa\xcd\x50\x55\xa2\x21\x52\xd3\x3c\x79\xdb\x7d\xc7\x46\x51\x07\x71\x54\x63\x1c\x11\x63\x0c\x07\xec\x6a\x73\x0c\x1f\x44\x43\x54\x5d\xe4\x8e\x9a\x22\xd6\xc3\x9a\x0f\x76\xf1\x52\xbc\xdb\xa8\x5e\x68\x16\x85\x36\x91\xa4\x55\xc2\x40\x01\xa1\x29\xb5\xcf\x09\xee\x23\x67\x62\xf3\x0e\x62\xf7\x77\x15\xe8\xe2\x4c\xd4\x4b\xcb\x25\x9b\xb3\x64\xa2\xa0\xdc\x28\x74\x1a\x83\x63\x86\x2a\x54\x00\xa5\x92\x42\xd7\xb0\xcc\xc2\xd6\xd9\xd8\x7a\x7c\x39\x86\xdf\x76\x7f\xed\xfe\x09\x00\x00\xff\xff\xf6\x52\xc9\xf1\x9d\x04\x00\x00")

func TerraformLockHclBytes() ([]byte, error) {
	return bindataRead(
		_TerraformLockHcl,
		".terraform.lock.hcl",
	)
}

func TerraformLockHcl() (*asset, error) {
	bytes, err := TerraformLockHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".terraform.lock.hcl", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x91, 0x96, 0x18, 0x1e, 0x3b, 0x1b, 0xb5, 0xa0, 0x9, 0x50, 0x4, 0x1b, 0x8a, 0x20, 0xdb, 0xee, 0xef, 0x15, 0xfe, 0x54, 0x24, 0x1e, 0xe4, 0xbf, 0xad, 0xab, 0x77, 0xb0, 0x27, 0x55, 0x27}}
	return a, nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x7b\x93\xe3\xb6\x91\xff\x5f\x9f\xa2\x43\x6f\x65\x77\x53\x4b\x52\x33\x1a\xdb\x6b\x25\x63\xd7\x66\x2f\x4e\xa5\xca\x8f\xad\xcb\xdd\xa5\xae\x66\xa7\x58\x20\xd9\x92\xb0\x43\x12\x30\x00\x4a\x23\x4f\xe6\x3e\xfb\x15\x40\xf0\x29\x52\xa2\x34\xe3\x7d\xb8\x76\x53\x19\x4b\xe8\x6e\xa0\xd1\xe8\xfe\x75\x03\x04\x35\x51\x28\x04\x59\x30\x91\xc2\xdd\x04\x40\xe0\x2f\x39\x15\x18\x07\x5c\xb0\x35\x8d\x51\x48\xd3\x0c\x40\x36\x12\x2e\xed\x67\x00\xc9\x72\x11\x21\xc0\x25\x38\x2b\x22\x57\x34\x62\x82\xfb\x64\x23\x1d\x4b\x5f\xa3\x90\x94\x65\x9a\xfe\x7f\xdf\xc2\xcc\x9b\x16\x84\xfb\x89\xfe\xff\xfd\x64\x52\xf6\x0e\x8e\x16\xb2\x23\x2f\xb5\x04\x5c\xc2\x9a\x08\x8f\x6c\x64\x50\xb4\x4c\x00\xb8\x60\x0b\x9a\x60\x83\x64\x5b\x74\x57\x31\x51\xc4\x74\x63\xf9\x1d\x70\xa2\x5c\x08\xcc\x94\x03\x77\x2d\x7a\x44\x92\x04\x45\x40\x63\xcc\x14\x55\xdb\x7e\xc6\x95\x52\xdc\x01\x27\xdd\x06\x3c\x0f\x13\x1a\x05\x94\x17\xfa\xe5\x22\x31\xd3\x55\x8a\xcb\xb9\xef\x47\x2b\x8c\x6e\x28\xf7\x48\x4a\x7e\x65\x19\xd9\x48\x2f\x62\xa9\x53\x2b\x84\xb7\x0a\x45\x46\x12\x07\x1c\x2e\xe8\x9a\x28\xac\x7a\xe2\x82\x2d\x05\x49\xe1\x12\xae\x1c\xb9\x72\x5e\x80\xe3\x46\xfa\x2f\x46\x2b\x06\x77\x6f\xdf\xbe\x75\x28\xd7\x7f\xe7\xfa\xcf\x93\x67\x2b\x26\x55\x46\x52\x04\x97\x3e\xd7\x2d\xf7\xce\xb5\x1e\x26\x61\x11\x49\x8a\xd5\xa9\x34\xd5\xd6\x8b\x56\x2c\xe5\xcf\xb4\x12\x9e\xd6\xd5\x6b\xce\xc4\x13\x28\x39\xcb\x24\x06\x21\x8b\xb7\xcf\x8d\x2e\xa5\x6e\x70\x09\x46\xa8\x54\xdc\xab\x49\x5a\x2c\x4f\x94\x47\x79\xdb\xe0\x32\x0f\x33\x54\x01\x8d\xa5\x03\x8e\xc4\x04\x23\x85\x71\x31\xc7\x35\x8f\x02\x1a\xdb\x15\x43\x19\xac\x79\xa4\x65\x05\x5a\xcf\x31\xf2\x37\xb8\x0d\x38\xa1\xc2\x01\xe7\x06\xb7\x85\xa0\x6e\x33\xb3\x35\xce\xf5\xe4\x4e\xcb\x47\x49\x2e\x15\x0a\xd3\x7e\xef\xde\xe0\xd6\x08\xd5\x13\xbf\xc1\x2d\x5c\x82\x76\x88\x67\x9a\x5d\xca\x55\x50\x53\x9e\xef\x8e\x4b\x33\xa9\x48\x16\xa1\x03\x0e\xe1\x3c\x90\x28\xd6\x28\x8a\xe1\x15\x59\xd6\x7e\xfe\x93\xd6\x63\x40\x0b\xc2\xb9\xfb\xe4\x2e\x62\x79\xa6\x3c\x9a\xc5\x78\x7b\xef\x18\xe7\x9e\x00\x44\x2c\xcb\x30\x52\xda\x9b\x8b\x7e\xbe\x80\xff\x5a\x21\xc4\xb8\x20\x79\xa2\x20\x97\xda\xbe\x29\xc2\x82\x09\x60\xb9\x80\x57\x3f\xfe\xc3\xb0\xa9\x2d\x37\xc3\x49\xb9\x2a\xc2\x45\x73\xea\x86\x3c\xcc\x33\x95\x17\x6d\xda\x1b\xe0\x12\x24\x26\x0b\xaf\x5a\xd7\x72\x64\x92\x52\xa8\xff\xd5\xe1\x42\x52\x3a\x01\x28\xa7\x1d\xd8\x81\x0c\x95\xf3\xa0\xd5\xde\x5e\x02\xd3\x4b\x73\xa9\xbc\x1b\xdc\x7a\x34\x36\xb3\xcc\x33\xd5\x1d\xab\xd9\x9b\x61\xb0\xae\x20\x31\xca\x05\x55\xdb\x60\x29\x58\xce\xb5\xc7\x68\xef\x2f\x81\xa5\x43\xd6\xdd\x5c\x4d\xaf\x3d\x1a\xbf\xd8\xc3\x11\x2c\x99\x94\xd4\x32\x4e\x00\xae\xb5\x01\x04\x63\x2a\x08\x13\x16\xdd\x04\x31\xae\x69\x84\x76\x05\xd6\x2c\xc9\x53\x0c\x24\xfd\xb5\x9c\x78\x93\xc9\xb4\xcb\x80\x70\xde\x64\x6e\x58\xa9\xc5\x6c\xad\x64\x0c\x6e\x70\x4c\x23\x9d\x86\x32\xed\x80\x8e\x1d\xb0\x04\xc8\xda\x36\x29\x51\x0a\x45\xca\xa4\x0a\x12\x1a\xa1\x0e\x42\x03\x61\x9a\x23\x46\xa9\x68\x46\x94\x85\x4c\x7f\xc5\x52\xf4\x8b\x55\xf7\x6b\xb9\x46\x17\xae\xed\xc2\xe9\x55\x44\x60\xca\x14\xba\x78\x8b\x51\xa9\x0f\xcd\x12\x9a\x61\x65\x74\xd0\xf1\xaa\xc0\x65\x80\x42\xe0\x2d\x55\xce\x8b\xb2\x7d\xb3\xd2\x50\x7b\x05\x7f\x00\x77\x01\xfe\x9a\x08\x3f\xa1\xa1\x1f\x25\x2c\x8f\xfd\x72\x6d\xfd\x90\x31\xe5\x2e\x68\x46\xe5\x0a\x63\xb8\xfe\x33\xc4\x0c\x0c\x7c\x3d\xfd\x17\xa1\x8a\x66\x4b\xe3\xdc\x46\xc8\xa5\x19\x55\x9e\xe7\x3d\xfd\x33\xc8\x04\x91\xc3\x99\xe6\xce\xb0\x1e\xb1\x10\x54\x11\x0f\xc2\x50\x3c\x85\x7f\x83\xcc\x63\x06\x0a\x11\x5c\x02\x3e\xaa\xc8\x4f\x59\x9c\x27\x28\x6b\x11\xc3\x91\xb2\x98\x0b\x16\x22\x58\xd1\xc6\x1c\x96\x7a\x72\xbf\xfc\x0c\x2e\x94\x78\xbd\xd9\x6c\x3c\xce\xa4\x5a\x0a\x94\xbf\x24\x1e\x13\x4b\x3f\xc5\x98\x12\xff\x06\xb7\xd2\x7f\xf5\xfa\xf5\xeb\x8b\xd7\xdf\xbf\xf4\x88\x8c\xe0\xdf\xb0\xe4\x4b\x70\xdd\x18\x89\x48\x99\x68\x2a\xe4\xe7\x52\xf8\x72\x45\x04\x6a\x39\x41\xb3\xa5\xf4\xcb\x5e\x5d\x22\xa2\x15\x5d\xa3\x6b\x29\xde\x92\x2f\x3b\x1a\xcb\x15\xb8\x11\x3c\x35\x13\x7e\xeb\xc4\x18\xc2\x95\xa4\xcb\x0c\x63\x37\xdc\x5e\x1e\xdb\xf7\xb5\x99\xdb\xdc\xf7\x09\x57\xdd\xa9\xf1\x3c\xf4\x05\x72\x26\x35\x11\x9e\x3c\x4b\x64\x18\x08\x4c\x90\x48\x04\x37\x92\xcf\x5d\xbe\x8c\x97\x90\x12\x9a\xbd\x75\xe0\xdb\xc2\xc8\x84\x2b\xbf\x70\x5b\xe9\x25\x54\x2a\x2f\xf6\x35\x97\xf9\xfc\xb4\x33\x11\xc2\x95\x6b\x6c\xbc\x85\x9c\xc7\x44\xe1\x00\xdd\x38\x4c\x92\x68\xbe\x74\x2b\x7f\x49\xdc\x28\xa1\x98\x29\xf7\xa5\x37\x3d\x2c\x51\xcf\xa9\x14\x3b\x3b\x1b\x21\x25\x58\x8a\x6a\x85\xb9\x74\x33\x16\xeb\x28\xe0\x4c\x28\x14\x87\x25\xb3\x3c\x25\x91\x4a\x20\xa1\x59\x7e\xeb\x2a\xc6\x12\xe9\xea\xb2\xa7\xf3\xdd\x4d\x94\x74\xcf\xcf\xbd\xe9\x45\x81\xc8\xd7\x65\x51\x33\x98\x64\x52\x54\x82\x46\xf2\xb4\x44\x63\x85\x3f\xb9\xec\xe2\xa8\x99\x77\x9b\x10\xb1\x34\x20\x35\x2e\x5b\xc0\xb7\x30\x85\xef\xe0\x0c\xe6\x30\x1d\x99\x88\x4e\x4a\x30\xd6\xa6\x75\x92\x79\x78\xf2\xb0\x5d\x3e\x28\x81\x7c\x62\xb8\x7d\x2a\x12\xd4\x11\xda\x85\xc7\xad\x54\x98\xea\x10\xc4\x8c\x84\x09\x0e\x73\xf6\xf4\x4a\xe2\xd8\x78\x74\x42\xc3\x05\xcb\x54\xc4\xb2\x05\x5d\x9e\x41\x9a\xcb\xa4\x93\x18\xca\x94\x10\x27\xde\x52\x90\x05\xc9\x88\xae\xdd\x7d\x26\xa5\x6f\x31\xd2\xb7\xed\xc1\xd9\xd4\x3b\xf7\x66\x01\x49\xe3\xaf\x2e\xbc\x18\xc3\x8e\x1a\x31\xbf\x59\x82\x4b\xe1\x30\x7b\x6b\xe0\x25\x55\xab\x3c\x34\x83\xd2\x2c\xcc\xa3\x1b\x54\xf5\x07\xab\x82\xf4\x63\xb6\xc9\x12\x46\x62\x7f\x7d\xee\x9d\x79\xd3\x8a\x23\x30\x5f\x03\x83\x4a\x07\x35\x1b\x2b\x34\xa4\xdf\xbb\x5c\xaa\x0d\x51\xd1\x4a\x7f\xc1\x84\x48\x45\x23\x89\x3a\x1b\x05\x25\xb0\xf6\x69\x7c\x66\x34\xee\xe7\x77\x0d\xd1\x2b\x50\xb5\x50\x45\x11\xe1\x2d\x7f\xed\xa6\xf7\x9b\x98\x0a\xf0\x19\x57\x03\x1d\x75\xf8\x15\x11\xe0\xfe\x7a\xbb\x5e\xc0\x91\xe3\x82\xfb\x7a\xdf\x30\xe0\xba\x52\x09\xca\xdd\x88\xa5\x9c\x65\x98\x29\x79\xd9\xcd\x43\xb5\xe7\xc6\x04\x53\x96\xb9\x02\xb5\x21\x0e\xf9\xb7\xf5\x1b\xd7\x26\x86\x0e\x37\x0a\x03\x42\x6d\x26\x90\x8a\x08\x75\xa8\xe3\x72\xd9\x07\xba\x2c\xc9\xdd\xce\x86\xbc\xc0\xaa\xe0\xf3\xad\x60\x32\x62\x1c\xfb\xd7\x7c\xe6\x4d\x6b\x96\xc0\x7c\x3f\xe0\xa6\xdd\x38\xf6\x8e\x94\xdf\x45\x8c\x52\x7c\x6c\x6e\xe6\x82\xdd\x6e\x4f\xcb\xcc\x46\xb4\xc8\xcb\xdd\xe4\xd8\xfe\xb7\x3f\x55\xf6\xf1\x16\x5a\x75\x37\x66\xed\x24\xda\x3b\x46\x5f\x4a\x3d\x6b\xa4\x54\x22\x25\x8b\xa8\xde\xd6\x57\xe9\x3d\x20\x71\x2c\x50\xea\x39\x2b\x91\xe3\x49\x09\xd5\xe8\xdb\xd8\x8a\x35\x72\xf7\x60\xda\x7e\x50\xba\x35\x03\x1e\x9b\x6c\x3f\x5c\xe9\xf4\x29\xa7\xf9\xc7\xdf\x9e\x3d\xbc\x70\x38\xba\xb4\x5f\xd2\xec\xf6\xb7\xd8\x01\x3c\x4a\x1a\xe8\xd3\x4e\xa4\x66\x81\xb5\x79\x0d\xd9\x97\x54\xa1\x74\x0b\x89\xd8\xb7\x3e\xdb\x11\x4a\x32\x70\x17\x72\x57\x8a\xac\x09\x4d\xb4\x60\xe3\x34\x61\xb8\xef\x9a\x67\x3f\x88\x92\x34\xb0\x09\x45\xa3\xf4\x0d\xc6\x81\x60\x89\xc6\x54\xb4\x47\xba\x3b\x78\x55\x1d\x07\x76\x30\xea\x8f\x7f\x2c\x09\x91\x40\x0d\x4e\xba\xa3\x26\x6a\x6d\x64\x35\x94\x05\x15\x07\x65\xcf\xd9\x6b\x5b\xc3\x76\x3e\x8f\x99\xde\xef\x1a\xf5\x4e\xc3\xfb\x5a\xae\x0c\xeb\xa2\xcb\xc6\x1e\xc5\xce\x72\x40\x5c\xcb\xb5\x75\xaa\xcf\xc9\xcb\x73\xd2\xa2\xa1\xdc\xd6\x30\xae\xd1\xaa\x3c\x83\xaf\xcf\x5b\x1b\x48\x81\x09\xa6\x98\xa9\x67\x8a\xe9\x8d\x7a\x71\xf0\xdb\x3e\x9c\xf5\xca\xa3\x59\x8f\xc6\xf2\xf9\x0b\x98\x3e\xaf\x96\x15\xa0\x1f\xe7\x7b\x20\xde\x2a\x5e\x80\x7c\xe1\x12\x5a\x4b\x0c\x65\x47\x4b\xdd\x62\x5d\xa9\x4e\x29\x63\x71\x7a\x24\xfc\xb7\xac\x58\xc1\xbb\x35\x77\x51\xfa\x57\xc8\xba\x7b\xe8\xd9\x74\xc0\x66\x7e\x20\x51\x84\x52\x06\x9c\x25\x34\xa2\xa8\x0d\xf1\x97\xbf\xbc\xfe\xf9\xa7\xef\xff\xf1\xf7\x09\x54\x8f\x3e\x9c\xff\x29\x96\xc8\x99\x83\x73\x3e\x3d\x3b\x77\xcf\xa6\xee\xd9\xd7\x75\x20\xfe\x53\x11\x65\x56\xc4\x99\x57\x6b\xa4\xff\xdd\x4d\xda\x09\xdb\x79\x65\x32\x91\xee\x06\xe5\xfc\x4f\x55\x07\x15\xfd\x8d\xa0\x59\x44\x39\x49\x34\x4b\x0f\xfd\x6f\x8b\x05\x46\x7a\x14\xe7\x55\x92\xb0\xcd\x2e\xc3\x7f\xda\x60\xd0\x2c\x44\x64\x73\xb2\x91\x73\x94\xf3\x27\x77\x95\x8f\x14\x4f\x4c\x3c\xfb\x18\xc4\x33\x7e\xda\xa4\x77\x9e\x98\x54\x8c\x24\x32\x71\x1b\xd0\xf8\x7e\x5e\xc4\x80\xdf\xef\xf1\xfe\x9f\x9c\x86\x56\xf7\xf6\xf3\xb5\xad\x99\xac\x6d\x75\x20\x21\xc7\x2c\x96\x81\x09\x85\xba\xca\x18\x80\x18\x0f\x65\xb5\x69\x2f\x00\x64\x00\x58\x34\x24\xf4\xa0\x96\x4e\xdf\x0e\x38\x72\x56\x7c\xd0\x2b\x53\x84\xf0\x40\xe4\x5a\xc6\xce\x68\x03\xb5\x96\xc5\x32\x39\x0b\xca\x27\x29\x81\xdd\x82\x15\xc8\x75\x09\x8e\x53\x41\x5b\x2f\xa8\x5a\x37\x34\x8f\x44\x1c\x39\xab\x1e\x8d\x98\xaa\xc3\xd6\x53\xe5\x34\xbc\x42\x37\x1d\x95\xba\xfb\xf7\xa1\xa2\x9c\x59\x6e\xa3\x5d\xf9\x51\x2b\x68\x37\x15\xfd\x56\xf4\x2a\xde\x3a\x33\x3c\x9e\x96\x47\xc0\x78\x53\x0f\x13\xf6\x0b\x26\x22\x0c\x62\x94\x4a\xb0\x6d\x09\x59\xbd\x2b\xa3\x4d\x5d\xc0\xc3\xb6\xf2\x9f\xf2\xeb\x48\x2f\xb2\xec\x1f\x6c\x39\x75\x31\x6a\x54\x30\xe8\xf6\xb7\x9f\xbf\x9f\x68\xc5\xf7\x80\x5a\x2f\xa0\x35\xc1\x6c\x2f\x10\xd5\x28\x77\xd5\x85\x27\x39\x9b\xff\x40\xa5\xfa\x6b\x7b\xa3\xda\x4f\xfe\x31\x4f\x14\x7d\x43\x84\xfa\x6f\xae\x0b\x2a\xd9\xcb\xfe\x1f\x98\xa0\xc2\x3d\xfd\xfd\x1d\x6d\x77\x3f\xb0\xc8\x3c\x6c\x69\x82\xd3\x75\x4b\xed\x3e\xec\x94\xb3\xf9\x7c\xfe\xe4\xae\x15\x03\x95\x57\x17\x79\xf1\xbe\xec\xf1\xfe\x45\x9f\xa5\xf6\x1a\xe3\x55\xc8\x44\x31\x51\x5e\x4d\x74\xd0\x2c\x1d\x3e\x6d\x9a\x7d\x46\xf9\x39\x7c\xa7\x97\x68\xc0\x28\x63\xa8\xaf\xa2\xa4\x97\xe1\x4d\xbe\x4f\xbc\xa2\x6a\xf1\x41\x63\xef\x75\xa0\x53\x57\xa2\x4e\x3d\xf7\x26\x57\xdc\x4f\xb4\xb3\xef\x84\xb5\x88\x65\x60\xe3\xd4\x01\x27\x0e\xeb\x2f\xbd\x15\xec\xa1\xc3\x6b\x1b\x8b\x71\xb8\x9f\x58\x22\x43\x91\x59\x17\x54\x6f\x27\x3b\x78\xd6\xc3\x62\x87\xee\x97\xff\x83\x95\x77\x1c\x98\xf7\x03\x50\x1c\x6a\x8b\xe8\xe4\x1e\x12\x89\xcd\xaa\xb5\x1f\xb1\x0a\xfe\x94\x98\x96\x6a\x73\x5c\x9b\x20\x0e\xab\xd6\x9a\x8f\x13\x29\x37\x4c\xc4\x6d\xbe\xb2\x75\x02\x20\x6f\x28\x0f\x16\x54\xa3\x94\xcc\x08\x97\x2b\xa6\xea\x32\x91\x70\x9e\x6c\x03\x9a\x9a\x47\x73\x0a\x93\xad\xe9\xc4\x12\x51\x6f\x56\xb0\x6f\x31\x9a\xe6\x2e\xb8\x2a\xf6\xaa\xc4\x6e\xb3\xb7\x89\x57\xfd\x9d\x5c\xef\x7f\xba\xd0\x53\x24\xc7\x61\x59\x1f\xef\x73\xb4\xe6\xf9\x53\xb7\x69\x68\xeb\x34\xda\x03\xbf\x1b\x70\xc0\xc2\xab\x9a\xde\xd4\xd3\xef\x80\xdf\xf4\xdc\x74\xe8\x73\xcf\xdd\x55\xd9\xe3\xa7\xc3\x1c\x73\xe8\xd8\xab\xc1\x57\x9d\x31\xd5\xb3\x4b\x88\x94\xbd\x06\x6a\xd9\x40\x73\x0d\xf8\xd0\x18\x67\xea\x73\xcc\x86\x5c\xe9\xbe\xb9\x62\x41\x4a\x33\x26\x4a\xcf\x0a\x72\xbe\x14\x24\x2e\xae\xb3\x2c\x48\x22\x35\x1b\x47\xb1\x60\x22\x35\x23\xd0\x4c\xd2\xe5\x4a\x35\xb7\x4c\x95\x8b\xea\x86\xa0\x8f\x59\x87\xb1\x0e\x2a\x41\x52\xd4\xc6\x2b\xdc\xb2\xf9\xa8\x2c\xc1\x6c\xa9\x56\xcf\xaa\xf0\xb3\x9c\xf2\xb9\xf5\x91\xa1\x85\xe6\x4b\x03\x1f\x3d\x9b\xe9\xdd\x01\x0b\xbc\x34\x8d\xb2\x6c\xa9\xab\xa0\x3d\xde\xc4\x97\xda\x83\x16\x24\xa5\xc9\x76\xd0\xe8\x06\x10\x49\x2e\x98\x20\xae\x79\x76\x6c\xc0\xad\xd9\xf0\xd2\x9b\x1a\x65\x6d\x5b\xfd\xb8\xf8\xec\xdc\x00\xdd\x36\x23\x29\x8d\xc0\xa9\xd4\x2e\x4f\xdb\x16\x4c\x04\x48\xa2\x55\x13\x9f\x4a\x03\x19\x86\x88\x65\x0a\x33\x55\x25\xef\xd6\x06\xff\x12\x2a\x6e\x6f\x4d\x92\x1c\xaf\x1c\x4d\x77\xae\xcb\xbb\x6f\xba\x6d\x0f\xb3\xf9\x4f\xc5\x5d\x38\x56\x8a\x6a\xc5\xe2\x3e\xee\x26\xdd\x0a\xdd\xf7\x9f\xc7\x34\x01\x06\xb3\x98\x33\x9a\xa9\x06\xc0\x94\x4d\x23\x00\xa6\x27\x7c\x46\xc2\xcb\x3e\x54\x78\x0f\xa0\xd0\x9d\x6b\x2b\xbf\x76\x3b\xa8\x66\xe0\xed\x60\xf0\x55\x03\xed\xae\xbd\x8d\xa0\x0a\xc5\x50\xd0\x6c\xc4\x60\xc2\x15\x71\x0f\x6e\xe6\x52\xb1\xb4\xd6\xb0\xf9\x08\xe0\x12\x9c\x57\x3f\xfd\xaf\xa3\xb3\x8e\x54\x44\xd1\x28\x48\x31\x0d\x51\x54\xd9\xe6\x14\xed\x7b\x93\x51\x23\x01\xe9\xf2\x51\xa1\x54\x01\x59\x16\x57\x21\x8f\xba\x05\xa7\x65\x46\xdf\x83\x7b\xec\x2b\x08\x7d\x5e\x7b\xcc\x53\x16\xa3\xfd\x81\xeb\x6f\x5d\xb9\x31\x97\xe1\x46\x8c\x55\x5e\x8e\xab\x4e\xe9\x06\x05\x4b\x83\x57\x9c\xe3\x9e\xe2\x1c\x5b\xb9\x18\xfd\x8c\xb3\x3c\xf8\x1a\x9d\xee\xe9\xf3\x3d\x88\x4f\xe7\xa6\x52\xdb\x13\x8a\x4b\xb1\xbb\x49\x62\xe4\x9d\x9d\x66\xe4\xec\xb9\x3a\x5b\x8e\xe9\x16\x63\x9a\x23\x40\x19\x09\xca\xcb\x3b\x90\xaf\x38\xaf\xce\xa6\xc1\x30\x99\x25\x29\xd1\xaa\x84\x7a\xe8\x19\xc0\x00\x28\xcd\x96\x26\x1c\x6c\xc6\x17\x2c\x0d\xb4\x75\x8d\x56\xe7\xe7\x05\x1c\xb1\xb2\xa9\xd1\xc8\x05\x53\x2c\x62\x89\xd5\x5f\x45\xbc\xb0\x5d\x44\x63\x51\x84\x84\x8e\x20\x73\xf9\xba\x71\x43\xba\x4a\x60\x57\xce\x93\x3b\x4b\x2c\x23\xf3\xde\x9f\x9d\x3b\x2f\xa0\x26\x54\x52\x86\x72\x0d\xf3\x41\xa9\xf2\xa0\x74\xdf\x64\x5e\x4e\xbf\xfa\xb2\x67\x3a\x55\xf3\xb8\x09\x5d\x39\x53\xcf\xfc\xcf\x9f\x1e\x1c\xd5\x74\xfe\x75\x67\xcc\x46\x63\x3d\x62\x73\xbc\x2f\xe0\x47\xb2\x0d\x11\x04\x4a\x25\x68\xa4\x80\x65\xc9\xd6\xf4\x0a\x6f\xaa\x40\x00\x7b\xc9\xe1\x3b\x2b\xf2\xd7\x5c\xc1\x8a\x64\xf1\x16\x8a\xb0\x56\xe4\x46\x07\xa7\xbd\xfe\x2f\x61\x43\xd5\x8a\xe5\x0a\x52\x92\xe5\x24\x49\xb6\x20\xe5\xca\xd5\x1c\x34\x53\x0c\xd4\x0a\x6d\x87\xde\x03\xa7\x5c\xfa\xf3\x37\x67\xd3\xe9\x8e\xb1\x3b\xa4\xa6\xc1\xbb\x46\x6f\x87\xda\x10\x16\xb7\xae\xa7\x95\xaa\xe1\xb0\x0b\xec\xaa\x54\xb6\x75\x16\xdf\x3d\x1b\xb7\xf6\xa3\x20\xc2\x5e\xc0\x7e\xbf\x48\xe1\xda\x41\x47\x03\x46\xc1\xff\x18\xb8\x51\xc6\xd5\xd7\x17\x03\x1e\x50\x91\x7a\x3c\x20\x8f\x8f\xf2\x80\xea\x06\xfc\x58\xc7\x3c\x51\xad\x23\x1d\xf3\x14\xb5\x76\xc1\xa9\x43\xfa\x30\xd6\x3a\x45\xad\x87\x5a\xeb\x3d\x87\xf0\xa1\x18\x8e\xc3\x66\xec\x1e\x15\xb5\xc3\x7b\xfb\x6e\x62\x1f\xb1\x1a\xb3\xd9\xf4\xab\x81\xd5\xa8\x48\x8f\xbe\x1a\x23\xf4\xfa\xf2\x62\xb6\x5b\x28\x74\x48\x8f\xae\xd7\x08\xe8\xad\xf7\x69\x63\x20\xd4\xec\xd0\x0e\x96\x5b\x3f\x94\xf8\x68\xf8\x4f\xaf\xbc\xaa\x37\xbf\xac\x4e\x4d\x96\x82\x72\x68\x86\x81\xc8\xcd\x25\x12\xab\xb8\x5c\xd9\x2d\xe9\xce\x26\xee\x12\x1c\xbb\x82\xe6\x34\xa9\xb3\x7c\x55\x49\xd7\x5d\xbc\x8a\xd0\x5d\xba\xe6\xe2\x35\xa3\xab\xa4\xbd\xc7\x9a\x6f\x67\xd7\x66\x37\x9e\x03\x7b\xb6\xe3\x4c\x4a\x38\x3d\xdd\xa4\x17\x53\x53\xe5\xf4\x19\xd5\x92\x8e\x35\x6b\x17\xba\x7e\xd3\xb9\x17\x08\xbc\x67\xfa\xb8\x77\xf6\x43\x53\x1f\x9c\x77\x81\xd6\x1f\x7c\xda\xb6\xa0\x74\x15\x73\x1b\x57\xea\xf7\x9f\x03\x8e\xcc\x07\x3d\x87\x2b\xe3\x7c\xe9\xb0\x4b\x1d\xf6\xac\x1d\x07\xdb\xb5\x62\xc5\xb2\xcf\x98\xe5\xfb\x7a\xbb\xc7\x25\xfd\x82\xad\x02\xfd\xb8\xa5\x68\xef\xf4\x3f\x92\x25\xb0\x7b\x97\x3d\x4b\x60\x39\x3e\xd1\x25\xa8\xdf\xc1\x7a\xec\x8a\xa7\x8c\xac\x6e\x82\x1d\xe9\x13\x95\x78\x99\xe6\x76\x7d\xe1\x64\x27\xf8\x9c\x1f\x4f\x0a\xd3\x72\x49\x0e\x03\xe5\x6f\xb8\x32\xdf\x4c\xbf\x19\xca\x35\x96\xf4\x9e\xd2\xec\x83\x4c\x68\x5f\x1b\xf9\x00\xf6\x9b\x0d\x97\x29\xb3\xf7\x5a\xa6\x3c\xcc\x05\xab\x97\x59\xde\xbf\x05\x2f\xa6\x17\xc3\x85\xde\xc5\xa7\x62\xc1\x66\xbd\xf7\xb8\xe6\xfb\xd8\x0b\xc5\x63\xf3\xa3\xbd\x51\x3d\x7a\x5f\x69\xf9\x0f\xef\x2c\xff\xb9\xbb\x95\xb4\xb2\xd5\x13\xba\x51\xa7\x04\x17\x17\xb3\x81\xcd\x78\x49\x79\xc4\xbd\xf8\x8b\x83\x26\xbd\xae\x9f\x72\xee\xb9\x80\xdc\xf2\xa4\xfb\xc9\xe4\x0b\xf8\x17\x42\x86\x18\x03\x01\x89\x9c\x08\xa2\xb0\xbb\xd9\xd6\x2e\x0c\x8a\x01\x17\xb8\xd6\x7b\xf1\x68\x1b\x25\x34\xb2\x57\xa4\x31\x8b\xb6\x10\xa2\xda\x20\x66\x93\x2f\xcc\x09\x37\xe1\xdc\x4a\x92\x2c\x06\xab\x64\xd1\xe2\x8d\x2b\x4c\x39\xd7\x3b\x83\xea\x9d\xc1\x8f\xa4\x28\x3d\xff\xf2\x50\x51\x6a\x39\x1e\xbd\x28\x6d\xc7\xce\xb1\x95\x69\xe5\x44\x23\xa2\xae\x78\x85\xf0\x98\x13\xf4\xb3\xe3\x4e\xd0\xcd\x00\x87\x83\xf4\x8d\x66\xfb\xcd\x9e\xb7\xbd\xec\x3b\xdd\x7c\xd9\x7b\xbc\x39\xfa\xf1\xd4\xef\xeb\x11\xdf\xc7\xfc\xe8\xe9\x43\x3f\x7b\x6a\xdc\x55\x79\xc7\xc2\xd3\x5e\xdd\x7a\xc7\x42\xfb\xfe\xf4\xef\xe1\x47\x9b\x6a\x33\x3c\xe2\x6f\x37\xf5\x75\xfa\x48\x3f\xe1\xf4\xf0\x3b\x25\xef\x58\xf8\xa0\x1b\x25\x9f\x7f\x9a\xe9\xb4\xab\x2d\x9f\x7f\x48\xe9\xf3\x0f\x29\xed\x5c\x4f\x1a\xba\x4b\x94\xe5\x49\x12\x94\x5f\xcd\xfb\x51\x41\x9c\xa7\xbc\x7d\xe4\xf6\x6c\xd4\x8b\x4c\xf6\xfd\x25\x2d\x1e\xe4\x82\xda\xdc\x3b\xe6\x45\xa7\xe7\xad\x37\x9d\x9a\xa1\x67\xb2\x6f\x2b\xf2\x22\x96\xa6\xba\x66\xbe\x34\x89\x06\x5c\xb7\xfc\xa1\xc9\x22\x85\x34\x7e\x68\xf2\x1e\xe4\x0c\x22\x6e\x09\xbb\x0a\x6a\xfa\xdc\xf7\x0f\xbc\x92\x02\xae\x2b\x34\x4c\x4a\xba\xb6\xf0\x70\x3f\xf9\xff\x00\x00\x00\xff\xff\x27\x68\x56\x22\x80\x53\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0xc5, 0x63, 0xde, 0x0, 0xb0, 0xd2, 0x37, 0x74, 0x84, 0x87, 0x5b, 0x10, 0x25, 0xd7, 0x8c, 0x3, 0xb0, 0x65, 0x3c, 0x70, 0xe3, 0x41, 0x59, 0x86, 0x11, 0xc2, 0x95, 0x16, 0x53, 0xad, 0xb6}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\xb6\xf6\xc0\xdf\xe7\x53\x10\xc2\xff\x7f\x91\x0e\x71\x16\x3b\x71\xb2\x04\xd8\x8b\xd4\x6b\xbb\x02\xcd\x96\x9b\x87\xdd\xe1\xb6\x85\x40\x4b\xc7\x32\x11\x49\x54\x49\xca\x89\xd7\x65\x9f\xfd\x82\x94\x64\x53\x0f\xb6\x65\xc5\xae\x9d\x86\x7b\xb1\x46\x47\xa4\xc4\x73\x78\x78\xf8\xcb\x21\xc5\x7c\xdd\x41\xc8\xc2\x61\x48\x05\x16\x84\x86\xdc\x3a\x43\x52\x84\x90\xe5\x13\x2e\xac\x33\xf4\x51\x5d\xa1\x54\xaa\xee\xf4\x63\xe2\x8b\xf7\xa1\x75\x86\xda\x7b\x53\xa9\x8b\x05\xe6\x34\x66\x0e\x58\x67\xc8\x6a\xb5\xd0\x3b\x86\x07\x38\xc4\xa8\xd5\xb2\xb4\x62\x10\xe2\xbe\x2f\x8b\x08\x16\x83\x26\x1f\x12\xb7\x42\x4a\x1c\x1a\xf6\xa8\x4f\x99\x7c\x26\xf3\xfa\x78\xf7\x60\x0f\x75\xda\xed\x3d\xd4\xe9\x76\xf7\x50\xfb\x95\xfe\xe8\x10\x07\xea\xdd\xe7\x53\x75\xd0\xbf\xd0\xb9\x0f\x4c\x70\xbd\x9c\x18\x47\xaa\x9c\x8b\xf9\xb0\x4f\x31\x73\xad\xf4\xde\xa3\xfa\xf7\xf3\x0e\x42\x8f\xb2\xb8\x05\x2e\x11\x85\xd6\x5a\x5e\x08\xe2\xbd\x6b\x9d\xa1\x4e\xf7\xa8\x93\x48\x18\x8e\x86\x37\x94\xfa\x82\x44\x99\x4d\x2c\xa2\x8a\x24\x3f\x0a\x60\xaa\x35\xf2\x66\xf7\xf4\xf0\xe4\xa7\xd3\x93\xee\xc9\x61\xf7\x50\xdd\xf5\x49\x78\x27\xad\xfe\xf1\xb3\xba\x8c\x70\x08\x3e\x9f\xd8\x3d\xb3\xba\x85\x7d\x82\xb9\xb2\x84\xea\xa2\xc7\x4c\x1d\xab\x8f\x95\x64\x80\x7d\x3e\x31\x9c\xd2\xec\x03\x84\x9e\x18\xca\x77\x1e\xe4\xe4\x50\x55\x5c\xef\x3a\x9f\x62\x57\x00\x17\xad\x54\x34\x29\x56\x61\x8e\x44\xce\x98\xea\xa0\xfc\x43\x07\xc4\xf7\x75\x17\x51\x82\x77\x0c\xbb\x04\x42\xe9\x58\xd3\x56\x79\x8c\xb8\x97\x74\xea\x7a\x89\x3f\x58\x67\xe8\x54\xeb\xb4\x7b\xf9\xac\x8e\x26\x78\xd0\x9f\x81\x90\x35\x96\xd7\x59\x47\x4e\x9e\x3d\x24\xae\x0b\xe1\x35\x30\x52\xa1\xb7\xea\xa4\x93\xc9\xa5\x0f\x1e\x84\x6e\xbe\x19\x78\xe4\x15\xab\x21\x64\x39\x31\x63\x89\x16\xc5\x3b\x01\x7e\xa8\x92\x92\xb0\x42\xca\x87\xf4\xbe\xec\xf2\x82\x0a\xec\x57\x94\x1e\x61\x3f\x9e\xea\x50\x52\xd4\x27\xa1\xba\x9b\xeb\x19\x29\xbc\x27\x6e\xe2\x06\xba\x54\x73\xb9\x64\xe8\xc4\xbe\x7f\x49\x49\x28\x2e\xa8\x1a\x86\x96\x43\xc3\x10\x1c\x01\xee\xb4\xfb\x69\x94\x8f\x10\x13\xd7\xf9\x30\x79\x5e\xa9\x55\x11\x30\x07\x42\x81\x3d\x28\x19\x3f\x92\xaf\x93\xee\x10\xcb\xba\xdd\xbc\xbc\xdc\x57\x0c\x42\x17\x18\xa8\x40\x30\xf0\xa9\x98\xb6\x8b\xab\xce\xfd\x7d\x04\x8c\x11\x17\x0a\x8a\xf1\x08\x3b\x50\x35\x14\xb8\xc0\xce\x5d\xe9\x2d\x5c\x40\x14\x81\xfb\x81\x84\xe5\x06\x0b\xcc\x3c\x10\x5c\x8b\x89\x7a\x54\x94\xe3\xe0\x21\x4a\xe2\x14\x16\xb0\x1b\x60\x21\x80\x05\x94\x0b\x3b\x92\xff\x53\xdd\xfa\x95\x84\x5c\xe0\xd0\x81\x9f\xff\xf9\x64\xfd\x1f\x07\x36\x02\xf6\xc9\x7a\xfc\xd8\x0e\x3e\xeb\x91\x4c\x0e\x16\xca\x02\x2c\x1d\xcc\x12\x24\x00\x3b\xd1\x31\x5f\x84\x84\x02\xd8\x08\xfb\x6f\xb1\x23\xd4\xf8\x6b\xe7\x6e\x27\xde\xfc\x76\xf2\x9c\xaf\x93\x97\x3f\x3e\xe6\x1f\x14\x80\x60\xc4\x91\x65\x2a\x1b\x9d\x2f\xcc\x60\xa0\xc2\x9f\x75\x9e\x97\x4b\xcb\xc9\x7e\x9c\xc8\x1e\xf7\xe6\x5b\x89\xc7\xc1\x6e\x33\x4b\xad\xdd\x54\x37\x65\xb5\x9b\xd9\xe8\xf5\x22\x1b\xa5\x3f\x4d\xfd\x55\x0c\x19\xf0\x21\xf5\xdd\x82\x1f\x4b\xd5\xde\x32\x1a\x58\x67\x48\x8e\xd5\x9c\xfc\x0a\xbc\x74\x60\x16\x2a\x5c\x0f\xc9\x40\x94\x6b\x08\x15\xc2\xad\x4b\xca\x05\x47\x11\x30\x74\x0d\x0e\x0d\xb5\x91\x2e\x26\x93\x99\x36\xd2\x03\x7e\x05\x9c\xfa\x71\x3a\x93\x95\x83\x19\x66\xe0\x96\xc3\x19\xa7\x4c\x14\x22\xb5\x8a\x64\x76\x36\x0b\x93\xd0\x25\x23\xe2\xc6\xd8\xb7\x4a\xe1\x23\x2b\xa3\xa6\xd8\x69\xfb\x1e\xf0\x03\x29\xc4\xa1\x7e\xec\xdc\x25\x83\x53\x57\x56\x36\x3b\x0d\x68\xd2\x1e\x15\xb0\x50\x28\x5d\x1d\x92\x27\xa1\xb7\x22\xc2\x8d\xf1\x03\xcc\x89\x09\x53\xe7\xe4\x43\x69\x89\xbc\xdf\xe1\x3e\xc8\x50\x6f\xf5\x68\x1c\x16\xef\x51\xef\x35\xe6\x50\xf2\xd5\x64\x82\xc9\x37\x7b\x32\xc3\x94\xc4\x9a\x3e\x0b\x07\x66\xad\xa6\x96\xde\xb0\xc6\x76\x96\x06\xc7\xb8\xdc\xef\xd8\x27\x5e\x95\x3b\x2a\xf9\x07\x18\x4d\x1a\x9d\x43\xbc\xd4\x04\x86\xae\xb2\xeb\x4a\xba\xca\x09\x9a\xe2\x95\x66\x9f\xd9\x7c\x55\x18\x6f\x8b\xf0\xaa\x50\x3c\xf1\xa9\x62\xdc\x69\x06\x57\x9a\x07\x1a\xb6\x7a\x06\x6c\x35\x14\x22\xb2\x19\x7c\x89\x81\x0b\xbe\x0d\x90\x85\xb2\xb7\xa3\x5a\x98\xa5\xda\xaf\x86\x38\xff\xe6\xb4\xb5\xa4\xed\xb6\x06\xbb\xea\xda\x6c\xab\xe9\xeb\x2a\xb5\xbb\x01\x30\x03\x60\xcb\x34\xd5\x00\xd8\xcb\x01\xb0\x62\x7a\xeb\xb4\x01\x7f\x1d\xd7\xc0\x2f\x93\xde\x32\x08\x56\x1f\xc1\x8a\x33\xf1\x3d\xf4\x39\x55\xc1\x7f\x2e\x43\x6c\x59\x7e\xab\xb2\xe9\x6b\x84\xaf\x86\x56\xdb\x04\x74\x3d\x0f\x80\xfa\x2d\x0e\xfa\xc0\x10\x1d\xa0\x5e\x36\x98\xd1\x2f\x30\x22\x0e\x70\xb4\xfb\x1f\xe8\x5f\x2b\xeb\x66\x37\xe5\x1b\x5e\x19\xc0\x32\x80\x65\x00\xcb\x00\x16\x42\xb3\x32\x5c\x4d\x08\xab\x6d\x08\xcb\x10\xd6\xba\x08\xcb\xed\xdb\x01\xe6\x02\x98\xed\x4c\x27\xb2\xe7\xc4\x59\x73\x14\xf8\x36\xb4\xb5\xbc\x05\xb7\x26\xd1\xb5\xbc\xed\x9e\x17\xb1\xa9\x1d\x3a\x82\xa2\x0b\xa5\x24\xfa\x05\x0b\xdc\x97\x33\xad\xc1\x34\x83\x69\x06\xd3\x0c\xa6\xa1\x19\x79\xb0\xf6\x4f\x4d\x30\xcd\x70\x9a\xe1\xb4\xd5\x72\x5a\xd5\xa2\x1a\x8e\x88\x9d\x70\x42\x1c\x24\xcb\x66\xa8\x3f\x46\xbb\x19\x69\xbc\x42\x3f\xa2\xb9\xd5\x1c\x19\x81\xab\x2a\x2e\x0d\x25\xe9\x8e\xda\x82\x7b\x2d\x4f\x2b\x78\xe4\xb5\x96\x5e\xd7\xd4\xcd\xb0\x26\xce\x1b\x12\x2e\xa8\xc7\x70\x60\x7f\x89\x71\x28\x88\x0f\xbb\x07\xfb\xa7\xa7\x7b\xf3\xed\x9b\xcc\xcf\x15\x06\xde\xf3\xa1\xc1\x12\xe7\x4c\x23\x17\xad\x18\x9d\x9e\xb6\x66\xa3\xb3\x06\x70\xdb\xc1\x6a\xe7\x97\xef\x51\xba\x44\x89\x6e\x48\x00\x68\xf7\x5a\xe1\xb1\xc9\xa1\xad\x19\xce\x66\x80\x99\x61\x32\xc3\x64\x5b\xcd\x64\x9d\x93\x06\x4c\x76\x78\x64\x98\xcc\x30\xd9\xda\x99\xcc\xed\xdb\x5c\x50\x06\x4d\xc0\x2c\x5f\xd7\xd0\x59\x26\x59\x29\x9d\xe5\x8d\x6c\x10\xad\x16\xa2\x5d\x4b\x8b\xa1\x1e\xf6\x7d\x43\x68\x86\xd0\x0c\xa1\x19\x42\xcb\x13\x5a\x69\x71\xb3\x51\xda\xec\xb0\x63\x10\xcd\x20\xda\x7a\x10\x2d\x1b\x4c\xb9\x9d\xe8\xb5\x21\x6d\x4e\x6d\x83\x69\x99\xe4\xe9\x98\x36\xc7\xcc\x06\xd4\x1a\xe6\xd2\x7a\xbe\x8c\xf3\x86\xd4\x0c\xa9\x19\x52\x4b\x6e\xbc\x68\x52\x5b\x49\x2e\xad\x7d\x68\x40\xcd\x80\xda\x4a\x41\x8d\x94\xce\x67\x60\xd4\x01\xce\x6d\x27\x8a\x6d\xae\xbe\x59\xab\xf1\xdd\xe0\x0f\xa8\x7d\x70\xb0\xb9\x5d\x69\xf5\x51\x69\x93\x8c\xd0\xbb\xbc\x45\xb7\x82\xf8\xe4\x2f\x75\x54\x10\xba\xc2\x02\xd0\xee\xff\x1b\x44\xd8\xdc\x5e\xa8\xb9\xdd\x81\x0c\x3a\x20\x83\x0e\x9b\x47\x87\x52\x92\xa7\x11\x3b\x74\x0d\x3a\x18\x74\x58\x29\x3a\x78\xd4\x0e\x20\xe0\x02\x0b\x6e\x63\xdf\xa7\x8e\xdd\x1f\x0b\xe0\x1b\xda\xb3\x7e\x2e\x5b\x30\x27\x65\x30\xcd\xbe\xcc\x68\xf7\x5a\x37\xac\xeb\xef\x54\x5d\x62\x93\x30\xe6\xb0\x5a\x8b\xad\x2a\x91\x75\x2d\x1b\xb8\x5e\x7b\x2e\xdc\xc4\xbe\x84\x3d\x87\x80\xa3\x6d\x36\xe7\xaf\x80\xa3\xf5\x5a\xb3\xb7\xcd\xd8\x7b\x01\x01\x65\x63\x74\xcb\x65\x74\x34\xa8\xbb\x4e\xd4\x55\x9e\x62\x32\x62\xb3\xda\xa9\x13\xc5\x77\xca\xb5\xb9\x21\xb8\x89\xbc\xd6\xe1\x71\x03\x36\xed\x9c\xd6\x80\xd3\x55\x1c\x20\xb6\x22\x34\x7d\xea\x09\x62\x25\x0c\x95\x82\x6f\x44\xa0\x9d\xef\x88\x40\x79\x1c\xec\x92\xd0\x61\x80\x79\x71\x11\x4b\xc6\x62\x1a\xd7\x3a\xf3\x6a\xde\xf2\xe1\x32\x87\x7f\x69\xb0\x58\x9b\x63\x56\xa3\xc1\xfc\x36\xcf\x3f\xfe\x61\x3b\x20\x21\x59\x2d\x53\x4b\x67\x52\x67\x75\x62\xd6\x05\x09\x63\xb1\x08\x19\x0c\x13\x54\xfa\xd7\x16\xcc\xb6\x86\x0a\xb6\x86\x0a\x9e\x75\xb6\xab\x11\x51\x98\x4d\xe7\x26\xdb\xb5\x5a\xd6\xf0\xa8\xed\x51\x46\x63\x21\xbb\x64\x8b\xcf\x65\xc8\xb5\x73\x8d\xc7\x2f\xd4\xb1\xc7\x66\x4f\x59\xa8\x63\x89\x67\x72\x98\xc2\x3b\x8a\xae\x8a\x8a\x98\x14\x8a\x39\x39\x61\x1b\xc8\xee\x7b\x04\xa6\xdc\x78\x74\x81\x3b\x8c\x44\xe9\x88\x9a\x26\xd2\x36\x92\x5f\x39\xea\x36\xa0\xa1\x4e\x9d\x73\x11\x66\xe6\x57\x8a\x99\x94\xda\xe7\xb3\x33\xe2\x0d\xc5\x75\x65\x16\xdd\x64\x5e\x9e\x37\x0d\x4d\xb6\x0e\x87\xd4\x85\xba\x7b\x85\xf6\x64\x94\xff\xf9\x93\x15\xf3\x9a\xd9\x97\x39\x2b\x30\xb2\x7c\x05\xaa\x57\x30\xc2\x2d\x07\x86\x6a\xed\x1d\x5a\x8a\x7f\x1a\x6b\xcf\xc7\x5c\x40\xf0\x34\xfd\x4b\x2b\x76\xea\x99\x75\xb4\x7c\xfd\x8d\xb4\x24\xae\x0f\xab\xd5\xf1\xbd\xeb\x43\x1d\x0d\x7b\xdf\x44\xc3\x7f\x3e\x59\x84\x7d\xf9\x9b\xd3\x81\x90\xff\x12\x7a\x8f\x89\x58\xad\xc2\xbf\x8b\x61\x3d\xcf\xfd\x65\x5b\x92\x78\x97\xb7\xe8\x03\xc5\x2e\xda\x6d\x07\x8b\x76\xb5\x19\x10\xad\xf4\xcc\xad\xa3\x3b\x43\xa1\x5b\x42\xa1\x1b\xc9\xbd\x35\xa2\xcd\xc3\x97\x77\x0a\x97\xc1\xca\xb5\x2f\xe8\xe9\x7f\x0c\x66\xf1\x72\x1e\x17\x58\xc4\xdc\x76\xa8\xbb\x68\x45\x0f\x7b\x10\x0a\xd4\x42\x5f\xbf\x22\xad\x12\x7a\x7c\x44\x2b\x5e\xdd\x9b\x79\x12\xd8\x0c\xcc\xd0\x5a\x23\x6f\x1c\xed\xef\xff\xdd\xdd\xdf\x6f\xac\x66\x14\x55\x29\xb9\xe5\xcb\x82\xbf\xde\xdc\x5c\xa2\x37\xaa\xe7\xcd\x92\xa0\x41\x0b\xb3\x24\xf8\x7c\xd9\xa2\x98\xc8\xea\x1e\x35\x40\x8b\xce\x74\x45\x29\x5b\x29\xc8\xa7\xe4\x5e\xc2\xdf\x1f\x34\xb0\xb1\x1a\xd8\xd8\xcd\xff\xfa\x1f\x82\xb8\xa7\xec\xce\x16\x0c\x87\x3c\x20\x42\xdf\x77\xbb\xc4\xfe\xa1\x57\x3f\xfc\x54\xbd\xa4\x55\xde\x84\xb9\xec\x62\xd7\x9f\xc9\x37\x4a\xab\xde\x83\x34\xc3\x0e\x0c\x1c\x20\x23\x58\x95\x19\x1a\xe5\xf2\x96\xb4\xd0\xd5\x32\x16\xda\x16\xc6\xf9\x2d\xb1\x37\xba\xfa\xf3\xc7\xb4\x87\x17\xad\xf1\x19\xc0\xa9\xf4\x67\x6d\x1f\x74\x34\x63\x17\xb4\xc1\x9b\x97\x88\x37\x2e\x38\x24\xc0\x7e\xd1\x63\x37\x93\x52\x69\xc6\x3d\xab\xfd\xf0\x5f\xc6\xe2\x37\x41\x24\xc6\x33\xee\xfd\x17\x18\x7d\x62\x26\x66\x0d\x6b\x7f\x26\x4b\xb3\x2d\xe0\xa4\x38\x21\x50\xdf\xf5\xd8\x17\x10\xa8\x5d\x38\x73\xbf\xbd\x42\x2d\x54\xa8\xf3\x96\xc1\xfc\xcf\xb5\x0a\x55\x5e\xc7\x83\x01\x30\xbe\x4c\x95\x1e\x76\x86\xe0\xce\xad\xb1\xa6\xf5\x46\x77\xe5\x8c\xb6\xb4\xc5\x6b\x6c\x09\x7f\x5e\x98\xb4\xc4\x67\x64\x86\x8f\x2a\x7d\xa9\xd6\x77\x62\x86\x90\x5e\x22\x21\x6d\x84\x84\x8e\x0f\x9b\x90\xd0\x49\x0d\x12\x32\xb9\x9e\x86\xc8\xe2\xc7\x1e\x09\xff\x00\xc6\xd3\xbd\x6e\xc7\xfb\xc7\xfb\x1d\xeb\x05\x20\x4d\x96\xf9\xe0\x02\x0b\xfb\xc6\x89\xec\x5e\xcc\xd8\x1b\x2e\x70\xbf\xd6\xfc\xba\x12\x70\x50\xaf\xf3\x09\x1f\xae\x81\x1f\x48\x2e\xbf\x93\x69\xf9\xe6\x41\xd8\x37\xbd\xcb\xec\xab\xab\x79\xe9\x9d\x35\xe8\x3b\xf9\xd8\x6b\x69\x0e\x59\xa0\x2c\x8f\x83\x92\xaa\x0b\x3b\xb4\xe9\x2e\x9d\x04\xa5\xb4\xbe\x5b\xcd\xb6\xa4\x27\x77\xd8\xd3\xf4\xc9\xde\xb0\xe5\x3b\x8e\x6e\x7a\x97\xfa\x1f\x1a\x34\x5c\x68\x16\x06\xbf\x13\x2e\xdc\x49\x1f\x2b\xc7\x9c\x1c\x4e\x52\xed\xf6\x41\xe2\xe1\x16\x77\x86\x10\xe0\xe9\x3c\xdd\xe9\x24\x62\x31\x4e\x86\x85\x8b\xd9\x5d\x52\x52\x60\x6f\xda\xf3\xda\xb9\xc3\xa9\xf1\x34\x49\x2b\x02\x36\xb0\x26\xaf\x15\x10\x44\x3e\x16\x24\xf4\x26\xea\x58\x3e\xe1\x42\x73\xa3\x9c\x92\xfe\x1f\xd2\x01\xcb\xde\x3a\x65\xaf\x5c\x5f\x0a\x78\x10\xe5\x05\x91\x51\xfa\x8c\x8f\x9a\x10\x21\xcb\xd2\x2e\x3f\x57\xb9\x49\xcd\xaf\x1d\x55\x2a\x70\x40\x42\x92\x6d\xe5\x57\x4e\x63\x27\x43\xa7\x72\xbb\x66\x16\x36\xf5\xd0\x40\x42\xc7\x8f\x5d\x38\xf7\xab\xc0\x6f\xf2\xad\x48\x12\x8c\xf5\x47\x05\xb1\x2f\x48\x79\xe0\xa6\x83\xbc\xa2\xc2\x14\xee\xa6\x31\x11\x21\xeb\x4b\x0c\x6c\x5c\xaf\xf5\x53\xdf\x69\xe7\xa4\x1e\x3c\x14\x8c\x6f\xf1\x3b\x12\xdd\x32\xff\x7a\x1c\x3a\x55\x19\xbb\x72\x84\x14\xd8\x53\x5d\xce\xff\x9d\xb5\xc7\xca\xdf\x2d\x35\x5c\xca\xaa\x0b\xa7\x21\x34\xd1\x4c\xbb\x11\x73\xb8\x49\x1e\x94\xcb\xfd\xed\x64\x8e\xf0\x98\xb8\x2a\x51\x16\x4c\x9d\x74\x90\xcc\x30\x56\x48\xef\x5b\xed\x6e\x76\xa6\xb6\x25\x68\x2a\xb4\x72\xf5\x22\xe2\xdc\x29\x40\x4d\x6b\xa7\x16\xb3\xb3\x85\x27\x3d\x6c\x5a\x5d\x6d\x82\xc9\xc6\xa2\xba\x38\xd4\x2f\xda\xd3\x73\xbc\xad\xae\xf6\x73\x5b\xbf\x38\x3c\xd0\xef\x68\xf3\x46\x47\xfb\xb9\xed\x26\x9e\xff\x39\xd3\x81\x04\x60\x6b\x5e\xb1\xf0\x2d\xfa\x83\x8f\xf5\x07\xeb\x6f\xe9\x1c\xe9\x17\xda\xa7\xa1\x27\xae\xde\xde\xac\x2d\x39\xf3\xfd\x45\x15\x74\x5b\x7d\x46\xef\x79\xea\xbd\x5a\xca\x66\x12\x5c\xd4\xb6\xe0\xd6\x0d\x70\x81\x2e\x81\xa9\x40\x2e\x61\xef\x82\x86\x44\x50\x26\x83\x8c\xaa\x19\xab\x5f\xf1\xac\x83\xe4\xbf\x76\x3b\x91\x8e\x26\x71\xee\x68\xe7\x71\xe7\x7f\x01\x00\x00\xff\xff\x36\xc2\x2d\x55\xce\x9c\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x10, 0x2a, 0x34, 0x55, 0xc8, 0xf9, 0x53, 0xd0, 0x3a, 0xd9, 0xed, 0x39, 0x4e, 0x6f, 0x95, 0x22, 0x8, 0x3d, 0x4a, 0xb0, 0x62, 0x7e, 0xf, 0xa, 0x1e, 0x50, 0xf9, 0x46, 0xfb, 0xf0, 0xa0}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _es_dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xf8\x30\x74\x40\x82\x5a\xce\x52\x04\x7e\x4b\xd7\xb5\x28\x90\xa2\xdd\x32\xec\x25\x08\x0c\x5a\x3c\x96\x38\x53\xa4\x40\x1e\x39\x76\x0b\xff\xf7\x81\xd4\x8d\xba\xb4\xc9\x8c\xac\x6b\x51\x3d\x45\xfa\x78\x48\x7e\xe7\xfa\x21\xd6\xa7\x13\x42\x28\x53\x4a\x23\x43\xa1\x95\xa5\x0b\xe2\x20\x42\xa8\x14\x16\xe9\x82\xdc\xfa\x37\x52\xa1\x7e\x65\x55\x08\x89\x6f\x15\x5d\x90\xe8\xb4\x45\x39\x43\x66\x75\x61\x62\xa0\x0b\x42\xcf\xce\xc8\x1b\xc3\xd6\x4c\x31\x72\x76\x46\x03\x33\x50\x6c\x25\x9d\x09\x9a\x02\x02\x3c\x15\x7c\x04\x15\xb1\x56\xbf\x6a\xa9\x8d\x3b\xd3\x24\x2b\xf6\x6c\x76\x4a\xe6\x51\x74\x4a\xe6\x17\x17\xa7\x24\xfa\x39\x3c\x5a\xb1\xcc\xdf\x7d\xd5\xba\x43\x7e\x22\x57\x12\x0c\xda\xd0\x0e\xf7\xb9\xb7\xe3\xcc\xa6\x2b\xcd\x0c\xa7\xd5\xda\xc1\xff\xbd\x3b\x21\xe4\xe0\xcc\x29\x70\x81\x3d\xb6\x34\x51\x80\x6f\x39\x5d\x10\x55\x48\x59\x22\x86\xe5\xe9\x9f\x5a\x4b\x14\x39\x5d\x90\x99\x07\x85\x33\x39\xf7\x8f\x52\xa8\x8d\x8b\xeb\xed\x9d\x7f\xcd\x99\x02\x69\x9b\xc8\xd6\x71\xa5\x4c\x0a\x66\xbd\xaf\x3e\x09\x87\x9a\x30\x5d\x31\x8f\xac\x99\xb4\x4d\x68\x3c\xf7\x6b\x50\x09\xa6\x2e\x0d\xb3\x0e\x0e\x63\xe6\x41\x72\x6a\xe6\x7e\x65\x2d\xa4\x0c\x33\xe9\x81\x37\x86\x71\x01\x0a\x6b\x77\xfc\x42\x62\x04\xff\xa0\xdb\x0a\x29\xd3\x46\x17\xe4\x32\x88\xed\xbd\x3b\x6b\x1e\x00\xbb\xf0\x0c\x42\xe8\xde\xbd\xd7\xf1\x6e\xce\x4e\x05\xe7\xa0\x6e\xc0\x88\x11\xf2\x3e\x96\xcd\x25\x54\x42\x02\x8a\x77\x69\xb0\x6d\xd2\xdf\x46\x08\x8d\x0b\x63\x4a\x2f\xfa\x2b\x19\xdb\x8d\xa1\x42\x8d\xa0\x36\xd5\xf7\xc3\xca\x44\x8d\x4c\x8e\x58\x6f\x99\x2c\x5a\x1f\x06\x8e\x4a\xa1\xfc\x6a\x78\x9a\x07\xef\x05\x2f\x73\xd9\xa0\x2e\x4d\x1f\xb4\x50\xf8\x4e\xfb\xd6\xf0\x40\x53\xc7\x54\xe7\xdd\x86\x6d\xf2\x7c\xdd\xd4\xdb\xe0\xf6\x1c\x4c\x0c\x0a\x59\x02\x83\x20\xe7\xee\x26\x97\xf6\xc2\xed\x9d\x77\xf1\x61\x4e\x0c\x28\x0e\x06\x7c\x5f\xae\xa5\xc6\x96\x97\xf5\x49\x7c\xbf\x05\x63\x04\x87\xb6\xf0\xcb\xc5\x9c\xc5\x30\x56\xb7\x16\x59\xbc\x19\xdc\x62\x11\xf2\x1c\xf8\xb5\x50\x43\xc2\xc8\x4c\x02\x68\x83\x11\x15\x0e\x29\xd7\xbd\xbb\xbc\x1c\x1b\x0c\xe1\x19\x48\x66\x51\xc4\x16\x98\x89\xd3\xa5\x50\x5c\xc4\x60\x97\xd5\xeb\x1a\x30\x4e\x97\x3e\xa3\xb7\x51\x76\x17\x0e\x95\xa6\xde\x5e\x6b\x93\x31\xac\xcf\xeb\x5a\x18\x58\xfb\x91\x40\xaf\x68\x03\x1f\xaa\xa7\xd6\x77\x4c\x0d\xd8\x54\x4b\xde\x8b\x09\x8a\x0c\x5e\x1b\x9d\xf5\x3b\xd3\xe1\x7f\x40\x52\x25\xb9\xb7\xe1\x26\x15\x6b\x1c\xee\x40\x3f\xac\xe8\xef\x05\x98\x3d\xe9\x10\xa5\xd8\x4c\xa8\x4f\x61\x6d\x33\x03\x7c\x58\xdd\x56\x1b\xec\x35\xae\x2f\xec\x65\x3d\x3b\x5d\x04\xb7\x82\x17\x4c\xd2\x41\x95\xd5\x36\x7e\x30\xb6\x04\x76\x6c\x27\x7a\xe5\xba\x2a\xe2\x4d\x99\xc3\xd0\x0f\xd7\x89\x55\xc9\x3b\x57\x47\x46\x7c\xcf\x7a\xbc\x43\x9b\x4e\x1c\x69\x84\x3d\xdb\xc1\x17\x4a\x67\xdd\x24\x5b\x69\xd5\x4b\xb6\x64\x2b\x90\x75\x90\x05\xd8\xe7\xb6\xb7\xae\x93\x97\xcc\x42\x57\x1d\x9b\x91\xd3\x65\xde\xcc\x9c\x01\x1c\xb8\xd4\x96\xd4\xe9\x43\x6c\x6d\xea\xf2\x36\x4a\x77\x70\xc3\x7f\xc8\x73\x50\xfa\xfb\x61\xea\x99\x14\xc9\xd8\xb4\xf5\xf8\x35\x6c\x1b\xd2\x1d\x6d\xae\x42\xf0\x23\x88\x66\x07\x38\x56\x35\x7f\x99\x54\x73\x52\xcd\xa7\x56\x4d\xa1\x38\xec\x84\x4a\xca\x87\x47\xeb\x66\xbd\xed\x11\xda\xf9\x99\x41\xf7\x6f\xb8\x71\x90\x80\xf0\x68\x72\xde\xdc\x57\xc6\x38\xbb\x97\xdf\x88\xb2\xbf\xd2\x71\x91\x81\x42\x4b\x6a\x4f\x9f\xd7\xd4\x27\xbd\x7f\x02\xbd\xff\x82\x82\xd2\xf7\xf9\x24\xf6\x93\xd8\x7f\x95\xff\x90\x2f\x8f\xd0\xfa\xf9\xa4\xf5\x93\xd6\x1f\xa5\xf5\xe3\x52\xca\x75\xdc\x9f\x76\x7d\xd1\x1c\x58\x1c\xa3\xe6\x9f\xbf\xbd\x12\x71\xee\xcd\x1f\x64\x42\x2a\xeb\xef\x4b\xc1\x03\xbe\x93\x64\x3f\xb5\x64\x7f\x4d\x1d\x9c\xf4\xfa\x07\xd2\xeb\xc1\x3f\xe7\xc7\x08\xf6\x8b\x49\xb0\x27\xc1\x7e\x42\xc1\xb6\xa8\x0d\x2c\xad\xf8\x08\xcb\xd5\x1e\xe1\x01\xf1\x76\x76\xdf\xf8\xcf\xd8\x37\xce\x21\x5e\xea\x24\xe9\xf0\x9d\xa4\xf2\x28\xa9\xe4\x10\x8f\x55\xc6\xa4\x96\xff\x87\x5a\x9e\x54\xc7\xba\xbe\x73\x2d\xe5\xbc\x8e\x66\x65\x6e\xa8\x8d\x53\xc8\xd8\x5f\x60\xac\xd0\xee\xec\xf9\xbc\x84\x71\x2f\xab\x6f\xd7\x66\x53\x5a\x22\x4b\x82\xaf\xcb\x08\x59\x2e\x19\x0a\x95\x0c\xbf\xe4\xb7\x1f\xb6\x7d\x21\x36\xeb\xeb\xb2\x6b\xa9\xd2\xf7\x67\xd1\x45\x56\x05\x9d\xa2\xae\x40\xda\xd9\x97\x8b\x78\xe3\x87\x64\xb5\xbb\x62\xbf\x14\x0a\xc1\x6c\x99\x0c\x0b\x91\x5e\xb4\xa5\xd6\xf8\xe6\x5f\xce\xc3\x97\x28\x6b\x9f\x2f\x82\xe7\x28\x7c\x39\x9f\x85\x2b\x41\x27\xce\x83\xe7\xa8\xfa\x96\xdf\x75\xf5\xa3\xf6\xc3\x96\x56\x01\xab\xc7\xcb\x6f\xe1\x14\x25\x99\x56\x02\xb5\xa9\x7f\xa0\xa4\x85\xd7\x68\xfa\xea\xf2\x3a\x7b\xf1\xf7\xe6\x5d\x15\xed\x6d\x93\x91\x68\x76\x72\xf8\x27\x00\x00\xff\xff\x22\xec\x09\x54\x3e\x21\x00\x00")

func es_dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_es_dashboard_dataJson,
		"es_dashboard_data.json",
	)
}

func es_dashboard_dataJson() (*asset, error) {
	bytes, err := es_dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "es_dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x46, 0xe9, 0xd1, 0x18, 0xcb, 0xff, 0x63, 0x5e, 0xd6, 0x30, 0x59, 0x59, 0x16, 0x1e, 0xc9, 0x1c, 0xa7, 0x6b, 0xe1, 0x2e, 0x3, 0x1b, 0x66, 0xeb, 0xb9, 0xfa, 0xec, 0xe6, 0x5f, 0xb2, 0x5a}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xb1\x6e\x83\x30\x10\x86\x77\x9e\xc2\xca\xd8\xc1\x4b\xe6\x4e\x1d\x3a\x74\xcc\x58\x55\xd6\x61\x9f\x52\x07\xb0\xad\xbb\x33\x2d\xaa\xfa\xee\x15\x60\xa4\x40\x28\x8c\x7c\xf7\xfd\xfc\xf8\x1c\xb3\xa4\x2c\xea\xe4\x03\x0b\x04\x8b\x7c\x52\x3f\x95\x52\x3d\xb4\x19\xd5\xb3\x82\x2f\x36\x0b\xd2\x90\x92\x61\xa4\x1e\xe9\xfd\xe9\xa3\xfa\xad\xaa\x45\x76\xf5\x4b\x9b\x59\x90\x1e\x65\x72\x6c\xec\x0c\x0d\x06\x97\xa2\x0f\xa2\xb7\x2f\x78\x93\x07\x57\x0c\x72\xd4\xa4\x8d\xe0\x04\x59\xcc\x34\xb9\xb1\x3b\x14\xf2\x96\x2f\x53\xd3\x83\x90\x32\x57\x7e\xe9\x3e\x21\x51\xfc\x1e\x0e\xcc\x89\xef\x78\xd8\x02\x8b\xb7\xff\x7d\xb9\x60\x46\x20\xfb\x69\x5c\xec\xc0\x07\x8d\x7b\x05\xf8\x5c\x67\xdb\xa0\x3c\x66\xf0\xd9\xcc\x48\x2f\x33\x6b\xef\x0d\x57\xc5\xc7\xa7\x94\x87\xce\x80\xb5\xc8\x6c\x1a\x1c\x34\x9f\x1b\x1c\x2a\xa5\x18\x03\x7b\xf1\xfd\x98\x2f\x94\x71\xbd\xd6\x0b\xda\x4c\x5e\x86\x57\x8a\x39\xed\x94\x29\xd8\x5c\x47\xae\x5d\x7d\x6f\xdf\x62\x3d\x1f\xc4\xd1\x22\x6f\xb1\x5e\x5d\xa9\xbf\x00\x00\x00\xff\xff\xb4\xcb\x68\xc9\x8f\x02\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xd3, 0x1a, 0x16, 0x5d, 0xd1, 0x15, 0x9f, 0xa7, 0xb7, 0x84, 0x61, 0x5e, 0xa6, 0x4, 0xdf, 0x83, 0xe3, 0xac, 0x83, 0xab, 0xad, 0xfd, 0xfa, 0xb8, 0x20, 0x65, 0xff, 0xa1, 0x47, 0x1d, 0xd3}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xcd\x6e\xdb\x30\x0c\xc7\xef\x79\x0a\xc1\xbb\x34\x87\x19\xe9\xb2\x62\xbb\xe4\xb8\xe7\x10\x68\x99\x71\xd4\xe8\x6b\x24\x95\x36\x1b\xfa\xee\x83\x9d\x06\xb0\x6b\x2d\xee\x21\x3e\x19\xe2\x9f\x3f\x52\x14\xc9\x13\x90\x85\xc6\xa1\xaa\x8c\xcb\x2c\x48\x3a\x80\xc7\x4a\xfd\x5d\xbd\xad\x56\x73\xe3\x29\x19\x6d\xdb\xff\x9a\x39\x37\x01\xa5\xa4\x80\x94\xb4\x0d\x2c\x10\x0c\x6a\x13\x73\x90\xdb\x12\x39\xa7\x79\x16\xd0\x61\x90\x45\xcc\x54\x34\x02\x7d\x51\xbf\x1c\xb0\x58\xc3\x08\x64\x0e\xea\xea\xc3\x63\x77\xe4\xa5\x00\x63\x45\x31\x4d\x64\x7d\x42\x62\x1b\x43\xd1\x94\x4c\xe9\xd8\x10\x82\xa0\xa6\xe8\xe6\xc0\x44\xf1\xf5\xbc\x10\xb4\x6d\x96\xf2\x1e\x2b\x30\x74\x36\x2c\x40\x1c\x30\x97\x14\xd7\xc7\xb6\x2d\x06\xb1\x7b\x8b\x54\x52\x5d\x22\x8c\x0b\xa1\x54\x9f\xb8\xda\x29\x0f\xe9\x01\xc2\x79\xbd\x52\xaa\xc5\x3d\x64\x27\x6a\x37\xd8\x95\xaa\x20\x53\x24\xf8\xea\xcf\xfc\xdb\x55\x6a\xf8\x76\xaa\xfa\x59\x6f\xea\xe1\x48\x5f\xec\xf5\xb6\xde\x3c\xd5\x9b\x6a\xe2\x93\x22\x4b\x47\x38\x38\xee\x54\xf5\xf8\xbd\xfe\xd1\x0b\xde\x66\xa9\x65\x46\x2a\x76\x79\xdb\xe8\x04\xcc\x2f\x91\xe6\x0d\x3c\x5c\xa9\xff\xd5\x09\x69\x1f\xc9\x0f\x45\xb2\x81\x6d\x77\x90\x62\x9d\x12\x10\x78\x14\x24\x9e\xdc\xde\x59\x96\x87\xbe\x04\x2c\x64\x43\xb7\x5e\x4f\x1d\x99\x0f\x3a\xe5\xc6\x59\xa3\x8f\x78\x9e\x71\x3d\x88\x20\xf9\xc8\xa2\x9d\x35\x18\x18\xf5\xde\x16\x5a\xa6\x71\xd1\x1c\x75\x8b\x27\x3b\x6a\x98\xf7\x1c\x86\x9a\x5e\xa2\x4f\x9e\xa0\xea\xd2\xb6\xba\x81\x61\xfb\x07\x59\x0f\xf3\xf5\x91\x16\xb2\x6f\x90\x26\xb4\xc7\xcd\x22\x6a\xe8\xeb\xfb\xa0\x20\xa5\xfb\x80\x3c\x0a\x59\xc3\x9f\x80\x3d\x2d\xc3\x9e\x63\x73\x1f\x10\x8e\x17\xd7\x27\x90\xdf\x3e\x20\x9f\x63\xa3\x19\xe9\xd4\x8f\xed\xed\x2d\x51\x52\x16\x17\x0e\x6f\x75\x93\xcd\x11\x45\xb7\xd9\x27\x9d\xc9\x96\x24\xf8\x2a\xfd\xb0\xb9\xab\xb6\x38\x77\xf0\x32\xf4\x42\xb1\x91\x7b\x1b\x61\x57\x5a\xa6\xbd\x09\xfc\x7b\xd8\x7f\x01\x00\x00\xff\xff\x2e\x21\xfb\x69\xc9\x06\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x7f, 0xd9, 0xbb, 0xb3, 0xa0, 0x29, 0x9f, 0xc1, 0x34, 0xfd, 0xed, 0x7c, 0x78, 0xc5, 0xc1, 0x85, 0x1d, 0x8, 0x33, 0x9, 0x48, 0x27, 0x52, 0x71, 0xea, 0x26, 0x67, 0xed, 0xac, 0xfc, 0xb3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".terraform.lock.hcl":    TerraformLockHcl,
	"cluster.tf":             clusterTf,
	"dashboard.yaml":         dashboardYaml,
	"dashboard_data.json":    dashboard_dataJson,
	"datasource.yaml":        datasourceYaml,
	"es_dashboard_data.json": es_dashboard_dataJson,
	"outputs.tf":             outputsTf,
	"variables.tf":           variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".terraform.lock.hcl":    {TerraformLockHcl, map[string]*bintree{}},
	"cluster.tf":             {clusterTf, map[string]*bintree{}},
	"dashboard.yaml":         {dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json":    {dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":        {datasourceYaml, map[string]*bintree{}},
	"es_dashboard_data.json": {es_dashboard_dataJson, map[string]*bintree{}},
	"outputs.tf":             {outputsTf, map[string]*bintree{}},
	"variables.tf":           {variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
