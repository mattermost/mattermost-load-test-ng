// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (9.066kB)
// assets/dashboard.yaml (228B)
// assets/dashboard_data.json (26.856kB)
// assets/datasource.yaml (261B)
// assets/outputs.tf (327B)
// assets/variables.tf (560B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xe3\xb8\x11\xfe\xee\x5f\x31\xd5\x2e\x70\x6d\x51\x4a\x4e\xe2\xcd\x26\x3d\xa4\xc5\xf6\x0d\x28\x70\xd7\x3b\xa0\x07\xf4\xc3\x22\x10\x28\x72\x2c\x13\x96\x48\x96\xa4\x9c\x68\xb7\xe9\x6f\x2f\x48\x49\xb6\x2c\xcb\x2f\xeb\xbd\x6c\xee\x0e\xcd\x7e\x31\xc8\x79\xe3\x33\x33\x8f\x86\x5c\x6d\xd4\x4a\x70\x34\x10\xd1\x07\x1b\xc1\xc7\x09\x80\x36\x6a\x2e\x0a\x84\x3b\x88\xca\x92\x14\x8a\x72\x87\xd6\x45\x13\x00\x83\xb9\x50\x12\xfc\x4e\x65\x09\x52\xeb\xc8\xa5\x5f\x5f\xa1\xb1\x7e\xe3\x0e\xa2\xff\xfe\x01\x2e\xe3\xd9\xdb\x68\xf2\x34\x99\x18\xb4\xaa\x32\x0c\x83\xed\x74\x89\x75\xaa\xa9\x30\x11\x44\x4b\xac\x1b\x57\x7e\x4d\xd2\x12\x21\xd8\x7c\xfd\x71\x45\x4d\xcc\x8a\xca\x3a\x34\x61\xfd\x89\x2c\xb1\x0e\x4a\x3e\xae\x2a\x2b\x04\xf3\x76\xe0\x0e\x7c\x84\xbf\xf6\xe2\xd6\x2e\xd2\xcd\xce\x6f\x76\xfd\x0a\x69\x1d\x95\x0c\x23\x88\xa8\xd6\xa9\x45\xb3\x42\xd3\xb8\x77\x34\xb7\x70\x17\x7e\x02\xfc\xc3\xc7\xb1\x27\x0a\xaa\x35\x79\xfd\x91\xa9\x4a\xba\x58\x48\x8e\x8f\x4f\x3e\xa0\xa7\xc9\x04\x80\x29\x29\x91\x39\x7f\xfc\xc6\xce\x2b\xf8\x61\x81\xc0\x71\x4e\xab\xc2\x41\x65\xd1\x84\x13\xce\x95\x01\x55\x19\x78\xf7\xed\xdf\x83\x98\xab\x75\x70\x67\xed\x22\x0a\x0b\x5e\x32\x20\x9b\x55\xd2\x55\xcd\xda\x42\x59\x07\x77\x60\xb1\x98\xc7\xed\x21\x85\xee\x3c\xd3\x52\xc0\xe6\xef\x0e\x22\x5a\x0a\x32\x9d\xb3\xcb\x29\xe7\x17\x9c\xce\xa6\xd7\x6f\x6f\xa6\x59\x04\xaf\xe0\xe2\x26\x9e\xce\xe0\x9b\x1f\xfe\x39\x01\xe8\xe0\x48\xbb\x00\xd8\x9b\xf8\xb1\xa0\x26\xc7\x08\xfa\x7f\xaf\xe0\x5d\xf1\x40\x6b\xeb\xe3\x82\xb5\x4c\x38\x06\x53\xd2\x0a\xeb\x50\xb2\x7a\x3b\x87\x21\x8c\x7e\xae\xe3\x25\xd6\xb1\xe0\x01\xa6\x4a\xba\x5e\xb0\x1e\x63\x9f\x8e\x75\x38\x41\xc0\xd7\x92\x66\xa9\x45\x56\x19\xe1\xea\x34\x37\xaa\xd2\xa9\xe0\x3e\x4b\xef\x03\x22\xd1\xeb\x8f\xde\xc1\xb6\x84\xb7\x14\x0b\xfe\x14\xfd\xee\xb0\x4c\x9a\x2b\x6b\x45\x23\xea\x11\xbc\x9f\x34\xe5\xbe\x12\xbe\x7c\x7d\x13\xf8\xb2\x8a\xda\x44\xb6\x45\xd4\x0b\xb8\xa4\xce\xa1\x29\x95\x75\x69\x21\x18\x4a\x8b\xa9\x57\x08\xd2\x1c\xad\x13\x92\xba\xb6\x0f\x92\x85\x2a\x31\x69\x72\x99\x6c\xf4\x7a\x26\x48\x6b\x62\x5d\x49\x5b\x81\x18\x2c\x95\x43\x82\x8f\xc8\xba\x78\x84\x2c\x84\xc4\x35\x12\x00\xd1\xc3\xc2\xf7\xe9\x7b\xf8\x15\x90\x39\x24\x2b\x6a\x92\x42\x64\x09\x2b\x54\xc5\x93\x0e\xd8\x24\x53\xca\x91\xb9\x90\xc2\x2e\x90\xc3\xfd\xd7\xc0\x15\x20\x5b\x28\xf8\xea\x5f\x54\x38\x21\xf3\x26\xa7\x5e\x89\x08\x29\x5c\x1c\xc7\x5f\x7d\x0d\xb6\x40\xd4\x70\xe1\xa5\x25\xb6\xb8\x7a\x8f\x39\x3a\x20\x44\x2a\xc2\x16\xc8\x96\x84\xa1\x71\x62\x2e\x18\x75\x08\xe4\xdf\xdf\x01\x81\x85\x73\xda\xfe\x3e\x49\xec\x15\xc1\x8a\x3c\xa0\x75\xe4\x22\xa6\x25\xfd\xa0\x24\x7d\xb0\x31\x53\x65\xc2\x31\x8b\x8d\xca\x2a\xeb\x34\x1a\x86\xda\x63\x16\x0b\x95\xcc\x2e\xfe\xfa\xb7\x3f\xdf\xde\xfe\x25\xce\x75\x0e\xff\x01\x5b\x71\x05\x54\x3b\xcf\x01\x40\x39\x07\xb2\x89\x63\xbd\x17\xe2\xa9\xa1\xd2\x9c\x3a\xdc\xb3\x1f\xa0\x28\x0a\x2f\xa7\x8d\x2a\xd1\x2d\xb0\xb2\x44\x2a\xee\xf1\xd5\xca\x38\x34\xc3\x13\x7e\x07\xbd\x44\x71\x61\x5d\xec\xa8\x89\xf3\x0f\xd0\xb0\x43\xaf\x10\xb8\x7a\x90\x9e\x23\xd3\xca\x14\x4f\x1b\x33\x8e\x1a\x78\xfc\x30\xdf\x63\x66\x10\x68\xb9\xea\xc9\x41\xa2\xb4\x4b\x86\x12\x4b\x2e\x0c\x10\xdd\x6c\x6e\x84\x13\x4e\x1d\x6d\xb8\xe2\x3e\xd4\xd1\x21\xfa\x2b\xd1\x19\xc1\xec\x79\x14\xd8\x2a\xff\x72\x78\xcf\x5d\xc6\x0d\xed\x9d\xc8\x61\xe7\x72\x53\x0b\xdc\x9a\x9f\x76\x49\xe7\xff\xbd\xfe\xcc\xbd\x3e\x90\xb5\xb5\x75\x58\x32\x57\x00\x4a\x9a\x15\xb8\x5f\x72\xc4\x2a\xe5\x3c\x54\x6c\x21\xb2\xb9\x92\x8e\x29\x39\x17\xf9\xc5\x00\xb5\x0e\x18\x5e\xc4\xb9\xa1\x73\x2a\x69\x00\x43\x59\x9b\x18\x2c\x90\x5a\x4c\xda\xf5\xf4\x3a\xbe\x8e\x2f\x53\x5a\xf2\xeb\x59\xcc\x31\x1b\x04\xc0\xf5\x32\x07\x22\xe0\x34\xe9\xcd\xc1\x38\xc5\x52\x49\x62\xd0\x53\xd3\xb1\xe3\xb7\xc6\x49\xcb\x0b\x03\x69\x34\x2b\xc1\x86\x42\x60\x1d\x35\xee\x54\xe2\xd1\x46\x3d\xd6\xe7\xd1\x4e\x50\x6d\x48\x67\xd8\xf9\xdb\x7f\x7b\x79\x60\xa7\xf7\x77\xf4\xca\x59\x37\x01\x79\x1f\xd6\x2a\x26\xa8\xc3\x74\x4d\x3c\x29\xe5\xdc\xa0\xf5\x01\x3b\x53\xe1\xb9\x44\x10\x8e\xd2\xcc\x1e\x0d\x68\x6b\xd6\xd9\x4b\x38\x2f\x47\xb2\x3f\x07\x82\x3a\x97\x18\x64\x2e\xe4\xe3\x8f\xd3\x3a\x63\xa6\x4c\x19\x10\x40\xc7\x92\xb0\x9d\x58\xe1\xd0\x92\x46\x83\x27\x6d\xf2\x06\x4a\x85\x04\x32\xb7\xbb\x5a\x74\x45\x45\xe1\x15\x93\xfe\x84\xb0\xcf\xf6\x46\x66\xd0\x9a\x83\xde\x34\xdc\xa6\x5d\x9f\xf5\xfa\x74\xb8\xd4\x5e\x08\xb7\x67\xf7\x41\xf7\xf8\x96\xe5\xd9\xee\x1c\x2f\x38\x4a\xff\xb9\x40\x33\xd6\xaa\x63\xad\xce\xb3\x91\x3b\xd6\x3a\xa4\x5d\x73\x4d\xd7\xf4\x8e\xe2\xe3\xe8\x7e\x86\x4b\xc7\x26\xa8\x82\x5a\x7b\x2c\x70\x2f\x33\x01\x40\x0f\xec\x90\x25\xf6\x29\x35\xc2\x9e\x36\xb4\x2e\xea\x54\x94\x25\x72\x4f\x1e\x45\xdd\xd7\x6a\x59\x83\x56\x4e\xa5\xa5\x90\xca\xa4\xed\x8d\x39\xad\x74\x6e\x28\xf7\x7d\x34\xa7\x85\xc5\x5d\x16\xed\x1d\x2f\x82\x68\x73\xc0\x36\x33\x23\xe8\xec\x45\xd7\xc3\xe9\xc7\xc5\x8c\x5a\xec\x4d\x3b\x7b\x14\x1a\xf9\x92\x86\x95\x35\xd1\x6c\xa1\xd0\xad\x6e\xe4\x34\xb5\xf6\x41\x19\xbe\x2d\xd7\xad\x4e\x00\xec\x52\xe8\x74\x2e\x24\x2d\x52\x2b\xa9\xb6\x0b\xe5\x7a\xf8\x8c\x60\xb8\xde\x1c\x4b\xcb\x81\x7c\x34\x3f\x3a\x9c\x07\xe2\xdb\x9b\xef\xc7\x8d\xdc\x1f\x9e\xf8\xc6\x39\x9e\x67\x81\xe0\xef\x0f\x7e\x0e\xbb\x27\x95\x94\xe6\x28\xdd\xa7\x3e\x45\x78\x9d\x93\x1f\x23\xbe\xd8\xb4\xbd\x67\xc2\xf6\xa9\xac\xca\x53\x47\xec\xf1\x67\x82\x6d\xb8\x5a\x82\x39\x23\x37\x41\xbd\x4d\xcf\x2f\xe4\x0b\xd7\x5d\x56\x5d\xa9\xb7\x2f\xa8\xe1\x46\x1a\x40\x3b\x72\x3f\xdd\x68\x6e\xf6\xb6\xae\xa3\xe1\x01\x90\x78\x53\x44\xe6\xbf\xdd\xb7\xb1\x51\x36\x65\xdf\xe6\xa1\x01\x71\x3b\x3d\xcd\xf3\x5c\x03\x7e\x8f\x9c\x0e\xbd\xc8\x75\x06\x48\x63\x60\x12\x1e\x61\x98\x11\xba\x7b\x84\x79\xa7\x35\x74\x42\x10\x84\x02\xf8\x5d\x41\x75\xf4\x09\x23\x0e\xc2\xfb\x90\x90\x79\x98\xfb\x9a\x82\x98\x1b\x55\xa6\x5a\x19\x17\xa2\xba\xbc\x6c\x1a\x4c\x75\x4b\xbd\x45\x6d\x94\x53\x4c\x15\x6d\xfc\x8e\xe9\x06\x08\x26\xb8\x49\xb3\x42\xb1\x65\x53\xa6\xd3\x38\xfc\x4b\xa6\xd1\x7d\x3b\xe1\x1e\xf2\x78\x33\xbd\x7e\x33\xe2\x73\xbd\xfc\xe3\x7b\x0d\xc6\xdf\x0e\x7c\xf6\x16\x37\x1e\xfb\xfe\x5e\xc1\xb7\xb4\xce\x10\x0c\x5a\x7f\xf3\x75\xa0\x64\x51\x07\xab\xf0\xfd\xfa\xa2\x05\xed\x3d\xe2\x8f\xad\xca\x9f\x2a\x07\x0b\x2a\x79\x0d\x4d\x97\x39\xba\xf4\xbd\xd2\xbe\x45\x5b\x78\x10\x6e\xa1\x2a\x07\x25\x95\x15\x2d\x8a\x1a\xac\x5d\x10\x2f\x21\xa4\x53\xe0\x16\xd8\x1a\x8c\x3f\x1b\xe8\x06\xbe\xdb\x8b\xe9\x74\x07\xec\xc1\x56\x1f\xf0\x21\xe8\xdb\xc5\x7d\x80\x95\xfa\xcf\x03\x5d\x70\xb8\xbf\x08\x76\x83\xea\xd6\x06\xe9\x27\x17\xa7\x65\xff\xa4\xb6\x6c\x1f\x4e\x3f\xa3\x3b\x49\x6b\xe1\xe4\x26\x6d\xe4\x4f\xec\xd5\xe3\xf9\xbc\x99\xbe\x9d\xed\xc9\xe7\x7a\x6b\x24\x9f\x15\xff\xd4\x7c\x76\x4f\xd1\xa7\x16\xda\x99\x81\x7d\x7a\xa1\x9d\x11\xd8\x2e\xdd\x0c\xb6\x5e\x0a\xb1\x73\x02\xfb\x7c\xc4\xbe\x70\x5b\x1e\xeb\x4b\x9e\xf5\xfa\x71\xff\x9d\x6a\xf8\x95\x3c\x01\xe1\xab\xab\xe9\xf5\x1e\x84\xd7\x5b\xcf\x80\xf0\x09\x91\xbd\x99\x5d\xed\x7e\x77\x07\x5b\xcf\x10\xd9\x09\x24\xb9\x19\xe5\x4f\xe1\xc7\x30\xc4\x1f\x9d\x5f\xbe\xe9\xc8\x2f\xc8\xff\xac\x46\x99\x83\x53\xc5\x6c\xba\xf3\x71\xed\x2d\x8e\x4f\x15\xfe\x76\xd2\x61\xda\x5e\x09\x83\x97\x9f\xd6\xb7\xb2\xfb\x5f\x92\xa3\x8d\xd9\x0a\x7e\x5a\x77\xbe\xc4\xd4\x79\x3b\xbd\x1d\xc3\x71\xbd\xfc\x3c\x5e\xaf\x76\x2b\x64\x6b\xf9\x7c\xaf\x3f\xad\x7a\x69\x9e\xb7\x4f\xa5\x8d\x20\x7d\x9c\x36\xbe\xf7\x62\xcf\xc6\x16\x37\x63\x30\xdd\x7c\x5e\x5a\x5e\x86\xa0\xbe\x6c\x29\xfc\x2f\x00\x00\xff\xff\xd6\xee\x1f\x88\x6a\x23\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0x2b, 0x68, 0xbb, 0xb5, 0x70, 0x5, 0x6d, 0xed, 0x54, 0x58, 0x56, 0xd3, 0x1f, 0x56, 0x23, 0x32, 0xa1, 0x27, 0x92, 0xb7, 0xc4, 0xf2, 0x59, 0x96, 0x5c, 0x3, 0x72, 0xf4, 0xcc, 0x98, 0x6e}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x4e\x03\x41\x0c\x44\xfb\xfd\x8a\xe9\x52\xa1\x0b\xa2\xdb\x9a\x26\x35\x0a\xbd\x0f\xfb\x12\x4b\xce\x7a\x65\x6f\x0e\xf1\xf7\x68\xaf\x40\xa2\x9d\xf7\xe6\x51\xd7\x4f\x89\x54\x6f\x15\xaf\xa5\xf4\xf0\x5d\x59\x22\x6b\x79\x41\xa3\x87\x54\x9c\x92\x1e\xdd\xe4\x54\x00\x8f\xdb\x85\xa7\x07\x6c\x6e\x2c\xf1\x8f\x8e\x9f\x2e\x15\x9b\x9a\x14\x80\x35\x69\x35\x79\x17\x93\x71\xc4\x37\xb2\x9c\x40\x58\xc7\x24\x15\x23\x9e\x73\x78\x76\xa6\x21\x97\x36\x24\x76\xb2\x0f\xf9\xf2\xc6\x59\xf1\x76\x3e\x17\x80\xcc\xfc\xfb\xaa\xd7\xc3\xc9\xbf\x8f\xf7\x19\xcd\x5a\x00\xa0\xd3\xb8\x57\x2c\x3b\xc5\x62\xba\x2e\xb7\xa0\x8d\x1a\x2d\x4c\x79\x5f\x9d\x82\xf3\x37\x00\x00\xff\xff\x94\x42\xcd\x38\xe4\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x3e, 0x13, 0x14, 0xd7, 0xd7, 0xbd, 0xed, 0xe7, 0xca, 0xfc, 0xe7, 0x3a, 0x3a, 0x0, 0xc1, 0x74, 0x2d, 0xef, 0xf0, 0x9d, 0x47, 0xe0, 0x99, 0xba, 0x23, 0x47, 0x12, 0x37, 0x12, 0x52, 0xd9}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6b\x4f\xdc\x3c\xf6\xc0\xdf\xf7\x53\x58\x56\xff\x7f\x0d\x15\xf0\x4c\x06\xa6\xa5\x48\xab\x15\x6d\xd5\x6e\xa5\xb2\xdb\x2d\xed\xb3\x2f\x5a\x14\x79\x92\x33\x19\x0b\xc7\x4e\x6d\x87\xcb\x83\xd8\xcf\xbe\xb2\x93\x49\x9c\x0b\x0c\x8c\x80\xe1\xe2\xbe\x28\x93\x63\xc7\xb1\x8f\xcf\xe5\x17\xc7\x93\x39\x7f\x81\x10\x26\x9c\x0b\x4d\x34\x15\x5c\xe1\x5d\x64\x44\x08\x61\x46\x95\xc6\xbb\xe8\xa7\x3d\x42\xa5\xd4\x96\x4c\x72\xca\xf4\x67\x8e\x77\x51\xb0\x5e\x4b\x63\xa2\x89\x12\xb9\x8c\x00\xef\x22\xbc\xb1\x81\x3e\x49\x32\x25\x9c\xa0\x8d\x0d\xec\x54\x03\x4e\x26\xcc\x54\xd1\x32\x07\x47\x3e\xa3\x71\x8f\x94\x46\x82\xbf\x17\x4c\x48\xd3\xa6\x4c\x26\x64\x30\x5c\x47\xa3\x20\x58\x47\xa3\xf1\x78\x1d\x05\x6b\x6e\xd3\x9c\xa4\xf6\xda\x7b\xf5\x70\xd0\xff\xa3\x3d\x06\x52\x2b\xb7\x9e\x3e\xcb\x6c\xbd\x98\xa8\xd9\x44\x10\x19\xe3\xb2\xec\xc2\xfe\x3d\x7c\x81\xd0\x85\xa9\x8e\x21\xa6\xba\xd5\x5b\x9c\x70\xd0\x9f\x63\xbc\x8b\x46\xe3\xed\x51\x21\x91\x24\x9b\x7d\x17\x82\x69\x9a\xcd\x75\x82\x69\x5c\x7f\xd4\x20\x6d\x6f\x8c\x64\xbc\xf3\x7a\x7b\x34\x1c\x8e\x86\x3b\x3b\x5b\xb6\x94\x51\x7e\x64\xb4\xfe\xf3\xd0\x1e\x66\x84\x03\x53\x95\xde\xe7\x5a\xc7\x84\x51\xa2\xac\x26\xec\x14\x5d\xcc\x87\x83\x27\xc4\x4a\xa6\x84\xa9\x4a\x71\x76\x64\x5f\x80\x27\x7a\x66\xae\x39\x6c\xc8\xa1\xaf\xba\x33\x75\x3c\x67\xac\x2a\x99\x52\xc6\xdc\x79\xb6\x82\x4f\x92\xc4\x14\xb8\xb1\x8e\xba\xe9\x44\xd2\xf8\xab\xa8\xed\xa7\x98\x54\xbc\x8b\x76\x1c\xcd\x9f\x98\xb6\x46\x8e\xe0\xd4\x6d\x03\x21\x7c\x66\x8e\xe7\xb3\x51\xb5\x3d\xa3\x71\x0c\xfc\x00\x24\xed\xe9\x7c\xa1\xe9\xb7\xd5\x31\x83\x04\x78\xdc\xec\x07\x39\x4e\xda\xe7\x21\x84\xa3\x5c\xca\x62\x18\xed\x92\x94\x9c\xf6\x49\x29\xef\x91\xaa\x99\x38\xe9\x1a\xae\x16\x9a\xb0\x9e\xda\xc7\x84\xe5\xf5\x20\x3a\x23\x65\x94\xdb\x52\xb7\x35\x2b\x3c\xa1\x71\x31\x99\x95\xd4\xcc\xd3\x57\x41\xb9\xde\x17\xd6\x73\xac\xa0\x32\x73\x2c\xb2\xa6\x3f\x57\x13\xfd\xa5\x32\xb8\xce\xd5\x33\x90\x11\x70\x4d\x12\xe8\x68\x39\x33\x57\x32\xf3\x9e\x9b\x73\x47\x4d\x79\x77\x52\x24\xf0\x18\x24\x58\xb7\x9d\x32\xa1\xeb\x7e\x29\x3b\x8b\xff\x3a\x06\x29\x69\x0c\xb5\xe5\x17\x85\x19\x89\xa0\xcf\x70\x95\x26\xd1\x51\xe7\x2a\x4a\x43\x96\x41\xfc\x85\xf2\x6e\x87\x35\x91\x09\x68\xe5\x44\x30\x37\x86\x19\xe7\x3e\xcd\x6c\xf7\x54\x9e\x0e\x28\x8f\x24\x10\x05\x83\x94\x68\x0d\x32\x15\x4a\x87\xf1\x24\x54\x5a\x48\x08\x35\x4d\x21\x8c\x44\xce\xf5\x79\x0a\x7a\x26\xe2\xbf\xfd\xf7\x17\x7e\xa9\x45\x66\xaa\x58\xf9\x2f\x7c\xf1\x73\x9c\x1e\xae\xad\xa1\xc9\x19\x1a\x14\x95\xdc\xc8\x54\x59\xe5\x47\x21\x53\x62\x0c\x0e\x9f\x97\x6d\x5d\x5c\x34\xeb\x49\x98\xda\xe8\x82\xf7\x70\x25\xbe\x28\x3f\xd5\x7a\xd2\x33\x09\x6a\x26\x58\xdc\xd2\x9f\xe9\xea\x47\x29\xd2\xb6\x1b\x1b\xf9\x37\x48\x4a\x83\x68\x9d\x70\x30\xa3\x53\xdd\x3d\x43\xdb\xb8\x87\xbf\x8b\x0c\x05\x43\xf4\xe1\x1d\xfa\x9d\xdb\xa9\x33\x63\xb4\xa3\xae\xe7\x54\x57\xc1\xef\xdc\xf5\x0b\x22\x21\xee\x7a\x86\x12\x52\xb7\xbc\xde\x3a\x45\x38\x0f\xcb\x94\xc7\xf4\x98\xc6\x39\x61\xb8\x63\xa1\xf3\x3a\x36\xe6\xd6\x1d\x38\x25\xa7\xb4\x65\xea\x93\x3c\x3a\x2a\xe6\xdf\x1d\x97\xf1\xe2\xd2\x5d\xcc\xd0\x7b\xb2\x47\xab\x76\xbf\x77\x57\x5e\xdc\xe3\x44\x67\xe4\x14\xae\x30\xbb\x69\x65\x02\x6a\x66\x34\xd1\xb4\x12\x32\x01\xd6\xe9\x84\x29\x10\xc9\x3b\xa2\xa0\x99\x72\xab\x40\xd5\xa9\x5e\x44\xaa\x8e\xd8\x19\x4c\x6d\x5c\xeb\x8f\xa4\x9f\x1d\x27\x38\xeb\x4e\x3a\x61\x34\xe9\x8b\xd1\x56\xfe\x05\x8e\xab\x4e\x37\x12\x7e\xa9\x82\x27\x90\x6b\xdf\x2e\xca\xb5\x0d\xc1\xd2\xc9\xf6\x8d\x4f\xb6\x3e\xd9\xde\x6a\xb2\x25\x19\x75\xf3\xec\x8c\xf0\x98\x81\xac\x12\xad\x29\xee\xc9\xb4\x65\xb5\x56\xaa\xa5\x5c\x83\x3c\x26\xec\x23\x89\xb4\xbd\x71\xd8\x5a\x90\x89\xcb\x66\x1e\x7c\x2a\xd6\x45\x2a\xde\xfb\xfa\xf9\x96\x73\xf1\xe8\xd9\xe7\xe2\x54\xad\x3e\xc1\xf9\x44\xbc\xba\x44\x8c\x99\x20\xb1\x06\xa5\x37\x4a\x51\x55\xad\x67\x0d\xa0\x90\x4b\x69\x83\x4b\xb3\xd1\x55\xdc\x2f\xef\x2c\x91\xc2\x9f\x4b\x06\x1f\xb9\xd2\xa3\x56\xc4\xed\x24\xf5\x48\x70\x0e\x91\x86\xf8\x9e\x32\xfb\xf8\x09\x65\x76\x2a\x89\x6e\xa4\xf4\xcc\xfc\x67\xe7\xf5\x9c\x72\xa5\x09\x8f\xc0\xe6\x73\x05\xf2\x18\xa4\x49\xe4\x41\x7a\xd8\x4a\xdd\x75\xac\xb3\x30\x50\x0c\xb2\x3f\xbb\x9b\x4a\xe3\x4b\xca\xaa\xcc\x1f\x2c\xc8\xfc\xf3\x8e\xb5\x53\x7f\x0a\x5a\xd2\xc8\x26\x86\xbe\x01\x5d\xca\x09\xcd\xe0\xa9\xc1\xa4\xe1\xf1\xc2\x08\xdf\x80\xa3\xe5\xd4\xb8\x52\x3d\x7e\xef\xea\x64\x39\x05\xbe\x5b\xa4\xc0\x55\xd2\xd7\x3f\xf3\x74\x02\x12\x89\x29\xda\x07\xa5\x48\x02\x0a\x65\x20\xd1\x01\x44\x82\xc7\x0b\xf8\x2b\x55\xdf\x40\x09\x96\x97\xab\xc0\xdd\x98\xe8\x97\x4a\x8a\x7f\x37\x27\x1f\xfc\xbe\xc1\xbf\xc8\x43\x1a\xf2\x90\xb6\x7a\x48\xeb\x2c\xb4\xbc\x5d\x82\xd2\x1c\xfd\x78\x4c\xf3\x98\x76\x27\x98\x36\xd3\x3a\x0b\x25\xfc\xce\x41\x69\xf5\xa4\x78\xcd\x8e\xcc\x46\x00\x75\xff\xd8\x76\x43\xb5\x3e\x0a\x7e\xbb\xae\x42\x1f\x34\xc6\x7d\x2b\xe7\xc4\xc3\x9b\x87\xb7\x9b\x74\xd5\xc3\xdb\xf3\x81\xb7\xf6\x0a\x5b\xf0\x7a\x09\x78\x7b\xed\xd9\xcd\xb3\xdb\xad\xb2\x5b\x3b\x15\x9f\xc0\x44\x09\x1b\xfd\xaf\x04\x8c\xc7\x86\x6c\xed\x61\xdd\x21\xb6\x2d\xa9\xd1\x87\x46\x6b\x8f\x83\xbc\xea\x05\xb4\xf7\xf3\x20\x80\x3e\xc0\x31\x8d\x40\xa1\xc1\x7f\x60\x72\x60\x35\x3f\x2f\x34\x57\x58\xf3\x64\xe6\xc9\xcc\x93\x99\x27\x33\x84\x2e\x5b\x56\x0b\xde\x2c\x81\x66\x81\x47\x33\x8f\x66\x77\x85\x66\xf1\x24\x4c\x89\xd2\x20\xc3\xa8\xce\x64\x4f\x05\xd0\xae\x18\xdc\xfd\x60\xda\xcd\xb5\xfb\xd0\x60\xed\x96\xf4\xfa\xb8\x50\xcf\x7e\x17\x47\x0b\xb4\x6f\x07\x89\x3e\x10\x4d\x26\x26\x45\x7b\xbe\xf3\x7c\xe7\xf9\xee\xd9\xf0\xdd\xc2\xfd\xe9\xed\x95\xb7\xd1\xf6\x32\x78\xf7\x5c\xf8\x2e\xf0\x7c\x77\x4f\x7c\x77\xd5\xe3\xbd\x30\xce\x8b\xef\x77\x86\xca\x3e\x4e\x52\xa1\xca\xd3\xcb\x1e\xf6\x8d\xd3\xc3\x35\xf4\x07\x42\xe8\x66\x2d\x16\xdb\xe2\xaf\x68\xf3\x11\x31\xe4\x42\xdd\x2d\x4b\x92\xab\x24\x9e\x7d\x20\xdc\xee\xcc\x2f\x9f\x2f\xa2\xef\x6e\xf2\xf7\x78\x73\x27\x78\x73\x09\xda\x78\xaa\xf1\x54\xf3\xb0\x57\xad\x46\xe3\x25\xb0\x66\xec\xa9\xc6\x53\xcd\xad\x52\x4d\x22\xc2\x14\x52\xa5\x89\x56\x21\x61\x4c\x44\xe1\xe4\x4c\x83\xba\x84\x33\xfe\x08\x86\xa3\x6d\xfb\xdf\x2a\x61\x63\xcf\xf4\x73\xe3\x3a\xc8\x71\xc9\xe8\xee\x74\xb5\xca\xbd\xa6\x9d\xb8\x90\xf2\x5c\xc1\x5d\xe9\xb5\x7c\x69\x4a\xcb\x03\x6f\x57\xe1\x07\x66\x18\x77\xab\xf5\x85\x6b\x59\x37\xd0\xfa\x0c\x48\xf6\xf8\x95\xfe\x0f\x20\xd9\xdd\xea\xfc\xfd\xc3\xa6\xe9\x54\xc8\x33\xf4\x43\x91\x04\xd0\x80\x72\xb4\xff\xce\x3f\x0b\x5e\xdd\x5a\xe1\xfe\x3b\x8f\xd4\x1e\xa9\x1f\x14\x52\xb7\x17\x0a\xb7\xb6\x96\x20\xea\x60\xcb\x23\xb5\x47\xea\x5b\x45\xea\xee\xf7\x37\xa5\x88\x40\xa9\x30\xca\xf2\x6a\x8d\x6b\xe1\xd7\x01\x5e\xa1\x60\x38\x7c\x98\x4b\x7a\x8f\x63\x39\xee\xfd\xd7\x1f\xe8\x87\xa6\x8c\xfe\x65\x57\x17\xd1\x37\xa2\x01\x0d\xfe\xcf\x43\xc4\xea\x20\xe2\xca\xe9\x40\x1e\x2b\x90\xc7\x8a\xd5\x63\x45\x67\xa5\x6e\x29\xae\xd8\xf6\x58\xe1\xb1\xe2\x56\xb1\x22\x11\x61\x22\xa4\xc8\xb5\x99\x92\x47\xba\x8d\xac\x31\x86\x3b\xdc\x2d\x76\x1d\x5d\x3d\xdc\x4d\x61\xd7\xd1\xd2\x23\xd9\xfb\xf5\x49\xa0\x6f\xed\x81\x78\xee\xf2\x1b\xbd\x9e\x38\x68\xbd\x28\x9b\x35\xfe\x6a\xbc\xce\x8c\x3a\x18\x16\x2e\x80\x55\x34\x83\x94\xfc\x09\x52\x15\xa6\x3e\x2a\xde\x21\xae\xf4\x19\x2b\xdf\x49\x2e\x8f\x8a\x9a\x9a\x24\xf5\xdc\x3b\xfb\x27\x4a\xdd\x39\x92\x8d\x0c\xe4\x14\x57\x97\xd5\x90\x66\x8c\x68\xca\x93\xeb\xbc\xcc\x9d\x30\xf6\xa7\x31\xc1\xae\xbd\xd6\x44\xd2\x98\x4a\x0d\xa7\x76\x22\x83\x37\xa3\xcd\xad\x60\x33\xd8\xda\x0c\x86\xe3\xdd\x9d\xe1\xeb\x37\xcd\x59\x3d\x2e\x5b\xfd\xe9\x08\x51\xef\x69\x4e\x85\xc3\x3e\x4b\xba\x26\x4e\x9a\x8a\x30\xa5\x9c\x96\x51\xa4\xb0\xab\xb0\x70\xb0\xc1\x3c\x0f\x34\xde\x18\x5f\x2e\xe5\xbb\x01\x84\xf2\x88\xe5\x31\xec\xb1\x3e\x60\xaa\x9c\xaa\x48\x24\x6e\x53\x69\xce\x34\xed\xba\xf7\xfc\x9d\xf4\xdd\x13\x6a\xf6\xa9\xc3\x2b\x42\xf8\x77\x0e\xf2\xec\x7a\xbd\xaf\xed\x2b\x68\x48\x13\x38\x6d\x6d\x83\xc0\xea\x88\x66\x3f\x24\x3b\x38\xe3\x51\x5f\x7c\xed\xc6\x51\x4d\x12\x6b\x16\xea\xdf\x65\x7f\x5a\xc6\x31\xb7\xce\xc3\x96\xec\xb2\xea\x65\xb0\x2d\x46\xe7\x14\xe4\x0a\xbe\x17\x4d\xf5\x32\xe8\x6d\x18\xea\x1e\x63\xd7\xb2\xcc\x97\x61\x48\x18\xbb\x33\x6b\xb4\x43\x0f\x25\xa8\x9c\xe9\x81\x16\xd9\xd1\x20\x18\xae\xa3\xeb\xbd\x10\xf5\xe7\xcb\xf3\x30\x94\x84\x27\x10\xaa\x0b\xd5\x7e\xfd\xe9\xda\x8d\x6c\xba\x65\xa0\xfd\xc1\x77\x91\x39\x37\x5e\xca\x7a\x89\x55\x57\xc2\x5e\xf3\xbe\x2f\x75\x2c\x70\x92\xcd\x57\xf3\x77\xcd\xfe\xc2\x83\xcd\x57\x7f\x5f\xfb\x85\x37\x5f\xdd\xae\xe7\x34\x1c\x71\x91\xdf\x34\x2b\xaf\xc0\x6b\x14\xb0\xe2\x26\xad\xef\x09\xe7\x42\x97\xea\x38\xd1\xbd\x3b\x4e\xcf\x6b\xfb\xbb\xef\xe6\x5f\x91\xc7\xcc\x7f\x2f\xe0\x1e\x1c\x66\x09\x35\x2c\xf4\x94\xf2\xd7\x0f\x9e\x80\xa3\xd8\xbf\xf5\xef\xbc\x58\x7e\xaf\x58\x69\x5a\xdc\x0f\x61\x2e\x4e\x36\x82\xf1\x7c\x37\x2a\xd6\xa2\x14\xe2\xc6\x79\x19\x8d\x8e\xec\x12\x42\x79\x76\xa9\xc5\x70\x7e\x4f\xe8\xce\xac\x7b\xe3\x58\x21\xa1\x3d\xd8\x72\x0f\x82\x7a\x07\x2c\x1e\x3b\x9f\x03\xf7\x60\x6b\xe8\x96\x38\x37\x30\x23\xe7\x73\x50\xfe\xb4\xcd\xe1\x7c\x0c\xc6\x18\xba\x16\x77\xf9\x55\xdc\x86\x5f\xbb\x0d\xbb\x57\x19\x6d\xbb\x07\xce\xf2\xce\x9b\xd8\xed\xef\xbc\x2f\x0d\xf5\xfd\x25\xec\xb2\x08\x9e\x48\x71\xa2\x4a\x40\x72\xf6\x01\x54\x06\x8d\xbe\x82\xb4\x37\x11\x3c\x02\xb4\x2f\x38\xd5\x42\x1a\xc2\xb5\xf5\x73\xbb\xea\x86\x87\xc5\xbf\x20\x28\xa4\xc7\x15\x64\x6f\xbf\xb8\xf8\x5f\x00\x00\x00\xff\xff\x91\x82\x8f\x28\xe8\x68\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0x4e, 0xdb, 0xe1, 0x76, 0x8c, 0xcc, 0x70, 0xb5, 0xa0, 0x91, 0xea, 0x1d, 0xcd, 0x57, 0x20, 0xb0, 0x96, 0x84, 0xd0, 0x3d, 0xee, 0xa3, 0x43, 0x5, 0xbc, 0x49, 0xa9, 0x52, 0x39, 0x5a, 0x7d}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6a\xc5\x30\x0c\x45\x77\x7f\xc5\x85\x50\x3a\x3d\x4a\x57\xcf\x5d\xfa\x03\xdd\xf5\xe2\x9b\x44\xe0\x67\x1b\x4b\x4e\xfb\xfe\xbe\x24\x19\xda\x4d\xe8\x88\xc3\xd1\x84\xb9\x96\x45\x57\x2c\x9a\x89\x9d\xdd\xb4\x96\x20\x4d\xbf\xae\x31\xe2\x3d\x84\x09\x59\xcd\x51\x17\x24\x71\xb1\x3a\xfa\x4c\x83\x57\x68\x31\x76\x7f\x1b\x2d\x89\x13\x89\x8d\x25\x69\x59\xc3\x84\xef\x4d\xfc\xd5\x20\xbb\x68\x96\x7b\x26\xb4\xc0\x37\x9e\x82\xbb\x18\xc3\x3f\x53\x0c\x37\x14\x79\x30\x22\x57\x49\x4e\xf3\xdb\x45\x02\xe0\xcf\xc6\x88\xd6\xeb\x83\xbe\x71\x58\x00\x64\x9e\x69\x76\x2e\x7f\x9e\x01\xa8\x7d\xfd\x4c\x47\x27\x30\x7a\x8e\x78\x39\x8e\xd4\x3e\xb8\xc8\xc8\x1e\xe1\x7d\x1c\xa6\xfd\xef\x21\x80\x49\xfd\xc8\xba\xe8\x6f\x00\x00\x00\xff\xff\x28\x2d\xc4\x96\x05\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x32, 0xd1, 0xb3, 0x15, 0xd1, 0xce, 0x72, 0x63, 0xcd, 0xc3, 0x22, 0xc8, 0xa4, 0x4f, 0x76, 0x96, 0xc6, 0x74, 0x2d, 0xb3, 0xbd, 0xc7, 0x92, 0xa6, 0xb0, 0x44, 0xa8, 0x9e, 0xd0, 0x70, 0x89}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\xc8\x7b\x2c\xd4\x0a\x10\x8b\x9c\x65\x34\x89\xa7\xc5\xc2\xb1\x8d\x67\xdc\x2a\x42\xbd\x3b\x8a\xbb\x80\xca\x05\xb2\xcc\x7b\xff\xeb\xcb\x73\xa2\xe2\x69\x0a\x0c\x66\x0e\x55\x94\x0b\x46\x5a\xd8\xc0\xe7\x70\x19\x86\x6f\x48\x39\xa3\x8f\xa2\x14\x67\xc6\x39\xd5\xa8\x9d\x12\x12\x39\x65\x51\xa4\x23\x47\xfd\x45\x72\xd3\x7f\x35\x3f\x0d\x8e\x47\x1f\xfb\x31\x37\x25\x81\x44\xee\x19\xd7\x2c\x9e\xb8\x88\x4f\x71\x33\x00\x74\xcd\x0c\x23\x2c\x94\x07\x00\xc7\x07\xaa\x41\x61\x6c\x08\xc0\x50\x2d\xa9\xd0\xc3\xb2\xca\x47\x30\xd0\xbe\x11\xcc\x93\x7d\xb1\xed\x17\x5e\xb9\xdd\xd9\xc7\xbd\xdd\x99\x9b\x4c\x4e\xa2\xc7\xc2\x2d\x38\x82\x79\xb5\xcf\x76\xbf\x19\x97\x6e\x56\x15\x2e\x77\x5f\xd8\x4d\x98\x49\xe4\x9c\x8a\xeb\x98\xc8\x1b\xe6\x3a\x05\x3f\xe3\x3b\xaf\x1d\x5e\x48\x95\xcb\x92\x44\xd1\xa5\x73\xdc\x0e\x81\xb5\x84\xbf\xbc\xe0\x67\x8e\xc2\x78\xf0\xa1\x9f\xd2\x0a\xda\x29\xfb\xba\xaf\x00\x00\x00\xff\xff\xb4\x82\x23\x39\x30\x02\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xa1, 0xc8, 0x99, 0x32, 0x37, 0x1c, 0xdc, 0xb1, 0x38, 0xcb, 0x56, 0x9d, 0x23, 0xd7, 0xdd, 0x79, 0xb1, 0xd5, 0xda, 0x30, 0x2a, 0x2d, 0xb9, 0x4b, 0x8c, 0xef, 0x78, 0xdc, 0x9c, 0xc3, 0x2b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
