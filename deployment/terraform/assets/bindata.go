// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (9.041kB)
// assets/outputs.tf (327B)
// assets/variables.tf (560B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x8f\xdb\xb8\x11\xfe\xee\x5f\x31\xd5\x06\xb8\xb6\xa8\x24\xef\x4b\x36\xbb\x77\xd8\x16\xe9\x5d\x0b\x14\xb8\x6b\x0e\xe8\x01\xfd\x10\x2c\x04\x8a\x1c\x5b\x84\x25\x92\x25\x29\x7b\x95\x74\xfb\xdb\x0b\x92\x92\x2d\xcb\xb2\xd7\x71\x6e\xf3\x52\x74\xf3\xc5\x18\x0e\x87\xa3\x67\x66\x1e\xce\x30\x4a\xcb\x25\x67\xa8\x21\x22\x2b\x13\xc1\xfb\x09\x80\xd2\x72\xc6\x4b\x84\x3b\x88\x18\xce\x48\x5d\xda\x68\x02\xa0\x71\xce\xa5\x00\x27\xad\x4d\x8c\xc4\xd8\xf8\xc2\xc9\x97\xa8\x8d\x5b\xb8\x83\xe8\x3f\x7f\x84\x8b\xe4\xea\x55\x34\x79\x9c\x4c\x34\x1a\x59\x6b\x8a\xde\x6e\xb6\xc0\x26\x53\x84\xeb\x08\xa2\x05\x36\xe1\x18\x27\x13\xa4\x42\xf0\x36\x5f\xbc\x5f\x12\x9d\xd0\xb2\x36\x16\xb5\x97\x3f\xc6\x0b\x6c\xfc\x26\xe7\x53\x9d\x97\x9c\x3a\x3b\x70\x07\xce\xbb\xdf\x3a\x75\x63\x8a\x6c\xb3\xf2\xbb\xdd\x73\xb9\x30\x96\x08\x8a\x11\x44\x44\xa9\xcc\xa0\x5e\xa2\x0e\xc7\x5b\x32\x37\x70\xe7\x7f\x02\xfc\xdd\xf9\xb1\xc7\x0b\xa2\x54\xfc\xe2\x3d\x95\xb5\xb0\x09\x17\x0c\x1f\x1e\x9d\x43\x8f\x93\x09\x00\x95\x42\x20\xb5\xee\xf3\x83\x9d\x33\xf8\xa5\x40\x68\x51\x83\xda\xa0\xf6\x5f\x38\x93\x1a\x64\xad\xe1\xf5\x4f\x7f\xf3\x6a\xb6\x51\xfe\x38\x63\x8a\xc8\x0b\x9c\xa6\x47\x36\xaf\x85\xad\x83\xac\x90\xc6\xc2\x1d\x18\x2c\x67\x49\xfb\x91\x5c\x75\x27\x93\x8a\xc3\xe6\xef\x0e\x22\x52\xf1\x78\x3a\xa3\x17\x53\xc6\xce\x19\xb9\x9a\x5e\xbf\xba\x99\xe6\x11\x9c\xc1\xf9\x4d\x32\xbd\x82\x1f\x7f\xf9\xc7\x04\xa0\x83\x23\xeb\x1c\xa0\x2f\x93\x87\x92\xe8\x39\x46\xd0\xff\x3b\x83\xd7\xe5\x8a\x34\xc6\xf9\x05\x6b\x1d\xff\x19\x54\x0a\xc3\x8d\x45\x41\x9b\xed\x18\x7a\x37\xfa\xb1\x4e\x16\xd8\x24\x9c\x79\x98\x6a\x61\x7b\xce\x3a\x8c\x5d\x38\xd6\xee\x78\x05\x97\x4b\x8a\x66\x06\x69\xad\xb9\x6d\xb2\xb9\x96\xb5\xca\x38\x73\x51\x7a\xeb\x11\x89\x5e\xbc\x77\x07\x6c\x6b\x38\x4b\x09\x67\x8f\xd1\x1f\x0e\xeb\x64\x73\x69\x0c\x0f\xaa\x0e\xc1\xfb\x49\x48\xf5\x25\x77\xe9\xeb\x0a\xc0\xa5\x55\xd4\x06\xb2\x4d\xa2\x9e\xc3\x15\xb1\x16\x75\x25\x8d\xcd\x4a\x4e\x51\x18\xcc\xdc\x06\xaf\xcd\xd0\x58\x2e\x88\x6d\xeb\x20\x2d\x64\x85\x69\x88\x65\xba\xd9\xd7\x33\x11\xb7\x26\xd6\x99\xb4\xe5\x88\xc6\x4a\x5a\x8c\xf1\x01\x69\xe7\x0f\x17\x25\x17\xb8\x46\x02\x20\x5a\x15\xae\x46\xdf\xc2\x6f\x20\x9e\x41\xba\x24\x3a\x2d\x79\x9e\xd2\x52\xd6\x2c\xed\x80\x4d\x73\x29\x6d\x3c\xe3\x82\x9b\x02\x19\xdc\x7f\x07\x4c\x02\xd2\x42\xc2\x37\xff\x24\xdc\x72\x31\x0f\x31\x75\x9b\x62\x2e\xb8\x4d\x92\xe4\x9b\xef\xc0\x94\x88\x0a\xce\x9d\xb6\xc0\x16\x57\x77\xe2\x1c\x2d\xc4\xb1\x90\x31\x2d\x90\x2e\x62\x8a\xda\xf2\x19\xa7\xc4\x22\xc4\xff\x7a\x03\x31\x14\xd6\x2a\xf3\x6d\x9a\x9a\xcb\x18\xeb\x78\x85\xc6\xc6\xe7\x09\xa9\xc8\x3b\x29\xc8\xca\x24\x54\x56\x29\xc3\x3c\xd1\x32\xaf\x8d\x55\xa8\x29\x2a\x87\x59\xc2\x65\x7a\x75\xfe\x97\xbf\x7e\x7f\x7b\xfb\x43\x32\x57\x73\xf8\x37\x98\x9a\x49\x20\xca\x3a\x0e\x00\xc2\x18\xc4\x1b\x3f\xd6\x6b\xde\x9f\x06\x6a\xc5\x88\xc5\x3d\xeb\x1e\x8a\xb2\x74\x7a\x4a\xcb\x0a\x6d\x81\xb5\x89\x85\x64\x0e\x5f\x25\xb5\x45\x3d\xf8\xc2\xc0\x01\xbd\x70\x33\xb9\x12\xa5\x24\x2c\xab\x75\xf9\xb8\x51\xb6\x44\xc3\xc3\xbb\x19\xf4\xa2\xfa\xfb\xc4\x12\x9d\xcc\xdf\x0d\x7c\xa9\x96\x3d\x25\x48\xa5\xb2\xe9\x50\x63\xc1\xb8\x86\x58\x85\xc5\x8d\x72\xca\x88\x25\x81\x0e\xee\x7d\xaa\x1c\x62\xb8\x0a\xad\xe6\xd4\x9c\xc6\x72\xed\xe6\xff\x1d\x6a\xb3\x17\x49\x60\xb6\x23\x69\xea\x54\xfa\x69\x81\x5b\x53\xd0\x2e\xaf\xfc\xbf\x9c\x9f\xb9\x9c\x07\xba\xa6\x31\x16\x2b\x6a\x4b\x40\x41\xf2\x12\xf7\x6b\x8e\x58\x25\x8c\xf9\x8c\x2d\x79\x3e\x93\xc2\x52\x29\x66\x7c\x7e\x3e\x40\xad\x03\x86\x95\xc9\x5c\x93\x19\x11\xc4\x83\x21\x8d\x49\x35\x96\x48\x0c\xa6\xad\x3c\xbb\x4e\xae\x93\x8b\x8c\x54\xec\xfa\x2a\x61\x98\x0f\x1c\x60\x6a\x31\x87\x98\xc3\x71\xda\x9b\x0f\x63\x04\x2b\x29\x62\x8d\x8e\x97\x9e\xfa\xfc\xd6\x78\xdc\xf2\xc2\x40\x1b\xf5\x92\xd3\xa1\x12\x18\x4b\xb4\x3d\x96\x78\x94\x96\x0f\xcd\x69\xb4\xe3\xb7\x06\xd2\x19\x56\xfe\xf6\xdf\x5e\x1e\xd8\xa9\xfd\x9d\x7d\xd5\x55\xd7\xe4\xb8\x33\x8c\x91\x94\x13\x8b\xd9\x9a\x78\x32\xc2\x98\x46\xe3\x1c\xb6\xba\xc6\x53\x89\xc0\x7f\x4a\x68\x2f\x02\x68\xdb\xac\x73\x90\x79\x3e\x1f\xdb\x7e\x0d\x4c\x75\x2a\x43\x88\x39\x17\x0f\xbf\x4e\x0d\x8d\x99\xd2\x95\x47\x00\x2d\x4d\xfd\x72\x6a\xb8\x45\x13\x87\x1d\x2c\xed\x66\xa7\xed\x4d\xa5\x80\x78\x66\x76\x77\x91\x25\xe1\xa5\xdb\x98\xf6\x5b\x85\x7d\xb6\x37\x3a\x83\x1a\x1d\x14\xa9\x66\x26\xeb\x0a\xae\x57\xb0\x43\x51\x3b\xf8\x6d\xf7\xe9\x6d\xc6\xba\x9a\x65\xf9\x6e\xaf\xce\x19\x0a\x77\x5f\xa0\xee\xd7\xda\x58\x8d\xb3\x7c\x64\x7e\x5a\xbb\xb0\x31\x13\xaa\xa3\xe7\xb2\x3b\xb7\xfb\xe9\x07\x89\x8d\x13\x25\x31\x66\x9f\x83\x6e\x6d\x02\x80\x0e\x38\x7c\xe2\x6b\x82\x92\xe3\x05\xa5\xca\x26\xe3\x55\x85\xcc\xb1\x43\xd9\x40\x47\x07\x3b\xcc\xd7\xf3\x30\x82\x68\xe3\x63\x0b\xe2\xee\x87\xed\x07\xc6\x21\xe1\x5a\xbc\x9c\x18\xec\x73\xc5\xf8\x86\xa0\x5f\x11\x2f\x59\x73\xc2\xd6\x87\x75\xd2\x8d\x9e\x22\xc6\xac\xa4\x66\xdb\x7a\x9d\x74\x02\x60\x16\x5c\x65\x33\x2e\x48\x99\x19\x41\x94\x29\xa4\xdd\x30\xe1\x08\x2c\x9b\xc5\x11\x84\x0f\x41\x1c\x7e\x64\xdd\x83\xc1\xb6\xfa\xf6\xe2\xdb\x71\x23\xf7\x87\xbb\xb4\x71\x5e\x66\xb9\x27\xe5\xfb\x83\x57\x98\xe3\x00\x8b\xc6\x66\x64\x8e\xc2\x7e\xe8\x0b\x81\xdb\x73\xf4\x1b\xc1\x27\xeb\x90\xf7\x74\xc5\x2e\x94\x75\x75\x6c\x5b\x3c\x3e\xbd\x6f\xc3\xd5\x72\xc2\x09\xb1\xf1\xdb\xdb\xf0\x4c\xfc\xad\xf7\xe6\x87\x37\xdf\x42\x2d\xa8\xac\x2a\x14\x16\x6c\x81\xe0\x2e\x20\x03\x39\x96\x72\x05\xab\x02\x85\x17\xe6\x5c\x10\xcd\xd1\x40\xfb\x80\xc5\x80\x87\x85\x39\xb7\x45\x9d\x83\x46\x25\x0d\xb7\x52\x37\xc9\x11\xb7\xdc\x57\x71\xcf\x9d\xf5\xe7\x53\x3f\x90\xfa\x10\x8c\x8f\xa7\x67\x51\x98\x29\xfb\x6f\x0e\x92\xb0\xd8\x6d\x89\xc5\xbc\xa7\x37\x32\xc7\xf6\x35\xbb\x99\x16\xe2\xef\xf7\x1a\x0b\x77\x10\x8c\x37\x8a\xdb\x21\x0f\x2f\x71\x01\xf7\x7e\x73\x74\xe0\xf1\xad\x33\x10\x07\x03\x13\xff\xde\x42\x35\x57\xdd\x7b\xcb\x6b\xa5\xa0\x53\x02\xaf\xe4\x51\xef\x92\xb4\xa3\x64\x18\x39\xc0\x3f\x05\x71\x31\xf7\xfd\x5f\xc8\x85\x99\x96\x55\xa6\xa4\xb6\xde\xab\x8b\x8b\x50\xb4\xb2\x13\xf5\x84\x4a\x4b\x2b\xa9\x2c\x5b\xff\x2d\x55\x01\x09\xca\x99\xce\xf2\x52\xd2\x45\x48\xfd\x69\xe2\xff\xa5\xd3\xe8\xbe\xed\x74\x0f\x9d\x78\x33\xbd\x7e\x39\x72\xe6\x5a\xfc\xeb\x9f\xea\x8d\xbf\x1a\x9c\xd9\x13\x6e\x4e\xec\x9f\x77\x06\x3f\x91\x26\x47\xd0\x68\xdc\x04\x6c\x41\x8a\xb2\xf1\x56\xe1\xe7\xf5\xc0\x05\xed\x3c\xf1\xa7\x76\xcb\x9f\x6b\x0b\x05\x11\xac\x81\x50\x5e\x96\x2c\x5c\x91\xb4\x4f\xce\x06\x56\xdc\x16\xb2\xb6\x50\x11\x51\x93\xb2\x6c\xc0\x98\x22\x76\x1a\x5c\x58\xe9\xeb\x3b\x18\x4c\x3e\x1a\xe8\x00\xdf\xed\xf9\x74\xba\x03\xf6\x60\xa9\x0f\xf8\x10\xf4\xed\xe4\x3e\xc0\x74\xfd\x67\x82\xce\x39\xdc\x9f\x04\xbb\x4e\x75\xb2\x41\xf8\xe3\xf3\xe3\xa2\x7f\x54\x59\xb6\x6f\xa4\x1f\x51\x9d\x71\x6b\xe1\xe8\x22\x0d\xfa\x47\xd6\xea\xd3\xf1\xbc\x99\xbe\xba\xda\x13\xcf\xf5\xd2\x48\x3c\x6b\xf6\xa1\xf1\xec\x5e\x9d\x8f\x4d\xb4\x13\x1d\xfb\xf0\x44\x3b\xc1\xb1\x5d\xba\x19\x2c\x7d\x2e\xc4\x4e\x71\xec\xe3\x11\xfb\xc4\x65\xf9\x54\x5d\xb2\xbc\x57\x8f\xfb\x47\xac\xe1\x2d\x79\x04\xc2\x97\x97\xd3\xeb\x3d\x08\xaf\x97\x9e\x01\xe1\x23\x3c\x7b\x79\x75\xb9\x7b\xef\x0e\x96\x9e\xc1\xb3\x23\x48\x72\x33\x1e\x1c\xc3\x8f\x7e\x30\x78\xb2\x7f\xf9\xb1\x23\x3f\xaf\xff\x55\xb5\x32\x07\xbb\x8a\xab\xe9\xce\xe5\xda\x13\x8e\x77\x15\x6e\xe2\xe9\x30\x6d\xc7\x4c\x7f\xca\x97\x75\x57\x76\xff\x5b\xf2\x64\x61\xb6\x8a\x1f\x56\x9d\x9f\xa3\xeb\xbc\x9d\xde\x8e\xe1\xb8\x16\x3f\xcf\xa9\x97\xbb\x19\xb2\x25\x3e\xfd\xd4\x2f\x2b\x5f\xc2\x33\xf7\xb1\xb4\xe1\xb5\x9f\xa6\x8d\x9f\x9d\xda\xb3\xb1\xc5\xcd\x18\x4c\x37\x1f\x17\x96\xcf\x43\x50\x9f\x36\x15\xfe\x1b\x00\x00\xff\xff\x41\x85\xf6\x81\x51\x23\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfc, 0x4b, 0x28, 0xd2, 0x3e, 0x3d, 0x89, 0x8a, 0x7a, 0xef, 0xbb, 0x7d, 0x36, 0x27, 0x1d, 0xf0, 0x4a, 0x8b, 0x10, 0x66, 0xaf, 0xee, 0xde, 0x17, 0x5c, 0x6a, 0x68, 0xbd, 0x8, 0xa7, 0x41, 0xf}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\xc8\x7b\x2c\xd4\x0a\x10\x8b\x9c\x65\x34\x89\xa7\xc5\xc2\xb1\x8d\x67\xdc\x2a\x42\xbd\x3b\x8a\xbb\x80\xca\x05\xb2\xcc\x7b\xff\xeb\xcb\x73\xa2\xe2\x69\x0a\x0c\x66\x0e\x55\x94\x0b\x46\x5a\xd8\xc0\xe7\x70\x19\x86\x6f\x48\x39\xa3\x8f\xa2\x14\x67\xc6\x39\xd5\xa8\x9d\x12\x12\x39\x65\x51\xa4\x23\x47\xfd\x45\x72\xd3\x7f\x35\x3f\x0d\x8e\x47\x1f\xfb\x31\x37\x25\x81\x44\xee\x19\xd7\x2c\x9e\xb8\x88\x4f\x71\x33\x00\x74\xcd\x0c\x23\x2c\x94\x07\x00\xc7\x07\xaa\x41\x61\x6c\x08\xc0\x50\x2d\xa9\xd0\xc3\xb2\xca\x47\x30\xd0\xbe\x11\xcc\x93\x7d\xb1\xed\x17\x5e\xb9\xdd\xd9\xc7\xbd\xdd\x99\x9b\x4c\x4e\xa2\xc7\xc2\x2d\x38\x82\x79\xb5\xcf\x76\xbf\x19\x97\x6e\x56\x15\x2e\x77\x5f\xd8\x4d\x98\x49\xe4\x9c\x8a\xeb\x98\xc8\x1b\xe6\x3a\x05\x3f\xe3\x3b\xaf\x1d\x5e\x48\x95\xcb\x92\x44\xd1\xa5\x73\xdc\x0e\x81\xb5\x84\xbf\xbc\xe0\x67\x8e\xc2\x78\xf0\xa1\x9f\xd2\x0a\xda\x29\xfb\xba\xaf\x00\x00\x00\xff\xff\xb4\x82\x23\x39\x30\x02\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xa1, 0xc8, 0x99, 0x32, 0x37, 0x1c, 0xdc, 0xb1, 0x38, 0xcb, 0x56, 0x9d, 0x23, 0xd7, 0xdd, 0x79, 0xb1, 0xd5, 0xda, 0x30, 0x2a, 0x2d, 0xb9, 0x4b, 0x8c, 0xef, 0x78, 0xdc, 0x9c, 0xc3, 0x2b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":   clusterTf,
	"outputs.tf":   outputsTf,
	"variables.tf": variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":   &bintree{clusterTf, map[string]*bintree{}},
	"outputs.tf":   &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf": &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
