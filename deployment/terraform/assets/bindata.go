// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (9.528kB)
// assets/outputs.tf (327B)
// assets/variables.tf (589B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\x1b\xb9\x11\xfe\xae\x5f\x31\xdd\x04\x48\x5b\x94\xbb\xf2\x4b\x1c\xfb\x0e\x4e\x91\x5e\x5b\xb4\xc0\x5d\x1b\xa0\x01\xfa\x21\x67\x2c\x28\x72\xb4\xcb\x8a\x4b\x6e\x49\xae\x6c\x25\x75\x7f\x7b\x41\x72\x57\x5a\xad\x5e\x2c\x2b\xe7\xe4\x52\x9c\x02\xc4\x02\x39\x9c\x19\x3e\x33\xf3\x70\x48\xd5\x46\xcf\x05\x47\x03\x09\xbd\xb5\x09\x7c\x1c\x01\xd4\x46\x4f\x85\x44\xb8\x86\xa4\xaa\x88\xd4\x94\x3b\xb4\x2e\x19\x01\x18\x2c\x84\x56\xe0\x67\x1a\x4b\x90\x5a\x47\x4e\xfd\xf8\x1c\x8d\xf5\x13\xd7\x90\xfc\xf7\x35\x9c\xa6\xe7\xaf\x92\xd1\xfd\x68\x64\xd0\xea\xc6\x30\x0c\xba\xf3\x19\x2e\xf2\x9a\x0a\x93\x40\x32\xc3\x45\x34\xe5\xc7\x14\xad\x10\x82\xce\xe7\x1f\xe7\xd4\xa4\x4c\x36\xd6\xa1\x09\xe3\xf7\x64\x86\x8b\xb0\xc8\xfb\xd5\x4c\xa4\x60\x5e\x0f\x5c\x83\xf7\xf0\xd7\x5e\xdc\xda\x32\x5f\xcd\xfc\x66\xd3\xae\x50\xd6\x51\xc5\x30\x81\x84\xd6\x75\x6e\xd1\xcc\xd1\x44\xf3\x8e\x16\x16\xae\xc3\x57\x80\xbf\x79\x3f\x76\x78\x41\xeb\x9a\x3c\xff\xc8\x74\xa3\x5c\x2a\x14\xc7\xbb\x7b\xef\xd0\xfd\x68\x04\xc0\xb4\x52\xc8\x9c\xdf\x7e\xd4\xf3\x0c\xde\x95\x08\x1c\xa7\xb4\x91\x0e\x1a\x8b\x26\xec\x70\xaa\x0d\xe8\xc6\xc0\x9b\x1f\xfe\x1a\xc4\xdc\xa2\x0e\xe6\xac\x2d\x93\x30\xe0\x25\x03\xb2\x93\x46\xb9\x26\x8e\x95\xda\x3a\xb8\x06\x8b\x72\x9a\xb6\x9b\x14\x75\x67\x99\x56\x02\x56\x9f\x6b\x48\x68\x25\xc8\x78\xca\x4e\xc7\x9c\x9f\x70\x7a\x3e\xbe\x78\x75\x39\x9e\x24\xf0\x0c\x4e\x2e\xd3\xf1\x39\x7c\xff\xee\x1f\x23\x80\x0e\x8e\xbc\x73\x80\xbd\x4c\xef\x24\x35\x05\x26\xd0\xff\x3c\x83\x37\xf2\x96\x2e\xac\xf7\x0b\x96\x32\x61\x1b\x4c\x2b\x2b\xac\x43\xc5\x16\xeb\x31\x0c\x6e\xf4\x63\x9d\xce\x70\x91\x0a\x1e\x60\x6a\x94\xeb\x39\xeb\x31\xf6\xe1\x58\xba\x13\x04\x7c\x2e\xd5\x2c\xb7\xc8\x1a\x23\xdc\x22\x2f\x8c\x6e\xea\x5c\x70\x1f\xa5\xf7\x01\x91\xe4\xf9\x47\x6f\x60\x5d\xc2\x6b\x4a\x05\xbf\x4f\x7e\xb7\x5f\x26\x2f\xb4\xb5\x22\x8a\x7a\x04\x6f\x46\x31\xdd\xe7\xc2\xa7\xaf\x2f\x02\x9f\x56\x49\x1b\xc8\x36\x89\x7a\x0e\x57\xd4\x39\x34\x95\xb6\x2e\x97\x82\xa1\xb2\x98\xfb\x05\x41\x9a\xa3\x75\x42\x51\xd7\xd6\x41\x56\xea\x0a\xb3\x18\xcb\x6c\xb5\xae\xa7\x82\xb4\x2a\x96\x99\xb4\xe6\x88\xc1\x4a\x3b\x24\x78\x87\xac\xf3\x47\x28\x29\x14\x2e\x91\x00\x48\x6e\x4b\x5f\xa7\xef\xe1\x57\x40\xa6\x90\xcd\xa9\xc9\xa4\x98\x64\x4c\xea\x86\x67\x1d\xb0\xd9\x44\x6b\x47\xa6\x42\x09\x5b\x22\x87\x9b\x6f\x81\x6b\x40\x56\x6a\x78\xf1\x4f\x2a\x9c\x50\x45\x8c\xa9\x5f\x44\x84\x12\x2e\x4d\xd3\x17\xdf\x82\x95\x88\x35\x9c\x78\x69\x85\x2d\xae\xde\x62\x81\x0e\x08\x51\x9a\xb0\x12\xd9\x8c\x30\x34\x4e\x4c\x05\xa3\x0e\x81\xfc\xfb\xef\x40\xa0\x74\xae\xb6\xdf\x64\x99\x3d\x23\xd8\x90\x5b\xb4\x8e\x9c\xa4\xb4\xa2\x1f\xb4\xa2\xb7\x36\x65\xba\xca\x38\x4e\x52\xa3\x27\x8d\x75\x35\x1a\x86\xb5\xc7\x2c\x15\x3a\x3b\x3f\xf9\xd3\x9f\xbf\xbb\xba\xfa\x63\x5a\xd4\x05\xfc\x07\x6c\xc3\x35\xd0\xda\x79\x0e\x00\xca\x39\x90\x95\x1f\xcb\xb9\xe0\xcf\x02\x9a\x9a\x53\x87\x3b\xe6\x03\x14\x52\x7a\xb9\xda\xe8\x0a\x5d\x89\x8d\x25\x4a\x73\x8f\x6f\xad\x8d\x43\x33\xd8\x61\xe4\x80\x5e\xb8\xb9\xbe\x55\x9e\x09\xf3\xc6\xc8\xfb\x95\xb0\xa3\x06\xee\x3e\x4c\xa1\x17\xd5\xdf\xa6\x8e\x9a\xb4\xf8\x30\xf0\xa5\x9a\xf7\x84\x20\xd3\xb5\xcb\x86\x12\x33\x2e\x0c\x90\x3a\x4e\xae\x84\x33\x4e\x1d\x8d\x74\x70\x13\x52\x65\x1f\xc3\x55\xe8\x8c\x60\xf6\x38\x96\x6b\x17\xff\xff\x50\x9b\x3b\x4d\x23\xb3\x1d\x48\x53\xc7\xd2\x4f\x0b\xdc\x92\x82\x36\x79\xe5\x97\x72\x7e\xe2\x72\x1e\xc8\xda\x85\x75\x58\x31\x27\x01\x15\x9d\x48\xdc\x2d\xb9\x45\x2b\xe5\x3c\x64\xac\x14\x93\xa9\x56\x8e\x69\x35\x15\xc5\xc9\x00\xb5\x0e\x18\x2e\xd3\xc2\xd0\x29\x55\x34\x80\xa1\xad\xcd\x0c\x4a\xa4\x16\xb3\x76\x3c\xbf\x48\x2f\xd2\xd3\x9c\x56\xfc\xe2\x3c\xe5\x38\x19\x38\xc0\xeb\x59\x01\x44\xc0\x61\xd2\xab\x8d\x71\x8a\x95\x56\xc4\xa0\xe7\xa5\x87\xb6\xdf\x2a\x27\x2d\x2f\x0c\xa4\xd1\xcc\x05\x1b\x0a\x81\x75\xd4\xb8\x43\x89\xa7\x36\xfa\x6e\x71\x1c\xed\x84\xa5\x91\x74\x86\x95\xbf\xfe\xd9\xc9\x03\x1b\xb5\xbf\xb1\xae\x3a\xef\x9a\x1c\x6f\xc3\x5a\xcd\x04\x75\x98\x2f\x89\x27\xa7\x9c\x1b\xb4\xde\x61\x67\x1a\x3c\x96\x08\xc2\x56\x62\x7b\x11\x41\x5b\x67\x9d\xbd\xcc\xf3\xe5\xd8\xf6\x6b\x60\xaa\x63\x19\x42\x15\x42\xdd\xfd\x34\x35\xb4\x4d\x95\xa9\x02\x02\xe8\x58\x16\xa6\x33\x2b\x1c\x5a\x12\x57\xf0\xac\x0d\xde\x60\x91\x54\x40\xa6\x76\x73\x15\x9d\x53\x21\xfd\xc2\xac\xdf\x2a\xec\xd2\xbd\x92\x19\xd4\xe8\xa0\x48\x0d\xb7\x79\x57\x70\xbd\x82\x1d\x0e\xb5\x97\xbf\xf5\x3e\xbd\xcd\x58\x5f\xb3\x7c\xb2\xd9\xab\x0b\x8e\xca\x9f\x17\x68\xfa\xb5\xb6\xad\xc6\xf9\x64\xcb\xfd\x69\xe9\xc2\x4a\x4d\xac\x8e\x9e\xcb\xde\x6e\xf7\x35\x5c\x24\x56\x4e\x48\x6a\xed\x2e\x07\xfd\xdc\x08\x00\x3d\x70\xf8\xc0\x6e\xa2\x90\xe7\x85\xba\x96\x8b\x5c\x54\x15\x72\xcf\x0e\x72\x01\x1d\x1d\x6c\x30\x5f\xcf\xc3\x04\x92\x95\x8f\x2d\x88\x9b\x1b\xdb\x0d\x8c\x47\xc2\xb7\x78\x13\x6a\xb1\xcf\x15\xdb\x17\x44\xf9\x8a\x86\x91\x25\x27\xac\x6d\xac\x1b\x5d\xc9\xd5\xd4\xda\x5b\x6d\xf8\xba\x5c\x37\x3a\x02\xb0\x33\x51\xe7\x53\xa1\xa8\xcc\xad\xa2\xb5\x2d\xb5\x5b\x31\xe1\x16\x58\x56\x93\x5b\x10\xde\x07\x71\xfc\x92\x77\x0f\x06\xeb\xe2\xeb\x93\xef\xb7\x2b\xb9\xd9\xdf\xa5\x6d\xe7\x65\x3e\x09\xa4\x7c\xb3\xf7\x08\xeb\x5e\x3a\x72\x5a\xa0\x72\x8f\x7d\x21\xf0\x6b\x0e\x7e\x23\xf8\x6c\x1d\xf2\x8e\xae\xd8\x87\xb2\xa9\x0e\x6d\x8b\xb7\xdf\xde\xd7\xe1\x6a\x39\xe1\x88\xd8\x84\xe5\x6d\x78\x0e\x38\x8c\xbe\x8e\xe3\x68\xa3\x45\xd4\xba\x90\x18\x3a\xc4\x42\x67\x85\x8e\x29\x54\xe8\x2e\xd9\xef\x53\x29\x54\x73\x47\x62\xdb\xb7\xf5\x06\xe9\xef\x9a\xe4\x3b\xc8\x1a\x6b\x32\xa9\x19\x95\x40\xfc\xd5\xf3\x28\x5d\xb6\x04\xc2\xe0\xc7\x24\xee\x3f\x5e\x82\xe1\xed\x9b\x77\x7f\xb9\x7e\xee\xff\xff\x66\x65\xc4\xbb\x3b\x11\xea\x05\xbc\x7e\x1d\x8f\xa2\xf6\x75\xf0\xc7\x64\xc7\x66\x0b\xe1\xca\x66\x12\x76\xda\xbb\xc3\xf6\x9f\x3d\x34\xe5\xc4\x27\x0e\x51\x45\x46\x0d\x2b\xc5\x1c\xb3\xb8\x87\x65\x4a\xc5\x0a\xcd\x99\xe6\x98\x1b\x9c\xde\x6f\xec\x22\x80\xe1\xb7\xff\xd8\x85\x6b\xf7\xf0\x35\x5f\xc8\x03\xaa\x76\xad\x5b\xe9\x66\xf5\x2e\x99\x2c\xde\x21\x32\x2b\xaa\x5a\x22\xd3\xca\x19\x2d\xa5\x3f\xdd\x62\x83\x90\xfe\xcb\x6a\xf5\xe8\xc5\x7e\xd1\x63\xac\xc7\x3f\x8f\xb2\xd9\x2e\xe9\x59\xba\x81\xed\x77\x81\xf5\xaa\x8e\x8f\xad\xb1\x66\xfb\xfd\xef\x9e\xf7\xd5\x4e\x01\x89\x0a\x46\xe1\x49\x8d\x19\x51\x77\x4f\x6a\x6f\xea\x1a\x3a\x21\x08\x42\xa1\x62\xbb\x80\x75\xa7\x2e\x6c\x31\x10\x5e\xfb\x84\x2a\x42\x8b\x1f\x79\x64\x6a\x74\x95\x87\xbc\xf7\x5e\x9d\x9e\x46\x5e\xd6\xdd\x50\x6f\xb0\x36\xda\x69\xa6\x65\xeb\xbf\x63\x75\xe4\x67\x26\xb8\xc9\x27\x52\xb3\x59\x64\xb7\x71\x1a\xfe\x65\xe3\xe4\xa6\xbd\xcc\xec\xb3\x78\x39\xbe\x78\xb9\xc5\xe6\x72\xf8\xa7\xb7\x1a\x94\xbf\x1a\xd8\xec\x0d\xae\x2c\xf6\xed\x3d\x83\x1f\xe8\x62\x82\x60\xd0\x3a\x23\x98\x03\xad\xe4\x22\x68\x85\xb7\xcb\x3b\x35\xb4\x57\xc6\xdf\xb7\x4b\xfe\xd0\x38\x28\xa9\xe2\x0b\x88\xd4\xec\xe8\xcc\x13\x6c\xcb\x1d\x16\x6e\x85\x2b\x75\xe3\xa0\xa2\xaa\xa1\x52\x2e\xc0\xda\x92\x78\x09\xa1\x9c\x06\x57\x62\xab\x30\xfd\x64\xa0\x23\x7c\x57\x27\xe3\xf1\x06\xd8\x83\xa9\x3e\xe0\x43\xd0\xd7\x93\x7b\xcf\x61\xd6\x7f\x09\xea\x9c\xc3\xdd\x49\xb0\xe9\x54\x37\x36\x08\x3f\x39\x39\x2c\xfa\x07\x95\x65\xfb\x0c\xfe\x09\xd5\x49\x5a\x0d\x07\x17\x69\x94\x3f\xb0\x56\x1f\x8e\xe7\xe5\xf8\xd5\xf9\x8e\x78\x2e\xa7\xb6\xc4\xb3\xe1\x8f\x8d\x67\xf7\xc3\xc2\xa1\x89\x76\xa4\x63\x8f\x4f\xb4\x23\x1c\xdb\xa4\x9b\xc1\xd4\x97\x42\xec\x18\xc7\x3e\x1d\xb1\xcf\x5c\x96\x0f\xd5\x25\x9f\xf4\xea\x71\xf7\x2d\x7a\x78\x4a\x1e\x80\xf0\xd9\xd9\xf8\x62\x07\xc2\xcb\xa9\x27\x40\xf8\x00\xcf\x5e\x9e\x9f\x6d\x9e\xbb\x83\xa9\x27\xf0\xec\x00\x92\x5c\xdd\x00\x0f\xe1\xc7\x70\xf7\x7b\xb0\x7f\xf9\xbe\x23\xbf\x20\xff\x55\xb5\x32\x7b\xbb\x8a\xf3\xf1\xc6\xe1\xda\x1b\xdc\xde\x55\xf8\x4b\x6d\x87\x69\xfb\x92\x10\xac\xfc\xbc\xce\xca\xee\x07\xb1\x07\x0b\xb3\x15\x7c\x5c\x75\x7e\x89\xae\xf3\x6a\x7c\xb5\x0d\xc7\xe5\xf0\xd3\x58\x3d\xdb\xcc\x90\xb5\xe1\xe3\xad\xfe\xbc\xf2\x25\xfe\x92\x71\x28\x6d\x04\xe9\x87\x69\xe3\xad\x17\x7b\x32\xb6\xb8\xdc\x06\xd3\xe5\xa7\x85\xe5\xcb\x10\xd4\xe7\x4d\x85\xff\x05\x00\x00\xff\xff\xb7\x44\xdf\x32\x38\x25\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0x1, 0x3f, 0xcc, 0x55, 0xa1, 0xa5, 0x11, 0x49, 0x1c, 0xd2, 0x1, 0x1, 0xde, 0x8e, 0x9d, 0x96, 0xef, 0x52, 0x29, 0x79, 0xfc, 0xa9, 0x31, 0x30, 0x3f, 0xce, 0xd2, 0x3c, 0xed, 0x65, 0xa5}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x6b\xf3\x30\x0c\x86\xef\xf9\x15\xc2\xf7\xcf\x7c\xb4\x6c\x63\x87\xfc\x16\xa1\xc4\x6a\x66\xe6\xd8\x9e\x24\xb7\x94\xd1\xff\x3e\x9a\x1e\xd6\x92\x6c\xf3\xd1\xcf\x23\xf1\xa2\xf7\x48\x12\x69\x48\x0c\x6e\x4c\x4d\x8d\x05\x33\xcd\xec\xe0\xb3\xbb\x74\xdd\x37\xa4\x5a\x31\x66\x35\xca\x23\xe3\x58\x5a\xb6\x95\x92\x0a\x05\x63\x35\xa4\x89\xb3\xfd\x20\x85\xe1\xaf\x35\xf7\x06\xe7\x29\xe6\x75\x98\x87\x25\x89\x54\xb7\x8c\xdb\x2c\x1e\x59\x34\x96\x7c\x35\x00\xec\x5c\x19\x7a\x98\xa9\x76\x00\x81\x0f\xd4\x92\x41\xbf\x20\x00\x47\x4d\x8a\xd0\xbf\xf9\xac\x1f\xc9\xc1\xf2\x7a\x70\x4f\xfe\xc5\x2f\x5f\x78\xe3\x7e\xe7\xff\xef\xfd\xce\x3d\xcc\xd4\xa2\x36\x09\x2f\x83\x3d\xb8\x57\xff\xec\xf7\x57\xe3\xb2\x8a\xd5\x94\x65\xf3\xc2\x61\xc0\x4a\xaa\xa7\x22\x61\xc5\x54\xdf\xb0\xb6\x21\xc5\x11\xdf\xf9\xbc\xc2\x33\x99\xb1\xcc\x45\x0d\x43\x39\xe5\x6b\x11\xd8\x24\xfd\xe6\xa5\x38\x72\x56\xc6\x43\x4c\xeb\x28\x53\xb9\x3f\xdb\x76\xc9\x5a\x9a\x2c\x1d\x06\x46\xe1\xc3\x4d\xfc\x0a\x00\x00\xff\xff\x72\x3f\x4a\x9d\x4d\x02\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0xb1, 0xf7, 0x16, 0xdf, 0x7a, 0x8c, 0x5, 0x77, 0xbb, 0x8, 0x28, 0x99, 0xe8, 0x71, 0xf9, 0x17, 0x60, 0x85, 0x7c, 0xeb, 0x55, 0x28, 0xd7, 0xfe, 0xa4, 0x7a, 0x88, 0x59, 0xe2, 0xa8, 0xc2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":   clusterTf,
	"outputs.tf":   outputsTf,
	"variables.tf": variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":   &bintree{clusterTf, map[string]*bintree{}},
	"outputs.tf":   &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf": &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
