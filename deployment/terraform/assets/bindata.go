// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (9.005kB)
// assets/outputs.tf (327B)
// assets/variables.tf (666B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x8f\xdb\xb8\x11\xfe\xee\x5f\x31\x55\x02\x5c\x5b\x94\x92\xf7\xe5\x36\xbb\x3d\x6c\x8b\xeb\x1b\x50\xe0\xae\x77\x40\x0f\xe8\x87\x60\x21\x50\xe2\x58\x26\x2c\x91\x2c\x39\xf2\xae\x93\x6e\x7f\x7b\x41\x4a\xb2\x65\x59\xf6\x3a\x4e\x36\x7b\x17\x74\xf3\xc5\x18\x0e\x67\x86\xcf\xcc\x3c\x1a\x32\xc6\xea\xa5\x14\x68\x21\xe2\xf7\x2e\x82\xf7\x13\x00\x63\xf5\x4c\x96\x08\xb7\x10\x55\x15\x2b\x35\x17\x84\x8e\xa2\x09\x80\xc5\x42\x6a\x05\x7e\xa5\x76\x0c\xb9\x23\x76\xee\xe5\x4b\xb4\xce\x2f\xdc\x42\xf4\xdf\x3f\xc0\x79\x7c\xf9\x26\x9a\x3c\x4e\x26\x16\x9d\xae\x6d\x8e\xc1\x76\xba\xc0\x55\x6a\xb8\xb4\x11\x44\x0b\x5c\x35\xae\xbc\x4c\xf1\x0a\x21\xd8\x7c\xfd\x7e\xc9\x6d\x9c\x97\xb5\x23\xb4\x41\xfe\xc8\x16\xb8\x0a\x9b\x7c\x5c\x75\x56\xca\xdc\xdb\x81\x5b\xf0\x11\xfe\xda\xab\x3b\x37\x4f\x37\x2b\xbf\xd9\xf5\x2b\x95\x23\xae\x72\x8c\x20\xe2\xc6\xa4\x0e\xed\x12\x6d\xe3\x9e\x78\xe1\xe0\x36\xfc\x04\xf8\x87\x8f\x63\x4f\x14\xdc\x18\xf6\xfa\x7d\xae\x6b\x45\xb1\x54\x02\x1f\x1e\x7d\x40\x8f\x93\x09\x40\xae\x95\xc2\x9c\xfc\xf1\x1b\x3b\xaf\xe0\xa7\x39\x82\xc0\x19\xaf\x4b\x82\xda\xa1\x0d\x27\x9c\x69\x0b\xba\xb6\xf0\xed\xf7\x7f\x0f\x6a\xb4\x32\xc1\x9d\x73\xf3\x28\x08\xbc\x66\x40\x36\xab\x15\xd5\x8d\x6c\xae\x1d\xc1\x2d\x38\x2c\x67\x71\x7b\x48\x69\x3a\xcf\xbc\x92\xb0\xf9\xbb\x85\x88\x57\x92\x4d\x67\xf9\xf9\x54\x88\x33\xc1\x2f\xa7\x57\x6f\xae\xa7\x59\x04\xaf\xe0\xec\x3a\x9e\x5e\xc2\x77\x3f\xfd\x73\x02\xd0\xc1\x91\xb6\x01\xf8\xc3\x7a\x5c\xb6\xe4\xdb\xa9\x09\xd6\xfb\x29\x8c\x17\xb8\x8a\xa5\x08\xa7\xaf\x15\xf5\x62\xd8\xb1\x16\x14\x7c\x89\x98\x3c\x75\x98\xd7\x56\xd2\x2a\x2d\xac\xae\x4d\x2a\x85\x07\xff\x6d\x38\x68\xf4\xfa\xbd\x77\xb0\xad\xe1\x2d\xc5\x52\x3c\x46\xbf\x3b\xac\x93\x16\xda\x39\xd9\xa8\x7a\x60\xee\x26\x4d\x15\x2f\xa5\xaf\x4a\x5f\xdb\xbe\x5a\xa2\x36\x3f\x6d\x6d\xf4\x02\xae\x38\x11\xda\x4a\x3b\x4a\x4b\x99\xa3\x72\x98\xfa\x0d\x41\x5b\xa0\x23\xa9\x38\xb5\xe5\x9d\xcc\x75\x85\x49\x93\xa2\x64\xb3\xaf\x67\x82\xb5\x26\xd6\x05\xb2\x15\x88\xc5\x4a\x13\x32\x7c\xc0\xbc\x8b\x47\xaa\x52\x2a\x5c\x23\x01\x10\xdd\xcf\x7d\xfb\xbd\x85\x5f\x01\x9b\x41\xb2\xe4\x36\x29\x65\x96\xe4\xa5\xae\x45\xd2\x01\x9b\x64\x5a\x13\x9b\x49\x25\xdd\x1c\x05\xdc\x7d\x03\x42\x03\xe6\x73\x0d\x5f\xfd\x8b\x4b\x92\xaa\x08\x15\x17\x36\x31\xa9\x24\xc5\x71\xfc\xd5\x37\xe0\x4a\x44\x03\x67\x5e\x5b\x61\x8b\xab\xf7\x58\x20\x01\x63\x4a\xb3\x7c\x8e\xf9\x82\xe5\x68\x49\xce\x64\xce\x09\x81\xfd\xfb\x07\x60\x30\x27\x32\xee\xf7\x49\xe2\x2e\x18\xd6\xec\x1e\x1d\xb1\xb3\x98\x57\xfc\x9d\x56\xfc\xde\xc5\xb9\xae\x12\x81\x59\x6c\x75\x56\x3b\x32\x68\x73\x34\x1e\xb3\x58\xea\xe4\xf2\xec\xaf\x7f\xfb\xf3\xcd\xcd\x5f\xe2\xc2\x14\xf0\x1f\x70\xb5\xd0\xc0\x0d\xf9\xd6\x06\x2e\x04\xb0\x4d\x1c\xeb\xb5\x10\xcf\x0a\x6a\x23\x38\xe1\x9e\xf5\x00\x45\x59\x7a\x3d\x63\x75\x85\x34\xc7\xda\x31\xa5\x85\xc7\xd7\x68\x4b\x68\x87\x27\xfc\x01\x7a\x89\x12\xd2\x51\x4c\xdc\xc6\xc5\x3b\x68\x9a\xbe\x57\x08\x42\xdf\x2b\x4f\x7d\x69\x6d\xcb\xc7\x8d\x19\xe2\x16\x1e\xde\xcd\xf6\x98\x19\x04\x5a\x2d\x7b\x7a\x90\x68\x43\x49\xd3\xd6\x77\xa1\x36\x0e\x31\x55\x85\x64\x65\xee\x4e\x63\xab\x76\xf3\x17\x43\x51\x11\x9d\xc7\x25\xb7\x45\xe8\xa9\x63\x78\xe9\x54\xbe\x69\x81\x5b\x73\xce\x2e\x91\xfc\xbf\x7f\x9f\xb9\x7f\x07\xba\x6e\xe5\x08\xab\x9c\x4a\x40\xc5\xb3\x12\xf7\x6b\x8e\x58\xe5\x42\x84\x8a\x2d\x65\x36\xd3\x8a\x72\xad\x66\xb2\x38\x1b\xa0\xd6\x01\x23\xca\xb8\xb0\x7c\xc6\x15\x0f\x60\x68\xe7\x12\x8b\x25\x72\x87\x49\x2b\x4f\xaf\xe2\xab\xf8\x3c\xe5\x95\xb8\xba\x8c\x05\x66\x83\x00\x84\x59\x14\xc0\x24\x1c\xa7\xbd\x39\x98\xe0\x58\x69\xc5\x2c\x7a\xba\x79\xea\xf8\xad\x71\xd6\xf2\xc2\x40\x1b\xed\x52\xe6\x43\x25\x70\xc4\x2d\x1d\x4b\x3c\xc6\xea\x87\xd5\x69\xb4\x13\xb6\x36\xa4\x33\xec\xfc\xed\xbf\xbd\x3c\xb0\xd3\xfb\xc3\x7d\xde\x69\x13\xe1\x70\x5c\xe1\xce\xe9\x5c\x72\xc2\x74\x4d\x42\x29\x17\xc2\xa2\xf3\xc1\x93\xad\xf1\x54\x52\x08\xfe\x9a\xd9\xa2\x01\x70\xcd\x40\x7b\xc9\xe7\xe5\x08\xf7\x97\x40\x56\xa7\x92\x84\x2a\xa4\x7a\xf8\x34\x6d\x34\x66\xca\x56\x01\x01\xa4\x3c\x09\xcb\x89\x93\x84\x8e\x35\x3b\x44\xd2\x26\x6f\xb0\xa9\x54\xc0\x66\x6e\x77\x17\x5f\x72\x59\xfa\x8d\x49\x7f\x02\xd8\x67\x7b\xa3\x33\x68\xd3\x41\x9f\x5a\xe1\xd2\xae\xe7\x7a\x3d\x3b\x14\xb5\xf7\xb8\xed\xd9\x7c\xa4\x93\x44\xb6\x3b\xa7\x4b\x81\xca\x7f\x3a\xd0\x8e\xb5\xed\x58\xdb\x8b\x6c\xe4\x6a\xb4\x0e\x69\xd7\x5c\xd3\x35\xbd\xa3\xf8\x38\xba\x9f\xe1\x52\xb1\x09\xaa\xe4\xce\x3d\x15\xb8\xd7\x99\x00\xa0\x07\x76\xc8\x18\xfb\x36\x35\xca\x9e\x36\x8c\x29\x57\xa9\xac\x2a\x14\x9e\x3c\xca\x55\x7f\x57\xcb\x1a\xbc\x26\x9d\x56\x52\x69\x9b\xb6\x17\xdd\xb4\x36\x85\xe5\xc2\xf7\xd1\x8c\x97\x0e\x77\x19\xb5\x77\xbc\x08\xa2\xcd\x01\xdb\xcc\x8c\xa0\xb3\x17\x5d\x0f\xa7\xe0\xc4\x33\xee\xb0\x37\xf9\xec\xd9\xd0\xe8\x57\x3c\x48\xd6\x44\xb3\x85\x42\x27\xdd\xe8\x19\xee\xdc\xbd\xb6\x62\x5b\xaf\x93\x4e\x00\xdc\x42\x9a\x74\x26\x15\x2f\x53\xa7\xb8\x71\x73\x4d\x3d\x7c\x46\x30\x5c\x2f\x8e\xa5\xe5\x40\x3e\x9a\x1f\x1d\xce\x03\xf5\xed\xc5\xb7\xe3\x46\xee\x0e\x4f\x7f\xe3\x1c\x2f\xb2\x40\xf0\x77\x07\x3f\x8d\xdd\x4b\x48\xca\x0b\x54\xf4\xa1\x2f\x08\x7e\xcf\xd1\x6f\x08\x9f\x6d\xf2\xde\xf7\x20\xe0\xa3\xfd\x94\x4f\x02\xdb\xf6\x1a\xb2\x39\x21\x4f\xc1\x4e\x9b\xaa\x2f\xe4\x6b\xd7\x5d\x4c\xa9\x32\xdb\x97\xd1\x70\xfb\x0c\xf5\xf6\xc4\x5d\x74\xb3\x73\xb3\xb6\x75\xf5\x0c\x6f\x78\xcc\x9b\x62\xaa\xf8\xed\xbe\x85\xcd\x66\x5b\xf5\x6d\x1e\x1a\x1c\xb7\xd3\xd3\xbc\xb0\x35\xe0\xf7\x88\xea\xd0\xa3\x5a\x67\x80\x35\x06\x26\xe1\xc1\x25\xb7\xd2\x74\x0f\x2e\xdf\x1a\x03\x9d\x12\x04\xa5\x00\x7e\xd7\x8b\x1d\x95\xc2\x88\x83\xf0\x16\x24\x55\x11\x66\xc0\xa6\x20\x66\x56\x57\xa9\xd1\x96\x42\x54\xe7\xe7\x4d\xb3\xe9\x4e\xd4\x13\x1a\xab\x49\xe7\xba\x6c\xe3\xa7\xdc\x34\x40\xe4\x52\xd8\x34\x2b\x75\xbe\x68\xca\x74\x1a\x87\x7f\xc9\x34\xba\x6b\x27\xdf\x43\x1e\xaf\xa7\x57\x5f\x8f\xf8\x5c\x8b\x3f\xbd\xd7\x60\xfc\xcd\xc0\x67\x4f\xb8\xf1\xd8\xf7\xf7\x0a\xbe\xe7\xab\x0c\xc1\xa2\xf3\x37\x62\x02\xad\xca\x55\xb0\x0a\x3f\xae\x2f\x60\xd0\xde\x2f\xfe\xd8\x6e\xf9\x53\x4d\x30\xe7\x4a\xac\xa0\xe9\x32\xe2\x0b\xdf\x2b\xed\x73\xb2\x83\x7b\x49\x73\x5d\x13\x54\x5c\xd5\xbc\x2c\x57\xe0\xdc\x9c\x79\x0d\xa9\x48\x03\xcd\xb1\x35\x18\x7f\x34\xd0\x0d\x7c\x37\x67\xd3\xe9\x0e\xd8\x83\xa5\x3e\xe0\x43\xd0\xb7\x8b\xfb\x00\x2b\xf5\x9f\x0d\xba\xe0\x70\x7f\x11\xec\x06\xd5\xc9\x06\xe9\x67\x67\xc7\x65\xff\xa8\xb6\x6c\x1f\x49\x3f\xa2\x3b\x59\x6b\xe1\xe8\x26\x6d\xf4\x8f\xec\xd5\xa7\xf3\x79\x3d\x7d\x73\xb9\x27\x9f\xeb\xa5\x91\x7c\xd6\xe2\x43\xf3\xd9\x3d\x3b\x1f\x5b\x68\x27\x06\xf6\xe1\x85\x76\x42\x60\xbb\x74\x33\x58\x7a\x29\xc4\x4e\x09\xec\xe3\x11\xfb\xcc\x6d\xf9\x54\x5f\x8a\xac\xd7\x8f\xfb\xef\x57\xc3\xaf\xe4\x11\x08\x5f\x5c\x4c\xaf\xf6\x20\xbc\x5e\x7a\x06\x84\x8f\x88\xec\xeb\xcb\x8b\xdd\xef\xee\x60\xe9\x19\x22\x3b\x82\x24\x37\x63\xfd\x31\xfc\x18\x06\xfa\x27\xe7\x97\xef\x3a\xf2\x0b\xfa\xbf\xa8\x51\xe6\xe0\x54\x71\x39\xdd\xf9\xb8\xf6\x84\xe3\x53\x85\xbf\xa9\x74\x98\xb6\xd7\xc3\xe0\xe5\xe7\xf5\xad\xec\xfe\xf7\xe4\xc9\xc6\x6c\x15\x3f\xac\x3b\x5f\x62\xea\xbc\x99\xde\x8c\xe1\xb8\x16\x3f\x8f\xd7\x8b\xdd\x0a\xd9\x12\x9f\xee\xf5\xe7\x55\x2f\xcd\xb3\xf7\xb1\xb4\x11\xb4\x9f\xa6\x8d\x1f\xbd\xda\xb3\xb1\xc5\xf5\x18\x4c\xd7\x1f\x97\x96\x97\x21\xa8\xcf\x5b\x0a\xff\x0b\x00\x00\xff\xff\x6b\x51\x0e\x59\x2d\x23\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x72, 0xad, 0x80, 0x7f, 0xe9, 0x65, 0xb2, 0x8d, 0x8d, 0xa6, 0x10, 0x90, 0xe6, 0x45, 0xb7, 0xf, 0x49, 0xe0, 0xcd, 0x29, 0x3b, 0xae, 0xad, 0x6, 0xd8, 0xc1, 0xbb, 0x9e, 0x8b, 0xf0, 0x50, 0x55}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\xc8\x7b\x2c\xd4\x0a\x10\x8b\x9c\xc5\x9a\xc4\xd3\x60\xe1\xd8\x66\x66\xdc\x12\xa1\xde\x1d\x25\x5d\x40\x95\xa8\xf1\xd2\xff\xfd\xe7\x2f\xf9\x8c\x1c\xb0\x8b\x04\xa6\x8f\x55\x94\xd8\x25\x1c\xc9\xc0\x4f\x73\x6d\x9a\xbf\x10\x4b\x71\x21\x89\x62\xea\xc9\xf5\xb9\x26\x7d\x8c\xe8\x54\x36\x24\x03\x25\xdd\xd5\xdc\x43\x9b\xa2\xc2\xf9\x7b\xda\x61\x7c\xb7\xf7\xd2\x7f\x82\xd2\x10\xd2\x8e\x24\xa2\xc8\x16\x71\xeb\xba\x33\xb1\x84\x9c\x66\x02\x60\x9e\x04\x2d\x8c\x58\x1a\x00\x4f\x27\xac\x51\xa1\x5d\x22\x00\x83\x95\x33\xe3\xd3\x38\xc9\x57\x34\xb0\x9c\x16\xcc\x8b\x7d\xb3\xcb\x95\xbb\xe5\xf6\x60\x9f\x8f\xf6\x60\xee\x3a\x25\x8b\x0e\x4c\x4b\xb1\x05\xf3\x6e\x5f\xed\x71\x26\xae\xab\x59\x55\x88\x37\xff\xd2\x77\xae\xa0\xc8\x25\xb3\x5f\x65\x22\x1f\xae\xd4\x2e\x86\xde\x7d\xd2\xb4\x8a\x47\x54\x25\x1e\xb3\xa8\xf3\xf9\x92\x62\x46\xef\x2a\xc7\x47\x5c\x0c\x3d\x25\x21\x77\x0a\x71\x3d\x65\x11\x28\x6d\xea\x7e\x03\x00\x00\xff\xff\xf9\xe0\x1c\xf1\x9a\x02\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0xeb, 0xf8, 0xdb, 0x1e, 0xf0, 0xf6, 0x16, 0x30, 0xa2, 0x33, 0xa0, 0x89, 0x3, 0x8, 0xea, 0x2b, 0x44, 0xf8, 0x6c, 0x9f, 0xdd, 0xd1, 0xd1, 0xf4, 0xdd, 0xa7, 0x36, 0xe8, 0x17, 0x10, 0x9b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":   clusterTf,
	"outputs.tf":   outputsTf,
	"variables.tf": variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":   &bintree{clusterTf, map[string]*bintree{}},
	"outputs.tf":   &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf": &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
