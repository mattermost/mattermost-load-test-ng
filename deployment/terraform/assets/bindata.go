// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (9.504kB)
// assets/dashboard.yaml (228B)
// assets/dashboard_data.json (26.457kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (327B)
// assets/variables.tf (666B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x8f\xe3\xb6\x11\xfe\xee\x5f\x31\xd5\x1d\x90\xb6\x28\x25\x7b\x77\xb3\xb7\x9b\x60\x13\xa4\x6f\x40\x81\xa4\x09\xd0\x00\xfd\x70\x58\x08\x94\x38\x96\x09\x53\x24\x4b\x52\xde\xf5\x5d\xb7\xbf\xbd\x20\x25\xd9\xb2\x2c\xd9\x3e\xdf\x6d\xee\xd2\xeb\xee\x17\x61\x38\x33\x1c\x3e\x33\xf3\xf0\xc5\xda\xa8\x15\x67\x68\x20\xa2\x0f\x36\x82\xb7\x13\x00\x6d\xd4\x9c\x0b\x84\x3b\x88\xca\x92\x08\x45\x99\x43\xeb\xa2\x09\x80\xc1\x82\x2b\x09\x7e\xa4\xb2\x04\xa9\x75\xe4\xc2\xcb\x57\x68\xac\x1f\xb8\x83\xe8\x3f\xdf\xc0\x45\x7c\xf5\x2a\x9a\x3c\x4d\x26\x06\xad\xaa\x4c\x8e\xc1\x77\xba\xc4\x75\xaa\x29\x37\x11\x44\x4b\x5c\xd7\x53\x79\x99\xa4\x25\x42\xf0\xf9\xf2\xed\x8a\x9a\x38\x17\x95\x75\x68\x82\xfc\x89\x2c\x71\x1d\x8c\x7c\x5c\x55\x26\x78\xee\xfd\xc0\x1d\xf8\x08\x7f\xeb\xd5\xad\x5d\xa4\xdb\x91\xdf\xed\xcf\xcb\xa5\x75\x54\xe6\x18\x41\x44\xb5\x4e\x2d\x9a\x15\x9a\x7a\x7a\x47\x0b\x0b\x77\xe1\x13\xe0\xef\x3e\x8e\x91\x28\xa8\xd6\xe4\xe5\xdb\x5c\x55\xd2\xc5\x5c\x32\x7c\x7c\xf2\x01\x3d\x4d\x26\x00\xb9\x92\x12\x73\xe7\x97\x5f\xfb\x79\x01\x3f\x2f\x10\x18\xce\x69\x25\x1c\x54\x16\x4d\x58\xe1\x5c\x19\x50\x95\x81\xef\x7e\xf8\x5b\x50\x73\x6b\x1d\xa6\xb3\x76\x11\x05\x81\xd7\x0c\xc8\x66\x95\x74\x55\x2d\x5b\x28\xeb\xe0\x0e\x2c\x8a\x79\xdc\x2c\x92\xeb\x76\x66\x5a\x72\xd8\xfe\xdd\x41\x44\x4b\x4e\xa6\xf3\xfc\x62\xca\xd8\x8c\xd1\xab\xe9\xf5\xab\x9b\x69\x16\xc1\x0b\x98\xdd\xc4\xd3\x2b\xf8\xfe\xe7\x7f\x4c\x00\x5a\x38\xd2\x26\x00\xbf\x58\x8f\xcb\x8e\x7c\x37\x35\xc1\x7b\x37\x85\xf1\x12\xd7\x31\x67\x61\xf5\x95\x74\x9d\x18\xf6\xbc\x05\x05\x5f\x22\x3a\x4f\x2d\xe6\x95\xe1\x6e\x9d\x16\x46\x55\x3a\xe5\xcc\x83\xff\x3a\x2c\x34\x7a\xf9\xd6\x4f\xb0\xab\xe1\x3d\xc5\x9c\x3d\x45\x7f\x38\xac\x93\x16\xca\x5a\x5e\xab\x7a\x60\xee\x27\x75\x15\xaf\xb8\xaf\x4a\x5f\xdb\xbe\x5a\xa2\x26\x3f\x4d\x6d\x74\x02\x2e\xa9\x73\x68\x4a\x65\x5d\x2a\x78\x8e\xd2\x62\xea\x0d\x82\x36\x43\xeb\xb8\xa4\xae\x29\xef\x64\xa1\x4a\x4c\xea\x14\x25\x5b\xbb\x8e\x0b\xd2\xb8\xd8\x14\xc8\x4e\x20\x06\x4b\xe5\x90\xe0\x23\xe6\x6d\x3c\x5c\x0a\x2e\x71\x83\x04\x40\xf4\xb0\xf0\xed\xf7\x1a\x7e\x03\x64\x0e\xc9\x8a\x9a\x44\xf0\x2c\xc9\x85\xaa\x58\xd2\x02\x9b\x64\x4a\x39\x32\xe7\x92\xdb\x05\x32\xb8\xff\x1a\x98\x02\xcc\x17\x0a\xbe\xf8\x27\xe5\x8e\xcb\x22\x54\x5c\x30\x22\x5c\x72\x17\xc7\xf1\x17\x5f\x83\x15\x88\x1a\x66\x5e\x5b\x62\x83\xab\x9f\xb1\x40\x07\x84\x48\x45\xf2\x05\xe6\x4b\x92\xa3\x71\x7c\xce\x73\xea\x10\xc8\xbf\x7e\x04\x02\x0b\xe7\xb4\xfd\x2a\x49\xec\x25\xc1\x8a\x3c\xa0\x75\x64\x16\xd3\x92\xbe\x51\x92\x3e\xd8\x38\x57\x65\xc2\x30\x8b\x8d\xca\x2a\xeb\x34\x9a\x1c\xb5\xc7\x2c\xe6\x2a\xb9\x9a\xfd\xe5\xaf\x7f\xba\xbd\xfd\x73\x5c\xe8\x02\xfe\x0d\xb6\x62\x0a\xa8\x76\xbe\xb5\x81\x32\x06\x64\x1b\xc7\x66\x2c\xc4\xb3\x86\x4a\x33\xea\x70\x64\x3c\x40\x21\x84\xd7\xd3\x46\x95\xe8\x16\x58\x59\x22\x15\xf3\xf8\x6a\x65\x1c\x9a\xfe\x0a\x7f\x84\x4e\xa2\x18\xb7\x2e\x76\xd4\xc4\xc5\x1b\xa8\x9b\xbe\x53\x08\x4c\x3d\x48\x4f\x7d\x69\x65\xc4\xd3\xd6\x8d\xa3\x06\x1e\xdf\xcc\x47\xdc\xf4\x02\x2d\x57\x1d\x3d\x48\x94\x76\x49\xdd\xd6\xf7\xa1\x36\x0e\x31\x55\x89\xce\xf0\xdc\x9e\xc7\x56\x8d\xf1\xff\x0c\x45\x45\xee\x22\x16\xd4\x14\xa1\xa7\x4e\xe1\xa5\x73\xf9\xa6\x01\x6e\xc3\x39\xfb\x44\xf2\xff\xfe\x7d\xe6\xfe\xed\xe9\xda\xb5\x75\x58\xe6\x4e\x00\x4a\x9a\x09\x1c\xd7\x1c\xf0\x4a\x19\x0b\x15\x2b\x78\x36\x57\xd2\xe5\x4a\xce\x79\x31\xeb\xa1\xd6\x02\xc3\x44\x5c\x18\x3a\xa7\x92\x06\x30\x94\xb5\x89\x41\x81\xd4\x62\xd2\xc8\xd3\xeb\xf8\x3a\xbe\x48\x69\xc9\xae\xaf\x62\x86\x59\x2f\x00\xa6\x97\x05\x10\x0e\xa7\x69\x6f\x17\xc6\x28\x96\x4a\x12\x83\x9e\x6e\x8e\x2d\xbf\x71\x4e\x1a\x5e\xe8\x69\xa3\x59\xf1\xbc\xaf\x04\xd6\x51\xe3\x4e\x25\x1e\x6d\xd4\xe3\xfa\x3c\xda\x09\xa6\x35\xe9\xf4\x3b\x7f\xf7\x6f\x94\x07\xf6\x7a\xbf\x6f\xe7\x27\xad\x23\xec\x1f\x57\x76\x0f\x22\x43\x76\xfb\xc7\x12\xf8\x06\x66\xf0\x2d\xcc\xe0\x2b\x98\xfa\x90\xad\x55\x39\xa7\x0e\xd3\x0d\x8f\xa5\x94\x31\x83\xd6\xaf\xdf\x99\x0a\xcf\xe5\x95\x10\x72\x7d\x3c\xa9\x73\xb0\x21\xb1\x51\xfe\xfa\x78\x9c\xfd\x6b\xe0\xbb\xe7\x3b\x27\x8c\x59\xca\x82\xcb\xc7\x0f\xd3\xc3\x43\xae\x4c\x19\xb0\x43\x97\x27\x61\x38\xb1\xdc\xa1\x25\xb5\x05\x4b\x9a\xb4\xf7\x8c\x84\x04\x32\xb7\xfb\x56\x74\x45\xb9\xf0\x86\x49\xf7\xf8\x31\xe6\x7b\xab\xd3\xe3\x88\x1e\x49\x18\x66\xd3\xb6\xe1\x3b\x84\xd1\x17\x35\x97\xc8\x03\xfd\x58\xb7\x23\xcb\xf6\x2f\x09\x9c\xa1\xf4\xfb\x16\x9a\x21\xce\x18\xe2\x1c\x96\x0d\xdc\xcb\x36\x21\xed\xbb\xab\xfb\xad\xb3\x14\x1f\x47\xfb\x19\x6e\x34\xdb\xa0\x04\xb5\xf6\x58\xe0\x5e\x67\x02\x80\x1e\xd8\x3e\x5d\x8d\x19\xd5\xca\x9e\x70\xb4\x16\xeb\x94\x97\x25\x32\x4f\x3b\x62\xdd\xb5\x6a\xf8\x86\x56\x4e\xa5\x25\x97\xca\xa4\xcd\x2d\x3b\xad\x74\x61\x28\xf3\x1d\x38\xa7\xc2\xe2\x3e\x9d\x77\x96\x17\x41\xb4\x5d\x60\x93\x99\x01\x74\x46\xd1\xf5\x70\x32\xea\x68\x46\x2d\x76\x8e\x5d\x23\x06\xb5\x7e\x49\x83\x64\x43\x51\x3b\x28\xb4\xd2\xad\x9e\xa6\xd6\x3e\x28\xc3\x76\xf5\x5a\xe9\x04\xc0\x2e\xb9\x4e\xe7\x5c\x52\x91\x5a\x49\xb5\x5d\x28\xd7\xc1\x67\x00\xc3\xcd\xe0\x50\x5a\x0e\xe4\xa3\xfe\x68\x71\xee\xa9\xef\x0e\xbe\x1e\x76\x72\x7f\xf8\xe8\x39\xbc\x3b\xb0\x2c\x6c\x0d\xf7\x07\xf7\xe5\xf6\x19\x26\xa5\x05\x4a\xf7\xae\xcf\x17\xde\xe6\xe4\x07\x8c\x5f\xec\xd8\x3f\xf6\x1a\xe1\xa3\xfd\x90\xef\x11\xbb\xfe\x6a\xb2\x39\x23\x4f\xc1\x4f\x93\xaa\xcf\x7e\x9f\x6c\xef\xd3\xae\xd4\xbb\x77\xe8\x70\x69\x0e\x95\x7a\xe4\x0a\xbd\xb5\xdc\x8e\xed\xdc\x98\xc3\xd3\x23\xf1\xae\x88\x2c\x7e\x3f\x36\xb0\x35\x36\x65\xd7\xe7\xa1\xf3\xee\x6e\x62\xeb\x87\xc1\x3a\x6d\x1d\x8a\x3b\xf4\x16\xd8\x3a\x20\xb5\x83\x49\x78\x27\xca\x0d\xd7\xed\x3b\xd1\x77\x5a\x43\xab\x04\x41\x29\xa4\xad\xed\xe2\x96\x84\x61\x60\x82\xf0\x84\xc5\x65\x11\xce\x9d\x75\x29\xcd\x8d\x2a\x53\x9f\x81\x10\xd5\xc5\x45\xdd\xa6\xaa\x15\x75\x84\xda\x28\xa7\x72\x25\x9a\xf8\x5d\xae\x6b\x20\x72\xce\x4c\x9a\x09\x95\x2f\xeb\x02\x9f\xc6\xe1\x3f\x99\x46\xf7\xcd\x81\xfd\xd0\x8c\x37\xd3\xeb\x2f\x07\xe6\xdc\x88\x3f\xfc\xac\xc1\xf9\xab\xde\x9c\x1d\xe1\x76\xc6\xee\x7c\x2f\xe0\x07\xba\xce\x10\x0c\x5a\x7f\x91\x77\xa0\xa4\x58\x07\xaf\xf0\xd3\xa6\xa2\xa1\xb9\x16\x7d\xdb\x98\xfc\xb1\x72\xb0\xa0\x92\xad\xa1\xee\x4f\x47\x97\xbe\xcb\x9a\x57\x70\x0b\x0f\xdc\x2d\x54\xe5\xa0\xa4\xb2\xa2\x42\xac\xc1\xda\x05\xf1\x1a\x5c\x3a\x05\x6e\x81\x8d\xc3\xf8\xbd\x81\xae\xe1\xbb\x9d\x4d\xa7\x7b\x60\xf7\x86\xba\x80\xf7\x41\xdf\x2d\xee\x03\x7c\xd6\x7d\xed\x68\x83\xc3\xf1\x22\xd8\x0f\xaa\x95\xf5\xd2\x4f\x66\xa7\x65\xff\xa4\xb6\x6c\xde\x76\xdf\xa3\x3b\x49\xe3\xe1\xe4\x26\xad\xf5\x4f\xec\xd5\xe3\xf9\xbc\x99\xbe\xba\x1a\xc9\xe7\x66\x68\x20\x9f\x15\x7b\xd7\x7c\xb6\xaf\xe5\xa7\x16\xda\x99\x81\xbd\x7b\xa1\x9d\x11\xd8\x3e\xdd\xf4\x86\x3e\x16\x62\xe7\x04\xf6\xfe\x88\xfd\xc2\x6d\x79\xac\x2f\x59\xd6\xe9\xc7\xf1\x9b\x59\x7f\x97\x3c\x01\xe1\xcb\xcb\xe9\xf5\x08\xc2\x9b\xa1\x67\x40\xf8\x84\xc8\xbe\xbc\xba\xdc\xdf\x77\x7b\x43\xcf\x10\xd9\x09\x24\xb9\xbd\x10\x9c\xc2\x8f\xe1\x2a\x70\xf4\xfc\xf2\x7d\x4b\x7e\x41\xff\x57\x75\x94\x39\x78\xaa\xb8\x9a\xee\x6d\xae\x1d\xe1\xf0\xa9\xc2\xdf\x71\x5a\x4c\x9b\x8b\xe5\x49\x15\xf3\x11\x37\xf2\x4f\x6e\x27\x6f\x7f\x92\x3a\x4a\x1b\x8d\xe2\xbb\x71\xc7\xc7\x38\x13\xdf\x4e\x6f\x87\x70\xdc\x88\x9f\x67\xd6\xcb\xfd\xfa\xdd\x11\x9f\x3f\xeb\xa7\x55\x2f\xf5\x6f\x09\xa7\x92\x5a\xd0\x3e\x4e\x6a\x3f\x79\xb5\x67\xe3\xb2\x9b\x21\x98\x6e\xde\x2f\x2d\x9f\x16\x7d\x7e\x8e\xc4\xf6\xdf\x00\x00\x00\xff\xff\x11\x38\x31\x81\x20\x25\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaa, 0x39, 0x5b, 0xb0, 0xc4, 0x10, 0x25, 0x51, 0x4, 0xb9, 0x4a, 0xda, 0x2b, 0x2f, 0x6a, 0xaa, 0x25, 0x63, 0x4, 0x96, 0xbf, 0xe5, 0x33, 0x77, 0x9d, 0x92, 0x36, 0x3e, 0xcb, 0xf8, 0xfa, 0x6c}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x4e\x03\x41\x0c\x44\xfb\xfd\x8a\xe9\x52\xa1\x0b\xa2\xdb\x9a\x26\x35\x0a\xbd\x0f\xfb\x12\x4b\xce\x7a\x65\x6f\x0e\xf1\xf7\x68\xaf\x40\xa2\x9d\xf7\xe6\x51\xd7\x4f\x89\x54\x6f\x15\xaf\xa5\xf4\xf0\x5d\x59\x22\x6b\x79\x41\xa3\x87\x54\x9c\x92\x1e\xdd\xe4\x54\x00\x8f\xdb\x85\xa7\x07\x6c\x6e\x2c\xf1\x8f\x8e\x9f\x2e\x15\x9b\x9a\x14\x80\x35\x69\x35\x79\x17\x93\x71\xc4\x37\xb2\x9c\x40\x58\xc7\x24\x15\x23\x9e\x73\x78\x76\xa6\x21\x97\x36\x24\x76\xb2\x0f\xf9\xf2\xc6\x59\xf1\x76\x3e\x17\x80\xcc\xfc\xfb\xaa\xd7\xc3\xc9\xbf\x8f\xf7\x19\xcd\x5a\x00\xa0\xd3\xb8\x57\x2c\x3b\xc5\x62\xba\x2e\xb7\xa0\x8d\x1a\x2d\x4c\x79\x5f\x9d\x82\xf3\x37\x00\x00\xff\xff\x94\x42\xcd\x38\xe4\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x3e, 0x13, 0x14, 0xd7, 0xd7, 0xbd, 0xed, 0xe7, 0xca, 0xfc, 0xe7, 0x3a, 0x3a, 0x0, 0xc1, 0x74, 0x2d, 0xef, 0xf0, 0x9d, 0x47, 0xe0, 0x99, 0xba, 0x23, 0x47, 0x12, 0x37, 0x12, 0x52, 0xd9}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5d\x4f\x1b\x3d\xf6\xbf\xef\xa7\xb0\xac\xfe\xff\x0a\x15\xf0\x64\x02\x69\x29\xd2\x6a\x45\x5b\xb5\x5b\xa9\xec\x76\x4b\xfb\xec\x45\x8b\x46\xce\xcc\xc9\xc4\xc2\x63\x4f\x6d\x0f\x90\x07\xb1\x9f\x7d\x35\x9e\x37\xcf\x0b\x4d\x88\x48\x13\x5a\x73\x01\x99\x63\x8f\x7d\x7c\x5e\x7f\x73\xc6\x31\x37\x4f\x10\xc2\x84\x73\xa1\x89\xa6\x82\x2b\x7c\x8c\x32\x12\x42\x98\x51\xa5\xf1\x31\xfa\x6a\xae\x50\x41\x35\x2d\x93\x94\x32\xfd\x9e\xe3\x63\xe4\xed\xd6\xd4\x90\x68\xa2\x44\x2a\x03\xc0\xc7\x08\xef\xed\xa1\x77\x92\x4c\x09\x27\x68\x6f\x0f\x5b\xdd\x80\x93\x09\xcb\xba\x68\x99\x82\x45\x9f\xd1\xb0\x87\x4a\x03\xc1\x5f\x0b\x26\x64\x36\xa6\x8c\x26\x64\x30\xdc\x45\x23\xcf\xdb\x45\xa3\xf1\x78\x17\x79\x3b\xf6\xd0\x9c\xc4\x66\xee\x93\x7a\x39\xe8\xff\xd1\x09\x03\xa9\x95\xdd\x4f\xcf\x13\xd3\x2f\x24\x6a\x36\x11\x44\x86\xb8\x68\xbb\x35\x7f\xcf\x9f\x20\x74\x9b\x75\xc7\x10\x52\xdd\xe2\x16\x47\x1c\xf4\xfb\x10\x1f\xa3\xd1\xf8\x70\x94\x53\x24\x49\x66\x9f\x85\x60\x9a\x26\xa5\x4c\x30\x35\x5d\xf2\x8f\x1a\xa4\xe1\x26\x6b\x1c\x1f\x3d\x3f\x1c\x0d\x87\xa3\xe1\xd1\xd1\x81\x69\x65\x94\x5f\x64\x52\xff\x7a\x6e\x2e\x13\xc2\x81\xa9\x4a\xee\xa5\xd4\x31\x61\x94\x28\x23\x09\xa3\xa2\xdb\x72\x39\x78\x42\x0c\x65\x4a\x98\xaa\x04\x67\x56\xf6\x01\x78\xa4\x67\xd9\x9c\xc3\x06\x1d\xfa\xba\x5b\xaa\xe3\x29\x63\x55\xcb\x94\x32\x66\xeb\xd9\x10\xde\x49\x12\x52\xe0\x99\x75\xd4\x43\x47\x92\x86\x1f\x45\x6d\x3f\xb9\x52\xf1\x31\x3a\xb2\x24\x7f\x95\x8d\x35\xb2\x08\xd7\xf6\x18\x08\xe1\x79\x76\x5d\x6a\xa3\x1a\x7b\x46\xc3\x10\xf8\x19\x48\xda\xc3\xbc\x91\xb4\xf7\xb2\xba\x66\x10\x01\x0f\x9b\x7c\x90\xcb\xa8\x7d\x1f\x42\x38\x48\xa5\xcc\x97\xd1\x6e\x89\xc9\x75\x1f\x95\xf2\x1e\xaa\x9a\x89\xab\xae\xe1\x6a\xa1\x09\xeb\xe9\x7d\x49\x58\x5a\x2f\xa2\xb3\x52\x46\xb9\x69\xb5\x47\x33\xc4\x2b\x1a\xe6\xca\xac\xa8\x99\x9e\x3e\x0a\xca\xf5\xa9\x30\x9e\x63\x08\x95\x99\x63\x91\x34\xfd\xb9\x52\xf4\x87\xca\xe0\x3a\xb3\x27\x20\x03\xe0\x9a\x44\xd0\x91\x72\x92\xcd\x94\xe9\x3d\x55\xa5\x61\xd7\xf4\xae\x52\x24\xf0\x10\x24\x18\xb7\x9d\x32\xa1\x6b\xbe\x94\xd1\xe2\xbf\x2e\x41\x4a\x1a\x42\x6d\xf9\x79\x63\x42\x02\xe8\x33\x5c\xa5\x49\x70\xd1\x99\x45\x69\x48\x12\x08\x3f\x50\xde\x65\x58\x13\x19\x81\x56\x56\x04\xb3\x63\x58\xe6\xdc\xd7\x89\x61\x4f\xa5\xf1\x80\xf2\x40\x02\x51\x30\x88\x89\xd6\x20\x63\xa1\xb4\x1f\x4e\x7c\xa5\x85\x04\x5f\xd3\x18\xfc\x40\xa4\x5c\xdf\xc4\xa0\x67\x22\xfc\xdb\x7f\xbf\xe1\xa7\x5a\x24\x59\x17\x43\xff\x86\x6f\xbf\x8e\xe3\xf3\x9d\x1d\x34\x99\xa3\x41\xde\xc9\x8e\x4c\x95\x55\xbe\x15\x32\x26\x99\xc1\xe1\x9b\x62\xac\xdb\xdb\x66\x3f\x09\x53\x13\x5d\xf0\x09\xae\xc8\xb7\xc5\xa7\x5a\x4e\x7a\x26\x41\xcd\x04\x0b\x5b\xf2\xcb\x58\x7d\x2b\x45\xdc\x76\xe3\x8c\xfe\x09\xa2\xc2\x20\x5a\x37\x9c\xcd\xe8\x54\x77\xef\xd0\x26\xee\xe1\xcf\x22\x41\xde\x10\xbd\x79\x85\xbe\xa7\x46\x75\xd9\x1a\xcd\xaa\x6b\x9d\xea\x2a\xf8\xdd\xd8\x7e\x41\x24\x84\x5d\xcf\x50\x42\xea\x96\xd7\x1b\xa7\xf0\xcb\xb0\x4c\x79\x48\x2f\x69\x98\x12\x86\x3b\x16\x5a\xf6\x31\x31\xb7\x66\xe0\x9a\x5c\xd3\x96\xa9\x4f\xd2\xe0\x22\xd7\xbf\xbd\xae\xcc\x8b\x0b\x77\xc9\x96\xde\x93\x3d\x5a\xbd\xfb\xbd\xbb\xf2\xe2\x1e\x27\x9a\x93\x6b\xf8\x81\xd9\x4d\x2b\x13\x50\xb3\x4c\x12\x4d\x2b\x21\x13\x60\x1d\x26\xb2\x06\x11\xbd\x22\x0a\x9a\x29\xb7\x0a\x54\x9d\xee\x79\xa4\xea\x90\xad\xc5\xd4\xc6\xb5\xfb\x48\xf8\xec\x38\xc1\xbc\xab\x74\xc2\x68\xd4\x17\xa3\x0d\xfd\x03\x5c\x56\x4c\x37\x12\x7e\x21\x82\x5f\x20\xd7\xbe\x5c\x94\x6b\x1b\x84\x95\x93\xed\x0b\x97\x6c\x5d\xb2\x7d\xd0\x64\x4b\x12\x6a\xe7\xd9\x19\xe1\x21\x03\x59\x25\xda\xac\xb9\x27\xd3\x16\xdd\x5a\xa9\x96\x72\x0d\xf2\x92\xb0\xb7\x24\xd0\xe6\xc1\xe1\x60\x41\x26\x2e\x86\xd9\xfa\x54\xac\xf3\x54\x7c\xf2\xf1\xfd\x03\xe7\xe2\xd1\x6f\x9f\x8b\x63\xb5\xf9\x04\xe7\x12\xf1\xe6\x12\x31\x66\x82\x84\x1a\x94\xde\x2b\x48\x55\xb7\x9e\x1a\x40\x4e\x97\xd2\x04\x97\xe6\xa0\x9b\x78\x5e\x3e\x5a\x21\x85\xff\x2e\x19\x7c\x64\x53\x2f\x5a\x11\xb7\x93\xd4\x03\xc1\x39\x04\x1a\xc2\x9f\x94\xd9\xc7\xbf\x50\x66\xef\xcb\xea\x49\xf6\xcb\xa8\xf6\x86\x72\xa5\x09\x0f\xc0\xa4\x74\x05\xf2\x12\x64\x96\xcb\xbd\xf8\xbc\x95\xbd\xeb\x70\x67\xf0\x40\xbe\xce\x05\x09\xde\x5b\x90\xe0\xcb\xc9\xdb\x19\x3e\x06\x2d\x69\x60\xe2\x7f\x1f\xd3\x77\xc2\x81\x66\x8c\xd4\x90\x65\xdb\xf1\xc2\x40\xbe\x08\x03\x2d\x27\xad\xb5\x8b\xeb\x73\x77\xe9\xab\xc9\xe9\xd5\x22\x39\x6d\x12\x4b\xfd\x33\x8d\x27\x20\x91\x98\xa2\x53\x50\x8a\x44\xa0\x50\x02\x12\x9d\x41\x20\x78\xb8\x00\x4d\xc5\xea\x13\x28\xc1\xd2\xa2\xa6\xdb\x8d\x70\xae\xf0\x91\xff\xdc\x1f\xc7\xe0\xd7\x0d\x34\x8b\x1c\xe4\x42\x0e\x72\x6d\x1e\x72\x75\xca\x26\x2f\x57\xc0\x5c\x96\x7c\x1c\xe8\x72\xa0\x6b\x5d\xa0\x6b\xa6\x75\xe2\x4b\xf8\x9e\x82\xd2\xea\xd1\xa1\x2f\xc3\xbd\x71\x74\xb5\x11\x10\x76\x4f\xe9\x6d\x0d\x1a\x5b\x56\x6e\x5b\x0d\xca\x3e\x15\x72\x77\x50\xcc\x41\xb1\xfb\xb0\xea\xa0\xd8\xef\x03\xc5\xda\xd5\x2f\xef\xf9\x0a\x50\xec\xb9\x43\x62\x0e\x89\x3d\x28\x12\x6b\xa7\xe2\x2b\x98\x28\x61\xa2\xff\x0f\x41\xc4\x36\xa2\xaf\x36\xeb\x6b\x44\x60\x2b\x4a\x6d\x13\xa8\xeb\x71\x20\xa8\xba\xac\xf5\xba\x74\x66\xf4\x06\x2e\x69\x00\x0a\x0d\xfe\x03\x93\x33\x23\xdd\xb2\x31\x9b\x61\xc7\x21\x2c\x87\xb0\x1c\xc2\x72\x08\x0b\xa1\xbb\x8a\x5d\xde\x8b\x15\x20\x96\xe7\x20\x96\x83\x58\xeb\x82\x58\xe1\xc4\x8f\x89\xd2\x20\xfd\xa0\xce\x64\x8f\x09\x68\xfd\x60\x01\x3f\x07\x6e\xdd\x5f\x82\x5b\x53\xea\xba\xbf\xec\x1e\x17\x64\x33\xdf\x5b\xd1\x02\x9d\x9a\x45\xa2\x37\x44\x93\x49\x96\x6a\x1d\x4e\x73\x38\xcd\xe1\xb4\xdf\x06\xa7\x2d\xdc\xcb\xdd\xae\x84\x8d\x0e\x57\x81\x69\xbf\x0b\x4e\xf3\x1c\x4e\xdb\x92\x97\x92\x7e\x98\xe6\xdf\x87\xf4\x95\x79\xc5\xa3\x7c\x95\xc6\x77\xbd\x64\x1b\xc7\xe7\x3b\xe8\x0f\x84\xd0\xfd\x47\xcd\xb7\x92\xff\x60\xdc\x2d\xc3\x84\x0b\x65\xb4\x2a\x32\xdc\x24\xba\x39\x05\xc2\xcd\x8e\xf5\xe2\xdd\x1e\xfa\x6c\x27\x7a\x07\x65\xd6\x02\x65\xee\x80\x31\x0e\xc1\x38\x04\xb3\xdd\x95\xa6\xd1\x78\x05\x08\x33\x76\x08\xc6\x21\x98\x07\x45\x30\x91\xf0\x63\x88\x95\x26\x5a\xf9\x84\x31\x11\xf8\x93\xb9\x06\x75\x07\x96\xf8\xc3\x1b\x8e\x0e\xcd\xaf\x75\x03\x8a\x93\x8c\x97\xbd\x65\x60\xc5\x1d\x2b\x58\x6b\x85\xc9\x9e\xd3\x28\xc7\xa7\x3c\x55\xb0\x2e\xd9\x15\x07\x86\xb4\xbc\xec\xfe\x42\x3d\xcb\x58\x5d\xaf\x64\x17\xd6\x9f\xee\x21\xd9\x19\x90\xe4\x71\x08\xf6\x1f\x40\x92\xf5\xca\xf5\xf5\x76\x23\xdf\x58\xc8\x39\xfa\xa2\x48\x04\x68\x40\x39\x3a\x7d\xe5\xde\xb5\x6e\xae\x86\x77\xfa\xca\xc1\x5f\x07\x7f\xb7\x0a\xfe\xb6\x0b\x78\x07\x07\x2b\xa0\x5f\xef\xc0\xc1\x5f\x07\x7f\x1f\x14\xfe\x52\x49\x74\xf3\x9b\x89\x52\x04\xa0\x94\x1f\x24\x69\x55\x8f\x5a\xb8\x35\xfe\x19\xf2\x86\xc3\xcd\x95\xd8\x1e\x47\x79\xec\xf5\xc7\x2f\xe8\x8b\xa6\x8c\xfe\x65\xaa\x7d\xe8\x13\xd1\x80\x06\xff\xe7\x80\xc2\xe6\x80\xc2\x0f\xd5\x81\x1c\x74\x40\x0e\x3a\x6c\x1e\x3a\x74\x2a\x67\x2b\x61\x87\x43\x07\x1d\x1c\x74\x78\x50\xe8\x10\x09\x3f\x12\x52\xa4\x3a\x53\xc9\x16\x6f\xc5\x6a\xf0\xb9\xc6\x1d\x57\xcb\xc8\x63\xb3\x1b\xab\x96\x91\xc4\x23\xd9\x3f\xf5\x4e\xa0\x4f\xed\x85\x38\xfc\xe4\x36\x4b\xfd\xe2\x80\xe9\x49\x31\x6c\xe6\xaf\x99\xd7\x65\xab\xf6\x86\xb9\x0b\x60\x15\xcc\x20\x26\x7f\x82\x54\xb9\xa9\x8f\xf2\x33\xa9\x95\x9e\xb3\xe2\x0c\x6c\x79\x91\xf7\xd4\x24\xaa\x75\x6f\xed\x4b\x28\x64\x67\x51\xf6\x12\x90\x53\x5c\x4d\xab\x21\x4e\x18\xd1\x94\x47\xcb\x1c\x1e\x4e\x18\xfb\x33\x33\xc1\xae\xbd\xd6\xc8\xa2\xa1\x4a\x0d\xd7\x46\x91\xde\x8b\xd1\xfe\x81\xb7\xef\x1d\xec\x7b\xc3\xf1\xf1\xd1\xf0\xf9\x8b\xa6\x56\x2f\x8b\x51\xbf\x5a\x44\xd4\x7b\x9b\xd5\xe1\xbc\xcf\x92\x96\x84\x85\x59\x47\x98\x52\x4e\x8b\x28\x92\xdb\x95\x9f\x3b\xd8\xa0\x8c\xf5\x8d\x13\xca\x8b\xd2\xba\x1d\x40\x28\x0f\x58\x1a\xc2\x09\xeb\x03\x3e\x95\x53\xe5\xc9\xc2\x1e\x2a\x4e\x99\xa6\x5d\xf7\x2e\xcf\x40\xef\xde\x50\x63\x98\x3a\xbc\x22\x84\xbf\xa7\x20\xe7\xcb\x71\x5f\xdb\x97\xd7\xa0\x46\x70\xdd\xda\x5e\x80\xd5\x05\x4d\xbe\x48\x76\x36\xe7\x41\x5f\x7c\xed\xc6\x51\x4d\x22\x63\x16\xea\xdf\x05\x3f\x2d\xe3\x28\xad\xf3\xbc\x45\xbb\xab\x7b\x11\x6c\xf3\xd5\x59\x0d\xa9\x82\xcf\xf9\x50\xbd\x58\xf2\x21\x0c\xf5\x84\xb1\xa5\x2c\xf3\xa9\xef\x13\xc6\xd6\x66\x8d\x66\xe9\xbe\x04\x95\x32\x3d\xd0\x22\xb9\x18\x78\xc3\x5d\xb4\xdc\x01\x9c\x5f\x9f\xde\xf8\xbe\x24\x3c\x02\x5f\xdd\xaa\xf6\x71\x9b\x3b\xf7\xb2\xe9\x96\x81\xf6\x07\xdf\x45\xe6\xdc\x38\x04\xf4\x0e\xab\xae\x88\xbd\xe6\xfd\xb3\xc4\xb1\xc0\x49\xf6\x9f\x95\x67\x9b\x7e\xc3\x83\xfd\x67\x7f\xdf\xf9\x86\xf7\x9f\x3d\xac\xe7\x34\x1c\x71\x91\xdf\x34\x3b\x6f\xc0\x6b\x14\xb0\xfc\x61\xab\xef\x8d\xe3\x42\x97\xea\x38\xd1\x4f\x77\x9c\x9e\x63\xe2\xbb\x67\xc1\x6f\xc8\x63\xca\xf3\xe9\x7f\x82\xc3\xac\x20\x86\x85\x9e\x52\x9c\xb6\xff\x0b\x38\x8a\xf9\x5b\xff\x5f\x11\x83\xdf\x2b\xac\x34\xcd\x9f\x87\x30\x17\x57\x7b\xde\xb8\xdc\xe5\x89\xb5\x28\x88\xb8\x71\x5f\x42\x83\x0b\x53\x0a\x28\xee\x2e\xa4\xe8\x97\xcf\x84\xb6\x66\xf1\xd8\x7a\x10\x2a\x21\xa1\xb9\x38\xb0\x2f\xbc\x7a\x67\x29\x1e\x5b\x9f\x3d\xfb\xe2\x60\x68\xb7\x58\x0f\x30\x23\xeb\xb3\x57\xfc\x2b\x95\xf3\x72\x0d\x99\x31\x74\x2d\xee\xee\x59\xec\x81\x9f\xdb\x03\xdb\xb3\x8c\x0e\xed\x0b\xab\x4c\xf3\x22\xb4\xf9\x2d\x79\x69\x88\xef\x2f\x61\xca\x1b\x78\x22\xc5\x95\x2a\x00\x92\xf5\xce\xbe\x32\x68\xf4\x11\xa4\x79\x88\xe0\x01\xa0\x53\xc1\xa9\x16\x32\x43\xb8\xa6\x7f\x6a\xaa\x67\x78\x98\xff\x78\x5e\x4e\xbd\xac\x40\xf6\xe1\x93\xdb\x27\xff\x0b\x00\x00\xff\xff\x60\xf0\xf4\x78\x59\x67\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0x62, 0x40, 0xdd, 0xb0, 0x65, 0x55, 0xb2, 0xe8, 0x8, 0x10, 0x20, 0x85, 0x3c, 0xf1, 0x87, 0x2a, 0x74, 0x1c, 0x1a, 0x60, 0x56, 0x0, 0xa7, 0x29, 0xd0, 0x84, 0x56, 0x46, 0xce, 0xb2, 0xd4}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4d\x6e\xc3\x20\x10\x85\xf7\x3e\xc5\x88\x7d\x51\x95\xaa\x7f\x0b\x9f\x05\x8d\xcd\xc4\x45\xc5\x40\x67\x86\xa4\x56\x95\xbb\x57\x76\x16\x6d\x64\x2b\x66\xc9\xfb\xde\xc7\x93\x38\x21\x07\xec\x22\x81\xe9\x63\x15\x25\x76\x09\x47\x32\xf0\xd3\x5c\x9a\xe6\x2f\xc4\x52\x5c\x48\xa2\x98\x7a\x72\x7d\xae\x49\xef\x23\x3a\x95\x0d\xc9\x40\x49\x77\x35\xb7\xd0\xa6\xa8\x70\xfe\x9e\x76\x18\xdf\xed\xbd\xf4\x9f\xa0\x34\x84\xb4\x23\x89\x28\xb2\x45\x5c\xbb\xee\x44\x2c\x21\xa7\x99\x00\x98\x27\x41\x0b\x23\x96\x06\xc0\xd3\x11\x6b\x54\x68\x97\x08\xc0\x60\xe5\xcc\xf8\x30\x4e\xf2\x15\x0d\x2c\xa7\x05\xf3\x6c\x5f\xed\x72\xe5\xae\xb9\x3d\xd8\xc7\x27\x7b\x30\x37\x9d\x92\x45\x07\xa6\xa5\xd8\x82\x79\xb7\x2f\xf6\x6d\x26\x2e\xab\x59\x55\x88\x37\xff\xd2\x77\xae\xa0\xc8\x39\xb3\x5f\x65\x22\x1f\xae\xd4\x2e\x86\xde\x7d\xd2\xb4\x8a\x47\x54\x25\x1e\xb3\xa8\xf3\xf9\x9c\x62\x46\xef\x2a\xc7\x7b\x5c\x0c\x3d\x25\x21\x77\x0c\x71\x3d\x65\x11\x28\x6d\xea\x7e\x03\x00\x00\xff\xff\x52\xea\x28\xc3\x9a\x02\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0xce, 0x51, 0xd2, 0xef, 0xab, 0xb9, 0xc9, 0x25, 0xca, 0x0, 0xc2, 0x25, 0xf7, 0x6f, 0xb8, 0xd5, 0xa3, 0x53, 0x44, 0xcf, 0x86, 0x86, 0xf8, 0x39, 0xf1, 0xd, 0x64, 0xf1, 0x88, 0x1f, 0x83}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
