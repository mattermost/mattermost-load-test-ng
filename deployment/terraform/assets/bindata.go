// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cluster.tf (19.969kB)
// dashboard.yaml (231B)
// dashboard_data.json (40.142kB)
// datasource.yaml (296B)
// es_dashboard_data.json (8.51kB)
// outputs.tf (566B)
// variables.tf (1.187kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\x7f\x8f\xdb\x36\x96\xff\xfb\x53\xbc\x53\x82\x4d\xb2\x88\x24\x7b\x3c\x6d\x92\xd9\x9d\x16\xb3\xd9\x76\xb1\x40\xdb\x04\xd7\xbd\x5b\x1c\xb2\x03\x81\x22\x9f\x6d\x66\x24\x51\x21\xa9\x71\x9c\xdc\xdc\x67\x3f\x90\xa2\x7e\x58\x96\x6c\x8d\x33\x69\x92\x6d\x52\x14\xf0\x90\xef\x3d\x3e\xbe\xdf\x8f\xa4\x3d\xd1\x28\x25\x59\x08\x99\xc2\xfb\x09\x80\xc4\x37\x05\x97\xc8\xa2\x5c\x8a\x6b\xce\x50\x2a\x3b\x0c\x40\xd6\x0a\xce\xdd\x67\x00\x25\x0a\x49\x11\xe0\x1c\xbc\x15\x51\x2b\x4e\x85\xcc\x43\xb2\x56\x9e\x9b\xbf\x46\xa9\xb8\xc8\xcc\xfc\xff\x7d\x07\xf3\x60\x5a\x4e\xdc\x4c\xcc\xff\x37\x93\x49\x45\x1d\x3c\x83\xe4\x56\x5e\x1a\x0c\x83\x52\x28\x1f\x89\xd2\xfe\xcc\x60\xe5\x52\x2c\x78\x82\x66\x3c\x4d\xfd\x44\x10\xa6\x51\x69\xcf\x50\x61\x44\x13\x4b\x21\x2a\x91\x3d\xf0\x68\x21\x25\x66\xda\x83\xf7\x5b\xf3\x94\x24\x09\xca\x88\x33\xcc\x34\xd7\x9b\x61\x40\x55\xc4\x19\xea\x88\x33\xe5\x81\xa7\x30\x41\xaa\x91\x95\x0c\x5e\xe7\x34\xe2\x0c\xce\xe1\x9a\xc8\x00\x55\x74\x9d\x53\xc3\x84\x44\x27\x0c\x8b\x7f\x85\x9b\x28\x27\x5c\x7a\xe0\x5d\xe1\xa6\x44\x34\x63\x19\x49\x11\xec\xe6\xee\xbf\x37\xf8\x34\x29\x94\x46\x69\xc7\x6f\xfc\x2b\xdc\x58\x24\xb3\xdd\x22\x4e\x38\x35\x74\xe0\x1c\xcc\xc6\x1f\x1a\x70\xa5\x56\x51\x33\xf3\x68\x77\x5d\x9e\x29\x4d\x32\x8a\x1e\x78\x24\xcf\x23\x85\xf2\x1a\x65\xb9\xbc\x26\xcb\x46\x75\xbf\x18\x3e\x06\xb8\x20\x79\xee\xdf\x7f\x4f\x45\x91\xe9\x80\x67\x0c\xdf\xde\x78\x56\x5f\x13\x00\x2a\xb2\x0c\xa9\x36\x0a\x2a\xe9\xdc\x83\x7f\xac\x10\x18\x2e\x48\x91\x68\x28\x14\x4a\xbb\xc3\x85\x90\x20\x0a\x09\x17\x3f\xff\xdd\x82\xe9\x4d\x6e\x97\x53\x6a\x55\x5a\x80\x81\xb4\x2a\x8e\x8b\x4c\x17\xe5\xd8\x4a\x28\x0d\xe7\xa0\x30\x59\x04\x6e\x93\x3c\xaf\x56\x26\x29\x87\xe6\xdf\x39\x78\x24\xe5\xfe\x74\x41\xe6\x4f\x9e\x7e\x3b\x27\x8b\xf8\xe4\xd9\xf4\xe9\xe9\xd4\x83\x7b\x70\x32\x0d\xa6\xa7\xf0\xd3\x3f\x7e\x9d\x00\x54\xe2\x88\x1c\x03\x66\xb3\x46\x2e\x5b\xe3\xdb\xaa\xb1\xd4\xdb\x2a\x0c\xae\x70\x13\x70\x66\x77\x5f\x64\xba\xc5\xc3\x0e\x35\x0b\xe0\x4c\x44\x21\x2d\x24\xd7\x9b\x68\x29\x45\x91\x1b\x4b\x82\x73\x78\x55\xf9\x50\x67\xda\x90\x79\x35\xbd\x0c\x38\x7b\xbc\x07\x22\x5a\x0a\xa5\xb8\x03\x9c\x00\x5c\x1a\xc1\xb0\x4d\x46\x52\x4e\xc1\x93\x42\xe8\x28\x4e\x04\xbd\x8a\x18\x5e\x73\x63\x03\xa5\x8e\x16\x42\x46\x48\xe8\xca\x71\xbc\x03\x67\x81\xa8\xc8\x34\x66\xba\xf6\xec\x6b\x91\x14\x29\x46\x8a\xbf\x33\x72\x4b\x84\xb8\x2a\xf2\x87\x3b\xa8\xc1\x35\x49\x0a\x7c\x0c\x5e\x0b\xdc\x7b\x0c\x59\x91\x24\x8f\xb6\x09\x39\x05\x8c\x25\x64\xc0\xb7\x08\xdd\x54\x86\x60\x43\x86\x09\x2a\x26\x6a\x18\xc7\xa8\xb6\x59\xc5\xa2\x46\x37\x29\xd1\x1a\x65\x2a\x94\x8e\x12\x4e\x31\x53\x18\x19\x04\x0b\xcd\x50\x69\x9e\x11\xed\xa2\x53\xb8\x12\x29\x86\xa5\x35\x86\x0d\x5e\x8b\x84\xef\x48\x78\xbd\x8c\x48\x4c\x85\x46\x1f\xdf\x22\xad\xf8\xe1\x59\xc2\x33\xac\x95\x0e\xe0\xad\x57\x26\x80\xbd\x82\xff\x00\x7f\x01\xe1\x35\x91\x61\xc2\xe3\x90\x26\xa2\x60\x61\x65\x43\x61\x2c\x84\xf6\x17\x3c\xe3\x6a\x85\x0c\x2e\xff\x04\x4c\x00\xd2\x95\x80\x07\xff\x24\x5c\xf3\x6c\x69\x9d\xcb\x22\xf9\x3c\xe3\x3a\x08\x82\x07\x7f\x02\x95\x20\xe6\x30\x33\xd0\x19\x7a\x8f\xab\x15\x4b\x44\x4d\xf3\x28\x8e\xe5\x03\xf8\x5f\x50\x05\x13\xa0\x11\xc1\x27\x10\xa2\xa6\x61\x2a\x58\x91\xa0\x6a\x50\x2c\x44\x2a\x58\x2e\x45\x8c\xe0\x50\x9b\xe9\xf5\x12\x35\xf8\x7e\x26\x7c\xba\x42\x7a\xe5\x53\x94\x9a\x2f\x38\x25\x1a\xc1\x7f\xf3\x02\x7c\x58\x69\x9d\xab\xb3\x30\x54\x73\x1f\x0b\x7f\x8d\x26\x80\x07\x24\x25\xef\x44\x46\xd6\x2a\xa0\x22\x0d\x19\xc6\x81\x14\x71\xa1\x74\x8e\x92\x62\x6e\xb4\x10\x70\x11\x9e\xce\x7e\xf8\xf1\xf9\xb3\x67\x7f\x0d\x96\xf9\xb2\x62\x96\xe4\xda\xc4\x45\x20\x8c\x81\x7f\x0c\x1f\xeb\xf5\x3a\xc8\x85\xd2\x4b\x89\xea\x4d\x12\x08\xb9\x0c\x53\x64\x9c\x84\x57\xb8\x51\xe1\xc5\xf3\xe7\xcf\x4f\x9f\xff\xf8\x34\x20\x8a\x1e\x58\xd2\xce\xa9\x15\xf8\x14\x1e\x58\xc1\xfe\xcb\x63\x18\xdb\x75\xce\xc2\x90\xe4\xba\xbb\x4c\x5e\xc4\xa1\xc4\x5c\x28\x33\x09\xf7\x1f\x26\x2a\x8e\x24\x26\x48\x14\x82\x4f\xd5\x23\x3f\x5f\xb2\x25\xa4\x84\x67\xff\xf2\xe0\xbb\x52\x1f\x24\xd7\x61\x69\xc9\x2a\x48\xb8\xd2\x01\x0b\x0d\x94\xfd\xfc\xa0\xc3\x8b\xe1\xd3\x8a\x61\x03\x45\xce\x88\xc6\x81\x79\x6b\x5b\x49\x62\xe0\xd2\x8d\x7a\x93\xf8\x34\xe1\x98\x69\xff\x69\x30\x3d\x8c\xd1\xec\xa9\x42\x9b\xcd\x46\x60\x49\x91\xa2\x5e\x61\xa1\xfc\x4c\x30\xe3\x18\xb9\x90\x1a\xe5\x61\xcc\xac\x48\x09\xd5\x09\x24\x3c\x2b\xde\xfa\x5a\x88\x44\xf9\xa6\xe8\x68\xff\xfd\x4d\x70\x1a\x4c\xfd\xd9\x74\xfe\xcc\xaf\x8b\x8d\xcb\xaa\xa6\x18\x4c\x88\x29\x6a\xc9\xa9\x3a\x2e\x29\x3a\xe4\x7f\x9b\x4c\xe8\xe9\x79\xf0\x36\x21\x72\x69\x03\xda\xb8\xcc\x06\xdf\xc1\x14\xbe\x87\x19\x9c\xc1\x74\x64\xd2\x3c\x2a\x19\x3a\x59\x37\x09\xf1\x6b\xa2\xfb\x4c\xf3\xcb\xe7\x92\x0d\x8e\x0d\x87\x4d\x98\xea\x86\xf9\x8d\xd2\x98\x9a\x38\x84\x19\x89\x13\x1c\x86\xec\xa1\x4a\x18\xb3\x5e\x9d\xf0\x78\x21\x32\x4d\x45\xb6\xe0\xcb\x59\x47\x6a\x95\x60\x58\x12\x2c\x25\x59\x90\x8c\x58\x61\x08\xa5\x42\x97\x23\x42\x37\x1e\x3d\x09\xe6\xc1\x93\x88\xa4\xec\xdb\xd3\x80\x61\xdc\x61\x80\xe5\x57\x4b\xf0\x39\x1c\x84\xde\x5a\x76\xc9\xf5\xaa\x88\xed\x92\x3c\x8b\x0b\x7a\x85\xba\xf9\xe0\x18\x50\x21\x13\xeb\xcc\xb4\x5a\xe1\xf5\x49\x30\x0b\xa6\x35\x44\x64\xff\x8c\x6c\x4c\x3e\xc8\xd8\x58\xa4\x21\xfe\x5e\x17\x4a\xaf\x89\xa6\x2b\xf3\x07\x26\x44\x69\x4e\x15\x12\x49\x57\x51\x95\x56\xfa\x38\x9e\x59\x8e\xfb\xe1\x7d\x3b\x19\x94\x39\xa5\x64\x45\x13\x19\x2c\xdf\x75\xeb\xa0\x2b\xc6\x25\x84\x22\xd7\x03\x84\x3a\xf0\x9a\x48\xf0\xdf\xbd\xbd\x5e\xc0\x2d\xd7\x05\xff\xf9\xbe\x65\xc0\xf7\x95\x96\x3c\xf7\xa9\x48\x73\x91\x61\xa6\xd5\x79\x37\x0b\x37\x26\xcb\x08\xa6\x22\xf3\x25\x1a\x41\x1c\x32\x6c\x67\x36\xbe\xcb\x8a\x1d\x68\x94\x26\x68\x75\x80\x40\x69\x22\xf5\x21\xc2\x95\xda\x07\x48\x56\xd3\x8e\xd8\xc8\x1c\x9e\x4b\xf1\x76\x73\x5c\x06\xb7\xa8\x65\xfe\xee\x26\xd1\xed\x7f\xc7\xa5\xd4\x2e\x0d\xc3\x40\xc9\x6d\xb7\xd9\xdc\x4e\xb6\x7d\x78\xbd\xa9\x77\xd6\x4a\xbd\x44\x29\x41\x39\xd1\x18\xd5\xe5\x41\x44\x18\x93\xa8\x8c\x2c\xb4\x2c\xf0\xa8\xc4\x6b\xf9\x6d\xb5\x97\xad\x1c\x3f\x98\xde\x7f\x6f\x69\xf9\xd3\x15\x7e\x5f\x42\x41\x70\xf7\x0d\xe7\x87\xa7\xf6\x5b\x77\x20\x4b\x9e\xbd\xfd\x28\x8d\xca\x9d\x04\xec\x3e\xf6\x64\x6a\x35\x6c\xe4\x6b\xa7\x43\xc5\x35\x2a\xbf\xc4\x60\xa1\x33\xce\x0e\x52\x92\x81\xbf\x50\xbb\x58\xe4\x9a\xf0\xc4\x20\xb6\x0e\x42\x86\x69\x37\x30\xfb\x63\x38\x49\x23\x17\xfa\x4d\x05\x70\x85\x2c\x92\x22\x31\x21\x1d\xdd\xc1\xef\x4e\x58\xac\x4f\x58\x3b\xa1\xf0\x0f\x7f\xa8\x26\xa8\x44\x13\x03\x0d\xa1\x76\x70\x5c\xab\x7a\x29\x17\xbb\x3c\x54\xdb\x45\xa7\xb7\xcb\xe1\x76\xe6\x65\xc2\xf4\xe5\x96\xbd\xe3\xd2\x4d\x83\x57\xf9\x6f\x49\xb2\xd5\x32\x55\xd9\xa6\x1f\xdd\xe0\x6d\xf3\xd4\x9c\xa6\x57\x47\xcf\xe5\x40\xd5\x65\x09\x5b\x3a\x57\x27\xf5\xcd\x11\x76\x2b\x24\x60\x82\x29\x66\xfa\xa1\x16\x09\x57\xfa\x21\x23\x9a\x04\xdb\xe7\xdd\x41\x75\xda\x1d\x70\xa6\x1e\x3d\x86\xe9\xa3\x5a\xad\x00\xfd\xe9\xa4\x27\x93\x38\xc6\xcb\x5c\x72\x59\x4b\xa0\xca\x15\x18\xab\x8a\xdb\x81\x2c\x81\x2a\x6a\x01\xf5\xa6\x08\x33\xef\xac\xb0\x49\x7a\x83\x21\xbf\x45\x6d\x20\xd8\x7b\xcb\xfc\xc4\x7b\xb4\x2f\xff\xec\xa1\xe1\x32\xcf\xc9\xb4\x9b\x2e\x9c\x56\xcb\x26\xa0\x8e\xd4\xbb\xc7\xd2\x6d\x3b\x77\x85\x42\xd9\xee\x53\x8a\x4a\x45\xb9\x48\x38\xe5\x68\xe4\xfd\xe7\x3f\x3f\x7f\xf1\xcb\x8f\x7f\xff\xdb\x04\x6a\x51\x78\xff\x5d\x5a\x82\x77\x06\xde\xc9\x74\x76\xe2\xcf\xa6\xfe\xec\x49\xe3\xef\xbf\x6a\xa2\xad\xe2\xbd\xb3\xda\x14\xcc\xbf\xf7\x93\xed\xf2\xc3\xbb\xb0\x99\xcd\x90\x41\x75\xf6\xc7\x9a\x40\x3d\xff\x52\xf2\x8c\xf2\x9c\x24\x06\xa4\x67\xfe\x87\xc5\x02\xa9\x59\xc5\xbb\x48\x12\xb1\xde\x05\xf8\x4f\xe7\x73\x06\x84\xc8\xec\x8c\xac\xd5\x19\xaa\xb3\xfb\xef\x6b\x53\x2c\xef\x70\x02\x77\x31\x13\x58\x77\x68\xcf\x77\xee\x70\x6a\x40\x42\x6d\x78\x88\x38\xbb\x39\x2b\x5d\x2d\xec\x77\xac\xf0\x8f\x5e\x8b\xab\x1b\xf7\xf9\xd2\x55\x86\x4e\xb6\xc6\x5a\x31\xc7\x8c\xa9\xc8\x7a\x5c\x53\x33\x0d\x44\xb2\x00\x55\x7d\x54\x51\xc6\xa9\x81\xf8\x65\x22\x4f\x4f\x70\x34\xe5\x80\x07\x9e\x9a\x97\x1f\x8c\x66\xca\x48\x31\x10\x20\x1c\x60\x67\xb5\x03\x95\x63\x6f\x58\x76\x16\x66\xef\xa9\x3c\x35\xaf\xef\xab\x6c\x81\xe2\x0a\xbf\x8a\xc3\xa0\x5c\xd6\xf8\xb5\x61\xe3\x03\x57\x57\xf3\xc8\xf5\x08\x66\xe1\xea\xa3\x59\xdb\xf5\x06\xfd\x7b\x0f\x6a\x58\xeb\x1f\x89\x0b\xa3\xb9\xe4\xd7\xa6\x34\x68\x72\xc9\xc8\x6a\x7a\x74\x4c\x6f\xaf\x6b\x9d\x73\x21\x24\xc5\x88\xa1\xd2\x52\x6c\xaa\x20\xd4\x2b\x64\x23\xb5\xd2\x89\x37\xb5\x96\xab\x3f\x47\xea\xda\x81\x7f\x0c\xcd\x98\xea\xd2\x52\xb7\xe1\xe5\x87\x17\x3f\x4e\x0c\x4f\x7b\xa2\x4a\x6f\x44\x69\x47\x93\xbd\x91\xa0\x09\x33\xaf\xba\xf1\x41\xcd\xcf\x7e\xe2\x4a\xff\x65\xbb\x75\xec\x9f\xfe\xb9\x48\x34\x7f\x49\xa4\xfe\xaf\xdc\x14\x4e\xaa\x17\xfc\xaf\x98\xa0\xc6\x3d\xf4\xfe\x86\x8e\xdc\x4f\x82\xda\xfb\xa0\x76\x74\xb8\xdc\x62\xbb\x2f\x78\xa9\xf9\xd9\xd9\xd9\xfd\xf7\x5b\xe6\x5c\x1b\x68\x99\xff\x6e\x2a\x8a\x37\x8f\xfb\x24\xb5\x57\x18\x17\xb1\x90\xe5\x46\xf3\x7a\xa3\x83\x62\xe9\xc0\x19\xd1\xec\x13\xca\x8b\xf8\xb5\x51\xd1\x80\x50\xc6\xcc\x5e\xd0\xa4\x17\xe0\x65\xb1\x0f\xbd\x9e\x35\xe8\x83\xc2\xde\x6b\x40\xc7\x6a\xa2\x89\xfd\x37\x36\x58\xdf\x4c\x8c\xb1\xef\x78\xac\x64\x2a\x72\x2e\xe8\x81\xc7\xe2\xe6\x8f\xde\x4a\xf5\xd0\x99\xb9\xab\x58\x59\xbc\xff\x40\xbd\x72\xfa\x32\xb5\x2d\x78\xe9\xe4\xbd\x11\x81\xc5\x66\x1f\x26\x27\xc6\x44\x61\xbb\xa6\xec\x47\x28\xe1\x53\x62\x47\xea\x1e\xb5\x61\x9c\xc5\xf5\x68\x03\x97\x13\xa5\xd6\x42\xb2\x6d\xb8\x6a\x74\x02\xa0\xae\x78\x1e\x2d\x78\x46\x92\x48\x65\x24\x57\x2b\xa1\x9b\x4a\x8c\xe4\x79\xb2\x89\x78\x6a\x2f\xdb\x34\x26\x1b\x4b\xc4\x4d\xa2\x69\x25\xb0\x4f\x84\x6d\x21\x95\x50\x35\x78\x5d\x00\x6f\x83\x6f\x4f\xbe\xea\x27\x72\xb9\xff\x2a\xa2\xa7\x84\x65\x71\x55\xbd\xee\x33\x8f\xf6\xe1\x54\x77\x68\xa8\xb1\x19\x6d\x37\xdf\x0f\x98\x4d\x69\x2e\x6d\x33\xe9\xa1\x3b\x60\x37\x3d\x4f\x3b\xfa\xec\xae\x45\xa8\xb3\xe3\xa0\x71\x87\xfa\xa8\xa8\xe1\x2f\x21\x4a\xf5\x6e\x71\x6b\x17\x06\x6a\xc0\x0a\xc6\x98\x43\x9f\x69\xb5\xf0\x2a\x03\x2c\xb4\x88\x52\x9e\x09\x59\xd9\x46\x54\xe4\x4b\x49\x58\xf9\x02\x67\x41\x12\x65\xc0\x72\x94\x0b\x21\x53\xbb\x02\xcf\x14\x5f\xae\x74\xbb\xaf\xa8\x8d\xcc\x0c\x44\x7d\xc0\xfb\xed\x03\x33\x96\x0b\x9e\xe9\x96\x7d\x54\x43\x23\xec\xa3\x47\x76\x23\xad\x63\x9f\x52\x47\xe9\xb4\xcb\x6d\x9b\xd2\x0e\x81\x9a\x87\x60\xc7\x09\x5e\xb5\xcc\xed\x32\x58\x4b\xae\x51\xc2\xf7\xfd\xe6\xb9\x96\x1e\x9c\xf5\x4f\x49\xd6\x63\xb8\x85\xd2\x22\x6d\x38\x6c\x1f\xc4\x9e\x83\x77\xf1\xcb\xff\x78\xc6\xed\x95\x26\x9a\xd3\x28\xc5\x34\x46\x59\xbb\xfb\x31\xdc\xf7\x46\x83\x56\x04\xa8\x9e\xa5\x45\x64\x59\x3e\x2a\xbb\xd5\xbb\x2b\x83\x33\xfa\xe5\xd5\x5d\x5f\x24\xef\x84\x8f\x3b\x3a\x03\xb7\xbb\x3a\xf0\xe0\xaa\x8b\x37\xe6\xf9\xd5\x88\xb5\xaa\xe7\x58\xf5\xe1\xc6\x20\x62\xa5\x88\x1a\x72\xdc\x19\xfb\x6d\x53\x8a\xe5\xcf\x1a\xd1\xef\xf0\xe0\xfc\x4b\x38\xbe\xfe\x04\x87\xcd\x77\xfb\xdc\x65\xdb\xe0\xca\x57\xa0\xbb\x59\x66\xe4\x03\x8f\xb6\x83\xee\x79\x2b\x5a\xad\xe9\x97\x6b\xda\x93\x13\x45\x25\xcf\xab\xc7\x75\x17\x79\x5e\x9f\x1c\x82\x05\xb2\x3a\xa9\x82\x65\x95\x69\xa0\x67\x01\x1b\xbf\x79\xb6\xb4\x5e\xe7\xbc\x42\x8a\x34\x32\xe2\xb5\x5c\x9d\x9c\x94\xd1\x50\x54\x43\xad\xc1\x5c\x0a\x2d\xa8\xa8\xce\x07\x34\xcd\x4b\xd9\x51\xce\x64\x69\xc4\xd6\x51\xbd\x69\x60\xff\x0b\xa7\x5e\x75\x08\xb4\x6f\xc5\xa7\xd3\x6f\xbf\xe9\x59\xb3\x1e\xbe\xfb\x55\x2d\xf1\x27\x9d\x35\x5b\x83\xcd\x8a\xed\xf5\xee\xc1\xcf\x64\x13\x23\x48\x54\x5a\x72\xaa\x41\x64\xc9\xc6\x52\x85\x97\xb5\xb9\x82\xbb\xd1\xfd\xde\xa1\xfc\xa5\xd0\xb0\x22\x19\xdb\x40\xe9\x7c\x9a\x5c\x19\x17\x72\x8f\xaf\x15\xac\xb9\x5e\x89\x42\x43\x4a\xb2\x82\x24\xc9\x06\x94\x5a\xf9\x06\x82\x67\x5a\x80\x5e\xa1\x23\x18\x7c\xb0\xa0\x4b\xf1\x3d\x9b\x4d\xa7\x3b\xc2\xee\x4c\xb5\x05\xde\x15\xfa\xb6\x3f\x0c\xc5\xe5\xad\x07\x47\x15\x6b\x38\x6c\x02\xbb\x2c\x55\x63\x1d\xe5\x97\x4f\xd7\x0f\x0b\x62\x94\x1f\xbb\xe7\xbf\xbf\xad\x3b\xfb\x6e\xd1\xd1\x5e\x5d\xc2\xdf\x85\x73\x57\x7e\xf5\xe4\x74\xc0\x02\xea\xa9\x1e\x0b\x28\xd8\xad\x2c\xa0\x7e\x7f\x3d\xd6\x30\x8f\x64\xeb\x96\x86\x79\x0c\x5b\xbb\xc1\xa9\x33\xf5\x69\xa4\x75\x0c\x5b\x1f\x2a\xad\xdf\xd8\x85\x0f\xf9\x30\x8b\xdb\xbe\x7b\x2b\xaf\x1d\x6e\xe7\xbb\xd9\x77\x84\x36\xe6\xf3\xe9\xb7\x03\xda\xa8\xa7\xee\x5c\x1b\x23\xf8\xfa\xe6\x74\xbe\x9b\xcd\x3b\x53\x77\xce\xd7\x88\xd0\xdb\xf4\x72\x63\x42\xa8\xed\xe2\x0e\xd6\x44\x3f\x55\xf1\xd1\xc2\x1f\x5f\x1e\xd5\xdf\x47\x72\x3c\xb5\x41\xca\x99\x43\x3b\x8c\x64\x61\xef\xe1\x1d\xe3\x6a\xe5\xda\xd6\x9d\x86\xee\x1c\x3c\xa7\x41\xb3\x6c\x57\x7d\x75\xdd\xd5\x55\x5e\x3d\xd1\x55\x5d\x5b\x79\x6d\xef\xaa\xe6\xba\x3e\xb6\xd3\x66\xb9\x4e\x71\xa0\xc9\xba\xdd\xbe\x49\xce\x8f\xdf\xf7\xe9\xd4\x96\x22\x7d\x3b\x77\x53\x9f\xf5\xde\xcb\x30\xb9\x67\xfb\xb8\x77\xf7\x43\x5b\x1f\xdc\x77\x19\x52\x3f\xf9\xb6\x5d\xd5\xe7\x6b\xe1\xb7\x5e\xf7\xee\x3f\x92\x1b\x19\xb4\x7b\x4e\x43\xc6\xd9\xd2\x61\x93\x3a\x6c\x59\x3b\x06\xb6\x2b\xc5\x1a\x64\x9f\x30\xab\xaf\x54\xed\x9e\x6f\xf4\x23\x6e\x55\xd1\xb7\x53\xc5\x76\xd3\xfc\x99\xa8\xc0\x35\x18\x7b\x54\xe0\x20\xbe\x50\x15\x34\x5f\x89\xb9\xeb\xb2\xa4\xf2\xac\x6e\x16\x1c\x69\x13\x35\x7a\x95\x8b\x76\x6d\xe1\x68\x23\xf8\x42\x92\xd8\x51\xbe\x54\xc9\xed\x70\x34\xfb\x88\xe2\x7b\x36\x7d\x36\x94\x10\xdc\xd4\x97\x20\x42\xf7\xe0\xfd\x13\xc8\x6f\x3e\x5c\x4b\xcc\x7f\xd3\x5a\xe2\x83\xe4\xd7\x2e\x29\xee\x56\x7c\x9f\x7b\x2d\x72\xdb\x10\xec\x5e\x4a\x8e\xee\x2f\x1c\xfc\xe1\x0e\xe3\xd7\xdd\x96\xc2\xe1\xd6\xb7\x36\xa3\xba\xc5\xd3\xd3\xf9\x40\x53\x56\xcd\xdc\x61\x4f\xf6\xf8\xa0\x48\x2f\x9b\x1b\xb1\x3d\x8f\xec\xb6\x2c\xe9\x66\x32\xb9\x07\xff\x44\xc8\x10\x19\x10\x50\x98\x13\x49\x34\x76\x9b\x2e\x63\xc2\xa0\x05\xe4\x12\xaf\x4d\x4f\x46\x37\x34\xe1\xd4\x3d\x03\xc4\x8c\x6e\x20\x46\xbd\x46\xcc\x26\xf7\xec\x49\x27\xc9\x73\x87\x49\x32\x06\x8e\xc9\x72\x24\x18\x57\xfb\xe4\xb9\x29\x3e\xeb\x2f\xca\x7c\x26\x75\xcf\xc9\x37\x87\xea\x1e\x07\x71\xe7\x75\xcf\xb6\xef\xdc\xb6\xf8\xa9\x8d\x68\x84\xd7\x95\x5f\x06\xba\xcd\x49\xea\xec\x76\x27\xa9\x76\x81\xc3\x4e\xfa\xd2\x80\x7d\xb4\xcb\x91\xa7\x7d\xa7\x5c\x4f\x7b\x8f\xb9\x46\x5f\x53\x7c\x82\xfb\x98\xcf\xf9\x9e\xe0\x53\x5f\x14\xb4\x1e\x1f\xbc\x16\xf1\x71\x5f\x55\x78\x2d\x62\xf7\xcd\xbe\x7f\xe7\xdf\x7d\x69\xc4\x73\x87\x3f\xff\xd2\x47\xf4\x8e\x7e\x05\xe6\xeb\x23\x81\xaf\xbf\xee\xf2\x65\x7c\xfb\xfe\xeb\x6f\xb1\x7c\x99\xbf\xc5\xb2\xf5\x90\xe4\xff\x03\x00\x00\xff\xff\xe5\x3a\xb1\xb2\x01\x4e\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0xce, 0x14, 0x61, 0xa1, 0x84, 0xb1, 0x21, 0x95, 0xa1, 0xba, 0xbe, 0x60, 0xe7, 0x76, 0x13, 0x6c, 0x9f, 0xa3, 0xdf, 0xfb, 0x9f, 0x9f, 0xb9, 0x28, 0xc3, 0x7a, 0xf9, 0xd7, 0x8f, 0x71, 0x95}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\xb6\xf6\xc0\xdf\xe7\x53\x10\xc2\xff\x7f\x91\x0e\x71\x16\x3b\x71\xb2\x04\xd8\x8b\xd4\x6b\xbb\x02\xcd\x96\x9b\x87\xdd\xe1\xb6\x85\x40\x4b\xc7\x32\x11\x49\x54\x49\xca\x89\xd7\x65\x9f\xfd\x82\x94\x64\x53\x0f\xb6\x65\xc5\xae\x9d\x86\x7b\xb1\x46\x47\xa4\xc4\x73\x78\x78\xf8\xcb\x21\xc5\x7c\xdd\x41\xc8\xc2\x61\x48\x05\x16\x84\x86\xdc\x3a\x43\x52\x84\x90\xe5\x13\x2e\xac\x33\xf4\x51\x5d\xa1\x54\xaa\xee\xf4\x63\xe2\x8b\xf7\xa1\x75\x86\xda\x7b\x53\xa9\x8b\x05\xe6\x34\x66\x0e\x58\x67\xc8\x6a\xb5\xd0\x3b\x86\x07\x38\xc4\xa8\xd5\xb2\xb4\x62\x10\xe2\xbe\x2f\x8b\x08\x16\x83\x26\x1f\x12\xb7\x42\x4a\x1c\x1a\xf6\xa8\x4f\x99\x7c\x26\xf3\xfa\x78\xf7\x60\x0f\x75\xda\xed\x3d\xd4\xe9\x76\xf7\x50\xfb\x95\xfe\xe8\x10\x07\xea\xdd\xe7\x53\x75\xd0\xbf\xd0\xb9\x0f\x4c\x70\xbd\x9c\x18\x47\xaa\x9c\x8b\xf9\xb0\x4f\x31\x73\xad\xf4\xde\xa3\xfa\xf7\xf3\x0e\x42\x8f\xb2\xb8\x05\x2e\x11\x85\xd6\x5a\x5e\x08\xe2\xbd\x6b\x9d\xa1\x4e\xf7\xa8\x93\x48\x18\x8e\x86\x37\x94\xfa\x82\x44\x99\x4d\x2c\xa2\x8a\x24\x3f\x0a\x60\xaa\x35\xf2\x66\xf7\xf4\xf0\xe4\xa7\xd3\x93\xee\xc9\x61\xf7\x50\xdd\xf5\x49\x78\x27\xad\xfe\xf1\xb3\xba\x8c\x70\x08\x3e\x9f\xd8\x3d\xb3\xba\x85\x7d\x82\xb9\xb2\x84\xea\xa2\xc7\x4c\x1d\xab\x8f\x95\x64\x80\x7d\x3e\x31\x9c\xd2\xec\x03\x84\x9e\x18\xca\x77\x1e\xe4\xe4\x50\x55\x5c\xef\x3a\x9f\x62\x57\x00\x17\xad\x54\x34\x29\x56\x61\x8e\x44\xce\x98\xea\xa0\xfc\x43\x07\xc4\xf7\x75\x17\x51\x82\x77\x0c\xbb\x04\x42\xe9\x58\xd3\x56\x79\x8c\xb8\x97\x74\xea\x7a\x89\x3f\x58\x67\xe8\x54\xeb\xb4\x7b\xf9\xac\x8e\x26\x78\xd0\x9f\x81\x90\x35\x96\xd7\x59\x47\x4e\x9e\x3d\x24\xae\x0b\xe1\x35\x30\x52\xa1\xb7\xea\xa4\x93\xc9\xa5\x0f\x1e\x84\x6e\xbe\x19\x78\xe4\x15\xab\x21\x64\x39\x31\x63\x89\x16\xc5\x3b\x01\x7e\xa8\x92\x92\xb0\x42\xca\x87\xf4\xbe\xec\xf2\x82\x0a\xec\x57\x94\x1e\x61\x3f\x9e\xea\x50\x52\xd4\x27\xa1\xba\x9b\xeb\x19\x29\xbc\x27\x6e\xe2\x06\xba\x54\x73\xb9\x64\xe8\xc4\xbe\x7f\x49\x49\x28\x2e\xa8\x1a\x86\x96\x43\xc3\x10\x1c\x01\xee\xb4\xfb\x69\x94\x8f\x10\x13\xd7\xf9\x30\x79\x5e\xa9\x55\x11\x30\x07\x42\x81\x3d\x28\x19\x3f\x92\xaf\x93\xee\x10\xcb\xba\xdd\xbc\xbc\xdc\x57\x0c\x42\x17\x18\xa8\x40\x30\xf0\xa9\x98\xb6\x8b\xab\xce\xfd\x7d\x04\x8c\x11\x17\x0a\x8a\xf1\x08\x3b\x50\x35\x14\xb8\xc0\xce\x5d\xe9\x2d\x5c\x40\x14\x81\xfb\x81\x84\xe5\x06\x0b\xcc\x3c\x10\x5c\x8b\x89\x7a\x54\x94\xe3\xe0\x21\x4a\xe2\x14\x16\xb0\x1b\x60\x21\x80\x05\x94\x0b\x3b\x92\xff\x53\xdd\xfa\x95\x84\x5c\xe0\xd0\x81\x9f\xff\xf9\x64\xfd\x1f\x07\x36\x02\xf6\xc9\x7a\xfc\xd8\x0e\x3e\xeb\x91\x4c\x0e\x16\xca\x02\x2c\x1d\xcc\x12\x24\x00\x3b\xd1\x31\x5f\x84\x84\x02\xd8\x08\xfb\x6f\xb1\x23\xd4\xf8\x6b\xe7\x6e\x27\xde\xfc\x76\xf2\x9c\xaf\x93\x97\x3f\x3e\xe6\x1f\x14\x80\x60\xc4\x91\x65\x2a\x1b\x9d\x2f\xcc\x60\xa0\xc2\x9f\x75\x9e\x97\x4b\xcb\xc9\x7e\x9c\xc8\x1e\xf7\xe6\x5b\x89\xc7\xc1\x6e\x33\x4b\xad\xdd\x54\x37\x65\xb5\x9b\xd9\xe8\xf5\x22\x1b\xa5\x3f\x4d\xfd\x55\x0c\x19\xf0\x21\xf5\xdd\x82\x1f\x4b\xd5\xde\x32\x1a\x58\x67\x48\x8e\xd5\x9c\xfc\x0a\xbc\x74\x60\x16\x2a\x5c\x0f\xc9\x40\x94\x6b\x08\x15\xc2\xad\x4b\xca\x05\x47\x11\x30\x74\x0d\x0e\x0d\xb5\x91\x2e\x26\x93\x99\x36\xd2\x03\x7e\x05\x9c\xfa\x71\x3a\x93\x95\x83\x19\x66\xe0\x96\xc3\x19\xa7\x4c\x14\x22\xb5\x8a\x64\x76\x36\x0b\x93\xd0\x25\x23\xe2\xc6\xd8\xb7\x4a\xe1\x23\x2b\xa3\xa6\xd8\x69\xfb\x1e\xf0\x03\x29\xc4\xa1\x7e\xec\xdc\x25\x83\x53\x57\x56\x36\x3b\x0d\x68\xd2\x1e\x15\xb0\x50\x28\x5d\x1d\x92\x27\xa1\xb7\x22\xc2\x8d\xf1\x03\xcc\x89\x09\x53\xe7\xe4\x43\x69\x89\xbc\xdf\xe1\x3e\xc8\x50\x6f\xf5\x68\x1c\x16\xef\x51\xef\x35\xe6\x50\xf2\xd5\x64\x82\xc9\x37\x7b\x32\xc3\x94\xc4\x9a\x3e\x0b\x07\x66\xad\xa6\x96\xde\xb0\xc6\x76\x96\x06\xc7\xb8\xdc\xef\xd8\x27\x5e\x95\x3b\x2a\xf9\x07\x18\x4d\x1a\x9d\x43\xbc\xd4\x04\x86\xae\xb2\xeb\x4a\xba\xca\x09\x9a\xe2\x95\x66\x9f\xd9\x7c\x55\x18\x6f\x8b\xf0\xaa\x50\x3c\xf1\xa9\x62\xdc\x69\x06\x57\x9a\x07\x1a\xb6\x7a\x06\x6c\x35\x14\x22\xb2\x19\x7c\x89\x81\x0b\xbe\x0d\x90\x85\xb2\xb7\xa3\x5a\x98\xa5\xda\xaf\x86\x38\xff\xe6\xb4\xb5\xa4\xed\xb6\x06\xbb\xea\xda\x6c\xab\xe9\xeb\x2a\xb5\xbb\x01\x30\x03\x60\xcb\x34\xd5\x00\xd8\xcb\x01\xb0\x62\x7a\xeb\xb4\x01\x7f\x1d\xd7\xc0\x2f\x93\xde\x32\x08\x56\x1f\xc1\x8a\x33\xf1\x3d\xf4\x39\x55\xc1\x7f\x2e\x43\x6c\x59\x7e\xab\xb2\xe9\x6b\x84\xaf\x86\x56\xdb\x04\x74\x3d\x0f\x80\xfa\x2d\x0e\xfa\xc0\x10\x1d\xa0\x5e\x36\x98\xd1\x2f\x30\x22\x0e\x70\xb4\xfb\x1f\xe8\x5f\x2b\xeb\x66\x37\xe5\x1b\x5e\x19\xc0\x32\x80\x65\x00\xcb\x00\x16\x42\xb3\x32\x5c\x4d\x08\xab\x6d\x08\xcb\x10\xd6\xba\x08\xcb\xed\xdb\x01\xe6\x02\x98\xed\x4c\x27\xb2\xe7\xc4\x59\x73\x14\xf8\x36\xb4\xb5\xbc\x05\xb7\x26\xd1\xb5\xbc\xed\x9e\x17\xb1\xa9\x1d\x3a\x82\xa2\x0b\xa5\x24\xfa\x05\x0b\xdc\x97\x33\xad\xc1\x34\x83\x69\x06\xd3\x0c\xa6\xa1\x19\x79\xb0\xf6\x4f\x4d\x30\xcd\x70\x9a\xe1\xb4\xd5\x72\x5a\xd5\xa2\x1a\x8e\x88\x9d\x70\x42\x1c\x24\xcb\x66\xa8\x3f\x46\xbb\x19\x69\xbc\x42\x3f\xa2\xb9\xd5\x1c\x19\x81\xab\x2a\x2e\x0d\x25\xe9\x8e\xda\x82\x7b\x2d\x4f\x2b\x78\xe4\xb5\x96\x5e\xd7\xd4\xcd\xb0\x26\xce\x1b\x12\x2e\xa8\xc7\x70\x60\x7f\x89\x71\x28\x88\x0f\xbb\x07\xfb\xa7\xa7\x7b\xf3\xed\x9b\xcc\xcf\x15\x06\xde\xf3\xa1\xc1\x12\xe7\x4c\x23\x17\xad\x18\x9d\x9e\xb6\x66\xa3\xb3\x06\x70\xdb\xc1\x6a\xe7\x97\xef\x51\xba\x44\x89\x6e\x48\x00\x68\xf7\x5a\xe1\xb1\xc9\xa1\xad\x19\xce\x66\x80\x99\x61\x32\xc3\x64\x5b\xcd\x64\x9d\x93\x06\x4c\x76\x78\x64\x98\xcc\x30\xd9\xda\x99\xcc\xed\xdb\x5c\x50\x06\x4d\xc0\x2c\x5f\xd7\xd0\x59\x26\x59\x29\x9d\xe5\x8d\x6c\x10\xad\x16\xa2\x5d\x4b\x8b\xa1\x1e\xf6\x7d\x43\x68\x86\xd0\x0c\xa1\x19\x42\xcb\x13\x5a\x69\x71\xb3\x51\xda\xec\xb0\x63\x10\xcd\x20\xda\x7a\x10\x2d\x1b\x4c\xb9\x9d\xe8\xb5\x21\x6d\x4e\x6d\x83\x69\x99\xe4\xe9\x98\x36\xc7\xcc\x06\xd4\x1a\xe6\xd2\x7a\xbe\x8c\xf3\x86\xd4\x0c\xa9\x19\x52\x4b\x6e\xbc\x68\x52\x5b\x49\x2e\xad\x7d\x68\x40\xcd\x80\xda\x4a\x41\x8d\x94\xce\x67\x60\xd4\x01\xce\x6d\x27\x8a\x6d\xae\xbe\x59\xab\xf1\xdd\xe0\x0f\xa8\x7d\x70\xb0\xb9\x5d\x69\xf5\x51\x69\x93\x8c\xd0\xbb\xbc\x45\xb7\x82\xf8\xe4\x2f\x75\x54\x10\xba\xc2\x02\xd0\xee\xff\x1b\x44\xd8\xdc\x5e\xa8\xb9\xdd\x81\x0c\x3a\x20\x83\x0e\x9b\x47\x87\x52\x92\xa7\x11\x3b\x74\x0d\x3a\x18\x74\x58\x29\x3a\x78\xd4\x0e\x20\xe0\x02\x0b\x6e\x63\xdf\xa7\x8e\xdd\x1f\x0b\xe0\x1b\xda\xb3\x7e\x2e\x5b\x30\x27\x65\x30\xcd\xbe\xcc\x68\xf7\x5a\x37\xac\xeb\xef\x54\x5d\x62\x93\x30\xe6\xb0\x5a\x8b\xad\x2a\x91\x75\x2d\x1b\xb8\x5e\x7b\x2e\xdc\xc4\xbe\x84\x3d\x87\x80\xa3\x6d\x36\xe7\xaf\x80\xa3\xf5\x5a\xb3\xb7\xcd\xd8\x7b\x01\x01\x65\x63\x74\xcb\x65\x74\x34\xa8\xbb\x4e\xd4\x55\x9e\x62\x32\x62\xb3\xda\xa9\x13\xc5\x77\xca\xb5\xb9\x21\xb8\x89\xbc\xd6\xe1\x71\x03\x36\xed\x9c\xd6\x80\xd3\x55\x1c\x20\xb6\x22\x34\x7d\xea\x09\x62\x25\x0c\x95\x82\x6f\x44\xa0\x9d\xef\x88\x40\x79\x1c\xec\x92\xd0\x61\x80\x79\x71\x11\x4b\xc6\x62\x1a\xd7\x3a\xf3\x6a\xde\xf2\xe1\x32\x87\x7f\x69\xb0\x58\x9b\x63\x56\xa3\xc1\xfc\x36\xcf\x3f\xfe\x61\x3b\x20\x21\x59\x2d\x53\x4b\x67\x52\x67\x75\x62\xd6\x05\x09\x63\xb1\x08\x19\x0c\x13\x54\xfa\xd7\x16\xcc\xb6\x86\x0a\xb6\x86\x0a\x9e\x75\xb6\xab\x11\x51\x98\x4d\xe7\x26\xdb\xb5\x5a\xd6\xf0\xa8\xed\x51\x46\x63\x21\xbb\x64\x8b\xcf\x65\xc8\xb5\x73\x8d\xc7\x2f\xd4\xb1\xc7\x66\x4f\x59\xa8\x63\x89\x67\x72\x98\xc2\x3b\x8a\xae\x8a\x8a\x98\x14\x8a\x39\x39\x61\x1b\xc8\xee\x7b\x04\xa6\xdc\x78\x74\x81\x3b\x8c\x44\xe9\x88\x9a\x26\xd2\x36\x92\x5f\x39\xea\x36\xa0\xa1\x4e\x9d\x73\x11\x66\xe6\x57\x8a\x99\x94\xda\xe7\xb3\x33\xe2\x0d\xc5\x75\x65\x16\xdd\x64\x5e\x9e\x37\x0d\x4d\xb6\x0e\x87\xd4\x85\xba\x7b\x85\xf6\x64\x94\xff\xf9\x93\x15\xf3\x9a\xd9\x97\x39\x2b\x30\xb2\x7c\x05\xaa\x57\x30\xc2\x2d\x07\x86\x6a\xed\x1d\x5a\x8a\x7f\x1a\x6b\xcf\xc7\x5c\x40\xf0\x34\xfd\x4b\x2b\x76\xea\x99\x75\xb4\x7c\xfd\x8d\xb4\x24\xae\x0f\xab\xd5\xf1\xbd\xeb\x43\x1d\x0d\x7b\xdf\x44\xc3\x7f\x3e\x59\x84\x7d\xf9\x9b\xd3\x81\x90\xff\x12\x7a\x8f\x89\x58\xad\xc2\xbf\x8b\x61\x3d\xcf\xfd\x65\x5b\x92\x78\x97\xb7\xe8\x03\xc5\x2e\xda\x6d\x07\x8b\x76\xb5\x19\x10\xad\xf4\xcc\xad\xa3\x3b\x43\xa1\x5b\x42\xa1\x1b\xc9\xbd\x35\xa2\xcd\xc3\x97\x77\x0a\x97\xc1\xca\xb5\x2f\xe8\xe9\x7f\x0c\x66\xf1\x72\x1e\x17\x58\xc4\xdc\x76\xa8\xbb\x68\x45\x0f\x7b\x10\x0a\xd4\x42\x5f\xbf\x22\xad\x12\x7a\x7c\x44\x2b\x5e\xdd\x9b\x79\x12\xd8\x0c\xcc\xd0\x5a\x23\x6f\x1c\xed\xef\xff\xdd\xdd\xdf\x6f\xac\x66\x14\x55\x29\xb9\xe5\xcb\x82\xbf\xde\xdc\x5c\xa2\x37\xaa\xe7\xcd\x92\xa0\x41\x0b\xb3\x24\xf8\x7c\xd9\xa2\x98\xc8\xea\x1e\x35\x40\x8b\xce\x74\x45\x29\x5b\x29\xc8\xa7\xe4\x5e\xc2\xdf\x1f\x34\xb0\xb1\x1a\xd8\xd8\xcd\xff\xfa\x1f\x82\xb8\xa7\xec\xce\x16\x0c\x87\x3c\x20\x42\xdf\x77\xbb\xc4\xfe\xa1\x57\x3f\xfc\x54\xbd\xa4\x55\xde\x84\xb9\xec\x62\xd7\x9f\xc9\x37\x4a\xab\xde\x83\x34\xc3\x0e\x0c\x1c\x20\x23\x58\x95\x19\x1a\xe5\xf2\x96\xb4\xd0\xd5\x32\x16\xda\x16\xc6\xf9\x2d\xb1\x37\xba\xfa\xf3\xc7\xb4\x87\x17\xad\xf1\x19\xc0\xa9\xf4\x67\x6d\x1f\x74\x34\x63\x17\xb4\xc1\x9b\x97\x88\x37\x2e\x38\x24\xc0\x7e\xd1\x63\x37\x93\x52\x69\xc6\x3d\xab\xfd\xf0\x5f\xc6\xe2\x37\x41\x24\xc6\x33\xee\xfd\x17\x18\x7d\x62\x26\x66\x0d\x6b\x7f\x26\x4b\xb3\x2d\xe0\xa4\x38\x21\x50\xdf\xf5\xd8\x17\x10\xa8\x5d\x38\x73\xbf\xbd\x42\x2d\x54\xa8\xf3\x96\xc1\xfc\xcf\xb5\x0a\x55\x5e\xc7\x83\x01\x30\xbe\x4c\x95\x1e\x76\x86\xe0\xce\xad\xb1\xa6\xf5\x46\x77\xe5\x8c\xb6\xb4\xc5\x6b\x6c\x09\x7f\x5e\x98\xb4\xc4\x67\x64\x86\x8f\x2a\x7d\xa9\xd6\x77\x62\x86\x90\x5e\x22\x21\x6d\x84\x84\x8e\x0f\x9b\x90\xd0\x49\x0d\x12\x32\xb9\x9e\x86\xc8\xe2\xc7\x1e\x09\xff\x00\xc6\xd3\xbd\x6e\xc7\xfb\xc7\xfb\x1d\xeb\x05\x20\x4d\x96\xf9\xe0\x02\x0b\xfb\xc6\x89\xec\x5e\xcc\xd8\x1b\x2e\x70\xbf\xd6\xfc\xba\x12\x70\x50\xaf\xf3\x09\x1f\xae\x81\x1f\x48\x2e\xbf\x93\x69\xf9\xe6\x41\xd8\x37\xbd\xcb\xec\xab\xab\x79\xe9\x9d\x35\xe8\x3b\xf9\xd8\x6b\x69\x0e\x59\xa0\x2c\x8f\x83\x92\xaa\x0b\x3b\xb4\xe9\x2e\x9d\x04\xa5\xb4\xbe\x5b\xcd\xb6\xa4\x27\x77\xd8\xd3\xf4\xc9\xde\xb0\xe5\x3b\x8e\x6e\x7a\x97\xfa\x1f\x1a\x34\x5c\x68\x16\x06\xbf\x13\x2e\xdc\x49\x1f\x2b\xc7\x9c\x1c\x4e\x52\xed\xf6\x41\xe2\xe1\x16\x77\x86\x10\xe0\xe9\x3c\xdd\xe9\x24\x62\x31\x4e\x86\x85\x8b\xd9\x5d\x52\x52\x60\x6f\xda\xf3\xda\xb9\xc3\xa9\xf1\x34\x49\x2b\x02\x36\xb0\x26\xaf\x15\x10\x44\x3e\x16\x24\xf4\x26\xea\x58\x3e\xe1\x42\x73\xa3\x9c\x92\xfe\x1f\xd2\x01\xcb\xde\x3a\x65\xaf\x5c\x5f\x0a\x78\x10\xe5\x05\x91\x51\xfa\x8c\x8f\x9a\x10\x21\xcb\xd2\x2e\x3f\x57\xb9\x49\xcd\xaf\x1d\x55\x2a\x70\x40\x42\x92\x6d\xe5\x57\x4e\x63\x27\x43\xa7\x72\xbb\x66\x16\x36\xf5\xd0\x40\x42\xc7\x8f\x5d\x38\xf7\xab\xc0\x6f\xf2\xad\x48\x12\x8c\xf5\x47\x05\xb1\x2f\x48\x79\xe0\xa6\x83\xbc\xa2\xc2\x14\xee\xa6\x31\x11\x21\xeb\x4b\x0c\x6c\x5c\xaf\xf5\x53\xdf\x69\xe7\xa4\x1e\x3c\x14\x8c\x6f\xf1\x3b\x12\xdd\x32\xff\x7a\x1c\x3a\x55\x19\xbb\x72\x84\x14\xd8\x53\x5d\xce\xff\x9d\xb5\xc7\xca\xdf\x2d\x35\x5c\xca\xaa\x0b\xa7\x21\x34\xd1\x4c\xbb\x11\x73\xb8\x49\x1e\x94\xcb\xfd\xed\x64\x8e\xf0\x98\xb8\x2a\x51\x16\x4c\x9d\x74\x90\xcc\x30\x56\x48\xef\x5b\xed\x6e\x76\xa6\xb6\x25\x68\x2a\xb4\x72\xf5\x22\xe2\xdc\x29\x40\x4d\x6b\xa7\x16\xb3\xb3\x85\x27\x3d\x6c\x5a\x5d\x6d\x82\xc9\xc6\xa2\xba\x38\xd4\x2f\xda\xd3\x73\xbc\xad\xae\xf6\x73\x5b\xbf\x38\x3c\xd0\xef\x68\xf3\x46\x47\xfb\xb9\xed\x26\x9e\xff\x39\xd3\x81\x04\x60\x6b\x5e\xb1\xf0\x2d\xfa\x83\x8f\xf5\x07\xeb\x6f\xe9\x1c\xe9\x17\xda\xa7\xa1\x27\xae\xde\xde\xac\x2d\x39\xf3\xfd\x45\x15\x74\x5b\x7d\x46\xef\x79\xea\xbd\x5a\xca\x66\x12\x5c\xd4\xb6\xe0\xd6\x0d\x70\x81\x2e\x81\xa9\x40\x2e\x61\xef\x82\x86\x44\x50\x26\x83\x8c\xaa\x19\xab\x5f\xf1\xac\x83\xe4\xbf\x76\x3b\x91\x8e\x26\x71\xee\x68\xe7\x71\xe7\x7f\x01\x00\x00\xff\xff\x36\xc2\x2d\x55\xce\x9c\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x10, 0x2a, 0x34, 0x55, 0xc8, 0xf9, 0x53, 0xd0, 0x3a, 0xd9, 0xed, 0x39, 0x4e, 0x6f, 0x95, 0x22, 0x8, 0x3d, 0x4a, 0xb0, 0x62, 0x7e, 0xf, 0xa, 0x1e, 0x50, 0xf9, 0x46, 0xfb, 0xf0, 0xa0}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _es_dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xf8\x30\x74\x40\x82\x5a\xce\x52\x04\x7e\x4b\xd7\xb5\x28\x90\xa2\xdd\x32\xec\x25\x08\x0c\x5a\x3c\x96\x38\x53\xa4\x40\x1e\x39\x76\x0b\xff\xf7\x81\xd4\x8d\xba\xb4\xc9\x8c\xac\x6b\x51\x3d\x45\xfa\x78\x48\x7e\xe7\xfa\x21\xd6\xa7\x13\x42\x28\x53\x4a\x23\x43\xa1\x95\xa5\x0b\xe2\x20\x42\xa8\x14\x16\xe9\x82\xdc\xfa\x37\x52\xa1\x7e\x65\x55\x08\x89\x6f\x15\x5d\x90\xe8\xb4\x45\x39\x43\x66\x75\x61\x62\xa0\x0b\x42\xcf\xce\xc8\x1b\xc3\xd6\x4c\x31\x72\x76\x46\x03\x33\x50\x6c\x25\x9d\x09\x9a\x02\x02\x3c\x15\x7c\x04\x15\xb1\x56\xbf\x6a\xa9\x8d\x3b\xd3\x24\x2b\xf6\x6c\x76\x4a\xe6\x51\x74\x4a\xe6\x17\x17\xa7\x24\xfa\x39\x3c\x5a\xb1\xcc\xdf\x7d\xd5\xba\x43\x7e\x22\x57\x12\x0c\xda\xd0\x0e\xf7\xb9\xb7\xe3\xcc\xa6\x2b\xcd\x0c\xa7\xd5\xda\xc1\xff\xbd\x3b\x21\xe4\xe0\xcc\x29\x70\x81\x3d\xb6\x34\x51\x80\x6f\x39\x5d\x10\x55\x48\x59\x22\x86\xe5\xe9\x9f\x5a\x4b\x14\x39\x5d\x90\x99\x07\x85\x33\x39\xf7\x8f\x52\xa8\x8d\x8b\xeb\xed\x9d\x7f\xcd\x99\x02\x69\x9b\xc8\xd6\x71\xa5\x4c\x0a\x66\xbd\xaf\x3e\x09\x87\x9a\x30\x5d\x31\x8f\xac\x99\xb4\x4d\x68\x3c\xf7\x6b\x50\x09\xa6\x2e\x0d\xb3\x0e\x0e\x63\xe6\x41\x72\x6a\xe6\x7e\x65\x2d\xa4\x0c\x33\xe9\x81\x37\x86\x71\x01\x0a\x6b\x77\xfc\x42\x62\x04\xff\xa0\xdb\x0a\x29\xd3\x46\x17\xe4\x32\x88\xed\xbd\x3b\x6b\x1e\x00\xbb\xf0\x0c\x42\xe8\xde\xbd\xd7\xf1\x6e\xce\x4e\x05\xe7\xa0\x6e\xc0\x88\x11\xf2\x3e\x96\xcd\x25\x54\x42\x02\x8a\x77\x69\xb0\x6d\xd2\xdf\x46\x08\x8d\x0b\x63\x4a\x2f\xfa\x2b\x19\xdb\x8d\xa1\x42\x8d\xa0\x36\xd5\xf7\xc3\xca\x44\x8d\x4c\x8e\x58\x6f\x99\x2c\x5a\x1f\x06\x8e\x4a\xa1\xfc\x6a\x78\x9a\x07\xef\x05\x2f\x73\xd9\xa0\x2e\x4d\x1f\xb4\x50\xf8\x4e\xfb\xd6\xf0\x40\x53\xc7\x54\xe7\xdd\x86\x6d\xf2\x7c\xdd\xd4\xdb\xe0\xf6\x1c\x4c\x0c\x0a\x59\x02\x83\x20\xe7\xee\x26\x97\xf6\xc2\xed\x9d\x77\xf1\x61\x4e\x0c\x28\x0e\x06\x7c\x5f\xae\xa5\xc6\x96\x97\xf5\x49\x7c\xbf\x05\x63\x04\x87\xb6\xf0\xcb\xc5\x9c\xc5\x30\x56\xb7\x16\x59\xbc\x19\xdc\x62\x11\xf2\x1c\xf8\xb5\x50\x43\xc2\xc8\x4c\x02\x68\x83\x11\x15\x0e\x29\xd7\xbd\xbb\xbc\x1c\x1b\x0c\xe1\x19\x48\x66\x51\xc4\x16\x98\x89\xd3\xa5\x50\x5c\xc4\x60\x97\xd5\xeb\x1a\x30\x4e\x97\x3e\xa3\xb7\x51\x76\x17\x0e\x95\xa6\xde\x5e\x6b\x93\x31\xac\xcf\xeb\x5a\x18\x58\xfb\x91\x40\xaf\x68\x03\x1f\xaa\xa7\xd6\x77\x4c\x0d\xd8\x54\x4b\xde\x8b\x09\x8a\x0c\x5e\x1b\x9d\xf5\x3b\xd3\xe1\x7f\x40\x52\x25\xb9\xb7\xe1\x26\x15\x6b\x1c\xee\x40\x3f\xac\xe8\xef\x05\x98\x3d\xe9\x10\xa5\xd8\x4c\xa8\x4f\x61\x6d\x33\x03\x7c\x58\xdd\x56\x1b\xec\x35\xae\x2f\xec\x65\x3d\x3b\x5d\x04\xb7\x82\x17\x4c\xd2\x41\x95\xd5\x36\x7e\x30\xb6\x04\x76\x6c\x27\x7a\xe5\xba\x2a\xe2\x4d\x99\xc3\xd0\x0f\xd7\x89\x55\xc9\x3b\x57\x47\x46\x7c\xcf\x7a\xbc\x43\x9b\x4e\x1c\x69\x84\x3d\xdb\xc1\x17\x4a\x67\xdd\x24\x5b\x69\xd5\x4b\xb6\x64\x2b\x90\x75\x90\x05\xd8\xe7\xb6\xb7\xae\x93\x97\xcc\x42\x57\x1d\x9b\x91\xd3\x65\xde\xcc\x9c\x01\x1c\xb8\xd4\x96\xd4\xe9\x43\x6c\x6d\xea\xf2\x36\x4a\x77\x70\xc3\x7f\xc8\x73\x50\xfa\xfb\x61\xea\x99\x14\xc9\xd8\xb4\xf5\xf8\x35\x6c\x1b\xd2\x1d\x6d\xae\x42\xf0\x23\x88\x66\x07\x38\x56\x35\x7f\x99\x54\x73\x52\xcd\xa7\x56\x4d\xa1\x38\xec\x84\x4a\xca\x87\x47\xeb\x66\xbd\xed\x11\xda\xf9\x99\x41\xf7\x6f\xb8\x71\x90\x80\xf0\x68\x72\xde\xdc\x57\xc6\x38\xbb\x97\xdf\x88\xb2\xbf\xd2\x71\x91\x81\x42\x4b\x6a\x4f\x9f\xd7\xd4\x27\xbd\x7f\x02\xbd\xff\x82\x82\xd2\xf7\xf9\x24\xf6\x93\xd8\x7f\x95\xff\x90\x2f\x8f\xd0\xfa\xf9\xa4\xf5\x93\xd6\x1f\xa5\xf5\xe3\x52\xca\x75\xdc\x9f\x76\x7d\xd1\x1c\x58\x1c\xa3\xe6\x9f\xbf\xbd\x12\x71\xee\xcd\x1f\x64\x42\x2a\xeb\xef\x4b\xc1\x03\xbe\x93\x64\x3f\xb5\x64\x7f\x4d\x1d\x9c\xf4\xfa\x07\xd2\xeb\xc1\x3f\xe7\xc7\x08\xf6\x8b\x49\xb0\x27\xc1\x7e\x42\xc1\xb6\xa8\x0d\x2c\xad\xf8\x08\xcb\xd5\x1e\xe1\x01\xf1\x76\x76\xdf\xf8\xcf\xd8\x37\xce\x21\x5e\xea\x24\xe9\xf0\x9d\xa4\xf2\x28\xa9\xe4\x10\x8f\x55\xc6\xa4\x96\xff\x87\x5a\x9e\x54\xc7\xba\xbe\x73\x2d\xe5\xbc\x8e\x66\x65\x6e\xa8\x8d\x53\xc8\xd8\x5f\x60\xac\xd0\xee\xec\xf9\xbc\x84\x71\x2f\xab\x6f\xd7\x66\x53\x5a\x22\x4b\x82\xaf\xcb\x08\x59\x2e\x19\x0a\x95\x0c\xbf\xe4\xb7\x1f\xb6\x7d\x21\x36\xeb\xeb\xb2\x6b\xa9\xd2\xf7\x67\xd1\x45\x56\x05\x9d\xa2\xae\x40\xda\xd9\x97\x8b\x78\xe3\x87\x64\xb5\xbb\x62\xbf\x14\x0a\xc1\x6c\x99\x0c\x0b\x91\x5e\xb4\xa5\xd6\xf8\xe6\x5f\xce\xc3\x97\x28\x6b\x9f\x2f\x82\xe7\x28\x7c\x39\x9f\x85\x2b\x41\x27\xce\x83\xe7\xa8\xfa\x96\xdf\x75\xf5\xa3\xf6\xc3\x96\x56\x01\xab\xc7\xcb\x6f\xe1\x14\x25\x99\x56\x02\xb5\xa9\x7f\xa0\xa4\x85\xd7\x68\xfa\xea\xf2\x3a\x7b\xf1\xf7\xe6\x5d\x15\xed\x6d\x93\x91\x68\x76\x72\xf8\x27\x00\x00\xff\xff\x22\xec\x09\x54\x3e\x21\x00\x00")

func es_dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_es_dashboard_dataJson,
		"es_dashboard_data.json",
	)
}

func es_dashboard_dataJson() (*asset, error) {
	bytes, err := es_dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "es_dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x46, 0xe9, 0xd1, 0x18, 0xcb, 0xff, 0x63, 0x5e, 0xd6, 0x30, 0x59, 0x59, 0x16, 0x1e, 0xc9, 0x1c, 0xa7, 0x6b, 0xe1, 0x2e, 0x3, 0x1b, 0x66, 0xeb, 0xb9, 0xfa, 0xec, 0xe6, 0x5f, 0xb2, 0x5a}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xbd\x4e\xc4\x30\x10\x84\xfb\x3c\x85\x75\x25\x85\x9b\xab\xa9\x28\x29\x79\x80\xd5\xc6\x1e\x81\x2f\x89\x6d\x79\xd7\x07\x11\xe2\xdd\x91\xf2\x23\x25\x5c\x48\x9b\x99\x6f\xf2\xd9\x4e\x55\x73\x55\x73\x09\x51\x94\xa3\x83\x5c\xcc\x77\x63\xcc\x9d\xfb\x0a\xf3\x6c\xf8\x53\x68\x8d\x2c\xe7\x4c\x82\x72\x47\xb1\x4f\xcd\x4f\xd3\xac\xac\x6f\x5f\xfa\x2a\x8a\xf2\xc8\x16\x2f\xe4\xe6\x90\x10\x7d\x4e\x21\xaa\xfd\xfb\x41\xf6\x73\xfc\x8e\xa8\x67\x1e\x7d\x62\xaf\x10\xa5\xa9\xb9\x87\x07\x68\x09\x4e\xde\x26\xcd\x93\x8d\xa5\xb7\x9c\x67\xbb\x90\x4b\xfa\x1a\x4f\xc8\x29\x3f\xe0\xd0\xb3\x68\x70\xff\xfd\x79\x89\x05\x5c\xdc\x07\xf9\x34\x70\x88\x16\x47\x02\x72\x6d\xab\xeb\xa0\x8f\x1b\x72\xa5\x39\xb2\x6b\x67\xcf\xbd\xe2\x48\x9c\x07\x62\xe7\x20\x42\x1d\x46\x2b\xd7\x0e\xe3\x16\xbb\xa5\x76\x76\x3e\xbb\xf2\x5b\x6a\xb7\x4f\xff\x1b\x00\x00\xff\xff\x80\xd6\x9b\x25\x36\x02\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0xcd, 0x8d, 0x12, 0x49, 0xd0, 0xac, 0x9a, 0xbf, 0xfa, 0x4c, 0x3a, 0x98, 0x20, 0x0, 0xfe, 0x5a, 0x21, 0x3a, 0xc0, 0xd1, 0x8e, 0xa6, 0x36, 0xb3, 0x1c, 0x90, 0xcf, 0xf3, 0x1, 0xbc, 0x81}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x8e\xd3\x40\x0c\xbd\xe7\x2b\xac\x70\x01\x09\xa2\x6d\xa5\x8a\x53\x8f\x7c\x05\x42\x96\x33\x71\xd3\x61\x27\x33\x83\x3d\x09\x04\xd4\x7f\x47\x49\x76\x45\xaa\x4c\xc9\x65\x73\x8a\xfc\xde\xf3\xd8\x4f\xcf\x03\x89\xa5\xda\x31\x94\xc6\xf5\x9a\x58\xd0\x53\xc7\x25\xfc\x29\x6e\x45\xb1\x05\x87\x68\xd0\x36\x0f\x61\xed\x6b\xcf\x29\xc7\xa0\x18\xd1\x7a\x4d\xe4\x0d\xa3\x09\xbd\x4f\xff\xa7\xa4\x31\x6e\xa7\xa0\x96\x7d\xda\x6d\x73\x4f\x5a\x35\x7a\x07\x5f\x1c\x69\xb2\x46\x99\xc4\x5c\xe1\x55\xa3\x6b\x39\xeb\xde\x03\x6b\x46\x76\x4c\x56\x1c\x58\xd4\x06\x9f\x85\xa2\xc9\x95\x8d\x30\x25\x46\x09\x2e\xdb\x90\x6b\xc5\x10\x93\x0d\x5e\x27\x18\xa0\xe1\x0b\xf5\x2e\xc1\x19\xbe\x16\x00\x30\xd7\xa6\x6f\x08\xae\xef\x96\xc1\xe0\x0c\x65\x1b\x8f\xe5\x3d\xa2\xf6\xf7\x84\x1c\x9f\xe6\xf2\xed\x63\x01\xf0\xed\xfe\xb9\x28\xe1\xd7\xb8\xb3\x63\x53\xef\xd9\xb4\x66\xb0\x6f\xad\xdf\x69\xe2\x48\x35\xc7\x58\xb4\x6b\x47\x01\x5e\xb6\xeb\x28\xbe\x27\x3f\x7e\xb8\xb3\x63\x31\xa2\xa4\x5e\x82\xd0\xa7\x6e\xd4\x1f\xae\x5c\x0c\x38\x43\x79\xaa\x3e\x57\x73\x09\x17\xbc\x3a\x56\x87\xa7\xea\xc5\xa2\x57\x4d\x0c\x9a\x5a\xe1\x59\x78\x86\xf2\x70\xa8\x0e\xa7\x89\x71\xdb\xcc\xd6\x2b\x4b\xf6\x5e\x9a\x1a\x23\xa9\xfe\x0c\xb2\x3d\x85\x79\xa7\xe9\x17\x23\xcb\x25\x48\x37\xef\x6f\xbd\xda\xf6\x9a\xb6\x16\xa8\x5e\x31\xf6\xb5\xb3\x06\x9f\x79\xdc\xc0\x1d\xa5\xc4\xd2\x05\x4d\xe8\xac\x61\xaf\x8c\x17\x9b\xc9\x90\x84\x90\xb0\x76\xc1\x3c\x63\xc3\x83\x35\xfc\x36\x31\x3a\x3d\x8e\xd1\xf7\x50\xa3\xb2\x0c\x2c\x7b\x51\xc9\x31\xff\xa5\xee\x6f\x00\x00\x00\xff\xff\x53\xbf\x3b\x18\xa3\x04\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0xd7, 0x8a, 0x65, 0x29, 0x6f, 0xfa, 0x40, 0x69, 0x3d, 0xf8, 0xc8, 0x5e, 0xa8, 0x39, 0xe6, 0x1a, 0x6c, 0x3f, 0xec, 0x54, 0xa3, 0xb5, 0xf5, 0x42, 0x73, 0xd9, 0x8c, 0xb4, 0x1b, 0x31, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":             clusterTf,
	"dashboard.yaml":         dashboardYaml,
	"dashboard_data.json":    dashboard_dataJson,
	"datasource.yaml":        datasourceYaml,
	"es_dashboard_data.json": es_dashboard_dataJson,
	"outputs.tf":             outputsTf,
	"variables.tf":           variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":             {clusterTf, map[string]*bintree{}},
	"dashboard.yaml":         {dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json":    {dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":        {datasourceYaml, map[string]*bintree{}},
	"es_dashboard_data.json": {es_dashboard_dataJson, map[string]*bintree{}},
	"outputs.tf":             {outputsTf, map[string]*bintree{}},
	"variables.tf":           {variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
