// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (8.965kB)
// assets/outputs.tf (327B)
// assets/variables.tf (560B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x8f\xdb\xb8\x11\xfe\xee\x5f\x31\x55\x02\xdc\x0b\x4a\xc9\xfb\x92\xcd\x6e\x0f\xdb\x22\x7d\x03\x0a\xdc\xb5\x07\xf4\x80\x7e\x08\x16\x02\x45\x8e\x65\xc2\x12\xc9\x92\x94\x77\x95\xdc\xf6\xb7\x17\xa4\x24\x5b\x96\x65\xaf\xe2\xdc\x26\x97\xa2\x9b\x2f\xc6\x70\x38\x33\x7c\x66\xe6\xd1\x90\xd1\x46\xad\x05\x47\x03\x11\xbd\xb7\x11\xbc\x9f\x01\x68\xa3\x16\xa2\x40\xb8\x85\xa8\x2c\x49\xa1\x28\x77\x68\x5d\x34\x03\x30\x98\x0b\x25\xc1\xaf\x54\x96\x20\xb5\x8e\x9c\x7b\xf9\x1a\x8d\xf5\x0b\xb7\x10\xfd\xe7\xf7\x70\x1e\x5f\xbe\x8e\x66\x8f\xb3\x99\x41\xab\x2a\xc3\x30\xd8\x4e\x57\x58\xa7\x9a\x0a\x13\x41\xb4\xc2\xba\x71\xe5\x65\x92\x96\x08\xc1\xe6\xcb\xf7\x6b\x6a\x62\x56\x54\xd6\xa1\x09\xf2\x47\xb2\xc2\x3a\x6c\xf2\x71\x55\x59\x21\x98\xb7\x03\xb7\xe0\x23\xfc\xda\xab\x5b\xbb\x4c\xb7\x2b\xdf\xec\xfb\x15\xd2\x3a\x2a\x19\x46\x10\x51\xad\x53\x8b\x66\x8d\xa6\x71\xef\x68\x6e\xe1\x36\xfc\x04\xf8\xbb\x8f\xe3\x40\x14\x54\x6b\xf2\xf2\x3d\x53\x95\x74\xb1\x90\x1c\x1f\x1e\x7d\x40\x8f\xb3\x19\x00\x53\x52\x22\x73\xfe\xf8\x8d\x9d\x17\xf0\xd3\x12\x81\xe3\x82\x56\x85\x83\xca\xa2\x09\x27\x5c\x28\x03\xaa\x32\xf0\xe6\x87\xbf\x05\x35\x57\xeb\xe0\xce\xda\x65\x14\x04\x5e\x33\x20\x9b\x55\xd2\x55\x8d\x6c\xa9\xac\x83\x5b\xb0\x58\x2c\xe2\xf6\x90\x42\x77\x9e\x69\x29\x60\xfb\x77\x0b\x11\x2d\x05\x99\x2f\xd8\xf9\x9c\xf3\x33\x4e\x2f\xe7\x57\xaf\xaf\xe7\x59\x04\x2f\xe0\xec\x3a\x9e\x5f\xc2\xf7\x3f\xfd\x73\x06\xd0\xc1\x91\x76\x01\xb0\x57\xf1\x43\x41\x4d\x8e\x11\xf4\xff\x5e\xc0\x9b\xe2\x9e\xd6\xd6\xc7\x05\x1b\x9d\x70\x0c\xa6\xa4\x15\xd6\xa1\x64\xf5\x6e\x0e\x43\x18\xfd\x5c\xc7\x2b\xac\x63\xc1\x03\x4c\x95\x74\xbd\x60\x3d\xc6\x3e\x1d\x9b\x70\x82\x82\xaf\x25\xcd\x52\x8b\xac\x32\xc2\xd5\x69\x6e\x54\xa5\x53\xc1\x7d\x96\xde\x06\x44\xa2\x97\xef\xbd\x83\x5d\x0d\x6f\x29\x16\xfc\x31\xfa\xed\x71\x9d\x34\x57\xd6\x8a\x46\xd5\x23\x78\x37\x6b\xca\x7d\x2d\x7c\xf9\xfa\x26\xf0\x65\x15\xb5\x89\x6c\x8b\xa8\x17\x70\x49\x9d\x43\x53\x2a\xeb\xd2\x42\x30\x94\x16\x53\xbf\x21\x68\x73\xb4\x4e\x48\xea\xda\x3e\x48\x96\xaa\xc4\xa4\xc9\x65\xb2\xdd\xd7\x33\x41\x5a\x13\x9b\x4a\xda\x09\xc4\x60\xa9\x1c\x12\x7c\x40\xd6\xc5\x23\x64\x21\x24\x6e\x90\x00\x88\xee\x97\xbe\x4f\xdf\xc2\x6f\x80\x2c\x20\x59\x53\x93\x14\x22\x4b\x58\xa1\x2a\x9e\x74\xc0\x26\x99\x52\x8e\x2c\x84\x14\x76\x89\x1c\xee\xbe\x03\xae\x00\xd9\x52\xc1\x57\xff\xa2\xc2\x09\x99\x37\x39\xf5\x9b\x88\x90\xc2\xc5\x71\xfc\xd5\x77\x60\x0b\x44\x0d\x67\x5e\x5b\x62\x8b\xab\xf7\x98\xa3\x03\x42\xa4\x22\x6c\x89\x6c\x45\x18\x1a\x27\x16\x82\x51\x87\x40\xfe\xfd\x0f\x20\xb0\x74\x4e\xdb\xdf\x25\x89\xbd\x20\x58\x91\x7b\xb4\x8e\x9c\xc5\xb4\xa4\xef\x94\xa4\xf7\x36\x66\xaa\x4c\x38\x66\xb1\x51\x59\x65\x9d\x46\xc3\x50\x7b\xcc\x62\xa1\x92\xcb\xb3\xbf\xfc\xf5\x4f\x37\x37\x7f\x8e\x73\x9d\xc3\xcf\x60\x2b\xae\x80\x6a\xe7\x39\x00\x28\xe7\x40\xb6\x71\x6c\xd6\x42\x3c\x35\x54\x9a\x53\x87\x07\xd6\x03\x14\x45\xe1\xf5\xb4\x51\x25\xba\x25\x56\x96\x48\xc5\x3d\xbe\x5a\x19\x87\x66\x70\xc2\x86\x03\x7a\xe9\xe6\xea\x5e\x7a\x26\x4c\x2b\x53\x3c\x6e\x95\x1d\x35\xf0\xf0\x6e\x01\xbd\xac\x7e\x1b\x3b\x6a\xe2\xfc\xdd\x20\x96\x72\xdd\x53\x82\x44\x69\x97\x0c\x35\x56\x5c\x18\x20\xba\x59\xdc\x2a\x27\x9c\x3a\xda\xd0\xc1\x5d\x28\x95\x63\x0c\x57\xa2\x33\x82\xd9\xd3\x58\xae\xdd\xfc\xbf\x43\x6d\xee\x3c\x6e\x98\x6d\x22\x4d\x9d\x4a\x3f\x2d\x70\x1b\x0a\xda\xe7\x95\xff\xb7\xf3\x33\xb7\xf3\x40\xd7\xd6\xd6\x61\xc9\x5c\x01\x28\x69\x56\xe0\x61\xcd\x11\xab\x94\xf3\x50\xb1\x85\xc8\x16\x4a\x3a\xa6\xe4\x42\xe4\x67\x03\xd4\x3a\x60\x78\x11\xe7\x86\x2e\xa8\xa4\x01\x0c\x65\x6d\x62\xb0\x40\x6a\x31\x69\xe5\xe9\x55\x7c\x15\x9f\xa7\xb4\xe4\x57\x97\x31\xc7\x6c\x10\x00\xd7\xab\x1c\x88\x80\x69\xda\xdb\x83\x71\x8a\xa5\x92\xc4\xa0\xe7\xa5\xa7\x8e\xdf\x1a\x27\x2d\x2f\x0c\xb4\xd1\xac\x05\x1b\x2a\x81\x75\xd4\xb8\xa9\xc4\xa3\x8d\x7a\xa8\x4f\xa3\x9d\xb0\xb5\x21\x9d\x61\xe7\xef\xfe\x1d\xe4\x81\xbd\xde\xdf\xdb\x57\x5e\x76\x43\x8e\xf7\x61\xad\x62\x82\x3a\x4c\x37\xc4\x93\x52\xce\x0d\x5a\x1f\xb0\x33\x15\x9e\x4a\x04\xe1\x28\xcd\x78\xd1\x80\xb6\xcb\x3a\x47\x99\xe7\xf3\xb1\xed\x97\xc0\x54\xa7\x32\x84\xcc\x85\x7c\xf8\x65\x7a\x68\xcc\x94\x29\x03\x02\xe8\x58\x12\x96\x13\x2b\x1c\x5a\xd2\xec\xe0\x49\x9b\xbc\xc1\xa6\x42\x02\x59\xd8\xfd\x5d\x74\x4d\x45\xe1\x37\x26\xfd\x51\xe1\x90\xed\xad\xce\xa0\x47\x07\x4d\x6a\xb8\x4d\xbb\x86\xeb\x35\xec\x50\xd4\x5e\xfe\x76\xe7\xf4\xb6\x62\x7d\xcf\xf2\x6c\x7f\x56\x17\x1c\xa5\xff\x5e\xa0\xe9\xf7\xda\x58\x8f\xf3\x6c\xe4\xfe\xb4\x09\x61\x6b\xa6\xe9\x8e\x5e\xc8\xde\x6f\xf7\x33\x5c\x24\xb6\x41\x14\xd4\xda\x43\x01\xfa\xb5\x19\x00\x7a\xe0\xf0\x89\xd3\x34\x4a\x9e\x17\xb4\x2e\xea\x54\x94\x25\x72\xcf\x0e\x45\x0d\x1d\x1d\xec\x31\x5f\x2f\xc2\x08\xa2\x6d\x8c\x2d\x88\xfb\x07\x3b\x0c\x8c\x47\xc2\x8f\x78\x19\xb5\xd8\xe7\x8a\xf1\x0d\x8d\x7e\x49\x83\x64\xc3\x09\x3b\x07\xeb\xa4\x5b\x3d\x4d\xad\xbd\x57\x86\xef\xea\x75\xd2\x19\x80\x5d\x09\x9d\x2e\x84\xa4\x45\x6a\x25\xd5\x76\xa9\xdc\x96\x09\x47\x60\xd9\x2e\x8e\x20\x7c\x0c\xe2\xe6\x47\xda\x3d\x18\xec\xaa\xef\x2e\xbe\x1d\x37\x72\x77\x7c\x4a\x1b\xe7\x65\x9e\x05\x52\xbe\x3b\xfa\x09\xeb\x5e\x3a\x52\x9a\xa3\x74\x1f\xfa\x42\xe0\xf7\x4c\x7e\x23\xf8\x64\x13\xf2\x81\xa9\xd8\xa7\xb2\x2a\xa7\x8e\xc5\xe3\xb7\xf7\x5d\xb8\x5a\x4e\x38\x21\x37\x61\x7b\x9b\x9e\x09\x1f\xa3\x2f\xe3\x73\xd4\xbb\x45\x86\x6b\x63\x00\x6a\xfa\x25\xd2\x6b\x11\xbf\x87\xc8\x7c\x73\xa1\xec\xf4\xcb\x35\xbc\xfc\xba\xb0\x40\x38\x7c\x9b\xc0\xcf\x90\x1b\xd4\x87\x36\x7f\x73\x68\xa1\xfd\x66\xc0\xf8\x60\xb7\x9b\xa2\xe6\xe5\xac\x49\x40\x7f\x98\x39\xf2\x58\xd6\x19\x20\x8d\x81\x59\x78\x1f\x61\x46\xe8\xee\x7d\xe4\x8d\xd6\xd0\x29\x41\x50\x0a\xf0\x77\x45\xd5\x51\x28\x8c\x38\x08\x4f\x37\x42\xe6\x61\x5e\x6b\x8a\x62\x61\x54\x99\xfa\x9b\x7c\x88\xea\xfc\xbc\x69\x32\xd5\x89\x7a\x42\x6d\x94\x53\x4c\x15\x6d\xfc\x8e\xe9\x06\x09\x26\xb8\x49\xb3\x42\xb1\x55\x53\xaa\xf3\x38\xfc\x4b\xe6\xd1\x5d\x3b\x99\x1e\xf3\x78\x3d\xbf\x7a\x35\xe2\x73\x23\xfe\xe5\xbd\x06\xe3\xaf\x07\x3e\x7b\xc2\xad\xc7\xbe\xbf\x17\xf0\x03\xad\x33\x04\x83\xd6\xdf\x58\x1d\x28\x59\xd4\xc1\x2a\xfc\xb8\xb9\x20\x41\x3b\xff\xff\xa1\xdd\xf2\xc7\xca\xc1\x92\x4a\x5e\x43\xd3\x67\x8e\xae\x7c\xb7\xb4\xcf\xc4\x16\xee\x85\x5b\xaa\xca\x41\x49\x65\x45\x8b\xa2\x06\x6b\x97\xc4\x6b\x08\xe9\x14\xb8\x25\xb6\x06\xe3\x8f\x06\xba\x81\xef\xe6\x6c\x3e\xdf\x03\x7b\xb0\xd4\x07\x7c\x08\xfa\x6e\x71\x1f\x61\xa6\xfe\xb5\xbe\x0b\x0e\x0f\x17\xc1\x7e\x50\x9d\x6c\x90\x7e\x72\x36\x2d\xfb\x93\xda\xb2\x7d\xd3\xfc\x88\xee\x24\xad\x85\xc9\x4d\xda\xe8\x4f\xec\xd5\xa7\xf3\x79\x3d\x7f\x7d\x79\x20\x9f\x9b\xa5\x91\x7c\x56\xfc\x43\xf3\xd9\xbd\x12\x4f\x2d\xb4\x13\x03\xfb\xf0\x42\x3b\x21\xb0\x7d\xba\x19\x2c\x7d\x2e\xc4\x4e\x09\xec\xe3\x11\xfb\xc4\x6d\xf9\x54\x5f\xf2\xac\xd7\x8f\x87\xaf\x44\xc3\xaf\xe4\x04\x84\x2f\x2e\xe6\x57\x07\x10\xde\x2c\x3d\x03\xc2\x13\x22\x7b\x75\x79\xb1\xff\xdd\x1d\x2c\x3d\x43\x64\x13\x48\x72\x3b\xce\x4f\xe1\xc7\x30\xc8\x3f\x39\xbf\x7c\xdf\x91\x5f\xd0\xff\xa2\x46\x99\xa3\x53\xc5\xe5\x7c\xef\xe3\xda\x13\x8e\x4f\x15\xfe\x86\xd2\x61\xda\x5e\x0b\x83\x97\x5f\xd7\xb7\xb2\xfb\xdf\x8d\x27\x1b\xb3\x55\xfc\xb0\xee\xfc\x1c\x53\xe7\xcd\xfc\x66\x0c\xc7\x8d\xf8\x79\xbc\x5e\xec\x57\xc8\x8e\xf8\x74\xaf\xbf\xae\x7a\x69\x9e\xa5\xa7\xd2\x46\xd0\x7e\x9a\x36\x7e\xf4\x6a\xcf\xc6\x16\xd7\x63\x30\x5d\x7f\x5c\x5a\x3e\x0f\x41\x7d\xda\x52\xf8\x6f\x00\x00\x00\xff\xff\xb8\x0f\x7e\xb9\x05\x23\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc4, 0xe4, 0x30, 0x6, 0x8b, 0x9f, 0x26, 0x85, 0x64, 0x29, 0xeb, 0xd6, 0xc0, 0x18, 0x6b, 0x98, 0x9d, 0xe, 0x98, 0xd8, 0xda, 0x58, 0xc5, 0xcb, 0x9, 0xd, 0xf9, 0x13, 0x73, 0xca, 0xdb, 0xc1}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\xc8\x7b\x2c\xd4\x0a\x10\x8b\x9c\x65\x34\x89\xa7\xc5\xc2\xb1\x8d\x67\xdc\x2a\x42\xbd\x3b\x8a\xbb\x80\xca\x05\xb2\xcc\x7b\xff\xeb\xcb\x73\xa2\xe2\x69\x0a\x0c\x66\x0e\x55\x94\x0b\x46\x5a\xd8\xc0\xe7\x70\x19\x86\x6f\x48\x39\xa3\x8f\xa2\x14\x67\xc6\x39\xd5\xa8\x9d\x12\x12\x39\x65\x51\xa4\x23\x47\xfd\x45\x72\xd3\x7f\x35\x3f\x0d\x8e\x47\x1f\xfb\x31\x37\x25\x81\x44\xee\x19\xd7\x2c\x9e\xb8\x88\x4f\x71\x33\x00\x74\xcd\x0c\x23\x2c\x94\x07\x00\xc7\x07\xaa\x41\x61\x6c\x08\xc0\x50\x2d\xa9\xd0\xc3\xb2\xca\x47\x30\xd0\xbe\x11\xcc\x93\x7d\xb1\xed\x17\x5e\xb9\xdd\xd9\xc7\xbd\xdd\x99\x9b\x4c\x4e\xa2\xc7\xc2\x2d\x38\x82\x79\xb5\xcf\x76\xbf\x19\x97\x6e\x56\x15\x2e\x77\x5f\xd8\x4d\x98\x49\xe4\x9c\x8a\xeb\x98\xc8\x1b\xe6\x3a\x05\x3f\xe3\x3b\xaf\x1d\x5e\x48\x95\xcb\x92\x44\xd1\xa5\x73\xdc\x0e\x81\xb5\x84\xbf\xbc\xe0\x67\x8e\xc2\x78\xf0\xa1\x9f\xd2\x0a\xda\x29\xfb\xba\xaf\x00\x00\x00\xff\xff\xb4\x82\x23\x39\x30\x02\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xa1, 0xc8, 0x99, 0x32, 0x37, 0x1c, 0xdc, 0xb1, 0x38, 0xcb, 0x56, 0x9d, 0x23, 0xd7, 0xdd, 0x79, 0xb1, 0xd5, 0xda, 0x30, 0x2a, 0x2d, 0xb9, 0x4b, 0x8c, 0xef, 0x78, 0xdc, 0x9c, 0xc3, 0x2b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":   clusterTf,
	"outputs.tf":   outputsTf,
	"variables.tf": variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":   &bintree{clusterTf, map[string]*bintree{}},
	"outputs.tf":   &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf": &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
