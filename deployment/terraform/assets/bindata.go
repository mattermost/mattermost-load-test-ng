// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (17.126kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (37.578kB)
// assets/datasource.yaml (296B)
// assets/es_dashboard_data.json (8.51kB)
// assets/outputs.tf (527B)
// assets/variables.tf (1.131kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x6d\x73\xdb\x36\xf2\x7f\xaf\x4f\xb1\x7f\x26\xd3\x26\x9d\x90\x92\x6c\xe7\xc9\xad\xdb\x49\x1f\xa7\x33\x69\x93\xf9\xb7\x77\x7d\x91\xf1\x70\x20\x60\x25\xa1\x26\x01\x1e\x00\xca\x56\x72\xbe\xcf\x7e\x03\x10\xa4\x48\x8a\x94\x68\xc5\x79\xba\x56\x7e\x23\x13\x8b\xc5\x62\x1f\x7e\xbb\x0b\x42\x99\x92\x2b\xce\x50\x41\x40\x2e\x75\x00\x6f\x46\x00\x99\x92\x73\x9e\x20\x9c\x41\x90\xa6\x61\x22\x09\x33\xa8\x4d\x30\x02\x50\xb8\xe0\x52\x80\x1d\xc9\x75\x88\x44\x9b\x70\x6a\x9f\xaf\x50\x69\x3b\x70\x06\xc1\x7f\xbe\x86\xa3\xe8\xe4\x71\x30\xba\x1e\x8d\x18\x31\xc4\xf1\x8d\x8b\x89\x01\x04\x34\x57\x0a\x85\x09\xe0\x4d\x63\x9c\x92\x24\x41\x15\x73\x86\xc2\x70\xb3\xee\x27\xd4\xf9\x4c\xa0\x89\x39\xd3\x01\x04\x1a\x13\xa4\x06\x59\x21\xf6\x2a\xa3\x31\x67\x56\x86\xbb\x6f\x56\x44\x45\xa8\xe3\x55\x46\xaf\x9d\x24\x0a\xb5\xcc\x15\xc5\x82\xc9\x05\xae\xe3\x8c\x70\x15\x40\x70\x81\xeb\x62\xb6\x7d\x26\x48\x8a\x00\x1b\x0e\x34\xc9\xb5\x41\xe5\x9e\x5f\x87\x17\xb8\x76\x93\xac\x86\xf2\x59\xc2\xa9\xe5\x03\x67\x60\x75\x75\xcf\x92\x6b\xbd\x8c\x37\x23\xf7\xb7\xd7\xe5\x42\x1b\x22\x28\x06\x10\x90\x2c\x8b\x35\xaa\x15\xaa\x62\x79\x43\x16\x1a\xce\xdc\x57\x80\x5f\xad\x1c\x3d\x52\x90\x2c\x0b\xef\xbe\xa1\x32\x17\x26\xe2\x82\xe1\xd5\xb5\x15\xe8\x7a\x34\x02\xa0\x52\x08\xa4\xc6\x1a\xa2\xe0\x73\x07\x7e\x5f\x22\x30\x9c\x93\x3c\x31\x90\x6b\x54\x6e\x87\x73\xa9\x40\xe6\x0a\x9e\xfd\xf2\xb3\x23\x33\xeb\xcc\x2d\xa7\xf5\x32\x70\x0f\x2c\xa5\xb3\xf1\x2c\x17\x26\x2f\x9e\x2d\xa5\x36\x70\x06\x1a\x93\x79\xe4\x37\xc9\xb3\x72\x65\x92\x72\xd8\x7c\xce\x20\x20\x29\x0f\x27\x84\x3e\x99\xb0\xf9\x23\x9c\xcf\x27\xf8\x78\x32\x7b\x18\xc0\x1d\x98\x3e\x89\x26\x27\xf0\xfc\xf7\xdf\x46\x00\xa5\x3a\x62\x2f\x80\xdd\xac\xd5\x4b\xe3\x79\xd3\x34\x8e\x7b\xdd\x84\xd1\x05\xae\x23\xce\xdc\xee\x73\x61\x6a\x32\x6c\x71\x73\x04\xde\x4f\x34\xd2\x5c\x71\xb3\x8e\x17\x4a\xe6\x99\x75\x27\x38\x83\x57\x6e\xa3\xc1\xdd\x37\xce\xd1\x1a\x14\x96\xd3\xab\xc9\x79\xc4\xd9\x75\xf0\x60\x37\x59\xbc\x90\x5a\xf3\x8a\x7a\x04\x70\x6e\x55\xc4\xd6\x82\xa4\x9c\x42\xa0\xa4\x34\xf1\x2c\x91\xf4\x22\x66\xb8\xe2\xd6\x1b\x0a\x6b\xcd\xa5\x8a\x91\xd0\xa5\x97\x7d\x8b\xce\x11\x51\x29\x0c\x0a\xe3\xa7\x00\xac\x64\x92\xa7\x18\x6b\xfe\xda\x6a\x30\x91\xf2\x22\xcf\xee\x6d\x4d\x8d\x56\x24\xc9\xf1\x01\x04\x35\xf2\xe0\x01\x88\x3c\x49\xee\x37\x19\x79\x53\x0c\x65\x64\xc9\x1b\x8c\xae\x4b\x97\x70\xb8\x62\x41\xc1\x42\x8b\x0d\x91\x72\x9b\x3e\x20\x6a\x56\x4a\x89\x31\xa8\x52\xa9\x4d\x9c\x70\x8a\x42\x63\x6c\x27\x38\x6a\x86\xda\x70\x41\x8c\x47\x97\xf1\x52\xa6\x38\x2e\xfc\x72\xbc\x99\x57\x63\x11\x7a\x16\x41\xa7\x20\x0a\x53\x69\x30\xc4\x2b\xa4\xa5\x3c\x5c\x24\x5c\x60\x65\x7e\x80\xe0\x72\x69\xd1\xef\x15\xfc\x1f\x84\x73\x18\xaf\x88\x1a\x27\x7c\x36\xa6\x89\xcc\xd9\xb8\xf4\xa6\xf1\x4c\x4a\x13\xce\xb9\xe0\x7a\x89\x0c\xce\xbf\x04\x26\x01\xe9\x52\xc2\xe7\x7f\x10\x6e\xb8\x58\xb8\x30\x73\x93\x42\x2e\xb8\x89\xa2\xe8\xf3\x2f\x41\x27\x88\x19\x4c\x2d\xb5\x40\xef\x49\x76\xc5\x05\x1a\x08\x43\x21\x43\xba\x44\x7a\x11\x52\x54\x86\xcf\x39\x25\x06\x21\xfc\xd7\x0b\x08\x61\x69\x4c\xa6\x4f\xc7\x63\x7d\x1c\x62\x1e\x5e\xa2\x45\xde\x88\xa4\xe4\xb5\x14\xe4\x52\x47\x54\xa6\x63\x86\xb3\x48\xc9\x59\xae\x4d\x86\x8a\x62\x66\x75\x16\x71\x39\x3e\x99\xfe\xf0\xe3\x77\x4f\x9f\x7e\x1f\x2d\xb2\x05\xfc\x1b\x74\xce\x24\x90\xcc\x58\x3c\x03\xc2\x18\x84\x1b\x39\xaa\x31\x27\xcf\x1a\xf2\x8c\x11\x83\x3d\xe3\x4e\x15\x49\x62\xe9\x32\x25\x53\x34\x4b\xcc\x75\x28\x24\xb3\xfa\xcd\xa4\x32\xa8\xda\x3b\x7c\x01\x35\x43\x31\xae\x4d\x64\x88\x8a\x16\xaf\xa1\x40\xba\x9a\x23\x30\x79\x29\x6c\xe6\x89\x73\x95\x5c\x6f\xd8\x18\xa2\xe0\xea\xf5\xbc\x87\x4d\x4b\xd0\x74\x55\xa3\x83\xb1\xcc\xcc\xb8\xc0\xb2\x73\xe7\x1b\xbb\xe0\x39\x45\xa3\x38\xd5\x87\x41\xb4\x9f\xfc\x3f\x83\xcb\x81\x39\x8e\xae\x12\xa2\x16\x2e\xa8\x86\xe1\x2c\x7c\x0d\x13\xf8\x06\xa6\x70\x0a\x93\x81\x10\x7e\x28\x34\x7b\x75\xd7\xe1\xf9\x6f\xc4\xfd\x1b\xe8\xde\x31\xd0\xb5\x68\xf5\x5a\x1b\x4c\xa9\x49\x00\x05\x99\x25\xd8\x4f\xd9\xc1\x95\x30\xe6\x42\x3b\xe1\xb3\xb9\x14\x86\x4a\x31\xe7\x8b\x69\x4b\x6b\xa5\x62\x58\x12\x2d\x14\x99\x13\x41\x9c\x32\xa4\xd6\x63\x85\x09\x12\x8d\x63\xff\x3c\x7e\x14\x3d\x8a\x8e\x62\x92\xb2\x47\x27\x11\xc3\x59\x4b\x00\x96\x5d\x2c\x20\xe4\xb0\x97\xba\xb1\xec\x82\x9b\x65\x3e\x73\x4b\x72\x31\xcb\xe9\x05\x9a\xcd\x17\x2f\x80\x1e\x97\xb0\x3d\x5e\x1d\x45\xd3\x68\x52\x51\xc4\xee\xdf\x38\xe1\x22\xbf\xda\x2b\xd8\xd0\x49\x7d\xf2\xfd\x99\x6b\x73\x49\x0c\x5d\xda\x7f\x30\x21\xda\x70\xaa\x91\x28\xba\x8c\xcb\xc4\xd4\x25\xf1\xd4\x49\xdc\x4d\x1f\xba\xc1\xc8\x89\x12\x16\xa2\x74\xa7\x9c\x0b\xc6\x55\x91\x6a\xba\x19\xb5\xe8\x6d\x3e\x0b\x5f\x5f\xad\xe6\x70\xc3\x75\x21\xfc\x6e\xd7\x32\x10\x86\xda\x28\x9e\x85\x54\xa6\x99\x14\x28\x8c\x3e\x9b\xf6\xba\x2c\x23\x98\x4a\x11\x2a\xb4\x8a\xd8\xe7\xd8\xde\x6d\x42\x9f\x1a\x5b\xd4\xa8\x2c\x68\xb5\x88\x40\x1b\xa2\xcc\x3e\xc6\xa5\xd9\x7b\x58\x96\xc3\x9e\xd9\xc0\x44\x9e\x29\x79\xb5\x3e\x2c\x8d\xbb\xa9\x45\x12\x6f\x67\xd2\xe6\xa7\x37\xaf\x6e\xe5\xd2\xf6\x3c\xbb\x68\x21\x61\xbb\xe7\x69\x66\xd9\xae\x79\x9d\x39\x77\x5a\xcb\xb9\x44\x6b\x49\x39\x31\x18\x57\x75\x41\x4c\x18\x53\xa8\xed\xfe\x8d\xca\xf1\xd0\x8c\xeb\x44\x6e\x34\x38\xb5\x0c\xdf\x9b\xdc\xff\x6a\xf9\xf8\xc3\x95\x7d\x9f\x42\x25\xf0\xee\x5a\x8d\xbe\x99\x62\xc1\xc5\xd5\xed\x60\x60\x17\x2b\x95\x3a\xdd\xa1\xa1\x63\x37\x3c\xd6\xdc\xa0\x0e\x8b\x19\x6c\xec\xcd\xde\x9a\x94\x08\x08\xe7\x7a\x7b\x16\x59\x11\x9e\xd8\x89\xe3\x7a\x07\xd3\xc7\x7b\x43\xb3\x1b\x16\x49\x1a\x7b\x34\xb5\x49\xf5\x02\x59\xac\xa4\x6d\xcc\x03\xf4\x27\x7f\x5b\xa8\x53\x04\x22\xea\x36\xd2\x7c\xf6\x59\x39\x40\x15\x5a\x88\xb1\x8c\xea\xd8\x73\xa9\xab\xa5\x3c\x2a\x04\xa8\x9b\x75\x5c\xc7\xc1\x5c\x33\x99\x31\x99\x12\x2e\x9c\x78\x87\x21\xf8\x66\x5e\x19\x19\x05\xcb\x5a\x2b\x52\x02\x78\xf7\x74\x3b\xaf\x29\xd3\xe6\xa4\xb3\x3c\x62\x2c\x1e\x94\xdd\x8b\x74\xd5\xa8\x2e\xcf\x3a\xaa\xd3\xca\x5a\xb0\x61\x82\x29\x0a\x73\xcf\xc8\x84\x6b\x73\x8f\x11\x43\xa2\xe6\xd1\x66\x54\x1e\x6c\x46\x9c\xe9\xfb\x0f\x60\x72\xbf\x32\x2b\x40\x37\x5a\x77\x03\xb5\x97\xbd\x84\xea\xf3\x4a\x0d\x25\x14\xe3\x4c\x97\x22\xf7\x80\x30\xea\xb8\x46\xd4\x89\xc0\x76\xdc\xbb\xe2\x26\xb1\xf4\x22\x6a\x8d\x5b\x0f\x96\x06\x8b\xec\x28\xb8\xbf\x0b\xde\x77\xf0\xf0\xc0\x3e\x9d\xb4\xd1\xd8\x9b\xb6\x28\xae\x2b\x20\xdc\x3e\x81\xac\x3b\xbb\x4f\xc6\x45\x2f\x4d\x29\x6a\x1d\x67\x32\xe1\x94\xa3\x55\xfa\x57\x5f\x7d\xf7\xe2\xd7\x1f\x7f\xfe\x69\x04\x95\x2a\x82\x7f\x16\xee\x10\x9c\x42\x70\x34\x99\x1e\x85\xd3\x49\x38\x7d\xbc\x09\xfa\xdf\x0c\x31\xce\xfa\xc1\x69\xe5\x0f\xf6\xf3\x66\xd4\x4c\xf1\xc1\x33\x97\x38\x2c\x1b\xd4\xa7\x5f\x54\x0c\xaa\xf1\x97\x8a\x0b\xca\x33\x92\x58\x92\x8e\xf1\x1f\xe6\x73\xa4\x76\x95\xe0\x59\x92\xc8\xcb\x6d\x82\xff\xf7\x81\x67\x49\x88\x12\xa7\xe4\x52\x9f\xa2\x3e\xbd\xfb\xa6\xf2\xc7\xe2\xcc\x3e\xf2\x07\xf1\x91\x8b\x89\xfa\x78\xeb\xcc\xbe\x22\x24\xd4\x61\x44\xcc\xd9\xf5\x69\x11\x6f\xe3\xee\xe8\x1a\x7f\x11\xd4\xa4\xba\xf6\xdf\xcf\x7d\xc5\xe5\x75\x6b\xbd\x15\x33\x14\x4c\xc7\x2e\xec\x0a\xad\xed\x80\xb3\x08\x75\x75\x04\x50\x80\x55\x0f\x88\x59\xf8\xe9\x40\x48\x9b\x6d\x03\x08\xf4\x71\xf1\xc5\x5a\xa6\x80\x8b\x1e\x94\xf0\x84\xad\xd5\xf6\x54\x67\x9d\xd8\xec\x3d\xcc\xbd\x92\x08\xf4\x71\xf5\x6a\xc2\xe5\x7f\x5f\x57\x95\x12\x46\xc5\xb2\x36\xb2\xad\x18\x6f\xb9\xba\x3e\x8e\x7d\xed\x6d\x17\x2e\xbf\xda\xb5\x7d\xcd\xdd\xbd\xf7\xa8\xa2\x75\xf1\x91\x78\x2c\xcd\x14\x5f\xd9\x5c\xbe\x49\x28\x03\x2b\xd6\xc1\xc0\x5e\x5f\xd7\x05\xe7\x5c\x2a\x8a\x31\x43\x6d\x94\x5c\x97\x20\xd4\xa9\x64\xab\xb5\x22\x88\xd7\x95\x95\xcb\x7f\x07\xda\xda\x93\xbf\x0b\xcb\xd8\xe2\xcd\x71\x77\xf0\xf2\xc3\x8b\x1f\x47\x56\xa6\x1d\xa8\xd2\x89\x28\x75\x34\xd9\x89\x04\x1b\x98\x79\xd5\xc6\x07\x7d\x7c\xfa\x9c\x6b\xf3\x6d\xb3\x25\xab\x0f\xff\x84\x7e\xf4\xb9\xa4\xee\x80\xbe\x1e\xcd\xe7\x8d\x65\xba\xc0\x46\x1f\x9f\x9e\x9e\xfa\xac\x55\xba\x5f\xe5\x50\xb5\xe6\xc2\x61\xc3\x83\xae\x9d\xed\x14\xfe\xd9\x4c\x2a\xf3\x4b\x9e\x18\x9e\x11\x65\xfe\x91\x35\xca\xba\x3a\xe1\xf7\x98\xa0\xc1\x17\xb3\x3f\xad\x96\x7a\xf6\x39\x64\xf4\x19\x4d\x3a\x09\x5e\xe6\xbb\xa6\x57\xa3\x76\x7a\xaf\xfe\x76\xda\xf0\x50\xe5\x6e\xe0\xf7\xda\xe1\xe5\xf5\xc8\xfa\xdb\x36\x28\x2a\xa6\xe3\x32\x0c\x6a\x9d\x75\xfb\x51\x5f\x09\xb9\xf9\xec\x39\x2b\xb6\x83\x6c\xd6\x1e\x2b\x90\xa1\x48\x32\x73\x6e\xc3\x6d\x8b\x6b\x67\xa8\xb2\x59\xc7\x6b\xd2\x4a\xe6\x6d\x76\x45\x10\xd7\xf6\x6a\x65\xf1\x5f\x0b\x85\xd5\xbb\x79\x9a\x10\xad\x3b\x36\xd7\x90\xdf\xd2\xd8\x02\xd2\x96\xec\xed\xde\xbf\x6f\x52\x41\x6c\xe1\x34\xcb\x92\x75\xcc\xd3\x14\x99\xed\xe1\x93\x75\x7d\x96\xaf\xb1\x48\x6e\x64\x9c\x72\x21\x55\x59\x86\xc6\x79\xb6\x50\x84\x59\xe0\x9c\x93\x44\x77\x60\x60\x6d\x87\x01\x04\x9b\x3d\xf6\x5b\x6f\xe0\x11\x7f\x97\x6e\x7b\x6d\x63\x8d\x61\x0b\x89\x19\xd1\x58\xaf\xc6\xbb\x27\x14\xf4\x29\x71\x4f\xaa\xbe\xb9\xa1\xc0\xf2\xe9\x86\x2e\x23\x5a\x5f\x4a\xc5\x9a\x74\xe5\xd3\x11\x80\xbe\xe0\x59\x3c\xe7\x82\x24\xb1\x16\x24\xd3\x4b\x69\x6a\xaa\xed\x50\x7f\x35\xd8\x65\xd1\x1d\xa6\x2c\xbe\x54\xad\x43\x93\xbc\x39\xf8\xaa\x9b\xc9\xf9\xee\x97\x23\xdd\xc5\x3f\x9b\x6d\xea\xfe\x5d\x47\x64\xe5\x05\x8f\x98\x2c\x8a\x0b\x17\x37\xba\x8e\x60\xe7\x0c\xbe\x90\x70\xdb\x6f\xb4\xb6\x90\xe0\x2d\xce\xe1\xdc\x4e\xf6\xdc\x3d\x68\xcf\x1b\x72\x13\x61\xc0\x5a\xe5\xcd\x84\xaa\x03\xec\x9d\x58\x2a\xbf\xa2\x1c\x76\xce\x77\x80\xf7\x38\x11\xbd\xf7\xfc\x05\x0f\xef\xfe\xda\x47\x68\xe5\xdb\x7a\x93\x66\xcd\x37\xf4\xee\x95\xbc\x03\x8b\x3d\x2f\xe8\x37\x33\x37\x63\x8d\xf7\xf1\xee\x5e\x59\x68\x59\x85\x62\xf1\x45\xdf\xc0\x66\xb2\x4a\xeb\x3c\x77\x1d\x73\x35\x1d\xb9\xb8\x6b\xb5\x9d\xdd\x06\x66\xb5\x7a\xec\xef\xb8\x91\x55\xae\x19\x16\x6b\xba\xa6\x55\x53\xc5\xb3\xf2\xe2\xca\xb3\x2c\xab\x4e\x6e\xc0\x11\x39\x4b\x97\xd8\x5b\x66\x4f\xe8\x58\x20\x18\x39\xfc\x5a\xb8\x80\xf6\xb1\xa6\x64\x1a\x5b\xa3\x39\xa9\x8e\x8e\x0a\x70\x95\xe5\xa3\xda\xc3\x4c\x49\x23\xa9\x2c\x5b\x33\x43\xb3\x42\x77\x94\x33\x55\x84\x46\x81\x01\x93\xc8\xfd\x8d\x27\x41\xd9\x7f\xef\x5a\xf1\xc9\xe4\xd1\xc3\x8e\x35\xab\xc7\xb7\xbf\xaa\x63\xfe\xb8\xb5\x66\xed\xe1\x66\xc5\xfa\x7a\x77\xe0\x17\xb2\x9e\x21\x28\xdb\x18\x72\x6a\x40\x8a\x64\xed\xb8\xc2\xcb\x2a\x08\xc0\xbf\xa4\xfa\xc6\x4f\xf9\x36\x37\xb0\x24\x82\xad\xa1\x08\x69\x43\x2e\x6c\x60\xfa\x5b\x91\x1a\x2e\xb9\x59\xca\xdc\x40\x4a\x44\x4e\x92\x64\x0d\x5a\x2f\x43\x4b\xc1\x85\x91\x60\x96\xe8\x19\x46\x6f\xad\xe8\x42\x7d\x4f\xa7\x93\xc9\x96\xb2\x5b\x43\x75\x85\xb7\x95\xde\x8c\x87\x1d\x90\xdf\xba\x48\x51\xca\x87\xfd\x7e\xb0\x2d\x57\xf9\xac\xe5\x01\xc5\x35\xd1\xfd\xda\x18\x14\xcc\xfe\x86\xdd\xfb\x8d\xe9\xd0\x2f\x3a\x38\xb4\x0b\xfa\xdb\x88\xf0\x32\xb8\x1e\x9f\xf4\xb8\x41\x35\xd4\xe1\x06\x39\xbb\xa9\x1b\xd4\xae\x3a\x0e\x75\xd1\x03\x65\xbb\xb9\x8b\x1e\x26\xdb\x36\x56\xb5\x86\x3e\xa0\xde\x0e\x91\xed\x56\xf4\xf6\x9e\xc3\x7a\x5f\x5c\xb3\x59\x3d\x9e\x6f\x14\xc9\xfd\x27\x00\xed\xb4\x3c\xc0\x24\xc7\xc7\x93\x47\x3d\x26\xa9\x86\xde\x8d\x49\x06\x08\xf7\xf0\xe4\x78\x3b\xd7\xb7\x86\xde\x8d\x70\x03\x80\x79\xd3\x3d\x0e\x01\x58\xd7\x37\xee\x2d\x9b\x9e\x97\xe8\xe9\xe8\x0f\xaf\xa0\xaa\x5f\x07\x78\x99\xea\x24\xc5\xc8\xbe\x1d\xc6\x2a\x77\xaf\x4a\xbd\xe0\x7a\xe9\x1b\xe5\xad\x76\xf2\x0c\x02\x6f\x46\xbb\x6c\xdb\x86\x55\x69\xd6\xb6\x60\x35\xd0\xb6\x5f\xdd\x82\xf5\x38\x2b\xc7\xda\xd1\xb6\xd5\xe4\xf9\x3e\xb5\xa7\xbf\xbb\xd9\xbe\x49\xc6\x0f\xdf\xf7\xc9\xc4\x55\x2b\x5d\x3b\xf7\x43\x1f\xf5\xde\x0b\xc0\xdc\xb1\x7d\xdc\xb9\xfb\xbe\xad\xf7\xee\xbb\x00\xd7\x0f\xbe\x6d\x5f\x15\x86\x46\x86\xb5\x3b\x8d\xbb\xcf\x7a\x07\xc2\x77\xc7\x59\xcc\x30\x5f\xda\xef\x52\xfb\x3d\x6b\xcb\xc1\xb6\xb5\x58\x91\xec\x52\x66\xf9\x8b\x86\xed\xd3\x95\xee\x89\x8d\x2a\xfb\x66\xa6\x68\x76\xeb\x1f\x89\x09\x7c\x0f\xb2\xc3\x04\x9e\xe2\x13\x35\xc1\xe6\xd7\x00\xb7\x5d\xa0\x94\x91\xd5\xce\x82\x03\x7d\xa2\x9a\x5e\xe6\xa2\x6d\x5f\x38\xd8\x09\x3e\x91\x24\x76\x50\x2c\x95\x7a\xdb\x8f\x66\xef\x50\x7d\x4f\x27\x4f\xfb\x12\x82\x1f\xfa\x14\x54\xe8\xaf\xf9\x7e\x00\xfd\x1d\xf7\xd7\x12\xc7\xef\xb5\x96\x78\x2b\xfd\xd5\x4b\x8a\xdb\x55\xdf\xc7\x5e\x8b\xdc\x14\x82\xfd\x4d\xb6\xc1\xfd\x85\xa7\xdf\xdf\x61\xfc\xb6\xdd\x52\xf8\xb9\xd5\x3b\xa3\x41\x7d\xe3\xc9\xc9\x71\x4f\x67\x56\x8e\xdc\x76\x63\xf6\x60\xd8\xef\xa1\xce\x37\x6f\xe3\x76\x5c\x86\x6a\xf8\xd4\xf5\x68\x74\x07\xfe\x40\x10\x88\x0c\x08\x68\xcc\x88\x22\x06\xdb\xed\x97\x75\x66\x30\x12\x32\x85\x2b\xdb\x9d\xd1\x35\x4d\x38\xf5\xd7\xb5\x50\xd0\x35\xcc\xd0\x5c\x22\x8a\xd1\x1d\x77\x2c\x4a\xb2\xcc\xcf\x24\x82\x81\x17\xb3\x78\x12\x0d\xab\x82\xb2\xcc\x96\xa1\xd5\x0f\x05\x3e\x92\x0a\xe8\xe8\xe1\xbe\x0a\xc8\x53\xdc\x7a\x05\xd4\x8c\xa2\x9b\x96\x41\x95\x2f\x0d\x88\xbf\xe2\xc7\x10\x37\x39\x71\x9d\xde\xec\xc4\xd5\x2d\xb0\x3f\x5c\x5f\x5a\xb2\x77\xf6\x26\xe5\x49\xd7\xc9\xd7\x93\xce\xa3\xaf\xc1\xef\x34\x3e\xc0\xcb\x9b\x8f\xfe\xa5\xc2\x7b\x3f\x7e\xfc\x6f\x00\x00\x00\xff\xff\xf5\xda\xcc\x9c\xe6\x42\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xae, 0x2b, 0x69, 0x95, 0xc3, 0x41, 0x47, 0xbe, 0xd9, 0x35, 0x96, 0x41, 0x5c, 0xa, 0x28, 0xa9, 0xa5, 0x8a, 0x8c, 0x39, 0x21, 0x93, 0xd0, 0xe6, 0x7b, 0x9e, 0x6b, 0x18, 0x24, 0xb0, 0x85, 0x4c}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\xb6\xf6\xc0\xdf\xf7\x53\x10\xc4\xff\x7f\x91\x0e\x71\x16\x3b\x71\xb2\x04\xd8\x8b\x34\x6b\xb7\x02\xcd\x96\x9b\x87\xdd\xe1\xb6\x85\x40\x4b\xc7\x36\x11\x49\x54\x49\xca\x89\xd7\x65\x9f\xfd\x82\x94\x64\x53\x0f\xb6\x65\xc5\x9e\x9d\x86\x7b\xb1\x46\x47\x14\xc5\x73\x78\x78\xf8\xcb\x21\xa9\x7c\x7d\x85\x10\x26\x61\xc8\x24\x91\x94\x85\x02\x9f\x22\x25\x42\x08\xfb\x54\x48\x7c\x8a\x3e\xea\x2b\x94\x4a\xf5\x9d\x5e\x4c\x7d\xf9\x3e\xc4\xa7\xa8\xbd\x3b\x95\x7a\x44\x12\xc1\x62\xee\x02\x3e\x45\xb8\xd5\x42\x3f\x73\xd2\x27\x21\x41\xad\x16\x36\x8a\x41\x48\x7a\xbe\x2a\x22\x79\x0c\x86\x7c\x48\xbd\x0a\x29\x75\x59\x78\xce\x7c\xc6\x55\x9d\x7c\xd0\x23\x3b\xfb\xbb\xa8\xd3\x6e\xef\xa2\x4e\xb7\xbb\x8b\xda\xaf\xcd\xaa\x43\x12\xe8\x77\x9f\x4d\xd5\x41\xff\x42\x67\x3e\x70\x29\xcc\x72\x72\x1c\xe9\x72\x1e\x11\xc3\x1e\x23\xdc\xc3\xe9\xbd\x47\xfd\xef\xe7\x57\x08\x3d\xaa\xe2\x18\x3c\x2a\x0b\xad\xc5\x83\x10\xe4\x7b\x0f\x9f\xa2\x4e\xf7\xb0\x93\x48\x38\x89\x86\x37\x8c\xf9\x92\x46\x99\x4d\x30\xd5\x45\x92\x1f\x25\x70\xdd\x1a\x75\xb3\x7b\x72\x70\xfc\xc3\xc9\x71\xf7\xf8\xa0\x7b\xa0\xef\xfa\x34\xbc\x53\x56\xff\xf8\x59\x5f\x46\x24\x04\x5f\x4c\xec\x9e\x59\x1d\x13\x9f\x12\xa1\x2d\xa1\xbb\xe8\x31\x53\x07\xf7\x88\x96\xf4\x89\x2f\x26\x86\xd3\x9a\x7d\x80\x70\x20\x87\xea\x9d\xfb\x39\x39\x54\x15\x37\xbb\xce\x67\xc4\x93\x20\x64\x2b\x15\x4d\x8a\x55\x98\x23\x91\x73\xae\x3b\x28\x5f\x69\x9f\xfa\xbe\xe9\x22\x5a\xf0\x33\x27\x1e\x85\x50\x39\xd6\xb4\x55\x03\x4e\xbd\x4b\x36\x75\xbd\xc4\x1f\xf0\x29\x3a\x31\x3a\xed\x5e\xd5\xd5\x31\x04\x0f\x66\x1d\x08\xe1\xb1\xba\xce\x3a\x72\x52\xf7\x90\x7a\x1e\x84\xd7\xc0\x69\x85\xde\xba\x93\x8e\x27\x97\x3e\x0c\x20\xf4\xf2\xcd\x20\xa3\x41\xf1\x31\x84\xb0\x1b\x73\x9e\x68\x51\xbc\x13\x90\x87\x2a\x29\x0d\x2b\xa4\x62\xc8\xee\xcb\x2e\x2f\x99\x24\x7e\x45\xe9\x11\xf1\xe3\xa9\x0e\x25\x45\x7d\x1a\xea\xbb\xb9\x9e\x51\xc2\x7b\xea\x25\x6e\x60\x4a\x0d\x97\x4b\x86\x4e\xec\xfb\x97\x8c\x86\xf2\x82\xe9\x61\x88\x5d\x16\x86\xe0\x4a\xf0\xa6\xdd\xcf\xa2\x7c\x84\x98\xb8\xce\x87\x49\x7d\xa5\x56\x45\xc0\x5d\x08\x25\x19\x40\xc9\xf8\x91\x7a\x9d\x72\x87\x58\x3d\xdb\xcd\xcb\xcb\x7d\xc5\x21\xf4\x80\x83\x0e\x04\x7d\x9f\xc9\x69\xbb\x84\xee\xdc\xdf\x46\xc0\x39\xf5\xa0\xa0\x98\x88\x88\x0b\x55\x43\x41\x48\xe2\xde\x95\xde\x22\x24\x44\x11\x78\x1f\x68\x58\x6e\xb0\x24\x7c\x00\x52\x18\x31\xd1\x8c\x8a\x6a\x1c\x3c\x44\x49\x9c\x22\x12\x76\x02\x22\x25\xf0\x80\x09\xe9\x44\xea\x7f\xba\x5b\xbf\xd2\x50\x48\x12\xba\xf0\xe3\xdf\x9f\xf0\xff\x09\xe0\x23\xe0\x9f\xf0\xe3\xc7\x76\xf0\xd9\x8c\x64\x6a\xb0\x30\x1e\x10\xe5\x60\x58\xd2\x00\x9c\x44\xc7\x7c\x11\x1a\x4a\xe0\x23\xe2\xbf\x23\xae\xd4\xe3\xaf\x9d\xbb\x9d\x78\xf3\xbb\x49\x3d\x5f\x27\x2f\x7f\x7c\xcc\x57\x14\x80\xe4\xd4\x55\x65\x2a\x1b\x9d\x2f\xcc\xa1\xaf\xc3\x1f\x3e\xcb\xcb\x95\xe5\x54\x3f\x4e\x64\x8f\xbb\xf3\xad\x24\xe2\x60\xa7\x99\xa5\xd6\x6e\xaa\x9b\xb2\xda\xcd\x6c\xf4\x66\x91\x8d\xd2\x9f\xa6\xfe\x2a\x87\x1c\xc4\x90\xf9\x5e\xc1\x8f\x95\x6a\xef\x38\x0b\xf0\x29\x52\x63\x35\x27\xbf\x82\x41\x3a\x30\x0b\x0f\x5c\x0f\x69\x5f\x96\x9f\x90\x3a\x84\xe3\x4b\x26\xa4\x40\x11\x70\x74\x0d\x2e\x0b\x8d\x91\x2e\x27\x93\x99\x31\xd2\x03\x71\x05\x82\xf9\x71\x3a\x93\x95\x83\x19\xe1\xe0\x95\xc3\x99\x60\x5c\x16\x22\xb5\x8e\x64\x4e\x36\x0b\xd3\xd0\xa3\x23\xea\xc5\xc4\xc7\xa5\xf0\x91\x95\xd1\x53\xec\xb4\x7d\x0f\xe4\x81\x16\xe2\x50\x2f\x76\xef\x92\xc1\x69\x2a\xab\x9a\x9d\x06\x34\x65\x8f\x0a\x58\x28\x94\xae\x0e\xc9\x93\xd0\x5b\x11\xe1\xc6\xe4\x01\xe6\xc4\x84\xa9\x73\x8a\xa1\xb2\x44\xde\xef\x48\x0f\x54\xa8\xc7\xe7\x2c\x0e\x8b\xf7\xd8\xe0\x0d\x11\x50\xf2\xd5\x64\x82\xc9\x37\x7b\x32\xc3\x94\xc4\x86\x3e\x0b\x07\x66\xad\xa6\x96\xde\xb0\xc6\x76\x96\x06\xc7\xb8\xdc\xef\xc4\xa7\x83\x2a\x77\xd4\xf2\x0f\x30\x9a\x34\x3a\x87\x78\xa9\x09\x2c\x5d\x65\xd7\x95\x74\x95\x13\x34\xc5\x2b\xc3\x3e\xb3\xf9\xaa\x30\xde\x16\xe1\x55\xa1\x78\xe2\x53\xc5\xb8\xd3\x0c\xae\x0c\x0f\xb4\x6c\xf5\x0c\xd8\x6a\x28\x65\xe4\x70\xf8\x12\x83\x90\x62\x1b\x20\x0b\x65\x6f\x47\xb5\x30\x4b\xb7\x5f\x0f\x71\xf1\x8f\xd3\xd6\x92\xb6\xdb\x1a\xec\xaa\x6b\xb3\xad\xa6\xaf\xab\xd4\xee\x16\xc0\x2c\x80\x2d\xd3\x54\x0b\x60\x2f\x07\xc0\x8a\xe9\xad\x93\x06\xfc\x75\x54\x03\xbf\x6c\x7a\xcb\x22\x58\x7d\x04\x2b\xce\xc4\xf7\xd0\x13\x4c\x07\xff\xb9\x0c\xb1\x65\xf9\xad\xca\xa6\xaf\x11\xbe\x1a\x5a\x6d\x13\xd0\xf5\x3c\x00\xea\xd7\x38\xe8\x01\x47\xac\x8f\xce\xb3\xc1\x8c\x7e\x82\x11\x75\x41\xa0\x9d\xff\x40\xef\x5a\x5b\x37\xbb\xa9\xde\xf0\xda\x02\x96\x05\x2c\x0b\x58\x16\xb0\x10\x9a\x95\xe1\x6a\x42\x58\x6d\x4b\x58\x96\xb0\xd6\x45\x58\x5e\xcf\x09\x88\x90\xc0\x1d\x77\x3a\x91\x3d\x27\xce\x9a\xa3\xc0\x3f\x43\x5b\xcb\x5b\x70\x6b\x12\x5d\xcb\xdb\xee\x79\x11\x9b\xde\xa1\x23\x19\xba\xd0\x4a\xa2\x9f\x88\x24\x3d\x35\xd3\x5a\x4c\xb3\x98\x66\x31\xcd\x62\x1a\x9a\x91\x07\x6b\xff\xd0\x04\xd3\x2c\xa7\x59\x4e\x5b\x2d\xa7\x55\x2d\xaa\x91\x88\x3a\x09\x27\xc4\x41\xb2\x6c\x86\x7a\x63\xb4\x93\x91\xc6\x6b\xf4\x3d\x9a\xfb\x98\xab\x22\x70\xd5\x83\x4b\x43\x49\xba\xa3\xb6\xe0\x5e\xcb\xd3\x0a\x19\x0d\x5a\x4b\xaf\x6b\x9a\x66\x58\x13\xe7\x0d\xa9\x90\x6c\xc0\x49\xe0\x7c\x89\x49\x28\xa9\x0f\x3b\xfb\x7b\x27\x27\xbb\xf3\xed\x9b\xcc\xcf\x15\x06\xde\xf5\xa1\xc1\x12\xe7\x4c\x23\x17\xad\x18\x9d\x9c\xb4\x66\xa3\xb3\x01\x70\xdb\xc1\x6a\x67\x97\xef\x51\xba\x44\x89\x6e\x68\x00\x68\xe7\x5a\xe3\xb1\xcd\xa1\xad\x19\xce\x66\x80\x99\x65\x32\xcb\x64\x5b\xc5\x64\xa5\xd4\x59\x23\x28\x3b\xe8\x58\x28\xb3\x50\xb6\x1e\x28\xcb\x06\x53\x6e\x9f\x53\x6d\x36\x9b\xf3\xb4\x45\xb4\x4c\xf2\x74\x44\x9b\x63\x66\x4b\x6a\x0d\x49\xed\xdc\x57\x71\xde\x92\x9a\x25\x35\x4b\x6a\xc9\x8d\x17\x4d\x6a\xc5\xec\x59\xe7\xb8\x01\xa8\xb5\x0f\x2c\xa8\x59\x50\x5b\x29\xa8\xd1\xd2\xe9\x3f\xce\x5c\x10\xc2\x71\xa3\xd8\x11\x7a\x47\x74\x8d\x5d\xe9\xdf\xa1\xf6\xfe\xfe\xe6\xd6\x3c\xeb\xa3\xd2\x26\x19\xe1\xfc\xf2\x16\xdd\x4a\xea\xd3\x3f\xf5\x41\x74\x74\x45\x24\xa0\x9d\xff\xb7\x88\xb0\xb9\x95\xb6\xb9\xdd\x81\x2c\x3a\x20\x8b\x0e\x9b\x47\x87\x52\x92\xa7\x11\x3b\x74\x2d\x3a\x58\x74\x58\x29\x3a\x0c\x98\x13\x40\x20\x24\x91\xc2\x21\xbe\xcf\x5c\xa7\x37\x96\x20\x36\xb4\x23\xea\x4c\xb5\x60\x4e\xca\x60\x9a\x7d\x99\xd1\xee\xb5\x6e\x87\x32\xdf\xa9\xbb\xc4\xa1\x61\x2c\x60\xb5\x16\x5b\x55\x22\xeb\x5a\x35\x70\xbd\xf6\x5c\xb8\x45\x6a\x09\x7b\x0e\x81\x44\xdb\x6c\xce\x5f\x80\x44\xeb\xb5\xe6\xf9\x36\x63\xef\x05\x04\x8c\x8f\xd1\xad\x50\xd1\xd1\xa2\xee\x3a\x51\x57\x7b\x8a\xcd\x88\xcd\x6a\xa7\x49\x14\xdf\x28\xd7\xe6\x86\xe0\x26\xf2\x5a\x07\x47\x0d\xd8\xb4\x73\x52\x03\x4e\x57\xf1\x79\x8a\x15\xa1\xe9\x53\xbf\x4f\x51\xc2\x50\x25\xf8\x87\x08\xb4\xf3\x0d\x11\xa8\x88\x83\x1d\x1a\xba\x1c\x88\x28\x2e\x62\xa9\x58\xcc\xe2\x5a\x5f\x54\x98\xb7\x7c\xb8\xcc\xa7\x25\x0c\x58\xac\xcd\x31\xab\xd1\x60\x7e\x9b\xe7\x1f\x2e\xdc\x0e\x48\x48\x56\xcb\xf4\xd2\x99\xd2\x59\x7f\x8f\xe1\x82\x86\xb1\x5c\x84\x0c\x96\x09\x2a\xfd\x6b\x0b\x66\x5b\x4b\x05\x5b\x43\x05\xcf\x3a\xdb\xd5\x88\x28\x0e\x6b\x00\x85\xcd\x76\xd9\x6c\xd7\x52\xd9\xae\x01\xe3\x2c\x96\xaa\x4b\xb6\xf8\xd4\x5f\xae\x9d\x6b\x3c\xdc\x57\xc7\x1e\x9b\x3d\xc3\x57\xc7\x12\xcf\xe4\xa8\xde\xcf\x0c\x5d\x15\x15\xb1\x29\x14\x7b\x2e\x6f\x1b\xc8\xee\x5b\x04\xa6\xdc\x78\xf4\x40\xb8\x9c\x46\xe9\x88\x9a\x26\xd2\x36\x92\x5f\x39\xec\x36\xa0\xa1\x4e\x9d\x53\x77\x33\xf3\x2b\xc5\x4c\x4a\xed\xaf\x7f\x72\x3a\x18\xca\xeb\xca\x2c\xba\xcd\xbc\x3c\x6f\x1a\x9a\x6c\x1d\x0e\x99\x07\x8e\x1b\xc5\xd5\x04\xb0\xab\xe2\xfa\x8f\x9f\x70\x2c\x6a\xe6\x5b\xe6\xac\xb9\xa8\xf2\x15\x70\x5e\x41\x05\xb7\x02\x38\xaa\xb5\x5b\x68\x29\xe2\x59\x42\x5f\x31\x16\x12\x82\xa7\x69\x5c\x5a\x95\xd3\x75\xd6\xd1\xeb\xcd\xda\xf4\xa2\x9e\x0f\xab\xd5\xea\xbd\xe7\x43\x1d\x9d\xce\xd7\xa4\xd3\xdf\x9f\x30\xe5\x5f\xfe\x12\xac\x2f\xd5\xbf\x94\xdd\x13\x2a\x57\xab\xe2\x6f\x72\x58\xcf\x1f\x7f\xda\x96\x64\xdc\xe5\x2d\xfa\xc0\x88\x87\x76\xda\xc1\xa2\xdd\x69\x16\x28\x2b\x7d\x71\xeb\x28\xcd\xd2\xe4\x96\xd0\xe4\x46\x72\x68\x8d\xa8\xf1\xe0\xe5\x7d\xab\xc1\xe2\xe1\xda\x17\xe6\xcc\x4f\x86\x2f\x5e\x96\x13\x92\xc8\x58\x38\x2e\xf3\x16\xad\xcc\x91\x01\x84\x12\xb5\xd0\xd7\xaf\xc8\x78\x08\x3d\x3e\xa2\x15\xaf\xd2\xcd\xfc\x5e\xc4\x0c\xcc\x30\x5a\xa3\x6e\x1c\xee\xed\xfd\xd5\xdd\xdb\x6b\xac\x66\x14\x55\x29\xb9\xe5\xcb\x7b\xbf\xdc\xdc\x5c\xa2\xb7\xba\xe7\xed\xd2\x9e\x45\x0b\xbb\xb4\xf7\x7c\xd9\xa2\x98\x90\xea\x1e\x36\x40\x8b\xce\x74\x65\x28\xcb\xf8\xe7\x53\x6b\x2f\xe1\xaf\xd4\x58\xd8\x58\x0d\x6c\xec\xe4\x7f\xe1\x0f\x41\xde\x33\x7e\xe7\x48\x4e\x42\x11\x50\x39\x77\x53\x70\xd5\xaf\xf9\xaf\xbf\xfb\xa1\x7a\x51\xaa\xbc\x8d\x72\xd9\xe5\xaa\x3f\x92\x53\x46\xab\xde\x45\x34\xc3\x02\x1c\x5c\xa0\xa3\xf9\xbb\xa2\x6b\x19\xa0\x51\x56\x6e\x49\xdb\x5c\x2d\x63\x9b\x6d\xe1\x9a\x5f\x13\x4b\xa3\xab\x3f\xbe\x4f\xfb\x76\xd1\xfa\x9c\x85\x9a\x4a\x4f\x36\xf6\x30\x47\x33\x76\x30\x5b\xa4\x79\x89\x48\xe3\x81\x4b\x03\xe2\x17\x3d\x76\x33\x69\x94\x66\xac\xb3\xda\x43\xfb\x2a\x16\xbf\x0d\x22\x39\x9e\x71\xef\xbf\xc0\xd9\x13\xb3\x2f\x6b\x58\xb7\xb3\x99\x99\x6d\x81\x25\x4d\x08\x81\x3e\x93\xe3\x5c\x40\x70\x33\x27\x0f\x83\x5a\xa8\x50\xfa\x1d\x07\xa8\x57\xf8\x4d\xdc\xef\x03\x9f\x45\x1d\x85\xc2\xe7\xc4\x1d\x82\x57\x6f\x13\xd1\xaa\x56\x08\xbd\x95\x53\xd8\x12\x96\xad\xb1\x61\xfb\x79\x81\xd0\x12\x87\xbc\x2c\x01\x55\x7a\x51\xad\x53\x5c\x96\x81\x5e\x22\x03\x6d\x84\x75\x8e\x0e\x9a\xb0\xce\x71\x0d\xd6\xb1\x19\x9c\x86\x50\xe2\xc7\x03\x1a\xfe\x0e\x5c\xa4\x3b\xd1\x8e\xf6\x8e\xf6\x3a\xf8\x05\x40\x4b\x96\xd5\x10\x92\x48\xe7\xc6\x8d\x9c\xf3\x98\xf3\xb7\x42\x92\x5e\xad\xf9\x75\x25\xc8\xa0\x5f\xe7\x53\x31\x5c\x03\x39\xd0\x5c\xee\x26\xd3\xf2\xed\x83\x74\x6e\xce\x2f\xb3\x33\x51\xf5\xff\xa2\xf2\x4a\xf4\x9d\x1c\xc5\x5a\x9a\x43\x16\x28\x2b\xe2\xa0\xa4\xea\xc2\x0e\x6d\xba\xf7\x26\x41\x29\xa3\xef\x56\xb3\xbd\xe8\xc9\x1d\xf6\x34\x7d\xb2\x37\x6c\xf9\x3e\xa2\x9b\xf3\x4b\xf3\x8f\xcc\x58\x2e\xb4\xcb\x7d\xdf\x08\x17\xbe\x4a\xab\x55\x63\x4e\x0d\x27\xa5\x76\x7b\x3f\xf1\x70\x2c\xdc\x21\x04\x64\x3a\x4f\x77\x3a\x89\x58\x8e\x93\x61\xe1\x11\x7e\x97\x94\x94\x64\x30\xed\x79\xe3\xab\xc0\xa9\xf1\x0c\x49\x2b\x02\xde\xc7\x93\xd7\x4a\x08\x22\x9f\x48\x1a\x0e\x26\xea\x60\x9f\x0a\x69\xb8\x51\x4e\x49\xff\x77\xe5\x80\x65\x6f\x9d\xb2\x57\xae\x2f\x25\x3c\xc8\xf2\x62\xc7\x28\xad\xe3\xa3\x21\x44\x08\x63\xe3\xf2\x73\x95\x9b\xd4\x3c\x8b\xa8\x93\x7d\x7d\x1a\xd2\x6c\xa3\xbd\x76\x1a\x27\x19\x3a\x95\x9b\x30\xb3\xb0\x69\x86\x06\x1a\xba\x7e\xec\xc1\x99\x5f\x05\x7e\x93\x93\x1c\x49\x30\x36\xab\x0a\x62\x5f\xd2\xf2\xc0\x4d\x07\x79\xc5\x03\x53\xb8\x9b\xc6\x44\x84\xf0\x97\x18\xf8\xb8\x5e\xeb\xa7\xbe\xd3\xce\x49\x07\xf0\x50\x30\x3e\x16\x77\x34\xba\xe5\xfe\xf5\x38\x74\xab\x72\x72\xe5\x08\x29\xc9\x40\x77\xb9\xf8\x77\xd6\x1e\x9c\xbf\x5b\x6a\xb8\x92\x55\x17\x4e\x43\x68\xa2\x99\x71\x23\x16\x70\x93\x54\x94\xcb\xee\xbd\xca\x1c\xe1\x31\x71\x55\xaa\x2d\x98\x3a\x69\x3f\x99\x61\x70\xc8\xee\x5b\xed\x6e\xf6\xc5\x6b\x2c\x59\x2a\xc4\xb9\xe7\x22\xea\xde\x69\x40\x4d\x9f\x4e\x2d\xe6\x64\x4b\x4b\x66\xd8\xc4\x5d\x63\x82\xc9\xc6\xa2\xbe\x38\x30\x2f\xda\xd3\xaf\x6c\xe3\xae\xf1\x73\xdb\xbc\x38\xd8\x37\xef\x18\xf3\x46\xc7\xf8\xb9\xed\x25\x9e\xff\x39\xd3\x81\x06\xe0\x18\x5e\xb1\xf0\x2d\x66\xc5\x47\x66\xc5\xe6\x5b\x3a\x87\xe6\x85\x71\x70\xf3\xd8\x33\xdb\x9b\xb5\x25\x67\xbe\x3f\x99\x86\x6e\xdc\xe3\xec\x5e\xa4\xde\x6b\xa4\x6c\x26\xc1\x45\x6f\xf6\x6d\xdd\x80\x90\xe8\x12\xb8\x0e\xe4\x0a\xf6\x2e\x58\x48\x25\xe3\x2a\xc8\xe8\x27\x63\xfd\x2b\x1e\xde\x4f\xfe\x6b\xb7\x13\xe9\x68\x12\xe7\x0e\x5f\x3d\xbe\xfa\x5f\x00\x00\x00\xff\xff\xa5\x9b\xdf\xab\xca\x92\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xec, 0x9c, 0x65, 0xc2, 0x69, 0x3a, 0x4a, 0x72, 0x62, 0x11, 0x9d, 0x39, 0xc7, 0x45, 0x4f, 0xe1, 0x5d, 0x5e, 0xf6, 0xb5, 0xad, 0x8f, 0x5, 0x40, 0x17, 0x30, 0x2d, 0xd5, 0x24, 0xc6, 0x26}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _es_dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xf8\x30\x74\x40\x82\x5a\xce\x52\x04\x7e\x4b\xd7\xb5\x28\x90\xa2\xdd\x32\xec\x25\x08\x0c\x5a\x3c\x96\x38\x53\xa4\x40\x1e\x39\x76\x0b\xff\xf7\x81\xd4\x8d\xba\xb4\xc9\x8c\xac\x6b\x51\x3d\x45\xfa\x78\x48\x7e\xe7\xfa\x21\xd6\xa7\x13\x42\x28\x53\x4a\x23\x43\xa1\x95\xa5\x0b\xe2\x20\x42\xa8\x14\x16\xe9\x82\xdc\xfa\x37\x52\xa1\x7e\x65\x55\x08\x89\x6f\x15\x5d\x90\xe8\xb4\x45\x39\x43\x66\x75\x61\x62\xa0\x0b\x42\xcf\xce\xc8\x1b\xc3\xd6\x4c\x31\x72\x76\x46\x03\x33\x50\x6c\x25\x9d\x09\x9a\x02\x02\x3c\x15\x7c\x04\x15\xb1\x56\xbf\x6a\xa9\x8d\x3b\xd3\x24\x2b\xf6\x6c\x76\x4a\xe6\x51\x74\x4a\xe6\x17\x17\xa7\x24\xfa\x39\x3c\x5a\xb1\xcc\xdf\x7d\xd5\xba\x43\x7e\x22\x57\x12\x0c\xda\xd0\x0e\xf7\xb9\xb7\xe3\xcc\xa6\x2b\xcd\x0c\xa7\xd5\xda\xc1\xff\xbd\x3b\x21\xe4\xe0\xcc\x29\x70\x81\x3d\xb6\x34\x51\x80\x6f\x39\x5d\x10\x55\x48\x59\x22\x86\xe5\xe9\x9f\x5a\x4b\x14\x39\x5d\x90\x99\x07\x85\x33\x39\xf7\x8f\x52\xa8\x8d\x8b\xeb\xed\x9d\x7f\xcd\x99\x02\x69\x9b\xc8\xd6\x71\xa5\x4c\x0a\x66\xbd\xaf\x3e\x09\x87\x9a\x30\x5d\x31\x8f\xac\x99\xb4\x4d\x68\x3c\xf7\x6b\x50\x09\xa6\x2e\x0d\xb3\x0e\x0e\x63\xe6\x41\x72\x6a\xe6\x7e\x65\x2d\xa4\x0c\x33\xe9\x81\x37\x86\x71\x01\x0a\x6b\x77\xfc\x42\x62\x04\xff\xa0\xdb\x0a\x29\xd3\x46\x17\xe4\x32\x88\xed\xbd\x3b\x6b\x1e\x00\xbb\xf0\x0c\x42\xe8\xde\xbd\xd7\xf1\x6e\xce\x4e\x05\xe7\xa0\x6e\xc0\x88\x11\xf2\x3e\x96\xcd\x25\x54\x42\x02\x8a\x77\x69\xb0\x6d\xd2\xdf\x46\x08\x8d\x0b\x63\x4a\x2f\xfa\x2b\x19\xdb\x8d\xa1\x42\x8d\xa0\x36\xd5\xf7\xc3\xca\x44\x8d\x4c\x8e\x58\x6f\x99\x2c\x5a\x1f\x06\x8e\x4a\xa1\xfc\x6a\x78\x9a\x07\xef\x05\x2f\x73\xd9\xa0\x2e\x4d\x1f\xb4\x50\xf8\x4e\xfb\xd6\xf0\x40\x53\xc7\x54\xe7\xdd\x86\x6d\xf2\x7c\xdd\xd4\xdb\xe0\xf6\x1c\x4c\x0c\x0a\x59\x02\x83\x20\xe7\xee\x26\x97\xf6\xc2\xed\x9d\x77\xf1\x61\x4e\x0c\x28\x0e\x06\x7c\x5f\xae\xa5\xc6\x96\x97\xf5\x49\x7c\xbf\x05\x63\x04\x87\xb6\xf0\xcb\xc5\x9c\xc5\x30\x56\xb7\x16\x59\xbc\x19\xdc\x62\x11\xf2\x1c\xf8\xb5\x50\x43\xc2\xc8\x4c\x02\x68\x83\x11\x15\x0e\x29\xd7\xbd\xbb\xbc\x1c\x1b\x0c\xe1\x19\x48\x66\x51\xc4\x16\x98\x89\xd3\xa5\x50\x5c\xc4\x60\x97\xd5\xeb\x1a\x30\x4e\x97\x3e\xa3\xb7\x51\x76\x17\x0e\x95\xa6\xde\x5e\x6b\x93\x31\xac\xcf\xeb\x5a\x18\x58\xfb\x91\x40\xaf\x68\x03\x1f\xaa\xa7\xd6\x77\x4c\x0d\xd8\x54\x4b\xde\x8b\x09\x8a\x0c\x5e\x1b\x9d\xf5\x3b\xd3\xe1\x7f\x40\x52\x25\xb9\xb7\xe1\x26\x15\x6b\x1c\xee\x40\x3f\xac\xe8\xef\x05\x98\x3d\xe9\x10\xa5\xd8\x4c\xa8\x4f\x61\x6d\x33\x03\x7c\x58\xdd\x56\x1b\xec\x35\xae\x2f\xec\x65\x3d\x3b\x5d\x04\xb7\x82\x17\x4c\xd2\x41\x95\xd5\x36\x7e\x30\xb6\x04\x76\x6c\x27\x7a\xe5\xba\x2a\xe2\x4d\x99\xc3\xd0\x0f\xd7\x89\x55\xc9\x3b\x57\x47\x46\x7c\xcf\x7a\xbc\x43\x9b\x4e\x1c\x69\x84\x3d\xdb\xc1\x17\x4a\x67\xdd\x24\x5b\x69\xd5\x4b\xb6\x64\x2b\x90\x75\x90\x05\xd8\xe7\xb6\xb7\xae\x93\x97\xcc\x42\x57\x1d\x9b\x91\xd3\x65\xde\xcc\x9c\x01\x1c\xb8\xd4\x96\xd4\xe9\x43\x6c\x6d\xea\xf2\x36\x4a\x77\x70\xc3\x7f\xc8\x73\x50\xfa\xfb\x61\xea\x99\x14\xc9\xd8\xb4\xf5\xf8\x35\x6c\x1b\xd2\x1d\x6d\xae\x42\xf0\x23\x88\x66\x07\x38\x56\x35\x7f\x99\x54\x73\x52\xcd\xa7\x56\x4d\xa1\x38\xec\x84\x4a\xca\x87\x47\xeb\x66\xbd\xed\x11\xda\xf9\x99\x41\xf7\x6f\xb8\x71\x90\x80\xf0\x68\x72\xde\xdc\x57\xc6\x38\xbb\x97\xdf\x88\xb2\xbf\xd2\x71\x91\x81\x42\x4b\x6a\x4f\x9f\xd7\xd4\x27\xbd\x7f\x02\xbd\xff\x82\x82\xd2\xf7\xf9\x24\xf6\x93\xd8\x7f\x95\xff\x90\x2f\x8f\xd0\xfa\xf9\xa4\xf5\x93\xd6\x1f\xa5\xf5\xe3\x52\xca\x75\xdc\x9f\x76\x7d\xd1\x1c\x58\x1c\xa3\xe6\x9f\xbf\xbd\x12\x71\xee\xcd\x1f\x64\x42\x2a\xeb\xef\x4b\xc1\x03\xbe\x93\x64\x3f\xb5\x64\x7f\x4d\x1d\x9c\xf4\xfa\x07\xd2\xeb\xc1\x3f\xe7\xc7\x08\xf6\x8b\x49\xb0\x27\xc1\x7e\x42\xc1\xb6\xa8\x0d\x2c\xad\xf8\x08\xcb\xd5\x1e\xe1\x01\xf1\x76\x76\xdf\xf8\xcf\xd8\x37\xce\x21\x5e\xea\x24\xe9\xf0\x9d\xa4\xf2\x28\xa9\xe4\x10\x8f\x55\xc6\xa4\x96\xff\x87\x5a\x9e\x54\xc7\xba\xbe\x73\x2d\xe5\xbc\x8e\x66\x65\x6e\xa8\x8d\x53\xc8\xd8\x5f\x60\xac\xd0\xee\xec\xf9\xbc\x84\x71\x2f\xab\x6f\xd7\x66\x53\x5a\x22\x4b\x82\xaf\xcb\x08\x59\x2e\x19\x0a\x95\x0c\xbf\xe4\xb7\x1f\xb6\x7d\x21\x36\xeb\xeb\xb2\x6b\xa9\xd2\xf7\x67\xd1\x45\x56\x05\x9d\xa2\xae\x40\xda\xd9\x97\x8b\x78\xe3\x87\x64\xb5\xbb\x62\xbf\x14\x0a\xc1\x6c\x99\x0c\x0b\x91\x5e\xb4\xa5\xd6\xf8\xe6\x5f\xce\xc3\x97\x28\x6b\x9f\x2f\x82\xe7\x28\x7c\x39\x9f\x85\x2b\x41\x27\xce\x83\xe7\xa8\xfa\x96\xdf\x75\xf5\xa3\xf6\xc3\x96\x56\x01\xab\xc7\xcb\x6f\xe1\x14\x25\x99\x56\x02\xb5\xa9\x7f\xa0\xa4\x85\xd7\x68\xfa\xea\xf2\x3a\x7b\xf1\xf7\xe6\x5d\x15\xed\x6d\x93\x91\x68\x76\x72\xf8\x27\x00\x00\xff\xff\x22\xec\x09\x54\x3e\x21\x00\x00")

func es_dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_es_dashboard_dataJson,
		"es_dashboard_data.json",
	)
}

func es_dashboard_dataJson() (*asset, error) {
	bytes, err := es_dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "es_dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x46, 0xe9, 0xd1, 0x18, 0xcb, 0xff, 0x63, 0x5e, 0xd6, 0x30, 0x59, 0x59, 0x16, 0x1e, 0xc9, 0x1c, 0xa7, 0x6b, 0xe1, 0x2e, 0x3, 0x1b, 0x66, 0xeb, 0xb9, 0xfa, 0xec, 0xe6, 0x5f, 0xb2, 0x5a}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xbd\x6a\xc4\x30\x10\x84\x7b\x3f\x85\x30\xa9\x52\xa8\x71\x9d\x2a\x65\xca\x3c\xc0\xb2\x5e\x0d\x89\xf1\x2f\xda\xd5\x25\xe6\xb8\x77\x0f\xf8\xac\xe2\x8c\xe2\xeb\x04\xf3\xcd\xa7\xd9\x39\xd9\x92\xcc\xd5\xdd\xa4\xc6\x93\x40\x6b\x77\xad\x9c\xbb\xf0\x90\xe0\xde\x5c\xfd\x72\xe5\x1f\xa5\x9c\x7a\x5e\x16\x52\xc4\x0b\xa2\x7f\xbd\xd5\xd5\xad\xaa\xb2\x20\xb4\xef\x43\x52\x43\x2c\x0a\x62\x50\x92\x7b\xee\x43\x9b\x9f\x8f\x06\xfe\xc2\x64\x4f\xfe\x1f\x66\x0e\x06\x35\xda\xe0\xe3\x86\x11\x16\x3b\xd1\xcf\x6d\xe0\xb9\x68\x47\xf7\x63\x1e\x35\x4b\x9c\x7f\xd7\xf3\xfa\x86\x14\xcb\x18\x58\xad\x93\x93\x0d\x3b\xa1\xe0\x28\xdf\x14\xe6\x91\xbb\xc9\xa3\x3c\x45\x9b\x36\x49\x0f\x2b\x8a\xb4\xa1\x7b\xea\x33\x76\x2c\x7f\xe0\x9f\x3b\x78\x24\x16\x81\x2a\xf5\x58\xbd\x36\x3d\xd6\xad\xfb\x17\x00\x00\xff\xff\x61\x4c\xb0\xe5\x0f\x02\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x42, 0x56, 0xdd, 0x1a, 0x39, 0x84, 0xd6, 0xa7, 0x75, 0x20, 0xd1, 0x79, 0x81, 0xa1, 0x76, 0xe4, 0xc7, 0x1c, 0x4a, 0xc6, 0xaf, 0x8a, 0xac, 0xe0, 0xf3, 0x1d, 0x96, 0x0, 0xa3, 0xa4, 0x19}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcd\x6e\xd4\x40\x0c\xbe\xe7\x29\xac\x70\x85\xa8\x14\x95\x9f\xc3\x1e\x79\x0a\x84\x2c\x67\xe2\x6e\x47\x9d\x8c\x87\xb1\x27\x65\x41\xfb\xee\x68\x93\x56\xca\x92\xa1\xb9\x30\x47\x7f\x3f\x63\x7f\xb2\x27\xca\x9e\xfa\xc0\xd0\xba\x50\xd4\x38\x63\xa4\x91\x5b\xf8\xdd\x9c\x9b\x66\x0b\x4e\xc9\xa1\x1f\xfe\x09\x6b\xe9\x23\x5b\x8d\x41\x29\xa1\x8f\x6a\x14\x1d\xa3\x93\x12\xed\x75\x8a\x9d\xd2\xb6\x0b\x3a\x72\xb4\x5d\x9b\x6b\xd2\xca\xe8\x0d\x7c\x0d\xa4\xe6\x9d\x32\x65\xf7\x00\x2f\x1a\x5d\xcb\x59\xf7\x3e\x58\x33\xaa\x6d\xb2\xe2\xc4\x59\xbd\xc4\x2a\x94\x5c\xad\xec\x32\x93\x31\x66\x09\x55\x43\xee\x15\x25\x99\x97\xa8\x17\x18\x60\xe0\x7b\x2a\xc1\xe0\x00\xdf\x1a\x00\x98\x6b\x97\x37\x49\x28\xe3\xd2\x18\x1c\xa0\x3d\xa6\xdb\xf6\x1a\x51\xff\xeb\x82\xbc\xbf\x99\xcb\xe7\xb7\x0d\xc0\xf7\xeb\xef\x52\x96\x9f\xa7\x9d\x19\x87\x7e\x2f\xa6\x35\x83\xe3\xd1\xc7\x1d\x93\x40\xaa\x35\xc6\xa2\x5d\x27\x0a\xf0\x3c\xdd\x48\xe9\x2a\x89\x25\x83\x96\x4a\x96\x4c\xef\xc6\x93\xfe\x08\xed\x32\xfb\x01\xda\xbb\xee\x53\x37\x97\x70\xc1\xbb\xdb\xee\xe6\x43\xf7\x9c\xce\x8b\x26\x89\xda\x31\xf3\x2c\x3c\x40\xfb\xa5\xfb\xd8\x7d\xbe\x30\xce\x9b\xb6\x8a\x72\xae\x9e\xca\xd0\x63\x22\xd5\x27\xc9\xdb\x2b\x50\x7d\xc0\x54\xfa\xe0\x1d\x3e\xf2\x69\x03\x8f\x64\xc6\x79\x14\x35\x1c\xe4\x29\x06\xa1\x01\x4b\x0e\xaf\xf1\x82\x77\x1c\x95\xf1\xde\x57\xf6\x66\x36\x30\xde\xb3\xcb\x22\x86\x7d\x10\xf7\x88\x03\x4f\xde\xf1\xff\xd9\xb0\xbb\xbf\x36\xec\x4f\x00\x00\x00\xff\xff\x70\x9e\x0f\xac\x6b\x04\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0xdb, 0x8d, 0x6, 0x6b, 0x1c, 0x61, 0xf3, 0x82, 0x42, 0x57, 0x8b, 0x2f, 0xef, 0x3b, 0x40, 0x39, 0x16, 0x37, 0xc8, 0xe5, 0x53, 0x2, 0xb5, 0x9, 0x16, 0xb3, 0xb0, 0x36, 0x3, 0x96, 0x4e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":             clusterTf,
	"dashboard.yaml":         dashboardYaml,
	"dashboard_data.json":    dashboard_dataJson,
	"datasource.yaml":        datasourceYaml,
	"es_dashboard_data.json": es_dashboard_dataJson,
	"outputs.tf":             outputsTf,
	"variables.tf":           variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf": {clusterTf, map[string]*bintree{}},
	"dashboard.yaml": {dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": {dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml": {datasourceYaml, map[string]*bintree{}},
	"es_dashboard_data.json": {es_dashboard_dataJson, map[string]*bintree{}},
	"outputs.tf": {outputsTf, map[string]*bintree{}},
	"variables.tf": {variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
