// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (10.463kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (30.894kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (327B)
// assets/variables.tf (779B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xe3\x36\x12\xfe\xee\x5f\x31\xa7\x5d\xa0\xed\x61\x25\xd9\x49\x9a\x4d\x5a\xa4\x45\xef\x0d\x38\xa0\xbd\x16\xb8\x02\xf7\x61\x11\x08\x34\x39\x96\x08\x53\x24\x8f\xa4\x9c\x78\xf7\x72\xbf\xfd\x40\x4a\xb2\x65\x59\x72\xbc\xde\x4d\x77\x7b\xbb\xc9\x17\x63\x38\x33\x1c\x3e\x33\xf3\xf0\x45\xda\xa8\x15\x67\x68\x20\x22\x77\x36\x82\x37\x13\x00\x6d\xd4\x82\x0b\x84\x1b\x88\xca\x32\x16\x8a\x30\x87\xd6\x45\x13\x00\x83\x39\x57\x12\xfc\x48\x65\x63\x24\xd6\xc5\x67\x5e\xbe\x42\x63\xfd\xc0\x0d\x44\xff\xfd\x0e\xce\x92\x8b\x97\xd1\xe4\x61\x32\x31\x68\x55\x65\x28\x06\xdf\xd9\x12\xd7\x99\x26\xdc\x44\x10\x2d\x71\x5d\x4f\xe5\x65\x92\x94\x08\xc1\xe7\xf3\x37\x2b\x62\x12\x2a\x2a\xeb\xd0\x04\xf9\x43\xbc\xc4\x75\x30\xf2\x71\x55\x73\xc1\xa9\xf7\x03\x37\xe0\x23\xfc\xd2\xab\x5b\x5b\x64\xdb\x91\xaf\xf6\xe7\xe5\xd2\x3a\x22\x29\x46\x10\x11\xad\x33\x8b\x66\x85\xa6\x9e\xde\x91\xdc\xc2\x4d\xf8\x09\xf0\x0f\x1f\xc7\x48\x14\x44\xeb\xf8\xf9\x1b\xaa\x2a\xe9\x12\x2e\x19\xde\x3f\xf8\x80\x1e\x26\x13\x00\xaa\xa4\x44\xea\xfc\xf2\x6b\x3f\xcf\xe0\xd7\x02\x81\xe1\x82\x54\xc2\x41\x65\xd1\x84\x15\x2e\x94\x01\x55\x19\xf8\xe1\xa7\xbf\x07\x35\xb7\xd6\x61\x3a\x6b\x8b\x28\x08\xbc\x66\x40\x76\x5e\x49\x57\xd5\xb2\x42\x59\x07\x37\x60\x51\x2c\x92\x66\x91\x5c\xb7\x33\x93\x92\xc3\xf6\xef\x06\x22\x52\xf2\x78\xba\xa0\x67\x53\xc6\x66\x8c\x5c\x4c\x2f\x5f\x5e\x4d\xe7\x11\x3c\x83\xd9\x55\x32\xbd\x80\x1f\x7f\xfd\xe7\x04\xa0\x85\x23\x6b\x02\xf0\x8b\xf5\xb8\xec\xc8\x77\x53\x13\xbc\x77\x53\x98\x2c\x71\x9d\x70\x16\x56\x5f\x49\xd7\x89\x61\xcf\x5b\x50\xf0\x25\xa2\x69\x66\x91\x56\x86\xbb\x75\x96\x1b\x55\xe9\x8c\x33\x0f\xfe\xab\xb0\xd0\xe8\xf9\x1b\x3f\xc1\xae\x86\xf7\x94\x70\xf6\x10\xbd\x38\xac\x93\xe5\xca\x5a\x5e\xab\x4e\x00\x6e\x3d\x38\x6c\x2d\x49\xc9\x29\x44\x46\x29\x97\xcd\x85\xa2\xcb\x8c\xe1\x8a\xfb\x3a\xa8\xf3\xb4\x50\x26\x43\x42\x8b\x26\xea\x3d\xbd\xa0\x44\x95\x74\x28\x5d\x63\x02\xb0\x52\xa2\x2a\x31\xb3\xfc\xb5\xc7\x4e\x28\xb5\xac\xf4\x97\x7b\xa6\xc9\x8a\x88\x0a\x5f\x40\xd4\x51\x8f\x5e\x80\xac\x84\xf8\x6a\xd7\x51\x93\x84\x63\x1d\x79\xf5\x1d\x47\x0f\x6d\x31\x84\x3e\xf6\x4d\xe8\x5b\xd9\x37\x47\xbb\xcc\xa6\x15\x3a\xf9\x29\x89\x73\x68\x4a\x65\x5d\x26\x38\x45\x69\x31\xf3\x06\x41\x9b\xa1\x75\x5c\x12\xd7\x74\x73\x5a\xa8\x12\xd3\xba\x22\xd3\xad\x5d\xc7\x45\xdc\xb8\x88\x06\x03\x31\x58\x2a\x87\x31\xde\x23\x6d\xe3\xe1\x52\x70\x89\x9b\xc4\x03\x44\x77\x85\x67\x9b\x57\xf0\x07\x88\x17\x90\xae\x88\x49\x05\x9f\xa7\x54\xa8\x8a\xa5\x6d\x1d\xa5\x73\xa5\x5c\xbc\xe0\x92\xdb\x02\x19\xdc\x7e\x0b\x4c\x01\xd2\x42\xc1\x17\xff\x22\xdc\x71\x99\x87\x06\x0b\x46\x31\x97\xdc\x25\x49\xf2\xc5\xb7\x60\x05\xa2\x86\x99\xd7\x96\xd8\x94\x91\x9f\x31\x47\x07\x71\x2c\x55\x4c\x0b\xa4\xcb\x98\xa2\x71\x7c\xc1\x29\x71\x08\xf1\xbf\x7f\x86\x18\x0a\xe7\xb4\xfd\x26\x4d\xed\x79\x8c\x55\x7c\x87\xd6\xc5\xb3\x84\x94\xe4\xb5\x92\xe4\xce\x26\x54\x95\x29\xc3\x79\x62\xd4\xbc\xb2\x4e\xa3\xa1\xa8\x3d\x66\x09\x57\xe9\xc5\xec\xaf\x7f\xfb\xf3\xf5\xf5\x5f\x92\x5c\xe7\xf0\x1f\xb0\x15\x53\x40\xb4\xf3\x4c\x06\x84\x31\x88\xb7\x71\x6c\xc6\x42\x3c\x6b\xa8\x34\x23\x0e\x47\xc6\x03\x14\x42\x78\x3d\x6d\x54\x89\xae\xc0\xca\xc6\x52\x31\x8f\xaf\x56\xc6\xa1\xe9\xaf\xf0\x67\xe8\x24\x8a\x71\xeb\x12\x47\x4c\x92\xbf\x86\x9a\xe3\x3a\x85\xc0\xd4\x9d\xf4\x4c\x9f\x55\x46\x3c\x6c\xdd\x38\x62\xe0\xfe\xf5\x62\xc4\x4d\x2f\xd0\x72\xd5\xd1\x83\x54\x69\x97\xd6\x2c\x76\x1b\x6a\xe3\x10\x31\x97\xe8\x0c\xa7\xf6\x34\x72\x6e\x8c\xff\x6f\x18\x39\x72\x67\x89\x20\x26\x0f\x3d\x75\x0c\x0d\x9f\x4a\xaf\x0d\x70\x1b\x8a\xfd\x4c\x9c\x9f\xf9\xea\x89\xf9\xaa\xa7\x6b\xd7\xd6\x61\x49\x9d\x00\x94\x64\x2e\x70\x5c\x73\xc0\x2b\x61\x2c\x74\xa8\xe0\xf3\x85\x92\x8e\x2a\xb9\xe0\xf9\xac\x87\x5a\x0b\x0c\x13\x49\x6e\xc8\x82\x48\x12\xc0\x50\xd6\xa6\x06\x05\x12\x8b\x69\x23\xcf\x2e\x93\xcb\xe4\x2c\x23\x25\xbb\xbc\x48\x18\xce\x7b\x01\x30\xbd\xcc\x21\xe6\x70\x9c\xf6\x76\x61\x8c\x60\xa9\x64\x6c\xd0\xd3\xeb\x63\xcb\x6f\x9c\xc7\x0d\x0f\xf6\xb4\xd1\xf8\xd2\xee\x29\x81\x75\xc4\xb8\x63\x89\x56\x1b\x75\xbf\x3e\x8d\x66\x83\x69\x4d\xb2\x7d\xa6\xdb\xfd\x1b\xe5\xbd\x3d\xae\xeb\xdb\xf9\x49\xeb\x08\xfb\xa7\xd1\xdd\x73\xe6\x90\xdd\xfe\xa9\x13\xbe\x83\x19\x7c\x0f\x33\xf8\x06\xa6\x3e\x64\x6b\x15\xe5\xc4\x61\xb6\xe1\xed\x8c\x30\x66\xd0\xfa\xf5\x3b\x53\xe1\xa9\x3c\x1a\x42\xde\x9e\x3e\x3b\xa4\x3d\xca\xd7\x9f\x1a\xcb\x7e\xb8\x3d\xf9\xf7\xc0\xef\x4f\x77\x0e\x1c\xb3\x94\x39\x97\xf7\xef\x87\xb3\x86\x5c\x99\x32\x60\x87\x8e\xa6\x61\x38\xb5\xdc\xa1\x8d\x6b\x0b\x96\x36\x69\xef\x19\x09\x09\xf1\xc2\xee\x5b\x91\x15\xe1\xc2\x1b\xa6\xdd\xe3\xe5\x98\xef\xad\x4e\x8f\x13\x7b\xa4\x68\x98\xcd\x5a\x82\xeb\x10\x64\x5f\xd4\xbc\x89\x1c\xe0\x9f\xba\x3f\xd9\x7c\xff\xce\xcb\x19\x4a\xbf\x4f\xa3\x19\xe2\xc8\x21\x8e\x65\xf3\x81\x67\x86\x4d\x48\xfb\xee\x6a\x7e\xe9\x2c\xc5\xc7\xd1\xfe\x0c\x17\xf4\x6d\x50\x82\x58\xfb\x58\xe0\x5e\x67\x02\x80\x1e\xd8\x3e\x3d\x8f\x19\xd5\xca\x9e\x60\xb5\x16\xeb\x8c\x97\x25\x32\x4f\xb3\x62\xdd\xb5\x6a\xf8\x95\x54\x4e\x65\x25\x97\xca\x64\xcd\xa3\x51\x56\xe9\xdc\x10\xe6\x3b\x70\x41\x84\xc5\xfd\xed\xab\xb3\xbc\x08\xa2\xed\x02\x9b\xcc\x0c\xa0\x33\x8a\xae\x87\x93\x11\x47\xe6\xc4\x62\xe7\x58\x3d\x62\x50\xeb\x97\x24\x48\x36\x14\xb5\x83\x42\x2b\xdd\xea\x69\x62\xed\x9d\x32\x6c\x57\xaf\x95\x4e\x00\xec\x92\xeb\x6c\xc1\x25\x11\x99\x95\x44\xdb\x42\xb9\x0e\x3e\x03\x18\x6e\x06\x87\xd2\x72\x20\x1f\xf5\x8f\x16\xe7\x9e\xfa\xee\xe0\xab\x61\x27\xb7\x87\xaf\x16\xc3\xbb\x21\x9b\x87\xad\xf0\xf6\xe0\x39\xa4\x7d\x55\xcc\x48\x8e\xd2\xbd\xed\x6b\x9c\xb7\x39\xfa\x3d\xee\x37\xbb\xd6\x8d\x3d\xae\xf9\x68\xdf\xe7\xf3\xda\xae\xbf\x9a\x6c\x4e\xc8\x53\xf0\xd3\xa4\xea\x13\x3c\x91\x7c\xda\xe7\x82\xf6\x7d\xc8\x95\x7a\xf7\x4d\x28\x3c\x02\x85\xce\x7c\xe4\x49\x68\x6b\xb9\x1d\xdb\x79\x01\x0a\x5f\x0e\x62\xef\x2a\x96\xf9\x1f\xc7\x06\xb6\xc6\xa6\xec\xfa\x3c\x74\x9f\xd9\x2d\xe4\xfa\x5d\xbf\x4e\x5b\x87\xd2\x0f\x3d\xe5\xb7\x0e\xe2\xda\xc1\x24\xbc\x7b\x52\xc3\x75\xfb\xee\xf9\x83\xd6\xd0\x2a\x41\x50\x0a\x69\x6b\x59\xab\xdd\x74\x60\x60\x82\x68\x12\x78\x20\x0f\xf7\x8a\xa6\x71\x8c\x2a\x33\x9f\x81\x10\xd5\xd9\x59\x4d\x4b\xaa\x15\x75\x84\xda\x28\xa7\xa8\x12\x4d\xfc\x8e\xea\x1a\x08\xca\x99\xa9\xeb\xbc\x6e\xe8\x69\x12\xfe\xd3\x69\x74\xdb\x5c\xc8\x0e\xcd\x78\x35\xbd\xfc\x7a\x60\xce\x8d\xf8\xfd\xcf\x1a\x9c\xbf\xec\xcd\xd9\x11\x6e\x67\xec\xce\xf7\x0c\x7e\x22\xeb\x39\x82\x41\xeb\x0c\xa7\x0e\x94\x14\xeb\xe0\x15\x7e\xd9\x54\x34\x34\xd7\xde\xef\x1b\x93\x3f\x55\x0e\x0a\x22\xd9\x1a\xea\xfe\x74\x64\xe9\xbb\xac\xf9\x88\x65\xe1\x8e\xbb\x42\x55\x0e\x4a\x22\x2b\x22\xc4\x1a\xac\x2d\x62\xaf\xc1\xa5\x53\xe0\x0a\x6c\x1c\x26\xef\x0c\x74\x0d\xdf\xf5\x6c\x3a\xdd\x03\xbb\x37\xd4\x05\xbc\x0f\xfa\x6e\x71\x1f\xe0\xef\xee\xeb\x5d\x1b\x1c\x8e\x17\xc1\x7e\x50\xad\xac\x97\xfe\x78\x76\x5c\xf6\x8f\x6a\xcb\xe6\xd3\xcc\x3b\x74\x67\xdc\x78\x38\xba\x49\x6b\xfd\x23\x7b\xf5\xf1\x7c\x5e\x4d\x5f\x5e\x8c\xe4\x73\x33\x34\x90\xcf\x8a\xbd\x6d\x3e\xdb\x8f\x5d\xc7\x16\xda\x89\x81\xbd\x7d\xa1\x9d\x10\xd8\x3e\xdd\xf4\x86\x3e\x14\x62\xa7\x04\xf6\xee\x88\xfd\xc6\x6d\xf9\x58\x5f\xb2\x79\xa7\x1f\xc7\x6f\xa2\xfd\x5d\xf2\x08\x84\xcf\xcf\xa7\x97\x23\x08\x6f\x86\x9e\x00\xe1\x23\x22\xfb\xfa\xe2\x7c\x7f\xdf\xed\x0d\x3d\x41\x64\x47\x90\xe4\xf6\x02\x74\x0c\x3f\x86\xab\xcf\xa3\xe7\x97\x1f\x5b\xf2\x0b\xfa\xbf\xab\xa3\xcc\xc1\x53\xc5\xc5\x74\x6f\x73\xed\x08\x87\x4f\x15\xfe\x4e\xd7\x62\xda\x5c\xa4\x8f\xaa\x98\x0f\xb8\x91\x7f\x74\x3b\x79\xfb\x89\xf5\x51\xda\x68\x14\xdf\x8e\x3b\x3e\xc4\x99\xf8\x7a\x7a\x3d\x84\xe3\x46\xfc\x34\xb3\x9e\xef\xd7\xef\x8e\xf8\xf4\x59\x3f\xae\x7a\xa9\xbf\x15\x1d\x4b\x6a\x41\xfb\x71\x52\xfb\xc5\xab\x3d\x19\x97\x5d\x0d\xc1\x74\xf5\x6e\x69\xf9\xb8\xe8\xf3\x53\x24\xb6\xff\x05\x00\x00\xff\xff\x25\x99\xf8\x63\xdf\x28\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x5d, 0x68, 0xc3, 0xaa, 0x14, 0xa7, 0xeb, 0xc5, 0x5c, 0xf7, 0x6, 0x28, 0x9f, 0x7b, 0x22, 0xb1, 0x92, 0x0, 0xa1, 0x16, 0x8e, 0xfe, 0xb4, 0xda, 0xf5, 0x14, 0x55, 0xf3, 0xa1, 0xba, 0x3d}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x73\xdb\x36\xf2\xc0\xdf\xfb\x53\x60\x30\xff\xff\x8d\xd3\xb1\x5b\x4b\xb1\xdc\xd8\x33\x7d\xe1\x28\x0f\x97\x99\xb8\xf5\xf9\xa1\xd7\xb9\x24\xc3\x81\xc8\x95\x84\x31\x09\x30\x00\x28\x5b\xcd\xb9\x9f\xfd\x06\x20\x29\x82\x0f\x92\x29\x45\xb2\x95\x06\x7d\xd1\x88\x4b\x10\xc0\x2e\x16\x8b\x9f\x17\x10\xf5\x65\x07\x21\x4c\x18\xe3\x8a\x28\xca\x99\xc4\x27\x48\x8b\x10\xc2\x21\x95\x0a\x9f\xa0\x0f\xe6\x0a\x65\x52\x73\x67\x90\xd0\x50\xbd\x63\xf8\x04\x75\xf6\x0a\x69\x40\x14\x91\x3c\x11\x3e\xe0\x13\x84\xf7\xf7\xd1\x5b\x41\x86\x84\x11\xb4\xbf\x8f\xad\x62\xc0\xc8\x20\xd4\x45\x94\x48\xc0\x92\x8f\x69\xd0\x20\xa5\x3e\x67\x7d\x1e\x72\xa1\xeb\x14\xa3\x01\xd9\x3d\xd8\x43\xdd\x4e\x67\x0f\x75\x7b\xbd\x3d\xd4\x79\x66\x57\xcd\x48\x64\xda\x3e\x2d\xd4\x41\xff\x40\xa7\x21\x08\x25\xed\x72\x6a\x1a\x9b\x72\x01\x91\xe3\x01\x27\x22\xc0\xd9\xbd\x7b\xf3\xef\xa7\x1d\x84\xee\x75\x71\x0c\x01\x55\x95\xde\xe2\x11\x03\xf5\x2e\xc0\x27\xa8\xdb\x3b\xec\xa6\x12\x41\xe2\xf1\x15\xe7\xa1\xa2\x71\x6e\x13\x4c\x4d\x91\xf4\xa3\x02\x61\x7a\xa3\x6f\xf6\x5e\x1c\x1f\x1f\xf5\x8e\x7b\x87\x47\x9d\x43\x73\x37\xa4\xec\x46\x5b\xfd\xc3\x27\x73\x19\x13\x06\xa1\x9c\xd9\x3d\xb7\x3a\x26\x21\x25\xd2\x58\xc2\x0c\xd1\x7d\xae\x0e\x1e\x10\x23\x19\x92\x50\xce\x0c\x67\x34\x7b\x0f\x6c\xa4\xc6\xba\xcd\x83\x92\x1c\x9a\x8a\xdb\x43\x17\x72\x12\x28\x90\x6a\x3f\x13\xcd\x8a\x35\x98\x23\x95\x0b\x61\x06\xa8\x5c\xe9\x90\x86\xa1\xed\x22\x46\xf0\x56\x90\x80\x02\xd3\x8e\x55\xf4\x6a\x24\x68\x70\xce\x0b\xd7\x4b\xfd\x01\x9f\xa0\x63\x6b\xd0\x6e\x75\x5d\x5d\x4b\x70\x67\xd7\x81\x10\x9e\xea\xeb\x7c\x20\x67\x75\x8f\x69\x10\x00\xbb\x04\x41\x1b\xf4\x36\x83\xf4\xf3\xec\x32\x84\x11\xb0\xa0\xdc\x0d\x32\x19\x55\x1f\x43\x08\xfb\x89\x10\xa9\x16\xd5\x3b\x11\xb9\x6b\x92\x52\xd6\x20\x95\x63\x7e\x5b\x77\x79\xc5\x15\x09\x1b\x4a\x4f\x48\x98\x14\x3a\xd4\x14\x0d\x29\x33\x77\x4b\x23\xa3\x85\xb7\x34\x48\xdd\xc0\x96\x5a\x2e\x97\x4e\x9d\x24\x0c\xcf\x39\x65\xea\x8c\x9b\x69\x88\x7d\xce\x18\xf8\x0a\x82\x62\xf8\x79\x5c\x8e\x10\x33\xd7\x79\x3f\xab\xaf\xd6\xab\x18\x84\x0f\x4c\x91\x11\xd4\x8c\x1f\xeb\xe6\xb4\x3b\x24\xfa\xd9\x5e\x59\x5e\x1f\x2b\x01\x2c\x00\x01\x26\x10\x0c\x43\xae\x8a\x7e\x49\x33\xb8\xbf\x4d\x40\x08\x1a\x40\x45\x31\x19\x13\x1f\x9a\xa6\x82\x54\xc4\xbf\xa9\xb5\x22\x15\xc4\x31\x04\xef\x29\xab\x77\x58\x11\x31\x02\x25\xad\x98\x68\x47\x45\x3d\x0f\xee\xe2\x34\x4e\x11\x05\xbb\x11\x51\x0a\x44\xc4\xa5\xf2\x62\xfd\x3f\x33\xac\x5f\x28\x93\x8a\x30\x1f\x7e\xf9\xeb\x23\xfe\x3f\x09\x62\x02\xe2\x23\xbe\xff\xd0\x89\x3e\xd9\x91\x4c\x4f\x16\x2e\x22\xa2\x1d\x0c\x2b\x1a\x81\x97\xea\x58\x2e\x42\x99\x02\x31\x21\xe1\x1b\xe2\x2b\x33\xff\x3a\xa5\xdb\xa9\x37\xbf\x99\xd5\xf3\x65\xd6\xf8\xfd\x7d\xb9\xa2\x08\x94\xa0\xbe\x2e\xd3\xd8\xe9\x72\x61\x01\x43\x13\xfe\xf0\x69\x59\xae\x2d\xa7\xc7\x71\x26\xbb\xdf\x5b\x6c\x25\x99\x44\xbb\xab\x59\x6a\xe3\xa6\xba\xaa\xab\xbd\x9a\x8d\x5e\x3e\x64\xa3\xec\x53\xe1\xaf\x6a\x2c\x40\x8e\x79\x18\x54\xfc\x58\xab\xf6\x46\xf0\x08\x9f\x20\x3d\x57\x4b\xf2\x0b\x18\x65\x13\xb3\xf2\xc0\xe5\x98\x0e\x55\xfd\x09\x65\x42\x38\x3e\xe7\x52\x49\x14\x83\x40\x97\xe0\x73\x66\xcd\x74\x35\x5b\xcc\xac\x99\x1e\xc9\x0b\x90\x3c\x4c\xb2\x95\xac\x1e\xcc\x88\x80\xa0\x1e\xce\x24\x17\xaa\x12\xa9\x4d\x24\xf3\xf2\x55\x98\xb2\x80\x4e\x68\x90\x90\x10\xd7\xc2\x47\x5e\xc6\x2c\xb1\x45\xff\xee\xc8\x1d\xad\xc4\xa1\x41\xe2\xdf\xa4\x93\xd3\x56\x56\x77\x3b\x0b\x68\xda\x1e\x0d\xb0\x50\x29\xdd\x1c\x92\x67\xa1\xb7\x21\xc2\x4d\xc9\x1d\x2c\x88\x09\x85\x73\xca\xb1\xb6\x44\xd9\xef\xc8\x00\x74\xa8\xc7\x7d\x9e\xb0\xea\x3d\x3e\x7a\x49\x24\xd4\x7c\x35\x5d\x60\xca\xdd\x9e\xad\x30\x35\xb1\xa5\xcf\x83\x13\xb3\x55\x57\x6b\x2d\x6c\xb0\x9f\xb5\xc9\x31\xad\x8f\x3b\x09\xe9\xa8\xc9\x1d\x8d\xfc\x3d\x4c\x66\x9d\x2e\x21\x5e\x66\x02\x47\x57\xf9\x75\x23\x5d\x95\x04\xab\xe2\x95\x65\x9f\xf9\x7c\x55\x99\x6f\x0f\xe1\x55\xa5\x78\xea\x53\xd5\xb8\xb3\x1a\x5c\x59\x1e\xe8\xd8\xea\x1b\x60\xab\xb1\x52\xb1\x27\xe0\x73\x02\x52\xc9\x6d\x80\x2c\x94\xb7\x8e\x5a\x61\x96\xe9\xbf\x99\xe2\xf2\xd1\x69\x6b\x49\xdb\x6d\x0d\x76\xb5\xb5\xd9\x56\xd3\xd7\x45\x66\x77\x07\x60\x0e\xc0\x96\xe9\xaa\x03\xb0\xef\x07\xc0\xaa\xe9\xad\xe3\x15\xf8\xeb\xa8\x05\x7e\xb9\xf4\x96\x43\xb0\xf6\x08\x56\x5d\x89\x6f\x61\x20\xb9\x09\xfe\x0b\x19\x62\xcb\xf2\x5b\x8d\x5d\xdf\x20\x7c\xad\x68\xb5\xa7\x80\xae\x6f\x03\xa0\x7e\x4d\xa2\x01\x08\xc4\x87\xa8\x9f\x4f\x66\xf4\x0a\x26\xd4\x07\x89\x76\xff\x0d\x83\x4b\x63\xdd\xfc\xa6\x6e\xe1\x99\x03\x2c\x07\x58\x0e\xb0\x1c\x60\x21\x34\x2f\xc3\xb5\x0a\x61\x75\x1c\x61\x39\xc2\xda\x14\x61\x05\x03\x2f\x22\x52\x81\xf0\xfc\x62\x21\xfb\x96\x38\x6b\x81\x02\x8f\x43\x5b\xcb\x5b\x70\x6b\x12\x5d\xcb\xdb\xee\xdb\x22\x36\x73\x42\x47\x71\x74\x66\x94\x44\xaf\x88\x22\x03\xbd\xd2\x3a\x4c\x73\x98\xe6\x30\xcd\x61\x1a\x9a\x93\x07\xeb\xbc\x58\x05\xd3\x1c\xa7\x39\x4e\x5b\x2f\xa7\x69\xd2\xa0\xcc\x17\x40\x64\x69\x63\x8d\xc4\xd4\x4b\x59\x21\x89\xd2\xad\x33\x34\x98\xa2\xdd\x9c\x36\x9e\xa1\x9f\xd0\x83\x8f\xfa\x3a\x12\x37\x3d\xbc\x34\x9c\x64\x27\x6b\x2b\x6e\xf6\x08\x7b\x9b\xb6\x19\x36\xc4\x7a\x63\x2a\x15\x1f\x09\x12\x79\x9f\x13\xc2\x14\x0d\x61\xf7\xe0\xc7\xe3\x3d\xd4\xb4\xdd\x39\xeb\x4e\xba\x44\x37\xd8\x76\x2f\x84\x15\x76\x39\xe7\xda\xb7\x6a\xc0\xe3\x83\x78\x7f\x3e\x3d\x5b\x0c\xb7\x1d\xb8\x76\x06\x84\xa1\xd3\xf3\x77\x28\xdb\xaa\x44\x57\x36\xb9\x38\x36\xdb\x08\x9b\xcd\xe1\x32\x87\x64\x0e\xc9\xb6\x0a\xc9\x6a\x99\xb3\x95\x98\xac\xe7\x90\xcc\x21\xd9\x5a\x91\x6c\xc4\xbd\x08\x22\xa9\x88\x92\x1e\x09\x43\xee\x7b\x83\xa9\x02\xf9\x44\xb9\xb2\x53\xdd\x83\x05\x6b\x7e\x81\x4d\x73\xfa\xbd\xd1\x44\x99\xdd\xa6\x19\x12\x8f\xb2\x44\xc2\x7a\x2d\xb6\x2e\xfa\xbc\xd4\x1d\xdc\xac\x3d\x1f\x4c\x9e\x2d\x61\xcf\x31\x90\x78\x9b\xcd\xf9\x4f\x20\xf1\x66\xad\xd9\xdf\xe6\x54\xe4\x19\x44\x5c\x4c\xd1\xb5\xd4\xd1\xd1\x21\xed\x26\x91\xd6\x78\x8a\xc3\xda\x79\xfd\xb4\x89\xc2\x71\x6d\x2e\xdf\x9a\x54\x63\xf7\xe7\x15\xb0\xb6\xf3\xdc\x71\xad\xe3\xda\xb5\x72\x2d\xad\x7d\x55\x52\x70\x1f\xa4\xf4\xfc\x38\xf1\xa4\x39\x3e\xde\xe2\x08\xff\x0f\xa8\x73\x70\xf0\x74\x1b\xc4\xed\xc9\xf5\x29\xd9\xa0\x7f\x7e\x8d\xae\x15\x0d\xe9\x9f\xe6\x5b\xfb\xe8\x82\x28\x40\xbb\xff\xef\x4e\x8f\x3d\xdd\xb6\xe4\xc2\xe1\x40\xdf\x2d\x3b\xb8\x94\xd8\x36\xa1\x43\x2d\x25\xb6\x12\x3b\x1c\x3a\x74\x70\xe8\xb0\x56\x74\x18\x71\x6f\xc4\x05\x4f\x94\x1e\x92\x2d\x3e\x34\x56\xea\xe7\x06\xcf\x86\xb5\xb1\xc7\xd3\x1e\x01\x6b\x63\x89\x6f\xe4\xa4\xd7\x5b\x8e\x2e\xaa\x8a\x38\x7e\x72\xc7\xba\x1c\x30\xa1\x8d\x00\x53\x69\x3e\x06\x20\x7d\x41\xe3\x6c\x46\x15\xd9\xb6\x27\xc9\xa4\x3c\x3f\x5a\x81\x86\xba\x6d\x0e\x6d\xcd\x7d\x7b\x44\xf5\x3d\x11\xad\x5f\x1e\x21\xe8\x68\xac\x2e\x1b\x53\xed\x4f\xf5\x62\x89\x1a\x12\x69\xc1\x23\xd1\x50\xf7\x6f\x44\x43\xb3\x93\x41\x8c\x07\xe0\xf9\x71\xd2\x4c\x00\x7b\x3a\xae\xff\xf2\x11\x27\xd2\x7a\x01\xc2\xa2\x83\x58\x0b\x36\x66\x74\xf9\x06\x38\x6f\xa0\x82\x6b\x09\x02\xb5\xca\x9f\x2c\x45\x3c\x4b\xe8\x2b\xa7\x52\x41\xf4\x75\x1a\xd7\xb6\xee\x4c\x9d\x6d\xf4\x7a\xb9\x31\xbd\x68\x10\xc2\x7a\xb5\x7a\x17\x84\xd0\x46\xa7\xfe\x86\x74\xfa\xeb\x23\xa6\xe2\xf3\x7f\x25\x1f\x2a\xfd\x2f\xe5\xb7\x84\xaa\xf5\xaa\xf8\x9b\x1a\xb7\xf3\xc7\x57\x5b\x72\x64\xad\x7f\x7e\x8d\xde\x73\x12\xa0\xdd\x4e\xf4\x50\xbe\xce\x01\x65\xa3\x2f\x6e\x1d\xa5\x39\x9a\xdc\x1a\x9a\xf4\x69\x44\xc2\xaa\xcb\x3e\x4d\x6e\x6d\x35\x9a\x5c\xef\xbe\x9c\x8e\xa3\xaf\xa3\x58\x4d\xe7\xdc\xfb\x0f\x08\xfe\x95\x39\xb9\x0d\x80\xe8\x57\xe7\xeb\x1c\x89\xae\x87\x44\xd3\x55\x3e\x32\x27\x51\xbc\x33\x88\xae\x16\xec\xde\xa1\x7d\x54\x29\xfd\x46\x00\xb4\x2b\xfc\x32\x19\x0e\x41\xcc\xcb\x74\x55\x0a\xf7\x89\x3f\x86\xa0\x5d\x56\x6c\x5d\xc8\x1b\xa0\x45\x5f\x2d\x58\x05\x7a\x97\xb0\x2c\x5e\xd8\x3b\xf3\x64\xbb\xee\x6d\xcf\xb1\xfd\xd6\x47\x9b\x1c\x02\x35\x7a\x51\xab\xb3\x4b\x0e\x81\xbe\x93\xd3\x4b\x8f\xce\x3a\xd5\xc4\xd9\x61\x6f\x15\xd4\x29\x76\xb0\xf2\x9d\x89\x72\x0a\xf0\x7b\x78\x19\xab\x23\x95\x35\x91\x4a\x39\x31\xc1\x40\xdd\x72\x71\xe3\x29\x41\x98\x8c\xa8\x5a\x78\xc2\xb9\x29\x1d\xf1\xec\x87\x17\xcd\x9b\x67\xf5\x33\xa1\xcb\x6e\xab\xfd\x91\x9e\x0f\x59\x37\x50\xcc\xb1\x80\x00\x1f\xe8\x64\xf1\x11\xef\x56\x06\x58\x09\xa5\x96\xb4\xcd\xc5\x32\xb6\xd9\x16\x9a\xf9\x35\xb5\x34\xba\xf8\xe3\xa7\x6c\x6c\x1f\xda\x47\x74\x50\xd3\xe8\xc9\x16\xd4\xc4\x0e\x69\x1c\xd2\x3c\x2a\xd2\xd4\xd2\x37\xab\x31\x4d\x9b\x9f\xea\x71\xf4\xb2\x22\xbd\x84\xc9\x88\xb2\xdf\x41\xc8\x6c\xb7\xf8\xe8\xc7\xa3\x1f\xbb\xf8\x3b\xa0\x9b\x7c\x45\x97\x8a\x28\xef\xca\x8f\xbd\x7e\x22\xc4\x6b\xa9\xc8\xa0\x55\xca\x60\x2d\x59\x10\xd3\x5c\x48\xe5\x78\x03\xc9\x10\x5a\xe2\x96\x5c\xcb\xd7\x77\xca\xbb\xea\x9f\x5f\xd1\x08\x78\xa2\x16\xc2\xcb\x06\xf4\xcd\x9b\x5d\x1e\x46\x1e\x50\x56\x73\xda\xd2\x03\xba\xea\xfe\x58\x9a\x1d\xb2\xc6\x6e\x3d\x5b\x80\x5f\x3d\x60\x5f\xa7\x4f\xde\xc2\x96\xef\xf5\x5d\xf5\xcf\xed\xf7\x88\x39\x2a\x74\xbb\x7d\x7f\x13\x2e\xdc\xc9\xaa\xd5\x73\x4e\x4f\x27\xad\x76\xe7\x20\xf5\x70\x2c\xfd\x31\x44\xa4\x58\xa7\xbb\xe9\x8f\x4c\x4a\x35\x4d\xa7\x45\x40\xc4\x4d\x5a\x52\x91\x51\x31\xf2\xd6\x7b\x79\x32\xe3\x59\x92\xfd\x18\xc4\x10\xcf\x9a\x55\x10\xc5\x21\x51\x94\x8d\xda\xfc\x1a\x28\x09\xc3\xdf\xb5\x03\xd6\xbd\xb5\x60\xaf\xd2\x58\x2a\xb8\x53\xf5\x3f\xf4\x27\x59\x1d\x1f\x2c\x21\x42\x18\x5b\x97\x9f\x9a\xdc\xa4\xe5\xf7\x05\xcc\xfe\xe5\x90\x32\x9a\x1f\x86\x33\x4e\xe3\xa5\x53\xa7\xf1\xa0\x44\x1e\x36\xed\xd0\x40\x99\x1f\x26\x01\x9c\x86\x4d\xe0\x37\x3b\x6d\x99\x06\x63\xbb\xaa\x28\x09\x15\xad\x4f\xdc\xfc\x07\x4b\xeb\x0f\x14\x70\x57\xc4\x44\x84\xf0\xe7\x04\xc4\xb4\x5d\xef\x0b\xdf\x39\x28\x49\x47\x70\x57\x31\x3e\x96\x37\x34\xbe\x16\xe1\xe5\x94\xf9\x4d\xdb\x8c\xf5\x08\xa9\xc8\xc8\x0c\xb9\xfc\x57\xde\x1f\x5c\xbe\x5b\xeb\xb8\x96\x35\x17\xce\x42\x68\xaa\x99\x75\x23\x91\x70\x95\x56\x54\xda\xb0\xdc\x41\xa5\x5f\x68\x35\x61\x73\xe6\xa4\xc3\x74\x85\xc1\x8c\xdf\xee\x77\x7a\xf9\x3b\xa7\xb0\xe2\x99\x10\x97\x9e\x8b\xa9\x7f\x63\x00\x35\x7b\x3a\xb3\x98\x97\xa7\x55\xec\xb0\x89\x7b\xd6\x02\x93\xcf\x45\x73\xf1\xdc\xbe\xe8\x14\xef\xb9\xc2\x3d\xeb\x73\xc7\xbe\x78\x7e\x60\xdf\xb1\xd6\x8d\xae\xf5\xb9\x93\xfd\x28\xed\xa7\x5c\x07\x1a\x81\x67\x79\xc5\x83\xad\xd8\x15\x1f\xd9\x15\xdb\xad\x74\x0f\xed\x0b\xeb\xcb\x15\x3f\x07\x76\x7f\xf3\xbe\x94\xcc\xf7\x27\x37\xd0\x8d\x07\x82\xdf\xca\xcc\x7b\xad\x5d\xa8\x59\x70\x31\x07\x72\xf6\xaf\x40\x2a\x74\x0e\xc2\x04\x72\x0d\x7b\x67\x9c\x51\xc5\x85\x0e\x32\xe6\xc9\xc4\xfc\x89\x87\x0f\xd2\xff\x3a\x9d\x54\x3a\x99\xc5\xb9\x4e\x67\xe7\x7e\xe7\x7f\x01\x00\x00\xff\xff\xaa\xf0\xfc\x74\xae\x78\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x55, 0xec, 0x7c, 0xcc, 0x8, 0x63, 0xdd, 0xfe, 0x4c, 0x57, 0x3b, 0x0, 0x3d, 0x55, 0xc5, 0xd4, 0xda, 0x87, 0x5f, 0xcf, 0xc5, 0xa2, 0x6a, 0x8b, 0xf9, 0x34, 0x1, 0xa9, 0x8c, 0x6b, 0xf2}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6e\x83\x30\x10\x85\xf7\x9c\x62\xe4\x75\x6b\x45\xa9\xd2\x9f\x05\x27\xa9\x2a\xcb\xd8\x13\x6a\xc5\xd8\xae\xc7\x26\xa5\x15\x77\xaf\x30\x55\xd3\x08\x14\x58\xce\xf7\xcd\x63\xf4\xa0\x97\xd1\xc8\xc6\x22\x30\x65\x33\x25\x8c\xc2\xc9\x0e\x19\x7c\x57\x63\x55\x5d\xa0\x0c\x41\x18\x47\x49\x3a\x85\x42\xf9\xec\xd2\x6d\x25\x0d\x61\x25\xa4\x45\x97\x36\x63\xae\xa5\xd5\xa0\x10\xfd\xe7\xb0\xe1\xe8\x66\xeb\x4d\xff\x0d\x74\xad\x71\x1b\x21\x56\x12\xad\x19\xf3\xae\xe8\x31\x92\xf1\x6e\x32\x00\xa6\x93\xa0\x86\x4e\x86\x0a\x40\xe3\x51\x66\x9b\xa0\x2e\x08\x80\xc9\x1c\x7d\x94\xf7\xdd\x40\x1f\x96\x41\x79\x6a\x60\x07\xfe\xc4\xcb\x48\xcc\x9c\xef\xf9\xee\x81\xef\xd9\xd5\x4e\xf0\x94\xda\x88\x65\xb1\x06\xf6\xc2\x1f\xf9\xf3\x64\x8c\x8b\xb3\x32\x61\x5c\xfd\x96\xba\x11\x41\x12\x9d\x7d\xd4\x0b\x46\xf4\x2e\x42\x6e\xac\x51\xe2\x84\xc3\x02\x77\x32\x25\x8c\x9d\xa7\x24\xb4\x3f\x3b\xeb\xa5\x16\x39\xda\x5b\x9e\x35\x0a\x1d\xa1\x38\x1a\xbb\x3c\xa5\x04\x24\xdc\x8a\x8b\xde\x27\xd1\x58\xaf\x4e\x42\x63\x6f\x14\xce\x25\x5f\x7a\x7d\x2d\x1d\xcd\xed\x02\xf4\xde\xe6\x6e\xfe\x2d\xa6\x8e\xda\xf0\xdb\xe1\x1f\x21\xf3\x35\x91\xc3\xae\x8c\xc7\xbb\x0a\xe0\xad\x1a\x7f\x02\x00\x00\xff\xff\x13\x26\x6f\x52\x0b\x03\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x86, 0xe, 0x94, 0xf, 0xf5, 0xd6, 0xbc, 0x4d, 0x91, 0xd2, 0xcd, 0x71, 0x7a, 0x6a, 0x8f, 0x4c, 0x1f, 0xeb, 0xe7, 0x50, 0x1b, 0xf, 0xb4, 0x63, 0xa9, 0xb4, 0x10, 0x3c, 0x21, 0x8e, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// Debug is true if the assets were built with the debug flag enabled.
const Debug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
