// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (12.51kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (35.097kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (453B)
// assets/variables.tf (779B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x73\x1b\xb7\x15\x7e\xe7\xaf\x38\x5d\x67\x26\x97\xf1\xee\x92\x92\x22\xcb\x4a\x94\x8c\xd2\x24\x9d\xce\xd8\xb5\xa7\x49\x9b\x07\x8f\x66\x07\x04\x0e\x49\x54\x58\x00\x05\xb0\x94\x68\x57\xfd\xed\x1d\x60\x2f\x5c\x2e\x77\x29\x5a\xb2\x6c\xa7\x8e\xfc\x42\x03\xe7\x86\x73\xf9\x0e\x2e\xab\x8d\x5a\x72\x86\x06\x22\x72\x65\x23\x78\x33\x02\xd0\x46\xcd\xb8\x40\x38\x83\x28\xcf\x63\xa1\x08\x73\x68\x5d\x34\x02\x30\x38\xe7\x4a\x82\x9f\x29\x6c\x8c\xc4\xba\xf8\xc0\x8f\x2f\xd1\x58\x3f\x71\x06\xd1\x7f\xbf\x83\x83\xe4\xe8\x49\x34\xba\x19\x8d\x0c\x5a\x55\x18\x8a\x41\x76\x76\x89\xab\x4c\x13\x6e\x22\x88\x2e\x71\x55\xaa\xf2\x63\x92\xe4\x08\x41\xe6\x67\x6f\x96\xc4\x24\x54\x14\xd6\xa1\x09\xe3\x37\xf1\x25\xae\x02\x93\xb7\xab\x98\x0a\x4e\xbd\x1c\x38\x03\x6f\xe1\x17\x9e\xdc\xda\x45\xb6\x9e\xf9\x72\x5b\x2f\x97\xd6\x11\x49\x31\x82\x88\x68\x9d\x59\x34\x4b\x34\xa5\x7a\x47\xe6\x16\xce\xc2\x4f\x80\xbf\x79\x3b\x06\xac\x20\x5a\xc7\x9f\xbd\xa1\xaa\x90\x2e\xe1\x92\xe1\xf5\x8d\x37\xe8\x66\x34\x02\xa0\x4a\x4a\xa4\xce\x2f\xbf\x94\xf3\x08\x7e\x5d\x20\x30\x9c\x91\x42\x38\x28\x2c\x9a\xb0\xc2\x99\x32\xa0\x0a\x03\xe7\xcf\xff\x1a\xc8\xdc\x4a\x07\x75\xd6\x2e\xa2\x30\xe0\x29\x83\x67\xa7\x85\x74\x45\x39\xb6\x50\xd6\xc1\x19\x58\x14\xb3\xa4\x5a\x24\xd7\xb5\x66\x92\x73\x58\xff\x9d\x41\x44\x72\x1e\x8f\x67\xf4\x60\xcc\xd8\x84\x91\xa3\xf1\xf1\x93\x93\xf1\x34\x82\x47\x30\x39\x49\xc6\x47\xf0\xec\xd7\x5f\x46\x00\xb5\x3b\xb2\xca\x00\xbf\x58\xef\x97\x8d\xf1\xcd\xd0\x04\xe9\xed\x10\x26\x97\xb8\x4a\x38\x0b\xab\x2f\xa4\x6b\xd9\xb0\x25\x2d\x10\xf8\x14\xd1\x34\xb3\x48\x0b\xc3\xdd\x2a\x9b\x1b\x55\xe8\x8c\x33\xef\xfc\x57\x61\xa1\xd1\x67\x6f\xbc\x82\x4d\x0a\x2f\x29\xe1\xec\x26\x7a\xbc\x9b\x26\x9b\x2b\x6b\x79\x49\x3a\x02\xb8\xf0\xce\x61\x2b\x49\x72\x4e\x21\x32\x4a\xb9\x6c\x2a\x14\xbd\xcc\x18\x2e\xb9\xcf\x83\x32\x4e\x33\x65\x32\x24\x74\x51\x59\xbd\x45\x17\x88\xa8\x92\x0e\xa5\xab\x58\x00\x96\x4a\x14\x39\x66\x96\xbf\xf6\xbe\x13\x4a\x5d\x16\xfa\x8b\x2d\xd6\x64\x49\x44\x81\x8f\x21\x6a\x91\x47\x8f\x41\x16\x42\x7c\xb9\x29\xa8\x0a\xc2\xbe\x82\x3c\xf9\x86\xa0\x9b\x3a\x19\x42\x1d\xfb\x22\xf4\xa5\xec\x8b\xa3\x5e\x66\x55\x0a\xad\xf8\xe4\xc4\x39\x34\xb9\xb2\x2e\x13\x9c\xa2\xb4\x98\x79\x86\x40\xcd\xd0\x3a\x2e\x89\xab\xaa\x39\x5d\xa8\x1c\xd3\x32\x23\xd3\x35\x5f\x4b\x44\x5c\x89\x88\x7a\x0d\x31\x98\x2b\x87\x31\x5e\x23\xad\xed\xe1\x52\x70\x89\x4d\xe0\x01\xa2\xab\x85\x47\x9b\x57\xf0\x27\x88\x67\x90\x2e\x89\x49\x05\x9f\xa6\x54\xa8\x82\xa5\x75\x1e\xa5\x53\xa5\x5c\x3c\xe3\x92\xdb\x05\x32\xb8\xf8\x06\x98\x02\xa4\x0b\x05\x9f\xff\x46\xb8\xe3\x72\x1e\x0a\x2c\x30\xc5\x5c\x72\x97\x24\xc9\xe7\xdf\x80\x15\x88\x1a\x26\x9e\x5a\x62\x95\x46\x5e\xe3\x1c\x1d\xc4\xb1\x54\x31\x5d\x20\xbd\x8c\x29\x1a\xc7\x67\x9c\x12\x87\x10\xff\xfb\x05\xc4\xb0\x70\x4e\xdb\xd3\x34\xb5\x87\x31\x16\xf1\x15\x5a\x17\x4f\x12\x92\x93\xd7\x4a\x92\x2b\x9b\x50\x95\xa7\x0c\xa7\x89\x51\xd3\xc2\x3a\x8d\x86\xa2\xf6\x3e\x4b\xb8\x4a\x8f\x26\x3f\xfd\xfc\xe7\xa7\x4f\x7f\x4c\xe6\x7a\x0e\xff\x01\x5b\x30\x05\x44\x3b\x8f\x64\x40\x18\x83\x78\x6d\x47\x33\x17\xec\x59\x41\xa1\x19\x71\x38\x30\x1f\x5c\x21\x84\xa7\xd3\x46\xe5\xe8\x16\x58\xd8\x58\x2a\xe6\xfd\xab\x95\x71\x68\xba\x2b\x7c\x01\xad\x40\x31\x6e\x5d\xe2\x88\x49\xe6\xaf\xa1\xc4\xb8\x56\x22\x30\x75\x25\x3d\xd2\x67\x85\x11\x37\x6b\x31\x8e\x18\xb8\x7e\x3d\x1b\x10\xd3\x31\x34\x5f\xb6\xe8\x20\x55\xda\xa5\x25\x8a\x5d\x84\xdc\xd8\x05\xcc\x39\x3a\xc3\xa9\xbd\x1b\x38\x57\xcc\xff\x37\x88\x1c\xb9\x83\x44\x10\x33\x0f\x35\xb5\x0f\x0c\xdf\x15\x5e\x2b\xc7\x35\x10\xfb\x07\x70\xfe\x81\x57\x0f\x8c\x57\x1d\x5a\xbb\xb2\x0e\x73\xea\x04\xa0\x24\x53\x81\xc3\x94\x3d\x52\x09\x63\xa1\x42\x05\x9f\xce\x94\x74\x54\xc9\x19\x9f\x4f\x3a\x5e\xab\x1d\xc3\x44\x32\x37\x64\x46\x24\x09\xce\x50\xd6\xa6\x06\x05\x12\x8b\x69\x35\x9e\x1d\x27\xc7\xc9\x41\x46\x72\x76\x7c\x94\x30\x9c\x76\x0c\x60\xfa\x72\x0e\x31\x87\x5b\xa9\x37\xd4\xce\xb9\x5b\x14\xd3\xa0\x92\xcb\x69\x41\x2f\xd1\xad\x7f\x54\x06\xd8\xb4\x46\xdf\x74\x79\x90\x4c\x92\x71\x43\x91\x85\xff\x66\x82\xcb\xe2\xfa\x56\xc3\xde\x8a\x69\xed\x78\x46\x30\x57\x32\x36\xe8\x0d\xb8\x2d\x3c\xd5\xe2\xe3\x0a\xa7\x3b\xd4\x68\x7c\xe9\x75\x88\xc0\x3a\x62\xdc\x6d\x82\x6b\xe3\x07\x44\xd6\xd3\x95\xb0\x3d\xbb\x8a\x36\xea\x7a\x75\xb7\x9e\x12\x58\xcb\x8e\xd2\x85\xf5\xcd\xbf\x41\x90\xdf\x02\xf6\x2e\x9f\x57\x5a\x5a\xd8\xdd\x7a\x6f\x6e\xaa\xfb\xf8\xb6\xb7\xd8\xf0\x1d\x4c\xe0\x7b\x98\xc0\x29\x8c\xbd\xc9\xd6\x2a\xca\x89\xc3\xac\x69\x52\x19\x61\xcc\xa0\xf5\xeb\x77\xa6\xc0\xbb\x36\x8d\x60\xf2\x7a\xab\xdd\xea\x50\x83\xcd\xe9\x53\x6b\x29\x1f\x6e\x03\xf2\x7b\x68\x66\x0f\xb7\xe9\x1d\xe2\x94\x73\x2e\xaf\xdf\x0d\x00\xf6\x89\x32\x79\xf0\x1d\x3a\x9a\x86\xe9\xd4\x72\x87\x36\x2e\x39\x58\x5a\x85\xbd\xc3\x24\x24\xc4\x33\xbb\xcd\x45\x96\x84\x0b\xcf\x98\xb6\xf7\xd2\x43\xb2\xd7\x34\xbb\x31\x91\xe4\x99\xcf\xa5\x08\x22\x7b\x58\xfe\xf0\xf9\x50\xee\x2b\x07\x10\xb0\x22\x6c\xe0\x68\x2f\xe0\xe9\xd5\x4c\x28\x45\x1b\x80\x21\xe8\x6f\x2e\x7f\x42\x76\x57\xa8\x51\x5b\x98\x94\x6a\x5f\x8d\x2f\x12\x6f\xc6\x3d\xb5\xdb\xc3\xac\x6a\x2b\x5e\x71\xfd\xd3\xeb\xae\xda\x49\xff\xda\x93\x86\xd6\x23\x29\x15\x15\xce\x6b\xc3\x97\x3e\x53\xd7\x08\xbd\x27\x18\xef\xdd\x75\xda\x7a\x43\x3d\xcf\x94\xa1\x98\xf9\x43\xb9\x51\xab\x1a\xb8\x07\xc3\x9b\x69\x25\x38\x5d\x35\x51\xae\xff\xbb\x67\xac\x2b\xf2\x87\x88\x8c\x87\xa6\x20\x1d\xce\xe0\xdb\x6f\x7f\x7a\xf1\xf3\xc8\xdb\x14\xfd\xb3\xbc\x37\x8c\x4e\x21\x3a\x18\x4f\x0e\xe2\xc9\x38\x9e\x3c\x09\x85\x12\xfd\xe2\x88\xc3\x1c\xa5\x8b\x4e\x1b\xb0\xaa\x81\x3f\x54\xd1\x4f\xb3\x19\x52\x3f\x1b\x9d\x0b\xa1\xae\x9a\xf2\x0a\x93\xe7\x01\x7d\x5b\xac\xcd\x8c\x3d\x3c\x7d\xc6\xad\xfb\x61\x73\xb7\xd1\x9e\xfe\x0b\x56\xb3\xcf\x14\x0d\x17\x21\x51\x8b\xe8\x62\x43\xcd\xdf\xab\x30\x78\x2b\x88\x91\xa7\xe4\xca\x9e\xda\xc3\xd3\xd3\xd3\xaa\x73\xd6\xe9\xd7\x24\x94\xf7\x5e\xd5\x3a\x43\xc7\x78\xdc\xb7\xb2\x9d\xc6\x9f\x4f\x95\x71\xcf\x0b\xe1\xb8\x26\xc6\xfd\x43\x6f\x80\x56\x9b\xf0\x47\x14\xe8\xf0\xc5\xf4\x5f\xde\x4b\x03\xeb\xdc\x67\xf6\x9c\x8a\x5e\x82\x97\xc5\x2e\xf6\x66\xd6\xb3\x0f\xfa\x6f\x67\x0c\xef\xea\xdc\xf4\xab\xc6\xbd\x61\x87\x72\x33\xf2\xf9\x76\x33\xea\x56\x8d\x61\x36\xab\xcb\xa0\xb5\x69\xec\x0e\x55\x97\xe2\x3b\xf6\x64\x65\x05\xb0\xe9\xf6\xa5\x27\x67\x28\xfd\x41\xcd\x57\xd3\x16\x53\x6f\x25\xb2\x69\xcf\x3d\x73\x63\xd2\xb6\xb8\xb2\x46\x5b\x4b\xf1\x76\xd4\x3f\xc3\x0d\xed\xda\x28\x41\xac\xbd\xcd\x70\x4f\x33\x02\x40\xdf\x6c\xba\x5b\xd6\x21\xa6\x92\xd8\x43\xa5\xd6\x62\x95\xf1\x3c\x47\xe6\xb7\x9e\x62\xd5\xe6\xaa\xf6\x9c\xa4\x70\x2a\xcb\xb9\x54\x26\xab\x5e\x0d\xb2\x42\xcf\x0d\x61\x1e\x14\x67\x44\xd8\x1e\x7c\x6b\x2d\x2f\x82\x68\xbd\xc0\x2a\x32\x3d\xde\x19\xf4\xae\x77\x27\x23\x8e\x4c\x89\xc5\xd6\xbd\xca\x00\x43\x49\x9f\x93\x30\xd2\x6c\xdb\x36\xbc\x50\x8f\xae\xe9\x34\xb1\xf6\x4a\x19\xb6\x49\x57\x8f\x8e\x00\xec\x25\xd7\xd9\x8c\x4b\x22\x32\x2b\x89\xb6\x0b\xe5\x5a\xfe\xe9\xf1\x61\x33\xd9\x17\x96\x1d\xf1\x28\x7f\xd4\x7e\xee\x90\x6f\x4e\xbe\xea\x17\x72\xb1\xfb\x6e\xa9\xff\x84\xc0\xa6\x01\xe3\x2e\x76\x9e\xcd\xea\x67\xa5\x8c\xcc\x3d\xc8\xbf\xe5\x73\x8c\xe7\xd9\xfb\x41\xe6\xbd\xdd\xeb\x0d\xbd\xae\x78\x6b\xdf\xe5\xfb\xca\xa6\xbc\x12\x6c\xee\x10\xa7\x20\xa7\x0a\xd5\x27\x78\x4a\xfb\xb4\xcf\x4a\xf5\x03\x81\xcb\xf5\xe6\xa3\x40\x78\x05\x08\x95\x79\xcb\x9b\xc0\x9a\x73\x3d\xb7\xf1\x04\x10\x9e\x8e\x63\x2f\x2a\x96\xf3\xaf\x86\x26\xd6\xcc\x26\x6f\xcb\xdc\x75\x9e\xd9\x4c\xe4\xf2\x61\xb7\xbd\xcd\xdd\xd9\x62\x89\xd6\x71\x2d\x20\x2e\x05\x8c\xc2\xc3\x17\x35\x5c\xd7\x0f\x5f\xe7\x5a\x43\x4d\x04\x81\x28\x84\xad\x46\xad\xba\xe9\x40\x8f\x82\x68\x14\x70\x60\x1e\xee\x5a\xaa\xc2\x31\x2a\xcf\x7c\x04\x82\x55\x07\x07\x25\x2c\xa9\x7a\xa8\x35\xa8\x8d\x72\x8a\xaa\xfa\xc8\xe1\xa8\x2e\x1d\x41\x39\x33\x65\x9e\x97\x05\x3d\x4e\xc2\xbf\x74\x1c\x5d\x54\x97\x54\xbb\x34\x9e\x8c\x8f\xbf\xee\xd1\xd9\x0c\xbf\x7b\xad\x41\xf8\x93\x8e\xce\xd6\xe0\x5a\x63\x5b\xdf\x23\x78\x4e\x56\x53\x04\xe3\x0f\x3c\x9c\x3a\x50\x52\xac\x82\x54\x78\xd9\x64\x34\x54\xf7\x8a\xdf\x57\x2c\x3f\x14\x0e\x16\x44\xb2\x15\x94\xf5\xe9\xc8\xa5\xaf\xb2\xea\x2b\x06\x0b\x57\xdc\x2d\x54\xe1\x20\x27\xb2\x20\x42\xac\xc0\xda\x45\xec\x29\xb8\x74\x0a\xdc\x02\x2b\x81\xc9\xbd\x1d\x5d\xba\xef\xe9\x64\x3c\xde\x72\x76\x67\xaa\xed\xf0\xae\xd3\x37\x93\x7b\x07\x7e\xb7\x9f\x6f\x6a\xe3\x70\x38\x09\xb6\x8d\xaa\xc7\x3a\xe1\x8f\x27\xfb\x45\x7f\xaf\xb2\xac\xde\xe6\xef\x51\x9d\x71\x25\x61\xef\x22\x2d\xe9\xf7\xac\xd5\xdb\xe3\x79\x32\x7e\x72\x34\x10\xcf\x66\xaa\x27\x9e\x05\x7b\xdb\x78\xd6\x5f\x3b\xec\x9b\x68\x77\x34\xec\xed\x13\xed\x0e\x86\x6d\xc3\x4d\x67\xea\x43\x79\xec\x2e\x86\xdd\xdf\x63\xef\xb9\x2c\x6f\xab\x4b\x36\x6d\xd5\xe3\xf0\x49\xb4\xdb\x25\xf7\xf0\xf0\xe1\xe1\xf8\x78\xc0\xc3\xcd\xd4\x03\x78\x78\x0f\xcb\xbe\x3e\x3a\xdc\xee\xbb\x9d\xa9\x07\xb0\x6c\x0f\x90\x5c\x1f\x80\xf6\xc1\xc7\x70\xf4\xb9\x75\xff\xf2\xac\x06\xbf\x40\xff\xbb\xda\xca\xec\x11\xcb\xa3\xf1\x60\x8b\x6d\xa6\x76\xc7\x52\xcc\xa0\xf5\xd7\x1c\xb0\xef\xd5\x7d\x3f\xee\xbd\xc1\x47\xb7\x39\xa8\x3f\xdb\xb9\x15\x89\x2a\xc2\xb7\x83\xa3\x0f\xb1\xcd\x7e\x3a\x7e\xda\xe7\xc7\x66\xf8\x61\xb4\x1e\xf6\x15\x43\x6b\xf8\xee\x5a\xdf\x73\xbe\x3c\x82\xdf\x10\x24\x22\x03\x02\x16\x35\x31\xc4\x61\x17\xb9\x4c\xe1\x77\xf8\x0a\xb4\xc1\xa5\x07\x36\xba\xa2\x82\x53\x60\xa8\x51\x32\x94\x74\x05\x53\x74\x57\x88\x72\xf4\x28\x6c\xed\x89\xd6\x15\x27\x91\x0c\xaa\x4c\x2a\x47\x92\x9d\x09\x9a\x79\x4d\xe5\x16\x36\x76\x2a\x6e\xbe\x4f\x28\x2f\xaa\xb6\xdf\xf3\x9b\x5a\xad\x42\xe5\x57\xdd\xad\xff\x16\xd9\xc1\xd7\x21\x3a\x5d\x18\xd8\xa6\xe8\xa2\x01\x6c\xc3\xc2\xd6\x9d\xcf\x9a\x64\x27\x32\x8c\xea\x8f\x43\xb7\x6f\x8d\xfa\x59\xcb\xce\xb6\x47\x69\x97\x5f\x4f\xec\xdb\xd2\x02\xf5\xed\x2d\xed\xa5\x27\x7b\xb0\x4e\x76\xd2\x97\xd1\x27\xf7\xab\xa0\x8f\xb3\x79\x7e\x4a\x3d\xe8\x7f\x01\x00\x00\xff\xff\xd0\xa3\xa1\x83\xde\x30\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0xfb, 0x93, 0x28, 0x33, 0x70, 0x74, 0x4b, 0x5f, 0x97, 0xc2, 0xa4, 0x4c, 0xe1, 0xf7, 0xb8, 0x3e, 0xed, 0x6f, 0x62, 0x42, 0x8e, 0x44, 0xf1, 0x37, 0xed, 0x14, 0xb0, 0x95, 0x9e, 0xd, 0x4d}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6f\x53\xe3\xb6\xd6\xc0\xdf\xf3\x29\x34\x9a\xe7\xb9\xc3\x76\x80\x92\x40\x76\x0b\x33\x7d\xc1\xd2\xdd\x76\x67\x96\x96\x0b\xa1\xb7\x73\x77\x77\x3c\x8a\x7d\x92\x68\xb0\x25\xaf\x24\x03\xe9\x96\x7e\xf6\x3b\x92\xed\x44\xfe\x93\xc4\x09\x09\x84\xa2\xbe\xe8\xe2\x63\xd9\xd6\x39\x3a\x3a\xfa\x71\x74\x6c\xbe\x6d\x21\x84\x09\x63\x5c\x11\x45\x39\x93\xf8\x18\x69\x11\x42\x38\xa4\x52\xe1\x63\xf4\xc9\x1c\xa1\x4c\x6a\xce\xf4\x12\x1a\xaa\x0f\x0c\x1f\xa3\xd6\xce\x44\x1a\x10\x45\x24\x4f\x84\x0f\xf8\x18\xe1\xdd\x5d\xf4\xb3\x20\x7d\xc2\x08\xda\xdd\xc5\x56\x33\x60\xa4\x17\xea\x26\x4a\x24\x60\xc9\x87\x34\xa8\x91\x52\x9f\xb3\x53\x1e\x72\xa1\xef\x29\x06\x3d\xb2\xbd\xbf\x83\xda\xad\xd6\x0e\x6a\x77\x3a\x3b\xa8\xf5\xca\xbe\x35\x23\x91\x79\xf6\xc9\x44\x1d\xf4\x2f\x74\x12\x82\x50\xd2\x6e\xa7\x46\xb1\x69\x17\x10\x39\xec\x71\x22\x02\x9c\x9d\xbb\x37\xff\x7e\xd9\x42\xe8\x5e\x37\xc7\x10\x50\x55\xea\x2d\x1e\x30\x50\x1f\x02\x7c\x8c\xda\x9d\xc3\x76\x2a\x11\x24\x1e\x76\x39\x0f\x15\x8d\x73\x9b\x60\x6a\x9a\xa4\x3f\x2a\x10\xa6\x37\xfa\x64\xe7\xa8\xb5\xbf\xdf\x79\xd3\x7a\x73\x70\x98\x36\x0c\x29\xbb\xd6\x56\xff\xf4\xc5\x1c\xc6\x84\x41\x28\xc7\x76\xcf\xad\x8e\x49\x48\x89\x34\x96\x30\x43\x74\x9f\xab\x83\x7b\xc4\x48\xfa\x24\x94\x63\xc3\x19\xcd\x3e\x02\x1b\xa8\xa1\x7e\xe6\x7e\x41\x0e\x75\xcd\xed\xa1\x0b\x39\x09\x14\x48\xb5\x9b\x89\xc6\xcd\x6a\xcc\x91\xca\x85\x30\x03\x54\xbc\x69\x9f\x86\xa1\xed\x22\x46\xf0\xb3\x20\x01\x05\xa6\x1d\x6b\xd2\xab\x81\xa0\xc1\x39\x9f\xb8\x5e\xea\x0f\xf8\x18\x1d\x59\x83\x76\xab\xef\xd5\xb6\x04\x77\xf6\x3d\x10\xc2\x23\x7d\x9c\x0f\xe4\xf8\xde\x43\x1a\x04\xc0\x2e\x41\xd0\x1a\xbd\xcd\x20\xbd\x19\x1f\x86\x30\x00\x16\x14\xbb\x41\x6e\x06\xe5\xcb\x10\xc2\x7e\x22\x44\xaa\x45\xf9\x4c\x44\xee\xea\xa4\x94\xd5\x48\xe5\x90\xdf\x56\x5d\x5e\x71\x45\xc2\x9a\xd6\x37\x24\x4c\x26\x3a\x54\x14\x0d\x29\x33\x67\x0b\x23\xa3\x85\xb7\x34\x48\xdd\xc0\x96\x5a\x2e\x97\x4e\x9d\x24\x0c\xcf\x39\x65\xea\x8c\x9b\x69\x88\x7d\xce\x18\xf8\x0a\x82\xc9\xf0\xf3\xb8\x18\x21\xc6\xae\xf3\x71\x7c\xbf\x4a\xaf\x62\x10\x3e\x30\x45\x06\x50\x31\x7e\xac\x1f\xa7\xdd\x21\xd1\xd7\x76\x8a\xf2\xea\x58\x09\x60\x01\x08\x30\x81\xa0\x1f\x72\x35\xe9\x97\x34\x83\xfb\xdb\x0d\x08\x41\x03\x28\x29\x26\x63\xe2\x43\xdd\x54\x90\x8a\xf8\xd7\x95\xa7\x48\x05\x71\x0c\xc1\x47\xca\xaa\x1d\x56\x44\x0c\x40\x49\x2b\x26\xda\x51\x51\xcf\x83\xbb\x38\x8d\x53\x44\xc1\x76\x44\x94\x02\x11\x71\xa9\xbc\x58\xff\xcf\x0c\xeb\x37\xca\xa4\x22\xcc\x87\x1f\xff\xfe\x8c\xff\x4f\x82\xb8\x01\xf1\x19\xdf\x7f\x6a\x45\x5f\xec\x48\xa6\x27\x0b\x17\x11\xd1\x0e\x86\x15\x8d\xc0\x4b\x75\x2c\x36\xa1\x4c\x81\xb8\x21\xe1\x7b\xe2\x2b\x33\xff\x5a\x85\xd3\xa9\x37\xbf\x1f\xdf\xe7\xdb\xf8\xe1\xf7\xf7\xc5\x1b\x45\xa0\x04\xf5\x75\x9b\xda\x4e\x17\x1b\x0b\xe8\x9b\xf0\x87\x4f\x8a\x72\x6d\x39\x3d\x8e\x63\xd9\xfd\xce\x6c\x2b\xc9\x24\xda\x5e\xce\x52\x6b\x37\x55\xb7\xaa\xf6\x72\x36\x7a\x3b\xcf\x46\xd9\x4f\x13\x7f\x55\x43\x01\x72\xc8\xc3\xa0\xe4\xc7\x5a\xb5\xf7\x82\x47\xf8\x18\xe9\xb9\x5a\x90\x5f\xc0\x20\x9b\x98\xa5\x0b\x2e\x87\xb4\xaf\xaa\x57\x28\x13\xc2\xf1\x39\x97\x4a\xa2\x18\x04\xba\x04\x9f\x33\x6b\xa6\xab\xf1\x62\x66\xcd\xf4\x48\x5e\x80\xe4\x61\x92\xad\x64\xd5\x60\x46\x04\x04\xd5\x70\x26\xb9\x50\xa5\x48\x6d\x22\x99\x97\xaf\xc2\x94\x05\xf4\x86\x06\x09\x09\x71\x25\x7c\xe4\x6d\xcc\x12\x3b\xe9\xdf\x1d\xb9\xa3\xa5\x38\xd4\x4b\xfc\xeb\x74\x72\xda\xca\xea\x6e\x67\x01\x4d\xdb\xa3\x06\x16\x4a\xad\xeb\x43\xf2\x38\xf4\xd6\x44\xb8\x11\xb9\x83\x19\x31\x61\xe2\x9c\x72\xa8\x2d\x51\xf4\x3b\xd2\x03\x1d\xea\xf1\x29\x4f\x58\xf9\x1c\x1f\xbc\x25\x12\x2a\xbe\x9a\x2e\x30\xc5\x6e\x8f\x57\x98\x8a\xd8\xd2\x67\xee\xc4\x6c\xd4\xd5\xca\x13\xd6\xd8\xcf\xca\xe4\x18\x55\xc7\x9d\x84\x74\x50\xe7\x8e\x46\xfe\x11\x6e\xc6\x9d\x2e\x20\x5e\x66\x02\x47\x57\xf9\x71\x2d\x5d\x15\x04\xcb\xe2\x95\x65\x9f\xe9\x7c\x55\x9a\x6f\xf3\xf0\xaa\xd4\x3c\xf5\xa9\x72\xdc\x59\x0e\xae\x2c\x0f\x74\x6c\xf5\x0c\xd8\x6a\xa8\x54\xec\x09\xf8\x9a\x80\x54\x72\x13\x20\x0b\xe5\x4f\x47\x8d\x30\xcb\xf4\xdf\x4c\x71\xf9\xe8\xb4\xb5\xa0\xed\x36\x06\xbb\x9a\xda\x6c\xa3\xe9\xeb\x22\xb3\xbb\x03\x30\x07\x60\x8b\x74\xd5\x01\xd8\xcb\x01\xb0\x72\x7a\xeb\x68\x09\xfe\x7a\xdd\x00\xbf\x5c\x7a\xcb\x21\x58\x73\x04\x2b\xaf\xc4\xb7\xd0\x93\xdc\x04\xff\x99\x0c\xb1\x61\xf9\xad\xda\xae\xaf\x11\xbe\x96\xb4\xda\x53\x40\xd7\xf3\x00\xa8\x5f\x93\xa8\x07\x02\xf1\x3e\x3a\xcd\x27\x33\xfa\x09\x6e\xa8\x0f\x12\x6d\xff\x07\x7a\x97\xc6\xba\xf9\x49\xfd\x84\x57\x0e\xb0\x1c\x60\x39\xc0\x72\x80\x85\xd0\xb4\x0c\xd7\x32\x84\xd5\x72\x84\xe5\x08\x6b\x5d\x84\x15\xf4\xbc\x88\x48\x05\xc2\xf3\x27\x0b\xd9\x73\xe2\xac\x19\x0a\x3c\x0e\x6d\x2d\x6e\xc1\x8d\x49\x74\x2d\x6e\xbb\xe7\x45\x6c\xa6\x42\x47\x71\x74\x66\x94\x44\x3f\x11\x45\x7a\x7a\xa5\x75\x98\xe6\x30\xcd\x61\x9a\xc3\x34\x34\x25\x0f\xd6\xfa\x61\x19\x4c\x73\x9c\xe6\x38\x6d\xb5\x9c\xa6\x49\x83\x32\x5f\x00\x91\x85\x8d\x35\x12\x53\x2f\x65\x85\x24\x4a\xb7\xce\x50\x6f\x84\xb6\x73\xda\x78\x85\xbe\x47\x73\x2f\xf5\x75\x24\xae\xbb\x78\x61\x38\xc9\x2a\x6b\x4b\x6e\xf6\x08\x7b\x9b\xb6\x19\xd6\xc4\x7a\x43\x2a\x15\x1f\x08\x12\x79\x5f\x13\xc2\x14\x0d\x61\x7b\x7f\xef\xe8\x68\x07\xd5\xed\x77\x8e\xfb\x93\xae\xd1\x35\xc6\xdd\x09\x61\x89\x6d\xce\xa9\x06\x2e\x5b\x30\x3e\x3a\xda\x9d\x8e\xcf\x16\xc4\x6d\x06\xaf\x9d\x01\x61\xe8\xe4\xfc\x03\xca\xf6\x2a\x51\xd7\x46\x17\x07\x67\x6b\x81\xb3\x29\x60\xe6\x98\xcc\x31\xd9\x46\x31\x59\x25\x75\xb6\x14\x94\x75\x1c\x93\x39\x26\x5b\x29\x93\x0d\xb8\x17\x41\x24\x15\x51\xd2\x23\x61\xc8\x7d\xaf\x37\x52\x20\x9f\x28\x59\x76\xa2\x7b\x30\x63\xcd\x9f\x70\xd3\x94\x7e\xaf\x35\x53\x66\x3f\xd3\x0c\x89\x47\x59\x22\x61\xb5\x16\x5b\x15\x7e\x5e\xea\x0e\xae\xd7\x9e\x73\xb3\x67\x0b\xd8\x73\x08\x24\xde\x64\x73\xfe\x02\x24\x5e\xaf\x35\x4f\x37\x39\x17\x79\x06\x11\x17\x23\x74\x25\x75\x74\x74\x48\xbb\x4e\xa4\x35\x9e\xe2\xb0\x76\x5a\x3f\x6d\xa2\x70\x5c\x9b\xcb\x37\x26\xd7\xd8\x7e\xb3\x04\xd6\xb6\x0e\x1c\xd7\x3a\xae\x5d\x29\xd7\xd2\xca\xbb\x92\x82\xfb\x20\xa5\xe7\xc7\x89\x27\x4d\xfd\x78\x83\x1a\xfe\xef\x50\x6b\x7f\xff\xe9\x76\x88\x9b\x93\xeb\x53\xb2\xc1\xe9\xf9\x15\xba\x52\x34\xa4\x7f\x9a\xd7\xf6\xd1\x05\x51\x80\xb6\xff\xdf\x95\x8f\x3d\xdd\xbe\xe4\xcc\xe1\x40\x2f\x96\x1d\x5c\x4a\x6c\x93\xd0\xa1\x92\x12\x5b\x8a\x1d\x0e\x1d\x3a\x38\x74\x58\x29\x3a\x0c\xb8\x37\xe0\x82\x27\x4a\x0f\xc9\x06\x57\x8d\x15\xfa\xb9\xc6\xe2\xb0\x26\xf6\x78\xda\x1a\xb0\x26\x96\x78\x26\xa5\x5e\x3f\x73\x74\x51\x56\xc4\xf1\x93\xab\xeb\x72\xc0\x84\xd6\x02\x4c\x85\xf9\xf8\x14\x09\x93\x83\xd7\x4b\x40\x4f\xfb\xa8\x01\xf5\xac\xe2\x2b\x11\x2b\x62\x9e\x87\x7e\x26\xa2\xc2\x37\x5a\xf0\x48\x68\xd3\xfe\x07\xa1\x4d\xa1\x8c\x2a\xff\x55\x21\x7d\xc1\x4e\xc7\x63\x9e\x34\xfa\xb0\xc1\xac\x02\xab\x45\xaa\xa0\x2c\x4a\x59\x08\x48\x1e\xae\xc1\xec\x3e\xcf\x7e\xc7\x6f\x33\x88\xa1\x9b\x29\x6b\xbe\x87\x70\x46\x59\xa2\xe6\xed\xcb\x38\x20\xa8\x75\xac\x8d\x5b\x65\x37\x97\x06\x5e\xc0\xd6\xcb\xa3\xe3\x40\x25\x09\xb2\x14\x0f\x1c\xbc\xbc\x62\x6d\x87\x04\x6b\x47\x02\xfb\x9b\x41\xf3\x81\x40\x2a\xa2\x12\xe9\xf9\x3c\x98\xc7\x04\x64\x00\x4c\xa1\x5d\xf4\xed\x1b\xb2\x2e\x42\xf7\xf7\x68\xc5\x7c\x30\xb5\x50\xbc\x5e\x9b\x1d\xab\x37\xfa\xc4\xe1\xde\xde\x5f\x9d\xbd\xbd\xa5\xd5\x8c\xe3\x3a\x25\x37\x1c\x2c\x7e\xe9\x76\xcf\xd1\x3b\x33\xf2\x8e\x2d\x1c\x5b\x38\xb6\x58\x0f\x5b\x04\x20\x7d\x41\xe3\x2c\x79\x37\x29\xec\x79\x92\x1c\xc4\x61\x67\x09\xe6\x68\x37\x61\x8e\xa9\x39\x88\x72\xb6\xa1\xf1\x87\x2a\x05\x1d\x0c\xd5\x65\x6d\x55\x9f\xcb\x4e\x3c\x7f\x14\x31\x65\x1b\x8c\x07\xe0\xf9\x71\x32\x65\x99\xd6\x51\xfd\xc7\xcf\x38\x91\x0d\x73\x12\x33\x6a\x40\x75\xfb\x1a\x02\xae\x59\xcd\xaf\x24\x08\xd4\xa8\x54\x63\x21\x56\x59\x40\x5f\x39\x92\x0a\xa2\x87\x69\x5c\xa9\x12\x36\xf7\x6c\xa2\xd7\xdb\xb5\xe9\x45\x83\x10\x56\xab\xd5\x87\x20\x84\x26\x3a\x9d\xae\x49\xa7\xbf\x3f\x63\x2a\xbe\xfe\x25\x79\x5f\xe9\x7f\x29\xbf\x25\x54\xad\x56\xc5\xdf\xd4\xb0\x99\x3f\xfe\xb4\x21\x5c\x79\x7a\x7e\x85\x3e\x72\x12\xa0\xed\x56\x34\xaf\x34\xc8\xe1\x64\xad\x2f\x6e\x00\xa6\x3d\x17\x9c\x7c\x61\x1b\x57\x01\xf8\x34\x22\x61\xd9\x65\x9f\x26\x83\xb5\x1c\x4d\xae\xb6\x04\x58\xc7\xd1\x77\x51\xac\x46\x53\xce\xfd\x17\x04\x7f\x60\xe2\x6b\x0d\x20\xea\x92\x62\x1b\x42\xa2\xe9\x2a\x1f\x99\x97\x5e\xbc\x33\x88\xba\x33\x52\x60\x68\x17\x95\x5a\xbf\x17\x00\xcd\x1a\xbf\x4d\xfa\x7d\x10\xd3\x8a\x6a\x4a\x8d\x4f\x89\x3f\x84\xa0\x59\x01\xce\xaa\x90\x37\x40\xab\xde\xc0\x5b\xc0\xb2\x0d\x76\xe9\x9a\x75\x6f\x53\x72\x6b\x0b\xbc\x45\xe5\x10\xa8\xd6\x8b\x1a\xbd\x26\xe5\x10\xe8\x25\x66\xd4\x9e\x22\x71\xd6\x39\x5c\x06\x75\x26\xc5\xb2\x79\x11\x64\x31\x05\xf8\x12\xfe\xf0\x8b\x23\x95\x15\x91\x4a\x31\x31\xc1\x40\xdd\x72\x71\xed\x29\x41\x98\x8c\xa8\x9a\xf9\x32\x75\x5d\x3a\xe2\xd5\x77\x3f\xd4\xd7\xe9\x56\x5f\x3f\x5d\xb4\x82\xf7\x8f\xf4\x55\x94\x55\x03\xc5\x14\x0b\x08\xf0\x81\xde\xcc\x7e\x9b\xbc\x91\x01\x96\x42\xa9\x05\x6d\x73\xb1\x88\x6d\x36\x85\x66\x7e\x4d\x2d\x8d\x2e\xfe\xf8\x3e\x1b\xdb\x79\x25\xcb\x0e\x6a\x6a\x3d\xd9\x82\x9a\xd8\x21\x8d\x43\x9a\x47\x45\x9a\x4a\xfa\x66\x39\xa6\x69\xf2\x67\x81\x1d\xbd\x2c\x49\x2f\x61\x32\xa0\xec\x77\x10\x32\xdb\x2d\x7e\xbd\xf7\x7a\xaf\x8d\x5f\x00\xdd\xe4\x2b\xba\x54\x44\x79\x5d\x3f\xf6\x4e\x13\x21\xde\x49\x45\x7a\x8d\x52\x06\x2b\xc9\x82\x98\xc7\x85\x54\x0e\xd7\x90\x0c\xa1\x05\x6e\xc9\xb5\x7c\x77\xa7\xbc\xee\xe9\x79\x5e\xe2\xdb\xfc\x0f\xf4\xad\x44\xdf\x71\x65\xf1\xc2\x30\x32\x47\x59\xcd\x69\x0b\x0f\xe8\xb2\xfb\x63\x69\x76\xc8\x1a\xbb\xd5\x6c\x01\x3e\x78\xc0\x1e\xa6\x4f\xfe\x84\x0d\xdf\xeb\xeb\x9e\x9e\xdb\xdf\x2c\x77\x54\xe8\x76\xfb\xfe\x21\x5c\xb8\x95\xdd\x56\xcf\x39\x3d\x9d\xb4\xda\xad\xfd\xd4\xc3\xb1\xf4\x87\x10\x91\xc9\x3a\xdd\x6e\xa7\x62\x35\x4a\xa7\x45\x40\xc4\x75\xda\x52\x91\xc1\x64\xe4\xad\x6f\x00\x67\xc6\xb3\x24\xbb\x31\x88\x3e\x1e\x3f\x56\x41\x14\x87\x44\x51\x36\x18\xab\x83\x43\x2a\x95\xe5\x46\x05\x25\xc3\xdf\xb5\x03\x56\xbd\x75\xc2\x5e\x85\xb1\x54\x70\xa7\xaa\xbf\xe8\xdf\x64\xf7\xf8\x64\x09\x11\xc2\xd8\x3a\xfc\x52\xe7\x26\x0d\x3f\x4d\x60\xf6\x2f\xfb\x94\xd1\xbc\x18\xce\x38\x8d\x97\x4e\x9d\xda\x42\x89\x3c\x6c\xda\xa1\x81\x32\x3f\x4c\x02\x38\x09\xeb\xc0\x6f\xfc\x62\x67\x1a\x8c\xed\x5b\x45\x49\xa8\x68\x75\xe2\x66\x93\xbc\xe6\x82\x09\xdc\x4d\x62\x22\x42\xf8\x6b\x02\x62\xd4\xac\xf7\x13\xdf\x69\x15\xa4\x03\xb8\x2b\x19\x1f\xcb\x6b\x1a\x5f\x89\xf0\x72\xc4\xfc\xba\x6d\xc6\x6a\x84\x54\x64\x60\x86\x5c\xfe\x3b\xef\x0f\x2e\x9e\xad\x74\x5c\xcb\xea\x1b\x67\x21\x34\xd5\xcc\x3a\x91\x48\xe8\xa6\x37\x2a\x6c\x58\x6e\xe5\x8e\x70\x9f\xba\x2a\x35\x16\xcc\x9c\xb4\x9f\xae\x30\x98\xf1\xdb\xdd\x56\x27\xff\xbe\x35\x56\x3c\x13\xe2\xc2\x75\x31\xf5\xaf\x0d\xa0\x66\x57\x67\x16\xf3\xf2\xb4\x8a\x1d\x36\x71\xc7\x5a\x60\xf2\xb9\x68\x0e\x0e\xec\x83\xd6\xe4\x9b\xda\xb8\x63\xfd\xdc\xb2\x0f\x0e\xf6\xed\x33\xd6\xba\xd1\xb6\x7e\x6e\x05\xa9\xe7\x7f\xc9\x75\xa0\x11\x78\x96\x57\xcc\x7d\x8a\x7d\xe3\xd7\xf6\x8d\xed\xa7\xb4\x0f\xed\x03\xeb\x3b\x0e\x6f\x02\xbb\xbf\x79\x5f\x0a\xe6\xfb\x93\x1b\xe8\xc6\x3d\xc1\x6f\x65\xe6\xbd\xd6\x2e\xd4\x38\xb8\x98\x82\x9c\xdd\x2e\x48\x85\xce\x41\x98\x40\xae\x61\xef\x8c\x33\xaa\xb8\xd0\x41\xc6\x5c\x99\x98\x5f\xf1\xf0\x7e\xfa\x5f\xab\x95\x4a\x6f\xc6\x71\xee\x70\xeb\x7e\xeb\x7f\x01\x00\x00\xff\xff\xbf\x99\xc5\x83\x19\x89\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xe7, 0x9d, 0x9c, 0x6e, 0x62, 0x9b, 0x32, 0x5f, 0x24, 0xf3, 0xd1, 0xfc, 0x7b, 0xb9, 0x67, 0xc0, 0x5d, 0xf, 0x96, 0xee, 0x99, 0xab, 0x9f, 0x85, 0x65, 0xfe, 0x20, 0xdf, 0x39, 0xa0, 0x98}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x3d\x8e\xc3\x20\x10\x85\x7b\x4e\x81\xd0\x56\x5b\xd0\xb8\xde\x6a\xcb\x2d\xf7\x00\x68\x0c\xa3\xc8\xf2\x1f\x62\x06\x27\xc8\xf2\xdd\x23\x61\x53\xd8\x71\x9c\x0e\xe9\xbd\xef\xe3\xcd\x18\xd9\x47\x96\xaa\x19\x88\x61\xb0\x48\x4a\xce\x42\xca\x09\xba\x88\xf2\x47\xaa\xaf\x19\xee\x64\x4a\xaa\xc1\x7b\x43\x18\x26\x0c\xfa\x7b\x51\x62\x11\xa2\x08\x5c\xfd\xdb\x45\x62\x0c\xa7\x82\xe0\xc8\xd8\x35\xd7\xae\x2e\xcf\xbd\x01\x6e\x38\xf0\x87\xff\xbb\x11\x1c\x23\xb1\xc9\xe5\xe3\x86\x1e\x39\x34\x96\xfe\xf3\xc0\x6b\xd1\x56\xdd\x8e\xd9\x6b\x7c\x18\x1f\xe9\x1a\xcf\x95\x53\x98\xaa\x3a\xda\x16\x79\xe5\x5f\x0c\x54\x99\x35\xd7\xa5\x78\xc4\xff\x30\xbd\x61\x1b\xe8\x0d\x58\x8b\x44\xa6\xc5\xa4\xa9\x6a\x31\x65\xfa\x19\x00\x00\xff\xff\x9b\x4f\xd0\x61\xc5\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x13, 0xf6, 0x0, 0x1, 0x5d, 0xc9, 0xe4, 0x88, 0xa3, 0x96, 0x10, 0xb1, 0xe9, 0x86, 0x1e, 0x1d, 0xae, 0xa9, 0xb2, 0x5a, 0x40, 0x88, 0x37, 0x83, 0xf4, 0x9b, 0x98, 0x3a, 0x7c, 0xe3, 0xae, 0x58}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6e\x83\x30\x10\x85\xf7\x9c\x62\xe4\x75\x6b\x45\xa9\xd2\x9f\x05\x27\xa9\x2a\xcb\xd8\x13\x6a\xc5\xd8\xae\xc7\x26\xa5\x15\x77\xaf\x30\x55\xd3\x08\x14\x58\xce\xf7\xcd\x63\xf4\xa0\x97\xd1\xc8\xc6\x22\x30\x65\x33\x25\x8c\xc2\xc9\x0e\x19\x7c\x57\x63\x55\x5d\xa0\x0c\x41\x18\x47\x49\x3a\x85\x42\xf9\xec\xd2\x6d\x25\x0d\x61\x25\xa4\x45\x97\x36\x63\xae\xa5\xd5\xa0\x10\xfd\xe7\xb0\xe1\xe8\x66\xeb\x4d\xff\x0d\x74\xad\x71\x1b\x21\x56\x12\xad\x19\xf3\xae\xe8\x31\x92\xf1\x6e\x32\x00\xa6\x93\xa0\x86\x4e\x86\x0a\x40\xe3\x51\x66\x9b\xa0\x2e\x08\x80\xc9\x1c\x7d\x94\xf7\xdd\x40\x1f\x96\x41\x79\x6a\x60\x07\xfe\xc4\xcb\x48\xcc\x9c\xef\xf9\xee\x81\xef\xd9\xd5\x4e\xf0\x94\xda\x88\x65\xb1\x06\xf6\xc2\x1f\xf9\xf3\x64\x8c\x8b\xb3\x32\x61\x5c\xfd\x96\xba\x11\x41\x12\x9d\x7d\xd4\x0b\x46\xf4\x2e\x42\x6e\xac\x51\xe2\x84\xc3\x02\x77\x32\x25\x8c\x9d\xa7\x24\xb4\x3f\x3b\xeb\xa5\x16\x39\xda\x5b\x9e\x35\x0a\x1d\xa1\x38\x1a\xbb\x3c\xa5\x04\x24\xdc\x8a\x8b\xde\x27\xd1\x58\xaf\x4e\x42\x63\x6f\x14\xce\x25\x5f\x7a\x7d\x2d\x1d\xcd\xed\x02\xf4\xde\xe6\x6e\xfe\x2d\xa6\x8e\xda\xf0\xdb\xe1\x1f\x21\xf3\x35\x91\xc3\xae\x8c\xc7\xbb\x0a\xe0\xad\x1a\x7f\x02\x00\x00\xff\xff\x13\x26\x6f\x52\x0b\x03\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x86, 0xe, 0x94, 0xf, 0xf5, 0xd6, 0xbc, 0x4d, 0x91, 0xd2, 0xcd, 0x71, 0x7a, 0x6a, 0x8f, 0x4c, 0x1f, 0xeb, 0xe7, 0x50, 0x1b, 0xf, 0xb4, 0x63, 0xa9, 0xb4, 0x10, 0x3c, 0x21, 0x8e, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
