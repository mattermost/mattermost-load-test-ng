// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (19.686kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (40.044kB)
// assets/datasource.yaml (296B)
// assets/es_dashboard_data.json (8.51kB)
// assets/outputs.tf (566B)
// assets/variables.tf (1.212kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x93\xdb\x36\x92\xfe\xae\x5f\xd1\x47\xbb\x36\x76\xca\x24\x25\xcf\x38\xb6\x67\x77\x92\x9a\xf5\x26\x5b\x5b\xe5\xc4\xae\xcb\xde\x6d\x5d\x79\xa7\x58\x20\xd1\x92\xe0\x21\x01\x06\x00\xa5\x91\x7d\x73\xbf\xfd\x0a\x20\xf8\x22\x8a\x94\x38\xf2\x24\xb6\x13\xdb\x5f\x34\x44\x77\xa3\xd1\x2f\x4f\x37\x40\x48\xb9\x14\x2b\x46\x51\x82\x47\xd6\xca\x83\xf7\x13\x80\x5c\x8a\x39\x4b\x11\xce\xc1\xcb\x32\x3f\x15\x84\x6a\x54\xda\x9b\x00\x48\x5c\x30\xc1\xc1\x8c\x14\xca\x47\xa2\xb4\x3f\x33\xcf\x57\x28\x95\x19\x38\x07\xef\xff\xbe\x85\x93\x60\xea\x4d\x6e\x26\x13\x4a\x34\xb1\x62\xa3\x92\xcf\x03\x2f\x29\xa4\x44\xae\x3d\x78\xbf\x35\x9e\x90\x34\x45\x19\x31\x8a\x5c\x33\xbd\x19\x26\x54\x45\xcc\x51\x47\x8c\x2a\x0f\x3c\x85\x29\x26\x1a\x69\xa9\xf5\x2a\x4f\x22\x46\xe1\x1c\x56\x44\x06\xa8\xa2\x55\x9e\x18\x25\x24\x2a\x51\xc8\x04\x4b\xfe\x2b\xdc\x44\x39\x61\xd2\x03\xef\x0a\x37\x25\xa3\x79\xc6\x49\x86\x60\xd7\x75\xff\xbd\xe1\x4f\xd2\x42\x69\x94\xf6\xf9\x8d\x7f\x85\x1b\xcb\x64\x6c\x53\xc4\x29\x4b\x8c\x1c\x38\x07\x63\xa5\x07\x86\x5c\xa9\x65\xd4\x8c\x3c\xdc\x9d\x97\x71\xa5\x09\x4f\xd0\x03\x8f\xe4\x79\xa4\x50\xae\x50\x96\xd3\x6b\xb2\x50\x70\x6e\x3f\x02\xfc\x64\xf4\x18\xd0\x82\xe4\xb9\x7f\xff\x7d\x22\x0a\xae\x03\xc6\x29\x5e\xdf\x18\x85\x6e\x26\x13\x80\x44\x70\x8e\x89\x36\x2e\x28\xe5\xdc\x83\x7f\x2e\x11\x28\xce\x49\x91\x6a\x28\x14\x4a\xbb\xc2\xb9\x90\x20\x0a\x09\x17\x3f\xfe\xc3\x92\xe9\x4d\x6e\xa7\x53\x6a\xe9\xd9\x07\x86\xd2\x7a\x37\x2e\xb8\x2e\xca\x67\x4b\xa1\x34\x9c\x83\xc2\x74\x1e\xb8\x45\xb2\xbc\x9a\x99\x64\x0c\x9a\x7f\xe7\xe0\x91\x8c\xf9\x53\x92\x3c\x9b\xd2\xf9\x37\x38\x9f\x4f\xf1\xe9\x34\x7e\xe2\xc1\x3d\x98\x3d\x0b\xa6\xa7\xf0\xf2\x9f\x3f\x4f\x00\x2a\x73\x44\x4e\x01\xb3\x58\x63\x97\xad\xe7\xdb\xae\xb1\xd2\xdb\x2e\x0c\xae\x70\x13\x30\x6a\x57\x5f\x70\xdd\xd2\x61\x47\x9a\x25\x70\x21\xa2\x30\x29\x24\xd3\x9b\x68\x21\x45\x91\x9b\x48\x82\x73\x78\x63\x17\x6a\x03\x6c\x6b\xd8\x88\x79\x33\xbd\x0c\x18\x7d\xb4\x87\x22\x5a\x08\xa5\x98\x23\x9c\x00\x5c\x1a\xc3\xd0\x0d\x27\x19\x4b\xc0\x93\x42\xe8\x28\x4e\x45\x72\x15\x51\x5c\x31\x13\x03\xa5\x8f\xe6\x42\x46\x48\x92\xa5\xd3\x78\x87\xce\x12\x25\x82\x6b\xe4\xda\xb1\x00\xac\x44\x5a\x64\x18\x29\xf6\xce\xd8\x2d\x15\xe2\xaa\xc8\x1f\xec\xb0\x06\x2b\x92\x16\xf8\x08\xbc\x16\xb9\xf7\x08\x78\x91\xa6\x0f\xb7\x05\x39\x07\x8c\x15\x64\xc8\xb7\x04\xdd\x54\x81\x60\x71\xc4\x80\x80\x81\x12\x93\x18\xd5\x32\x5d\x1a\xb4\x7c\x93\x11\xad\x51\x66\x42\xe9\x28\x65\x09\x72\x85\x91\x61\xb0\xd4\x14\x95\x66\x9c\x68\x87\x26\xe1\x52\x64\x18\x96\xd1\x18\x36\x7c\x2d\x11\xbe\x13\xe1\xf5\x2a\x22\x31\x13\x1a\x7d\xbc\xc6\xa4\xd2\x87\xf1\x94\x71\xac\x9d\x0e\xe0\xad\x97\x06\xed\xde\xc0\x7f\x80\x3f\x87\x70\x45\x64\x98\xb2\x38\x4c\x52\x51\xd0\xb0\x8a\xa1\x30\x16\x42\xfb\x73\xc6\x99\x5a\x22\x85\xcb\x3f\x03\x15\x80\xc9\x52\xc0\x57\xff\x22\x4c\x33\xbe\xb0\xc9\x65\x99\x7c\xc6\x99\x0e\x82\xe0\xab\x3f\x83\x4a\x11\x73\x98\x19\x6a\x8e\xde\xa3\x7a\xc6\x05\x6a\xf0\x7d\x2e\xfc\x64\x89\xc9\x95\x9f\xa0\xd4\x6c\xce\x12\xa2\x11\xfc\x5f\x5e\x81\x0f\x4b\xad\x73\x75\x16\x86\xea\xc4\xc7\xc2\x5f\xa3\x41\xda\x80\x64\xe4\x9d\xe0\x64\xad\x82\x44\x64\x21\xc5\x38\x90\x22\x2e\x94\xce\x51\x26\x98\x1b\x9b\x05\x4c\x84\xa7\xb3\xef\x7f\x78\xf1\xfc\xf9\xdf\x82\x45\xbe\x80\xff\x05\x55\x50\x01\x24\xd7\x06\xc5\x80\x50\x0a\xfe\x31\x7a\xac\xd7\xeb\x20\x17\x4a\x2f\x24\xaa\x5f\xd2\x40\xc8\x45\x98\x21\x65\x24\xbc\xc2\x8d\x0a\x2f\x5e\xbc\x78\x71\xfa\xe2\x87\x67\x01\x51\xc9\x81\x29\xed\x98\x5a\x82\x9f\xc0\x57\xd6\x7e\xff\xf6\x28\xc6\x76\x9e\xb3\x30\x24\xb9\xee\x4e\x93\x17\x71\x28\x31\x17\xca\x0c\xc2\xfd\x07\xa9\x8a\x23\x89\x29\x12\x85\xe0\x27\xea\xa1\x9f\x2f\xe8\x02\x32\xc2\xf8\xbf\x3d\xf8\x16\x42\xd4\x89\xa1\x0c\xcb\xb8\x53\x41\xca\x94\x0e\x68\x68\xa8\xec\xe7\xaf\x3a\xba\x18\x3d\xad\x19\x36\x50\xe4\x94\x68\x1c\x18\xb7\x91\x90\xa6\x86\x2e\xdb\xa8\x5f\x52\x3f\x49\x19\x72\xed\x3f\x09\x9e\x1e\xe6\x68\xd6\x54\xb1\xcd\x66\x23\xb8\xa4\xc8\x50\x2f\xb1\x50\x3e\x17\xd4\x84\x71\x2e\xa4\x46\xd9\x75\xe0\x2b\x68\xe5\x03\x35\xeb\xd5\x44\x06\x8b\x77\x50\x96\x91\x56\xbe\x51\xb1\xe6\xa6\xa0\x47\x85\x4c\x6f\x1a\x31\x9a\x48\xb8\x7e\x37\x1f\x10\xd3\x51\x34\x5b\xb5\xe8\x20\x14\xb9\x0e\xcb\x42\x71\x69\x53\x70\x5f\xed\xcb\x50\x4b\x96\xa8\xe3\xea\x9f\x63\xfe\xdd\x14\x3d\x4f\x9f\x04\xd7\x29\x91\x0b\x8b\x5d\xe3\x8a\x18\x7c\x0b\x53\xf8\x0e\x66\x70\x06\xd3\x91\xf5\xf1\xa8\xba\xe7\x6c\xdd\xd4\xbe\x2f\x35\xed\x4b\x29\x39\x8c\xeb\x47\x60\x69\x83\x71\xdd\x1a\xb1\x51\x1a\xb3\x44\xa7\x80\x9c\xc4\x29\x0e\x53\xf6\x48\x25\x94\xda\xac\x4e\x59\x3c\x17\x5c\x27\x82\xcf\xd9\x62\xd6\xb1\x5a\x65\x18\x9a\x06\x0b\x49\xe6\x84\x13\x6b\x0c\xa1\x54\xe8\x0a\x4c\xe8\x9e\x47\x4f\x83\x93\xe0\x69\x44\x32\xfa\xcd\x69\x40\x31\xee\x28\x40\xf3\xab\x05\xf8\x0c\x0e\x52\x6f\x4d\xbb\x60\x7a\x59\xc4\x76\x4a\xc6\xe3\x22\xb9\x42\xdd\x7c\x70\x0a\xa8\xb0\x42\xec\x70\xf5\x38\x98\x05\xd3\x9a\x22\xb2\x7f\x46\x29\xe3\xc5\xf5\x41\xc5\xc6\x32\x0d\xe9\xf7\xb6\x50\x7a\x4d\x74\xb2\x34\x7f\x60\x4a\x94\x66\x89\x42\x22\x93\x65\x54\xd5\xa4\x3e\x8d\x67\x56\xe3\x7e\x7a\xdf\x0e\x06\x56\x15\xbf\x54\xa5\xbf\xda\x5c\x51\x26\xcb\x2a\xd3\x2f\xa8\x43\x6f\x4a\x99\xff\xee\x7a\x35\x87\x5b\xce\x0b\xfe\x8b\x7d\xd3\x80\xef\x2b\x2d\x59\xee\x27\x22\xcb\x05\x47\xae\xd5\x79\xb7\x84\x37\x21\x4b\x09\x66\x82\xfb\x12\x8d\x21\x0e\x05\xb6\x0b\x1b\xdf\x55\xc5\x0e\x35\x4a\x03\x5a\x1d\x22\x50\x9a\x48\x7d\x48\x70\xe5\xf6\x01\x91\xd5\xb0\x13\x36\xb2\x86\xe7\x52\x5c\x6f\x8e\xab\xe0\x96\xb5\xac\xdf\xdd\x22\xba\xfd\x6f\xb0\xa4\xee\x94\xd1\x2e\x9f\x99\xb4\xd4\xb0\xbb\x97\xdc\x2e\xb0\x7d\x7c\xbd\xe5\x76\xd6\x2a\xb7\x44\x29\x91\x30\xa2\x31\xaa\x5b\x82\x88\x50\x2a\x51\x99\xf5\x6b\x59\xe0\x51\xc5\xd6\xea\xdb\xda\x3d\xb6\xea\xfa\x60\x49\xff\xa3\x95\xe2\x8f\xd7\xec\x7d\x0e\x4d\xc0\x87\x17\xdf\xa1\x0d\xc6\x10\x27\x5f\x30\x7e\x7d\x37\xf0\xd7\x27\x4a\x66\xd6\x76\x66\x2f\x67\x87\x43\xc5\x34\x2a\xbf\xe4\xa0\xa1\x73\x7b\x87\x29\xe5\xe0\xcf\xd5\x2e\x17\x59\x11\x96\x1a\xc6\xb0\xbd\x6f\x19\x92\xdd\xd0\xec\x47\x44\x92\x45\x0e\x48\x4d\x3d\xbd\x42\x1a\x49\x91\x1a\x80\x44\x77\x8c\xba\x03\x38\xf5\xd1\x64\x07\x64\xfe\xf4\xa7\x6a\x20\x91\x68\xd0\xc5\x08\x6a\xc3\xce\x5a\xd5\x53\x39\x54\xf0\x50\x6d\xb7\x70\xde\xae\x86\xdb\x75\x8c\x0a\xb3\x45\xb6\xea\x1d\x07\xde\x0d\x5f\x95\x19\xa5\xc8\xd6\x06\xa4\xc2\xee\x7e\x76\xc3\xb7\xad\x53\x73\x6c\x5c\x9d\xd9\x96\x0f\xaa\x3d\x8b\xb0\x8d\xa8\xaa\x0e\x92\xea\xb3\xdf\x56\xb2\x61\x8a\x19\x72\xfd\x40\x0b\xb3\xb7\x7f\x40\x89\x26\xc1\xf6\x41\x71\x50\x1d\x13\x07\x8c\xaa\x87\x8f\x60\xfa\xb0\x76\x2b\x40\x3f\x50\xf7\x60\xb4\x53\xbc\x44\xe9\xcb\xda\x02\x15\x0a\x63\xac\x2a\x6d\x07\xf0\x17\x55\xd4\x22\xea\x05\x5f\x33\xee\xa2\xb0\x29\x27\x83\x60\xda\x92\x36\x00\xa3\xde\x22\x7f\xec\x3d\xdc\x87\xec\x7b\x64\x38\x4c\x9f\x4d\xbb\x40\xec\xbc\x5a\xb6\xd4\x35\x06\xee\x9e\xe7\xb6\xe3\xdc\x95\xe0\x72\xf3\x9c\x24\xa8\x54\x94\x8b\x94\x25\x0c\x8d\xbd\xff\xf2\x97\x17\xaf\x7e\xfa\xe1\x1f\x7f\x9f\x40\x6d\x0a\xef\xbf\xcb\x48\xf0\xce\xc0\x7b\x3c\x9d\x3d\xf6\x67\x53\x7f\xd6\x3a\x67\xf9\x59\x13\x6d\x1d\xef\x9d\xd5\xa1\x60\xfe\xbd\x9f\x6c\x17\x76\xef\xc2\xd6\x0c\x23\x06\xd5\xd9\xd7\xb5\x80\x7a\xfc\xb5\x64\x3c\x61\x39\x49\x0d\x49\xcf\xf8\xf7\xf3\x39\x26\x66\x16\xef\x22\x4d\xc5\x7a\x97\xe0\x3f\x5d\xce\x19\x12\x22\xf9\x19\x59\xab\x33\x54\x67\xf7\xdf\xd7\xa1\x58\xbe\xfc\x08\xdc\x1b\x8d\xc0\xa6\x43\x7b\xbc\xf3\xf2\xa3\x26\x24\x89\x85\x87\x88\xd1\x9b\xb3\x32\xd5\xc2\xfe\xc4\x0a\xbf\xf6\x5a\x5a\xdd\xb8\xcf\x97\xae\xcf\x72\xb6\x35\xd1\x8a\x39\x72\xaa\x22\x9b\x71\x4d\x37\x32\x80\x64\x01\xaa\x7a\xe3\x5f\xe2\xd4\x00\x7e\x19\xe4\xe9\x01\x47\x53\x68\x3d\xf0\xd4\x49\xf9\xc1\x78\xa6\x44\x8a\x01\x80\x70\x84\x9d\xd9\x0e\xf4\x64\xbd\xb0\xec\x22\xcc\xbe\xe0\xf1\xd4\x49\xfd\xa2\xc7\x96\x7e\xd7\x52\x55\x1a\x06\xe5\xb4\x26\xaf\x8d\x1a\x1f\x38\xbb\x3a\x89\x5c\xc7\x6d\x26\xae\x3e\x9a\xb9\x5d\xa7\xdd\xbf\xf6\xa0\xa6\xb5\xf9\x91\x3a\x18\xcd\x25\x5b\x99\x32\xde\xd4\x92\x91\x7d\xea\x68\x4c\x6f\xcf\x6b\x93\x73\x2e\x64\x82\x11\x45\xa5\xa5\xd8\x54\x20\xd4\x6b\x64\x63\xb5\x32\x89\x37\xb5\x97\xab\x3f\x47\xfa\xda\x91\xff\x1a\x9e\x31\x7d\x9b\x95\x6e\xe1\xe5\xfb\x57\x3f\x4c\x8c\x4e\x7b\x50\xa5\x17\x51\xda\x68\xb2\x17\x09\x1a\x98\x79\xd3\xc5\x07\x75\x72\xf6\x92\x29\xfd\xd7\xed\x8d\x58\x7b\xf8\xef\xe8\x46\x5f\x8a\xc4\xbe\xf8\x68\x67\xf3\xe5\xd6\x34\x7d\x60\xa3\x4e\xce\xce\xce\xee\xbf\xdf\x0a\xbf\x3a\xa0\xca\x7a\x75\x53\x49\xbc\x79\xd4\xb7\xb2\xbd\xca\x5f\xc4\x42\xea\x1f\x8b\x54\xb3\x9c\x48\xfd\x5f\xf9\x56\x47\xd7\x26\xfc\x1b\xa6\xa8\xf1\x55\xfc\xd6\x58\x69\x60\x9d\x63\x46\x2f\x92\xb4\x97\xe0\x75\xb1\x8f\xbd\x1e\x35\xec\x83\xf6\xdb\xeb\xc3\x63\x8d\xdb\xc0\xef\x8d\xc5\xcb\x9b\x89\x89\xb7\x9d\xa4\x91\x54\x45\x2e\x0b\x3c\xf0\x68\xdc\xfc\xd1\xdb\x2c\x1e\x3a\x04\x76\x4d\x23\x8d\xf7\x9f\x10\x57\x79\x57\x56\x97\x39\x2b\xf3\xac\x37\x29\x69\x6c\xd6\x61\xca\x52\x4c\x14\xb6\xdb\xba\x7e\x86\x92\x3e\x23\xf6\x49\xbd\x01\x6b\x14\xa7\x71\xfd\xb4\xa1\xcb\x89\x52\x6b\x21\xe9\x36\x5d\xf5\x74\x02\xa0\xae\x58\x1e\xcd\x19\x27\x69\xa4\x38\xc9\xd5\x52\xe8\xa6\x19\x22\x79\x9e\x6e\x22\x96\xd9\x57\x4f\x1a\xd3\x8d\x15\xe2\x06\xd1\x74\xf3\xd8\x67\xc2\xb6\x91\x4a\xaa\x9a\xbc\xee\x41\xb7\xc9\xb7\x07\xdf\xf4\x0b\xb9\xdc\x7f\xb6\xde\xd3\x45\xd2\xb8\x6a\x20\xf7\x85\x47\xfb\xb4\xa5\xfb\x68\x68\x6f\x31\x32\x6a\xbe\x1b\x08\x9a\x32\x58\xda\x41\xb2\x23\x75\x20\x66\x7a\xae\x24\xf4\xc5\x5c\x2d\xa6\xb3\xd6\xa0\x49\x84\xfa\x04\xa4\xd1\x2d\x25\x4a\x1d\xf0\xa7\xa5\x19\xf0\xfe\xe1\x20\xe8\x0b\xa8\x9a\xab\x0a\xba\x42\x8b\x28\x63\x5c\xc8\x2a\x1e\xa2\x22\x5f\x48\x42\x4d\x59\x9d\x93\x54\xf5\x54\xc8\xb6\x37\x91\xd3\x5c\x30\xae\x5b\xde\xac\x1e\x1d\xf6\x66\xdf\x8a\x5b\xd5\x6e\x9f\x37\xf7\xb8\x61\x9c\x1f\xba\xda\xb6\x25\xed\x08\xa8\x75\x08\x76\x42\xf6\x4d\x2b\x40\x2e\x83\xb5\x64\x1a\x25\x7c\xd7\x1f\x50\x6b\xe9\xc1\x59\xff\x90\xa4\x9d\x50\x03\xa3\x63\xa1\xb4\xc8\x1a\x15\xdb\x87\x82\xe7\xe0\x5d\xfc\xf4\x3f\x9e\xc9\x52\xa5\x89\x66\x49\x94\x61\x16\xa3\xac\xb3\xf3\x18\xf5\x7b\x93\xb7\x95\xb0\xd5\x75\xa9\x88\x2c\xca\xfb\x4b\xb7\xba\xe2\x63\x78\x46\x5f\xf2\xb9\xeb\x17\x99\x3b\x19\xff\x01\x67\xb0\x76\x25\x07\xee\xf3\x74\xf9\xc6\xdc\xee\x19\x31\x57\x75\xdb\xa7\x3e\x02\x18\x64\xac\x8c\x5f\x53\x8e\x3b\xe3\xbd\x2d\xea\x5b\xfd\x6c\xe0\xfc\x01\x0f\x6e\xff\xd8\xc7\xa7\xd5\xfd\x0c\x9d\xe5\xdb\x77\x32\xec\x25\x0c\x8b\x13\x07\xae\x64\x34\x9c\xcd\xd8\xd6\x0d\x0c\x7b\x41\xd3\x37\xa2\x7c\xbe\xf8\x7a\x68\xa0\x61\x96\x59\x5b\xe6\xbe\x23\xce\xed\x30\x2e\xaf\x2e\xee\x16\xac\x91\x57\x15\xda\x69\xbf\xe7\x82\x63\x35\xa7\x5f\xce\x69\x4f\x2d\x54\x22\x59\x5e\xdd\x08\xbb\xc8\xf3\xfa\xd4\x0e\x2c\x91\xf5\x74\x05\xbb\x55\xd1\x82\x9e\x09\x6c\x25\x60\x7c\x61\x73\xd9\xe5\x9a\x14\x59\x64\x9c\x66\xb5\x7a\xfc\xb8\xc4\x55\x51\x3d\x6a\x3d\xcc\xa5\xd0\x22\x11\xd5\xde\x5c\x27\x79\x69\xbb\x84\x51\x59\xa6\x86\x4d\x7f\x6f\x1a\xd8\xff\xe1\xd4\xab\x0e\x60\xf6\xcd\xf8\x6c\xfa\xcd\x93\x9e\x39\xeb\xc7\x77\x3f\xab\x15\xfe\xb4\x33\x67\xeb\x61\x33\x63\x7b\xbe\x7b\xf0\x23\xd9\xc4\x08\x12\x95\x96\x2c\xd1\x20\x78\xba\xb1\x52\xe1\x75\x9d\x04\xe0\xde\x4d\x7e\xe7\x58\xfe\x5a\x68\x58\x12\x4e\x37\x50\xa6\xb4\x26\x57\x26\x31\xdd\xf5\x62\x05\x6b\xa6\x97\xa2\xd0\x90\x11\x5e\x90\x34\xdd\x80\x52\x4b\xdf\x50\x30\xae\x05\xe8\x25\x3a\x81\xc1\x07\x1b\xba\x34\xdf\xf3\xd9\x74\xba\x63\xec\xce\x50\xdb\xe0\x5d\xa3\x6f\xe7\xc3\x10\xda\x6f\x5d\x9d\xa9\x54\xc3\xe1\x10\xd8\x55\xa9\x7a\xd6\x71\x7e\x79\xd5\xfa\xb0\x21\x46\xe5\xb1\xbb\xb3\xfa\xdb\xa6\xb3\xef\x26\x1d\x9d\xd5\x25\xfd\x5d\x24\x77\x95\x57\x4f\x4f\x07\x22\xa0\x1e\xea\x89\x80\x82\xde\x2a\x02\xea\x4b\xc3\x63\x03\xf3\x48\xb5\x6e\x19\x98\xc7\xa8\xb5\x0b\x4e\x9d\xa1\x8f\x63\xad\x63\xd4\xfa\x50\x6b\xfd\xc6\x29\x7c\x28\x87\x69\xdc\xce\xdd\x5b\x65\xed\xf0\x5e\xbe\x5b\x7d\x47\x78\xe3\xe4\x64\xfa\xcd\x80\x37\xea\xa1\x3b\xf7\xc6\x08\xbd\x9e\x9c\x9e\xec\x56\xf3\xce\xd0\x9d\xeb\x35\x02\x7a\x9b\x5d\xe1\x18\x08\xb5\xfb\xc1\x83\x3d\xd1\xcb\x0a\x1f\x2d\xfd\xf1\xed\x51\xfd\x25\x1a\xa7\x53\x9b\xa4\x1c\x39\xb4\xc2\x48\x16\xf6\x1d\xb8\x53\x5c\x2d\xdd\x06\x78\x67\x9b\x78\x0e\x9e\xf3\xa0\x99\xb6\xeb\xbe\xba\xef\xea\x3a\xaf\x1e\xe8\xba\xae\xed\xbc\x76\x76\x55\x63\xdd\x1c\xdb\xd9\xbc\xb9\xfd\xe7\xc0\xd6\xed\x76\xeb\x26\x39\x3b\x7e\xdd\xa7\x53\xdb\x8a\xf4\xad\xdc\x0d\x7d\xd2\x6b\x2f\x61\x72\xcf\xf2\x71\xef\xea\x87\x96\x3e\xb8\xee\x12\x52\x3f\xfa\xb2\x5d\xd7\xe7\x6b\xe1\xb7\xee\xa9\xee\x3f\xdd\x1b\x09\xda\x3d\x67\x2c\xe3\x62\xe9\x70\x48\x1d\x8e\xac\x9d\x00\xdb\xb5\x62\x4d\xb2\xcf\x98\xd5\xf7\x80\x76\x4f\x4d\xfa\x19\xb7\xba\xe8\xdb\xb9\x62\x7b\x2b\xfe\x89\xb8\xc0\x6d\x30\xf6\xb8\xc0\x51\x7c\xa6\x2e\x68\xbe\xdc\x71\xd7\x6d\x49\x95\x59\xdd\x2a\x38\x32\x26\x6a\xf6\xaa\x16\xed\xc6\xc2\xd1\x41\xf0\x99\x14\xb1\xa3\x72\xa9\xb2\xdb\x61\x34\xfb\x15\xcd\xf7\x7c\xfa\x7c\xa8\x20\xb8\xa1\xcf\xc1\x84\xee\xea\xf6\x47\xb0\xdf\xc9\x70\x2f\x71\xf2\x9b\xf6\x12\x1f\x64\xbf\x76\x4b\x71\xb7\xe6\xfb\xd4\x7b\x91\xdb\x42\xb0\xbb\xa5\x38\x7a\x7f\xe1\xe8\x0f\xef\x30\x7e\xde\xdd\x52\x38\xde\xfa\x5d\xd0\xa8\xdd\xe2\xe9\xe9\xc9\xc0\xa6\xac\x1a\xb9\xc3\x3d\xd9\xa3\x83\x26\xbd\x6c\xde\xad\xed\xb9\xe0\xb6\x15\x49\x37\x93\xc9\x3d\xf8\x17\x02\x47\xa4\x40\x40\x61\x4e\x24\xd1\xd8\xdd\x74\x99\x10\x06\x2d\x20\x97\xb8\x32\x7b\xb2\x64\x93\xa4\x2c\x71\x57\xf0\x90\x27\x1b\x88\x51\xaf\x11\xf9\xe4\x9e\x3d\xe9\x24\x79\xee\x38\x09\xa7\xe0\x94\x2c\x9f\x04\xe3\x7a\x9f\x3c\x37\xcd\x67\xfd\x95\x8f\x4f\xa4\xef\x79\xfc\xe4\x50\xdf\xe3\x28\xee\xbc\xef\xd9\xce\x9d\xdb\x36\x3f\x75\x10\x8d\xc8\xba\xf2\x6b\x2d\xb7\x39\x49\x9d\xdd\xee\x24\xd5\x4e\x70\x38\x49\x5f\x1b\xb2\x5f\xed\xe5\xc8\xb3\xbe\x53\xae\x67\xbd\xc7\x5c\xa3\x5f\x53\x7c\x84\xf7\x31\x9f\xf2\x7b\x82\x8f\xfd\xa2\xa0\x75\x8d\xe1\xad\x88\x8f\xfb\x9a\xc0\x5b\x11\xbb\xef\xa8\xfd\x9e\x7f\xac\xa4\x31\xcf\x1d\xfe\x66\x49\x9f\xd0\x3b\xfa\xe9\x92\x2f\x57\x0f\xbe\xfc\x24\xc9\xe7\xf1\x3d\xf2\x2f\x3f\x49\xf2\xe5\x27\x49\xee\xfe\x27\x49\xfe\x3f\x00\x00\xff\xff\x40\xd3\xd4\x4b\xe6\x4c\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0x4c, 0x8f, 0x8f, 0xe0, 0x7d, 0x7d, 0xd4, 0x39, 0x5c, 0xaf, 0x52, 0xd1, 0x23, 0x74, 0x79, 0x3e, 0xb5, 0x5e, 0x9e, 0x70, 0x1e, 0x5a, 0x7a, 0x8b, 0xa9, 0x7d, 0x59, 0xb4, 0x95, 0x7f, 0xbb}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\xb6\xf6\xc0\xdf\xe7\x53\x10\xc2\xff\x7f\x91\x0e\x71\x16\x3b\x71\xb2\x04\xd8\x8b\xd4\x6b\xbb\x02\xcd\x96\x9b\x87\xdd\xe1\xb6\x85\x40\x4b\xc7\x32\x11\x49\x54\x49\xca\x89\xd7\x65\x9f\xfd\x82\x94\x64\x53\x0f\xb6\x65\xc5\xae\x9d\x86\x7b\xb1\x46\x47\x14\xc5\x73\x78\x78\xf8\xcb\x21\xc5\x7c\xdd\x41\xc8\xc2\x61\x48\x05\x16\x84\x86\xdc\x3a\x43\x52\x84\x90\xe5\x13\x2e\xac\x33\xf4\x51\x5d\xa1\x54\xaa\xee\xf4\x63\xe2\x8b\xf7\xa1\x75\x86\xda\x7b\x53\xa9\x8b\x05\xe6\x34\x66\x0e\x58\x67\xc8\x6a\xb5\xd0\x3b\x86\x07\x38\xc4\xa8\xd5\xb2\xb4\x62\x10\xe2\xbe\x2f\x8b\x08\x16\x83\x26\x1f\x12\xb7\x42\x4a\x1c\x1a\xf6\xa8\x4f\x99\xac\x93\x79\x7d\xbc\x7b\xb0\x87\x3a\xed\xf6\x1e\xea\x74\xbb\x7b\xa8\xfd\x4a\xaf\x3a\xc4\x81\x7a\xf7\xf9\x54\x1d\xf4\x2f\x74\xee\x03\x13\x5c\x2f\x27\xc6\x91\x2a\xe7\x62\x3e\xec\x53\xcc\x5c\x2b\xbd\xf7\xa8\xfe\xfd\xbc\x83\xd0\xa3\x2c\x6e\x81\x4b\x44\xa1\xb5\x96\x17\x82\x78\xef\x5a\x67\xa8\xd3\x3d\xea\x24\x12\x86\xa3\xe1\x0d\xa5\xbe\x20\x51\x66\x13\x8b\xa8\x22\xc9\x8f\x02\x98\x6a\x8d\xbc\xd9\x3d\x3d\x3c\xf9\xe9\xf4\xa4\x7b\x72\xd8\x3d\x54\x77\x7d\x12\xde\x49\xab\x7f\xfc\xac\x2e\x23\x1c\x82\xcf\x27\x76\xcf\xac\x6e\x61\x9f\x60\xae\x2c\xa1\xba\xe8\x31\x53\xc7\xea\x63\x25\x19\x60\x9f\x4f\x0c\xa7\x34\xfb\x00\xa1\x27\x86\xf2\x9d\x07\x39\x39\x54\x15\xd7\xbb\xce\xa7\xd8\x15\xc0\x45\x2b\x15\x4d\x8a\x55\x98\x23\x91\x33\xa6\x3a\x28\x5f\xe9\x80\xf8\xbe\xee\x22\x4a\xf0\x8e\x61\x97\x40\x28\x1d\x6b\xda\x2a\x8f\x11\xf7\x92\x4e\x5d\x2f\xf1\x07\xeb\x0c\x9d\x6a\x9d\x76\x2f\xeb\xea\x68\x82\x07\xbd\x0e\x84\xac\xb1\xbc\xce\x3a\x72\x52\xf7\x90\xb8\x2e\x84\xd7\xc0\x48\x85\xde\xaa\x93\x4e\x26\x97\x3e\x78\x10\xba\xf9\x66\xe0\x91\x57\x7c\x0c\x21\xcb\x89\x19\x4b\xb4\x28\xde\x09\xf0\x43\x95\x94\x84\x15\x52\x3e\xa4\xf7\x65\x97\x17\x54\x60\xbf\xa2\xf4\x08\xfb\xf1\x54\x87\x92\xa2\x3e\x09\xd5\xdd\x5c\xcf\x48\xe1\x3d\x71\x13\x37\xd0\xa5\x9a\xcb\x25\x43\x27\xf6\xfd\x4b\x4a\x42\x71\x41\xd5\x30\xb4\x1c\x1a\x86\xe0\x08\x70\xa7\xdd\x4f\xa3\x7c\x84\x98\xb8\xce\x87\x49\x7d\xa5\x56\x45\xc0\x1c\x08\x05\xf6\xa0\x64\xfc\x48\xbe\x4e\xba\x43\x2c\x9f\xed\xe6\xe5\xe5\xbe\x62\x10\xba\xc0\x40\x05\x82\x81\x4f\xc5\xb4\x5d\x5c\x75\xee\xef\x23\x60\x8c\xb8\x50\x50\x8c\x47\xd8\x81\xaa\xa1\xc0\x05\x76\xee\x4a\x6f\xe1\x02\xa2\x08\xdc\x0f\x24\x2c\x37\x58\x60\xe6\x81\xe0\x5a\x4c\xd4\xa3\xa2\x1c\x07\x0f\x51\x12\xa7\xb0\x80\xdd\x00\x0b\x01\x2c\xa0\x5c\xd8\x91\xfc\x9f\xea\xd6\xaf\x24\xe4\x02\x87\x0e\xfc\xfc\xcf\x27\xeb\xff\x38\xb0\x11\xb0\x4f\xd6\xe3\xc7\x76\xf0\x59\x8f\x64\x72\xb0\x50\x16\x60\xe9\x60\x96\x20\x01\xd8\x89\x8e\xf9\x22\x24\x14\xc0\x46\xd8\x7f\x8b\x1d\xa1\xc6\x5f\x3b\x77\x3b\xf1\xe6\xb7\x93\x7a\xbe\x4e\x5e\xfe\xf8\x98\xaf\x28\x00\xc1\x88\x23\xcb\x54\x36\x3a\x5f\x98\xc1\x40\x85\x3f\xeb\x3c\x2f\x97\x96\x93\xfd\x38\x91\x3d\xee\xcd\xb7\x12\x8f\x83\xdd\x66\x96\x5a\xbb\xa9\x6e\xca\x6a\x37\xb3\xd1\xeb\x45\x36\x4a\x7f\x9a\xfa\xab\x18\x32\xe0\x43\xea\xbb\x05\x3f\x96\xaa\xbd\x65\x34\xb0\xce\x90\x1c\xab\x39\xf9\x15\x78\xe9\xc0\x2c\x3c\x70\x3d\x24\x03\x51\x7e\x42\xa8\x10\x6e\x5d\x52\x2e\x38\x8a\x80\xa1\x6b\x70\x68\xa8\x8d\x74\x31\x99\xcc\xb4\x91\x1e\xf0\x2b\xe0\xd4\x8f\xd3\x99\xac\x1c\xcc\x30\x03\xb7\x1c\xce\x38\x65\xa2\x10\xa9\x55\x24\xb3\xb3\x59\x98\x84\x2e\x19\x11\x37\xc6\xbe\x55\x0a\x1f\x59\x19\x35\xc5\x4e\xdb\xf7\x80\x1f\x48\x21\x0e\xf5\x63\xe7\x2e\x19\x9c\xba\xb2\xb2\xd9\x69\x40\x93\xf6\xa8\x80\x85\x42\xe9\xea\x90\x3c\x09\xbd\x15\x11\x6e\x8c\x1f\x60\x4e\x4c\x98\x3a\x27\x1f\x4a\x4b\xe4\xfd\x0e\xf7\x41\x86\x7a\xab\x47\xe3\xb0\x78\x8f\x7a\xaf\x31\x87\x92\xaf\x26\x13\x4c\xbe\xd9\x93\x19\xa6\x24\xd6\xf4\x59\x38\x30\x6b\x35\xb5\xf4\x86\x35\xb6\xb3\x34\x38\xc6\xe5\x7e\xc7\x3e\xf1\xaa\xdc\x51\xc9\x3f\xc0\x68\xd2\xe8\x1c\xe2\xa5\x26\x30\x74\x95\x5d\x57\xd2\x55\x4e\xd0\x14\xaf\x34\xfb\xcc\xe6\xab\xc2\x78\x5b\x84\x57\x85\xe2\x89\x4f\x15\xe3\x4e\x33\xb8\xd2\x3c\xd0\xb0\xd5\x33\x60\xab\xa1\x10\x91\xcd\xe0\x4b\x0c\x5c\xf0\x6d\x80\x2c\x94\xbd\x1d\xd5\xc2\x2c\xd5\x7e\x35\xc4\xf9\x37\xa7\xad\x25\x6d\xb7\x35\xd8\x55\xd7\x66\x5b\x4d\x5f\x57\xa9\xdd\x0d\x80\x19\x00\x5b\xa6\xa9\x06\xc0\x5e\x0e\x80\x15\xd3\x5b\xa7\x0d\xf8\xeb\xb8\x06\x7e\x99\xf4\x96\x41\xb0\xfa\x08\x56\x9c\x89\xef\xa1\xcf\xa9\x0a\xfe\x73\x19\x62\xcb\xf2\x5b\x95\x4d\x5f\x23\x7c\x35\xb4\xda\x26\xa0\xeb\x79\x00\xd4\x6f\x71\xd0\x07\x86\xe8\x00\xf5\xb2\xc1\x8c\x7e\x81\x11\x71\x80\xa3\xdd\xff\x40\xff\x5a\x59\x37\xbb\x29\xdf\xf0\xca\x00\x96\x01\x2c\x03\x58\x06\xb0\x10\x9a\x95\xe1\x6a\x42\x58\x6d\x43\x58\x86\xb0\xd6\x45\x58\x6e\xdf\x0e\x30\x17\xc0\x6c\x67\x3a\x91\x3d\x27\xce\x9a\xa3\xc0\xb7\xa1\xad\xe5\x2d\xb8\x35\x89\xae\xe5\x6d\xf7\xbc\x88\x4d\xed\xd0\x11\x14\x5d\x28\x25\xd1\x2f\x58\xe0\xbe\x9c\x69\x0d\xa6\x19\x4c\x33\x98\x66\x30\x0d\xcd\xc8\x83\xb5\x7f\x6a\x82\x69\x86\xd3\x0c\xa7\xad\x96\xd3\xaa\x16\xd5\x70\x44\xec\x84\x13\xe2\x20\x59\x36\x43\xfd\x31\xda\xcd\x48\xe3\x15\xfa\x11\xcd\x7d\xcc\x91\x11\xb8\xea\xc1\xa5\xa1\x24\xdd\x51\x5b\x70\xaf\xe5\x69\x05\x8f\xbc\xd6\xd2\xeb\x9a\xba\x19\xd6\xc4\x79\x43\xc2\x05\xf5\x18\x0e\xec\x2f\x31\x0e\x05\xf1\x61\xf7\x60\xff\xf4\x74\x6f\xbe\x7d\x93\xf9\xb9\xc2\xc0\x7b\x3e\x34\x58\xe2\x9c\x69\xe4\xa2\x15\xa3\xd3\xd3\xd6\x6c\x74\xd6\x00\x6e\x3b\x58\xed\xfc\xf2\x3d\x4a\x97\x28\xd1\x0d\x09\x00\xed\x5e\x2b\x3c\x36\x39\xb4\x35\xc3\xd9\x0c\x30\x33\x4c\x66\x98\x6c\xab\x99\xac\x73\xd2\x80\xc9\x0e\x8f\x0c\x93\x19\x26\x5b\x3b\x93\xb9\x7d\x9b\x0b\xca\xa0\x09\x98\xe5\x9f\x35\x74\x96\x49\x56\x4a\x67\x79\x23\x1b\x44\xab\x85\x68\xd7\xd2\x62\xa8\x87\x7d\xdf\x10\x9a\x21\x34\x43\x68\x86\xd0\xf2\x84\x56\x5a\xdc\x6c\x94\x36\x3b\xec\x18\x44\x33\x88\xb6\x1e\x44\xcb\x06\x53\x6e\x27\x7a\x6d\x48\x9b\xf3\xb4\xc1\xb4\x4c\xf2\x74\x4c\x9b\x63\x66\x03\x6a\x0d\x73\x69\x3d\x5f\xc6\x79\x43\x6a\x86\xd4\x0c\xa9\x25\x37\x5e\x34\xa9\xad\x24\x97\xd6\x3e\x34\xa0\x66\x40\x6d\xa5\xa0\x46\x4a\xe7\x33\x30\xea\x00\xe7\xb6\x13\xc5\x36\x57\xdf\xac\xd5\xf8\x6e\xf0\x07\xd4\x3e\x38\xd8\xdc\xae\xb4\xfa\xa8\xb4\x49\x46\xe8\x5d\xde\xa2\x5b\x41\x7c\xf2\x97\x3a\x2a\x08\x5d\x61\x01\x68\xf7\xff\x0d\x22\x6c\x6e\x2f\xd4\xdc\xee\x40\x06\x1d\x90\x41\x87\xcd\xa3\x43\x29\xc9\xd3\x88\x1d\xba\x06\x1d\x0c\x3a\xac\x14\x1d\x3c\x6a\x07\x10\x70\x81\x05\xb7\xb1\xef\x53\xc7\xee\x8f\x05\xf0\x0d\xed\x59\x3f\x97\x2d\x98\x93\x32\x98\x66\x5f\x66\xb4\x7b\xad\x1b\xd6\xf5\x77\xaa\x2e\xb1\x49\x18\x73\x58\xad\xc5\x56\x95\xc8\xba\x96\x0d\x5c\xaf\x3d\x17\x6e\x62\x5f\xc2\x9e\x43\xc0\xd1\x36\x9b\xf3\x57\xc0\xd1\x7a\xad\xd9\xdb\x66\xec\xbd\x80\x80\xb2\x31\xba\xe5\x32\x3a\x1a\xd4\x5d\x27\xea\x2a\x4f\x31\x19\xb1\x59\xed\xd4\x89\xe2\x3b\xe5\xda\xdc\x10\xdc\x44\x5e\xeb\xf0\xb8\x01\x9b\x76\x4e\x6b\xc0\xe9\x2a\x0e\x10\x5b\x11\x9a\x3e\xf5\x04\xb1\x12\x86\x4a\xc1\x37\x22\xd0\xce\x77\x44\xa0\x3c\x0e\x76\x49\xe8\x30\xc0\xbc\xb8\x88\x25\x63\x31\x8d\x6b\x9d\x79\x35\x6f\xf9\x70\x99\xc3\xbf\x34\x58\xac\xcd\x31\xab\xd1\x60\x7e\x9b\xe7\x1f\xff\xb0\x1d\x90\x90\xac\x96\xa9\xa5\x33\xa9\xb3\x3a\x31\xeb\x82\x84\xb1\x58\x84\x0c\x86\x09\x2a\xfd\x6b\x0b\x66\x5b\x43\x05\x5b\x43\x05\xcf\x3a\xdb\xd5\x88\x28\xcc\xa6\x73\x93\xed\x5a\x2d\x6b\x78\xd4\xf6\x28\xa3\xb1\x90\x5d\xb2\xc5\xe7\x32\xe4\xda\xb9\xc6\xe3\x17\xea\xd8\x63\xb3\xa7\x2c\xd4\xb1\xc4\x33\x39\x4c\xe1\x1d\x45\x57\x45\x45\x4c\x0a\xc5\x9c\x9c\xb0\x0d\x64\xf7\x3d\x02\x53\x6e\x3c\xba\xc0\x1d\x46\xa2\x74\x44\x4d\x13\x69\x1b\xc9\xaf\x1c\x75\x1b\xd0\x50\xa7\xce\xb9\x08\x33\xf3\x2b\xc5\x4c\x4a\xed\xf3\xd9\x19\xf1\x86\xe2\xba\x32\x8b\x6e\x32\x2f\xcf\x9b\x86\x26\x5b\x87\x43\xea\x82\xed\x44\x71\x35\x01\xec\xc9\xb8\xfe\xf3\x27\x2b\xe6\x35\xf3\x2d\x73\xd6\x5c\x64\xf9\x0a\x38\xaf\xa0\x82\x5b\x0e\x0c\xd5\xda\x2d\xb4\x14\xf1\x2c\xa1\x2f\x1f\x73\x01\xc1\xd3\x34\x2e\xad\xca\xa9\x3a\xeb\xe8\xf5\x7a\x6d\x7a\x11\xd7\x87\xd5\x6a\xf5\xde\xf5\xa1\x8e\x4e\xbd\x35\xe9\xf4\xcf\x27\x8b\xb0\x2f\x7f\x73\x3a\x10\xf2\x5f\x42\xef\x31\x11\xab\x55\xf1\x77\x31\xac\xe7\x8f\xbf\x6c\x4b\x32\xee\xf2\x16\x7d\xa0\xd8\x45\xbb\xed\x60\xd1\xee\x34\x03\x94\x95\xbe\xb8\x75\x94\x66\x68\x72\x4b\x68\x72\x23\x39\xb4\x46\xd4\x78\xf8\xf2\x4e\xd3\x32\x78\xb8\xf6\x85\x39\xfd\x8f\xba\x2c\x5e\x96\xe3\x02\x8b\x98\xdb\x0e\x75\x17\xad\xcc\x61\x0f\x42\x81\x5a\xe8\xeb\x57\xa4\x3d\x84\x1e\x1f\xd1\x8a\x57\xe9\x66\x9e\xe8\x35\x03\x33\xb4\xd6\xc8\x1b\x47\xfb\xfb\x7f\x77\xf7\xf7\x1b\xab\x19\x45\x55\x4a\x6e\xf9\xf2\xde\xaf\x37\x37\x97\xe8\x8d\xea\x79\xb3\xb4\x67\xd0\xc2\x2c\xed\x3d\x5f\xb6\x28\x26\xa4\xba\x47\x0d\xd0\xa2\x33\x5d\x19\xca\x32\xfe\xf9\xd4\xda\x4b\xf8\x3b\x82\x06\x36\x56\x03\x1b\xbb\xf9\x5f\xf8\x43\x10\xf7\x94\xdd\xd9\x82\xe1\x90\x07\x44\xcc\xdd\x14\x5c\xf5\x6b\xfe\xab\x1f\x7e\xaa\x5e\x94\x2a\x6f\xa3\x5c\x76\xb9\xea\xcf\xe4\x2b\xa3\x55\xef\x22\x9a\x61\x01\x06\x0e\x90\xd1\xfc\x5d\xd1\xb5\x0c\xd0\x28\x2b\xb7\xa4\x6d\xae\x96\xb1\xcd\xb6\x70\xcd\x6f\x89\xa5\xd1\xd5\x9f\x3f\xa6\x7d\xbb\x68\x7d\xce\x40\x4d\xa5\x27\x6b\x7b\x98\xa3\x19\x3b\x98\x0d\xd2\xbc\x44\xa4\x71\xc1\x21\x01\xf6\x8b\x1e\xbb\x99\x34\x4a\x33\xd6\x59\xed\x47\xfb\x32\x16\xbf\x09\x22\x31\x9e\x71\xef\xbf\xc0\xe8\x13\xb3\x2f\x6b\x58\xb7\x33\x99\x99\x6d\x81\x25\x45\x08\x81\xfa\x26\xc7\xbe\x80\xe0\x66\x4e\x1e\x06\xb5\x50\xa1\xf4\x5b\x06\x50\xaf\xf0\xeb\x78\x30\x00\x36\x8b\x3a\x0a\x85\x7b\xd8\x19\x82\x5b\x6f\x13\xd1\xaa\x56\x08\xdd\x95\x53\xd8\x12\x96\xad\xb1\x61\xfb\x79\x81\xd0\x12\x1f\x79\x19\x02\xaa\xf4\xa2\x5a\x5f\x71\x19\x06\x7a\x89\x0c\xb4\x11\xd6\x39\x3e\x6c\xc2\x3a\x27\x35\x58\xc7\x64\x70\x1a\x42\x89\x1f\x7b\x24\xfc\x03\x18\x4f\x77\xa2\x1d\xef\x1f\xef\x77\xac\x17\x00\x2d\x59\x56\x83\x0b\x2c\xec\x1b\x27\xb2\x7b\x31\x63\x6f\xb8\xc0\xfd\x5a\xf3\xeb\x4a\x90\x41\xbd\xce\x27\x7c\xb8\x06\x72\x20\xb9\xdc\x4d\xa6\xe5\x9b\x07\x61\xdf\xf4\x2e\xb3\x6f\xa2\xe6\x25\x70\xd6\xa0\xef\xe4\x53\xac\xa5\x39\x64\x81\xb2\x3c\x0e\x4a\xaa\x2e\xec\xd0\xa6\x7b\x6f\x12\x94\xd2\xfa\x6e\x35\xdb\x8b\x9e\xdc\x61\x4f\xd3\x27\x7b\xc3\x96\xef\x23\xba\xe9\x5d\xea\x7f\x06\xd0\x70\xa1\x59\xee\xfb\x4e\xb8\x70\x27\xad\x56\x8e\x39\x39\x9c\xa4\xda\xed\x83\xc4\xc3\x2d\xee\x0c\x21\xc0\xd3\x79\xba\xd3\x49\xc4\x62\x9c\x0c\x0b\x17\xb3\xbb\xa4\xa4\xc0\xde\xb4\xe7\xb5\x53\x81\x53\xe3\x69\x92\x56\x04\x6c\x60\x4d\x5e\x2b\x20\x88\x7c\x2c\x48\xe8\x4d\xd4\xb1\x7c\xc2\x85\xe6\x46\x39\x25\xfd\x3f\xa4\x03\x96\xbd\x75\xca\x5e\xb9\xbe\x14\xf0\x20\xca\x8b\x1d\xa3\xb4\x8e\x8f\x9a\x10\x21\xcb\xd2\x2e\x3f\x57\xb9\x49\xcd\x6f\x11\x55\xb2\x6f\x40\x42\x92\x6d\xb4\x57\x4e\x63\x27\x43\xa7\x72\x13\x66\x16\x36\xf5\xd0\x40\x42\xc7\x8f\x5d\x38\xf7\xab\xc0\x6f\xf2\x25\x47\x12\x8c\xf5\xaa\x82\xd8\x17\xa4\x3c\x70\xd3\x41\x5e\xf1\xc0\x14\xee\xa6\x31\x11\x21\xeb\x4b\x0c\x6c\x5c\xaf\xf5\x53\xdf\x69\xe7\xa4\x1e\x3c\x14\x8c\x6f\xf1\x3b\x12\xdd\x32\xff\x7a\x1c\x3a\x55\x39\xb9\x72\x84\x14\xd8\x53\x5d\xce\xff\x9d\xb5\xc7\xca\xdf\x2d\x35\x5c\xca\xaa\x0b\xa7\x21\x34\xd1\x4c\xbb\x11\x73\xb8\x49\x2a\xca\x65\xf7\x76\x32\x47\x78\x4c\x5c\x95\x28\x0b\xa6\x4e\x3a\x48\x66\x18\x2b\xa4\xf7\xad\x76\x37\x3b\xf1\xda\x12\x34\x15\x5a\xb9\xe7\x22\xe2\xdc\x29\x40\x4d\x9f\x4e\x2d\x66\x67\x4b\x4b\x7a\xd8\xb4\xba\xda\x04\x93\x8d\x45\x75\x71\xa8\x5f\xb4\xa7\xa7\x6c\x5b\x5d\xed\xe7\xb6\x7e\x71\x78\xa0\xdf\xd1\xe6\x8d\x8e\xf6\x73\xdb\x4d\x3c\xff\x73\xa6\x03\x09\xc0\xd6\xbc\x62\xe1\x5b\xf4\x8a\x8f\xf5\x8a\xf5\xb7\x74\x8e\xf4\x0b\xed\xc3\xcd\x13\x57\x6f\x6f\xd6\x96\x9c\xf9\xfe\xa2\x0a\xba\xad\x3e\xa3\xf7\x3c\xf5\x5e\x2d\x65\x33\x09\x2e\x6a\xb3\x6f\xeb\x06\xb8\x40\x97\xc0\x54\x20\x97\xb0\x77\x41\x43\x22\x28\x93\x41\x46\x3d\x19\xab\x5f\xf1\xac\x83\xe4\xbf\x76\x3b\x91\x8e\x26\x71\xee\x68\xe7\x71\xe7\x7f\x01\x00\x00\xff\xff\x30\x87\xdf\x20\x6c\x9c\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0x7d, 0xb6, 0xa9, 0x64, 0x71, 0x6e, 0xce, 0xb8, 0x31, 0x70, 0x59, 0x72, 0x15, 0xc2, 0x72, 0xbe, 0x2a, 0x68, 0xad, 0x28, 0xf6, 0x36, 0x93, 0xe4, 0x1f, 0x1e, 0xc5, 0x58, 0xe1, 0xa, 0xbc}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _es_dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xf8\x30\x74\x40\x82\x5a\xce\x52\x04\x7e\x4b\xd7\xb5\x28\x90\xa2\xdd\x32\xec\x25\x08\x0c\x5a\x3c\x96\x38\x53\xa4\x40\x1e\x39\x76\x0b\xff\xf7\x81\xd4\x8d\xba\xb4\xc9\x8c\xac\x6b\x51\x3d\x45\xfa\x78\x48\x7e\xe7\xfa\x21\xd6\xa7\x13\x42\x28\x53\x4a\x23\x43\xa1\x95\xa5\x0b\xe2\x20\x42\xa8\x14\x16\xe9\x82\xdc\xfa\x37\x52\xa1\x7e\x65\x55\x08\x89\x6f\x15\x5d\x90\xe8\xb4\x45\x39\x43\x66\x75\x61\x62\xa0\x0b\x42\xcf\xce\xc8\x1b\xc3\xd6\x4c\x31\x72\x76\x46\x03\x33\x50\x6c\x25\x9d\x09\x9a\x02\x02\x3c\x15\x7c\x04\x15\xb1\x56\xbf\x6a\xa9\x8d\x3b\xd3\x24\x2b\xf6\x6c\x76\x4a\xe6\x51\x74\x4a\xe6\x17\x17\xa7\x24\xfa\x39\x3c\x5a\xb1\xcc\xdf\x7d\xd5\xba\x43\x7e\x22\x57\x12\x0c\xda\xd0\x0e\xf7\xb9\xb7\xe3\xcc\xa6\x2b\xcd\x0c\xa7\xd5\xda\xc1\xff\xbd\x3b\x21\xe4\xe0\xcc\x29\x70\x81\x3d\xb6\x34\x51\x80\x6f\x39\x5d\x10\x55\x48\x59\x22\x86\xe5\xe9\x9f\x5a\x4b\x14\x39\x5d\x90\x99\x07\x85\x33\x39\xf7\x8f\x52\xa8\x8d\x8b\xeb\xed\x9d\x7f\xcd\x99\x02\x69\x9b\xc8\xd6\x71\xa5\x4c\x0a\x66\xbd\xaf\x3e\x09\x87\x9a\x30\x5d\x31\x8f\xac\x99\xb4\x4d\x68\x3c\xf7\x6b\x50\x09\xa6\x2e\x0d\xb3\x0e\x0e\x63\xe6\x41\x72\x6a\xe6\x7e\x65\x2d\xa4\x0c\x33\xe9\x81\x37\x86\x71\x01\x0a\x6b\x77\xfc\x42\x62\x04\xff\xa0\xdb\x0a\x29\xd3\x46\x17\xe4\x32\x88\xed\xbd\x3b\x6b\x1e\x00\xbb\xf0\x0c\x42\xe8\xde\xbd\xd7\xf1\x6e\xce\x4e\x05\xe7\xa0\x6e\xc0\x88\x11\xf2\x3e\x96\xcd\x25\x54\x42\x02\x8a\x77\x69\xb0\x6d\xd2\xdf\x46\x08\x8d\x0b\x63\x4a\x2f\xfa\x2b\x19\xdb\x8d\xa1\x42\x8d\xa0\x36\xd5\xf7\xc3\xca\x44\x8d\x4c\x8e\x58\x6f\x99\x2c\x5a\x1f\x06\x8e\x4a\xa1\xfc\x6a\x78\x9a\x07\xef\x05\x2f\x73\xd9\xa0\x2e\x4d\x1f\xb4\x50\xf8\x4e\xfb\xd6\xf0\x40\x53\xc7\x54\xe7\xdd\x86\x6d\xf2\x7c\xdd\xd4\xdb\xe0\xf6\x1c\x4c\x0c\x0a\x59\x02\x83\x20\xe7\xee\x26\x97\xf6\xc2\xed\x9d\x77\xf1\x61\x4e\x0c\x28\x0e\x06\x7c\x5f\xae\xa5\xc6\x96\x97\xf5\x49\x7c\xbf\x05\x63\x04\x87\xb6\xf0\xcb\xc5\x9c\xc5\x30\x56\xb7\x16\x59\xbc\x19\xdc\x62\x11\xf2\x1c\xf8\xb5\x50\x43\xc2\xc8\x4c\x02\x68\x83\x11\x15\x0e\x29\xd7\xbd\xbb\xbc\x1c\x1b\x0c\xe1\x19\x48\x66\x51\xc4\x16\x98\x89\xd3\xa5\x50\x5c\xc4\x60\x97\xd5\xeb\x1a\x30\x4e\x97\x3e\xa3\xb7\x51\x76\x17\x0e\x95\xa6\xde\x5e\x6b\x93\x31\xac\xcf\xeb\x5a\x18\x58\xfb\x91\x40\xaf\x68\x03\x1f\xaa\xa7\xd6\x77\x4c\x0d\xd8\x54\x4b\xde\x8b\x09\x8a\x0c\x5e\x1b\x9d\xf5\x3b\xd3\xe1\x7f\x40\x52\x25\xb9\xb7\xe1\x26\x15\x6b\x1c\xee\x40\x3f\xac\xe8\xef\x05\x98\x3d\xe9\x10\xa5\xd8\x4c\xa8\x4f\x61\x6d\x33\x03\x7c\x58\xdd\x56\x1b\xec\x35\xae\x2f\xec\x65\x3d\x3b\x5d\x04\xb7\x82\x17\x4c\xd2\x41\x95\xd5\x36\x7e\x30\xb6\x04\x76\x6c\x27\x7a\xe5\xba\x2a\xe2\x4d\x99\xc3\xd0\x0f\xd7\x89\x55\xc9\x3b\x57\x47\x46\x7c\xcf\x7a\xbc\x43\x9b\x4e\x1c\x69\x84\x3d\xdb\xc1\x17\x4a\x67\xdd\x24\x5b\x69\xd5\x4b\xb6\x64\x2b\x90\x75\x90\x05\xd8\xe7\xb6\xb7\xae\x93\x97\xcc\x42\x57\x1d\x9b\x91\xd3\x65\xde\xcc\x9c\x01\x1c\xb8\xd4\x96\xd4\xe9\x43\x6c\x6d\xea\xf2\x36\x4a\x77\x70\xc3\x7f\xc8\x73\x50\xfa\xfb\x61\xea\x99\x14\xc9\xd8\xb4\xf5\xf8\x35\x6c\x1b\xd2\x1d\x6d\xae\x42\xf0\x23\x88\x66\x07\x38\x56\x35\x7f\x99\x54\x73\x52\xcd\xa7\x56\x4d\xa1\x38\xec\x84\x4a\xca\x87\x47\xeb\x66\xbd\xed\x11\xda\xf9\x99\x41\xf7\x6f\xb8\x71\x90\x80\xf0\x68\x72\xde\xdc\x57\xc6\x38\xbb\x97\xdf\x88\xb2\xbf\xd2\x71\x91\x81\x42\x4b\x6a\x4f\x9f\xd7\xd4\x27\xbd\x7f\x02\xbd\xff\x82\x82\xd2\xf7\xf9\x24\xf6\x93\xd8\x7f\x95\xff\x90\x2f\x8f\xd0\xfa\xf9\xa4\xf5\x93\xd6\x1f\xa5\xf5\xe3\x52\xca\x75\xdc\x9f\x76\x7d\xd1\x1c\x58\x1c\xa3\xe6\x9f\xbf\xbd\x12\x71\xee\xcd\x1f\x64\x42\x2a\xeb\xef\x4b\xc1\x03\xbe\x93\x64\x3f\xb5\x64\x7f\x4d\x1d\x9c\xf4\xfa\x07\xd2\xeb\xc1\x3f\xe7\xc7\x08\xf6\x8b\x49\xb0\x27\xc1\x7e\x42\xc1\xb6\xa8\x0d\x2c\xad\xf8\x08\xcb\xd5\x1e\xe1\x01\xf1\x76\x76\xdf\xf8\xcf\xd8\x37\xce\x21\x5e\xea\x24\xe9\xf0\x9d\xa4\xf2\x28\xa9\xe4\x10\x8f\x55\xc6\xa4\x96\xff\x87\x5a\x9e\x54\xc7\xba\xbe\x73\x2d\xe5\xbc\x8e\x66\x65\x6e\xa8\x8d\x53\xc8\xd8\x5f\x60\xac\xd0\xee\xec\xf9\xbc\x84\x71\x2f\xab\x6f\xd7\x66\x53\x5a\x22\x4b\x82\xaf\xcb\x08\x59\x2e\x19\x0a\x95\x0c\xbf\xe4\xb7\x1f\xb6\x7d\x21\x36\xeb\xeb\xb2\x6b\xa9\xd2\xf7\x67\xd1\x45\x56\x05\x9d\xa2\xae\x40\xda\xd9\x97\x8b\x78\xe3\x87\x64\xb5\xbb\x62\xbf\x14\x0a\xc1\x6c\x99\x0c\x0b\x91\x5e\xb4\xa5\xd6\xf8\xe6\x5f\xce\xc3\x97\x28\x6b\x9f\x2f\x82\xe7\x28\x7c\x39\x9f\x85\x2b\x41\x27\xce\x83\xe7\xa8\xfa\x96\xdf\x75\xf5\xa3\xf6\xc3\x96\x56\x01\xab\xc7\xcb\x6f\xe1\x14\x25\x99\x56\x02\xb5\xa9\x7f\xa0\xa4\x85\xd7\x68\xfa\xea\xf2\x3a\x7b\xf1\xf7\xe6\x5d\x15\xed\x6d\x93\x91\x68\x76\x72\xf8\x27\x00\x00\xff\xff\x22\xec\x09\x54\x3e\x21\x00\x00")

func es_dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_es_dashboard_dataJson,
		"es_dashboard_data.json",
	)
}

func es_dashboard_dataJson() (*asset, error) {
	bytes, err := es_dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "es_dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x46, 0xe9, 0xd1, 0x18, 0xcb, 0xff, 0x63, 0x5e, 0xd6, 0x30, 0x59, 0x59, 0x16, 0x1e, 0xc9, 0x1c, 0xa7, 0x6b, 0xe1, 0x2e, 0x3, 0x1b, 0x66, 0xeb, 0xb9, 0xfa, 0xec, 0xe6, 0x5f, 0xb2, 0x5a}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xbd\x4e\xc4\x30\x10\x84\xfb\x3c\x85\x75\x25\x85\x9b\xab\xa9\x28\x29\x79\x80\xd5\xc6\x1e\x81\x2f\x89\x6d\x79\xd7\x07\x11\xe2\xdd\x91\xf2\x23\x25\x5c\x48\x9b\x99\x6f\xf2\xd9\x4e\x55\x73\x55\x73\x09\x51\x94\xa3\x83\x5c\xcc\x77\x63\xcc\x9d\xfb\x0a\xf3\x6c\xf8\x53\x68\x8d\x2c\xe7\x4c\x82\x72\x47\xb1\x4f\xcd\x4f\xd3\xac\xac\x6f\x5f\xfa\x2a\x8a\xf2\xc8\x16\x2f\xe4\xe6\x90\x10\x7d\x4e\x21\xaa\xfd\xfb\x41\xf6\x73\xfc\x8e\xa8\x67\x1e\x7d\x62\xaf\x10\xa5\xa9\xb9\x87\x07\x68\x09\x4e\xde\x26\xcd\x93\x8d\xa5\xb7\x9c\x67\xbb\x90\x4b\xfa\x1a\x4f\xc8\x29\x3f\xe0\xd0\xb3\x68\x70\xff\xfd\x79\x89\x05\x5c\xdc\x07\xf9\x34\x70\x88\x16\x47\x02\x72\x6d\xab\xeb\xa0\x8f\x1b\x72\xa5\x39\xb2\x6b\x67\xcf\xbd\xe2\x48\x9c\x07\x62\xe7\x20\x42\x1d\x46\x2b\xd7\x0e\xe3\x16\xbb\xa5\x76\x76\x3e\xbb\xf2\x5b\x6a\xb7\x4f\xff\x1b\x00\x00\xff\xff\x80\xd6\x9b\x25\x36\x02\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0xcd, 0x8d, 0x12, 0x49, 0xd0, 0xac, 0x9a, 0xbf, 0xfa, 0x4c, 0x3a, 0x98, 0x20, 0x0, 0xfe, 0x5a, 0x21, 0x3a, 0xc0, 0xd1, 0x8e, 0xa6, 0x36, 0xb3, 0x1c, 0x90, 0xcf, 0xf3, 0x1, 0xbc, 0x81}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcd\x6e\xdb\x30\x0c\xbe\xfb\x29\x08\xed\xba\x19\x49\x81\xa2\xd8\x21\xc7\x3d\xc5\x30\x08\xb4\xcc\xa6\x5a\x65\x51\x23\x25\x77\xd9\x90\x77\x1f\x62\x6f\x83\x0d\xab\xf5\xa5\x3a\xf2\xfb\x11\x49\x7c\x1c\x51\x3c\x76\x81\xc0\xb8\x50\x34\x93\xd8\x88\x03\x19\xf8\xdd\x5c\x9b\x66\x0b\x8e\xc9\x59\xdf\xbf\x0a\x6b\xe9\x22\xe5\x1a\x03\x53\xb2\x3e\x6a\xc6\xe8\xc8\x3a\x2e\x31\xbf\x4d\xc9\x97\xb4\xed\x02\xcf\x14\xf3\xae\xcd\x9a\xb4\x30\xfa\x00\x5f\x02\x6a\xf6\x4e\x09\xc5\x3d\xc1\x3f\x8d\x2e\xe5\xa4\x7b\x1f\x2c\x19\xd5\x36\x49\xed\x48\xa2\x9e\x63\x15\x4a\xae\x56\x76\x42\x98\xc9\x0a\x87\xaa\x21\x75\x6a\x39\x65\xcf\x51\x6f\x30\x40\x4f\x8f\x58\x42\x86\x13\x7c\x6d\x00\x60\xaa\xdd\xde\xc8\xa1\x0c\x73\x63\x70\x02\x73\x4e\x77\x66\x8d\xa8\xff\x75\x43\x8e\x87\xa9\x7c\xfd\xd8\x00\x7c\x5b\x7f\x97\x84\x7f\x5e\x76\x66\xec\xbb\xbd\x35\x2d\x19\x14\xcf\x3e\xee\x98\x04\x54\xad\x31\x66\xed\x72\xa3\x00\x7f\xa7\x1b\x30\xad\x36\x31\xef\xc0\x60\x11\x16\xfc\x34\x5c\xf4\x47\x30\xf3\xec\x27\x30\xf7\xed\x43\x3b\x95\xec\x8c\xb7\x77\xed\xe1\x73\x7b\x30\x2b\x4d\x62\xcd\x67\xa1\x49\x78\x02\x73\x3c\xb6\x0f\x37\xc2\x75\xd3\x55\x51\x92\xea\xa5\xf4\x9d\x4d\xa8\xfa\xc2\xb2\x3d\x02\xd5\x27\x9b\x4a\x17\xbc\xb3\xcf\x74\xd9\xc0\x03\xe6\x4c\x32\xb0\x66\xdb\xf3\x4b\x0c\x8c\xbd\x2d\x12\xde\xe2\x05\xef\x28\x2a\xd9\x47\x5f\x89\xcd\x64\x90\x69\xcf\x4e\x98\xb3\xed\x02\xbb\x67\xdb\xd3\xe8\x1d\xbd\x4f\xc0\xee\x5f\x0f\xd8\x77\xee\xac\x92\x8c\x24\x7b\x21\xaa\x31\xff\xe7\xf1\x4f\x00\x00\x00\xff\xff\x53\xec\x32\x7b\xbc\x04\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0xb9, 0xd2, 0x36, 0x20, 0xcc, 0xb1, 0x73, 0xe, 0x9b, 0x9d, 0x2b, 0xfd, 0x27, 0x14, 0x78, 0x16, 0xdf, 0xa6, 0x7f, 0x21, 0x2d, 0x86, 0x80, 0x4d, 0xc4, 0xd0, 0x22, 0xc5, 0x87, 0x84, 0x1a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":             clusterTf,
	"dashboard.yaml":         dashboardYaml,
	"dashboard_data.json":    dashboard_dataJson,
	"datasource.yaml":        datasourceYaml,
	"es_dashboard_data.json": es_dashboard_dataJson,
	"outputs.tf":             outputsTf,
	"variables.tf":           variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf": {clusterTf, map[string]*bintree{}},
	"dashboard.yaml": {dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": {dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml": {datasourceYaml, map[string]*bintree{}},
	"es_dashboard_data.json": {es_dashboard_dataJson, map[string]*bintree{}},
	"outputs.tf": {outputsTf, map[string]*bintree{}},
	"variables.tf": {variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
