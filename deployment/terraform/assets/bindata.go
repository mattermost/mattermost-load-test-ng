// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (15.778kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (37.578kB)
// assets/datasource.yaml (296B)
// assets/es_dashboard_data.json (8.51kB)
// assets/outputs.tf (531B)
// assets/variables.tf (1.066kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdb\x73\xdb\x36\xb3\x7f\xd7\x5f\xb1\x87\xc9\xb4\x49\x27\xa4\x24\xdb\xb9\xb9\x75\x3b\xe9\x75\x3a\x93\x36\x99\xd3\x9e\xd3\x87\x8c\x87\x03\x01\x2b\x09\x35\x09\xf0\x00\xa0\x6c\x25\xc7\xdf\xdf\xfe\x0d\x40\xf0\x2a\x92\x96\x1d\x3b\x49\xbf\xd6\x79\x51\x80\xdd\xc5\x62\x2f\xbf\x5d\x80\xc8\x94\xdc\x70\x86\x0a\x02\x72\xae\x03\x78\x37\x01\xc8\x94\x5c\xf2\x04\xe1\x04\x82\x34\x0d\x13\x49\x98\x41\x6d\x82\x09\x80\xc2\x15\x97\x02\xec\x4c\xae\x43\x24\xda\x84\x73\x3b\xbe\x41\xa5\xed\xc4\x09\x04\xff\xfa\x1a\x0e\xa2\xa3\xa7\xc1\xe4\x72\x32\x61\xc4\x10\x27\x37\x2e\x18\x03\x08\x68\xae\x14\x0a\x13\xc0\xbb\xd6\x3c\x25\x49\x82\x2a\xe6\x0c\x85\xe1\x66\x3b\x4c\xa8\xf3\x85\x40\x13\x73\xa6\x03\x08\x34\x26\x48\x0d\xb2\x42\xed\x4d\x46\x63\xce\xac\x0e\xf7\xdf\x6d\x88\x8a\x50\xc7\x9b\x8c\x5e\x3a\x4d\x14\x6a\x99\x2b\x8a\x85\x90\x33\xdc\xc6\x19\xe1\x2a\x80\xe0\x0c\xb7\x05\xb7\x1d\x13\x24\x45\x80\x5a\x02\x4d\x72\x6d\x50\xb9\xf1\xcb\xf0\x0c\xb7\x8e\xc9\x5a\x28\x5f\x24\x9c\x5a\x39\x70\x02\xd6\x56\x0f\x2c\xb9\xd6\xeb\xb8\x9e\x79\xb8\xbb\x2e\x17\xda\x10\x41\x31\x80\x80\x64\x59\xac\x51\x6d\x50\x15\xcb\x1b\xb2\xd2\x70\xe2\x7e\x02\xfc\x6a\xf5\x18\xd0\x82\x64\x59\x78\xff\x1d\x95\xb9\x30\x11\x17\x0c\x2f\x2e\xad\x42\x97\x93\x09\x00\x95\x42\x20\x35\xd6\x11\x85\x9c\x7b\xf0\xfb\x1a\x81\xe1\x92\xe4\x89\x81\x5c\xa3\x72\x3b\x5c\x4a\x05\x32\x57\xf0\xe2\x97\x9f\x1d\x99\xd9\x66\x6e\x39\xad\xd7\x81\x1b\xb0\x94\xce\xc7\x8b\x5c\x98\xbc\x18\x5b\x4b\x6d\xe0\x04\x34\x26\xcb\xc8\x6f\x92\x67\xe5\xca\x24\xe5\x50\xff\x9d\x40\x40\x52\x1e\xce\x08\x7d\x36\x63\xcb\x27\xb8\x5c\xce\xf0\xe9\x6c\xf1\x38\x80\x7b\x30\x7f\x16\xcd\x8e\xe0\xe5\xef\xbf\x4d\x00\x4a\x73\xc4\x5e\x01\xbb\x59\x6b\x97\xd6\x78\xdb\x35\x4e\x7a\xd3\x85\xd1\x19\x6e\x23\xce\xdc\xee\x73\x61\x1a\x3a\xec\x48\x73\x04\x3e\x4e\x34\xd2\x5c\x71\xb3\x8d\x57\x4a\xe6\x99\x0d\x27\x38\x81\x37\x6e\xa3\xc1\xfd\x77\x2e\xd0\x5a\x14\x56\xd2\x9b\xd9\x69\xc4\xd9\x65\xf0\x68\x9c\x2c\x5e\x49\xad\x79\x45\x3d\x01\x38\xb5\x26\x62\x5b\x41\x52\x4e\x21\x50\x52\x9a\x78\x91\x48\x7a\x16\x33\xdc\x70\x1b\x0d\x85\xb7\x96\x52\xc5\x48\xe8\xda\xeb\xbe\x43\xe7\x88\xa8\x14\x06\x85\xf1\x2c\x00\x1b\x99\xe4\x29\xc6\x9a\xbf\xb5\x16\x4c\xa4\x3c\xcb\xb3\x07\x3b\xac\xd1\x86\x24\x39\x3e\x82\xa0\x41\x1e\x3c\x02\x91\x27\xc9\xc3\xb6\x20\xef\x8a\x7d\x05\x59\xf2\x96\xa0\xcb\x32\x24\x1c\xae\x58\x50\xb0\xd0\x62\x53\xa4\xdc\xa6\x4f\x88\x86\x97\x52\x62\x0c\xaa\x54\x6a\x13\x27\x9c\xa2\xd0\x18\x5b\x06\x47\xcd\x50\x1b\x2e\x88\xf1\xe8\x32\x5d\xcb\x14\xa7\x45\x5c\x4e\x6b\xbe\x86\x88\xd0\x8b\x08\x7a\x15\x51\x98\x4a\x83\x21\x5e\x20\x2d\xf5\xe1\x22\xe1\x02\x2b\xf7\x03\x04\xe7\x6b\x8b\x7e\x6f\xe0\xbf\x20\x5c\xc2\x74\x43\xd4\x34\xe1\x8b\x29\x4d\x64\xce\xa6\x65\x34\x4d\x17\x52\x9a\x70\xc9\x05\xd7\x6b\x64\x70\xfa\x25\x30\x09\x48\xd7\x12\x3e\xff\x83\x70\xc3\xc5\xca\xa5\x99\x63\x0a\xb9\xe0\x26\x8a\xa2\xcf\xbf\x04\x9d\x20\x66\x30\xb7\xd4\x02\x7d\x24\xd9\x15\x57\x68\x20\x0c\x85\x0c\xe9\x1a\xe9\x59\x48\x51\x19\xbe\xe4\x94\x18\x84\xf0\xff\x5e\x41\x08\x6b\x63\x32\x7d\x3c\x9d\xea\xc3\x10\xf3\xf0\x1c\x2d\xf2\x46\x24\x25\x6f\xa5\x20\xe7\x3a\xa2\x32\x9d\x32\x5c\x44\x4a\x2e\x72\x6d\x32\x54\x14\x33\x6b\xb3\x88\xcb\xe9\xd1\xfc\x87\x1f\xbf\x7b\xfe\xfc\xfb\x68\x95\xad\xe0\xff\x41\xe7\x4c\x02\xc9\x8c\xc5\x33\x20\x8c\x41\x58\xeb\x51\xcd\x39\x7d\xb6\x90\x67\x8c\x18\x1c\x98\x77\xa6\x48\x12\x4b\x97\x29\x99\xa2\x59\x63\xae\x43\x21\x99\xb5\x6f\x26\x95\x41\xd5\xdd\xe1\x2b\x68\x38\x8a\x71\x6d\x22\x43\x54\xb4\x7a\x0b\x05\xd2\x35\x02\x81\xc9\x73\x61\x2b\x4f\x9c\xab\xe4\xb2\x16\x63\x88\x82\x8b\xb7\xcb\x01\x31\x1d\x45\xd3\x4d\x83\x0e\xa6\x32\x33\xd3\x02\xcb\x4e\x5d\x6c\x8c\xc1\x73\x8a\x46\x71\xaa\x6f\x06\xd1\x9e\xf9\x3f\x06\x97\x03\x73\x18\x5d\x24\x44\xad\x5c\x52\x15\x38\x3b\x84\xaf\xf0\x35\xcc\xe0\x1b\x98\xc3\x31\xcc\xf6\x84\xee\x9b\x42\xb2\x37\x73\x13\x96\xff\x41\xda\x7f\x00\xee\x8e\x01\xae\x43\xab\xb7\xda\x60\x4a\x4d\x02\x28\xc8\x22\xc1\x61\xca\x1e\xa9\x84\x31\x97\xd2\x09\x5f\x2c\xa5\x30\x54\x8a\x25\x5f\xcd\x3b\x56\x2b\x0d\xc3\x92\x68\xa5\xc8\x92\x08\xe2\x8c\x21\xb5\x9e\x2a\x4c\x90\x68\x9c\xfa\xf1\xf8\x49\xf4\x24\x3a\x88\x49\xca\x9e\x1c\x45\x0c\x17\x1d\x05\x58\x76\xb6\x82\x90\xc3\x95\xd4\xad\x65\x57\xdc\xac\xf3\x85\x5b\x92\x8b\x45\x4e\xcf\xd0\xd4\x3f\xbc\x02\x7a\x5a\xc2\xf5\x74\x73\x10\xcd\xa3\x59\x45\x11\xbb\xff\xc6\x09\x17\xf9\xc5\x95\x8a\xed\xcb\x34\xa4\xdf\x9f\xb9\x36\xe7\xc4\xd0\xb5\xfd\x0f\x26\x44\x1b\x4e\x35\x12\x45\xd7\x71\x59\x90\xfa\x34\x9e\x3b\x8d\xfb\xe9\x43\x37\x19\x39\x55\xc2\x42\x95\xfe\x52\x73\xc6\xb8\x2a\x4a\x4c\xbf\xa0\x0e\xbd\xad\x63\xe1\xdb\x8b\xcd\x12\xae\xb9\x2e\x84\xdf\x8d\x2d\x03\x61\xa8\x8d\xe2\x59\x48\x65\x9a\x49\x81\xc2\xe8\x93\xf9\x60\xc8\x32\x82\xa9\x14\xa1\x42\x6b\x88\xab\x02\xdb\x87\x4d\xe8\x4b\x62\x87\x1a\x95\x05\xad\x0e\x11\x68\x43\x94\xb9\x4a\x70\xe9\xf6\x01\x91\xe5\xb4\x17\xb6\x67\x01\xcf\x94\xbc\xd8\xde\xac\x7c\x3b\xd6\xa2\x78\x77\x2b\x68\xfb\x6f\xb0\x9e\xee\xd4\xd0\x2e\x9f\x5d\xb4\xd0\xb0\x7b\xd6\x69\x9f\x62\xfa\xf8\x7a\x6b\xee\xbc\x51\x73\x89\xd6\x92\x72\x62\x30\xae\xfa\x81\x98\x30\xa6\x50\xdb\xfd\x1b\x95\xe3\x4d\x2b\xae\x53\xb9\x75\xb0\x69\x54\xf8\xc1\xe2\xfe\x77\xab\xc7\x1f\xaf\xdd\xfb\x2b\x74\x02\x77\x77\xc4\x18\xe2\x14\x2b\x2e\x2e\x6e\x07\x03\xfb\x44\xa9\xd4\xd9\x0e\x0d\x9d\xba\xe9\xa9\xe6\x06\x75\x58\x70\xb0\xa9\x77\x7b\x87\x29\x11\x10\x2e\xf5\x2e\x17\xd9\x10\x9e\x58\xc6\x69\xf3\xe4\x32\x24\xbb\xa6\x19\x87\x45\x92\xc6\x1e\x4d\x6d\x51\x3d\x43\x16\x2b\x69\x0f\xe4\x01\xfa\x1b\xbf\x66\x4f\x8f\xba\x0b\x2f\x9f\x7d\x56\x4e\x50\x85\x16\x57\x2c\x77\x13\x70\xce\x75\x25\xdf\x43\x41\x80\xba\xdd\xbc\xf5\xdc\xc2\xb5\x2b\x18\x93\x29\xe1\xc2\xe9\x74\x33\xd8\xae\xf9\xca\x74\x28\x44\x36\xce\x1f\x25\x6a\xf7\xb3\x5b\xbe\xb6\x4e\xf5\xb5\x66\x79\x9f\x58\x0c\x94\x47\x16\xe9\x5a\x50\x5d\x5e\x6c\x54\x57\x93\x8d\x0c\xc3\x04\x53\x14\xe6\x81\x91\x09\xd7\xe6\x01\x23\x86\x44\xed\x7b\xcc\xa8\xbc\xc5\x8c\x38\xd3\x0f\x1f\xc1\xec\x61\xe5\x4b\x80\x7e\x88\xee\x47\x67\xaf\x7b\x89\xcf\xa7\x95\x19\x4a\xfc\xc5\x85\x2e\x55\x1e\x40\x5e\xd4\x71\x83\xa8\x17\x76\xed\xbc\x8f\xbf\xba\x9a\x0c\xc2\x68\x43\xda\x00\x80\x06\xab\xec\x20\x78\x38\x86\xe9\x23\x32\x3c\x9a\xcf\x67\x5d\x08\xf6\xae\x2d\x3a\xea\x0a\xfd\x76\xaf\x1b\x9b\xc1\xee\x2b\x70\x71\x70\xa6\x14\xb5\x8e\x33\x99\x70\xca\xd1\x1a\xfd\xab\xaf\xbe\x7b\xf5\xeb\x8f\x3f\xff\x34\x81\xca\x14\xc1\xff\x16\xe1\x10\x1c\x43\x70\x30\x9b\x1f\x84\xf3\x59\x38\x7f\x5a\x67\xfa\x6f\x86\x18\xe7\xfd\xe0\xb8\x8a\x07\xfb\xf7\x6e\xd2\xae\xeb\xc1\x0b\x57\x2d\xac\x18\xd4\xc7\x5f\x54\x02\xaa\xf9\xd7\x8a\x0b\xca\x33\x92\x58\x92\x9e\xf9\x1f\x96\x4b\xa4\x76\x95\xe0\x45\x92\xc8\xf3\x5d\x82\xff\xf6\x89\x67\x49\x88\x12\xc7\xe4\x5c\x1f\xa3\x3e\xbe\xff\xae\x8a\xc7\xe2\x82\x3e\xf2\xb7\xee\x91\xcb\x89\xe6\x7c\xe7\x82\xbe\x22\x24\xd4\x61\x44\xcc\xd9\xe5\x71\x91\x6f\xd3\xfe\xec\x9a\x7e\x11\x34\xb4\xba\xf4\xbf\x4f\x7d\x9b\xe5\x6d\x6b\xa3\x15\x33\x14\x4c\xc7\x2e\xed\x0a\xab\x8d\x60\x58\x84\xba\x3a\xf7\x8f\x82\x98\x85\x9f\x1e\x58\xb4\x25\x36\x80\x40\x1f\x16\x3f\xac\x67\x0a\xb8\x18\x40\x09\x4f\xb8\xcf\x35\x48\xdd\x92\xf5\x02\xb2\x8f\x30\xf7\xfd\x21\xd0\x87\xd5\x77\x08\x57\xf4\x7d\x33\x55\x6a\x18\x15\xcb\xda\xcc\xb6\x6a\xbc\xe7\xea\xfa\x30\xf6\x0d\xb7\x5d\xb8\xfc\x69\xd7\xf6\x8d\x76\xff\xde\xa3\x8a\xd6\xe5\x47\xe2\xb1\x34\x53\x7c\x63\x0b\x78\xdd\xbb\xee\xd9\xa6\xee\x0d\xec\xcd\x75\x5d\x72\x2e\xa5\xa2\x18\x33\xd4\x46\xc9\x6d\x09\x42\xbd\x46\xb6\x56\x2b\x92\x78\x5b\x79\xb9\xfc\xef\x9e\xbe\xf6\xe4\x77\xe1\x19\xdb\xb1\x39\xe9\x0e\x5e\x7e\x78\xf5\xe3\xc4\xea\x34\x82\x2a\xbd\x88\xd2\x44\x93\x51\x24\xa8\x61\xe6\x4d\x17\x1f\xf4\xe1\xf1\x4b\xae\xcd\xb7\xed\x73\x58\x73\xfa\x27\xf4\xb3\x2f\x25\x75\xb7\xf1\xcd\x6c\x3e\x6d\x2d\xd3\x07\x36\xfa\xf0\xf8\xf8\xd8\x57\xad\x32\xfc\xaa\x80\x6a\x9c\x28\x1c\x36\x3c\xea\xdb\xd9\xa8\xf2\x2f\x16\x52\x99\x5f\xf2\xc4\xf0\x8c\x28\xf3\x3f\x59\xab\x97\x6b\x12\x7e\x8f\x09\x1a\x7c\xb5\xf8\xd3\x5a\x69\x60\x9f\xfb\xcc\xbe\xa0\x49\x2f\xc1\xeb\x7c\x8c\xbd\x9a\xb5\xec\x83\xf6\x1b\xf5\xe1\x4d\x8d\x5b\xc3\xef\xa5\xc3\xcb\xcb\x89\x8d\xb7\x5d\x50\x54\x4c\xc7\x65\x1a\x34\x8e\xd3\xdd\xa1\x56\xdf\xd8\xfb\x77\xc5\x05\xb1\x9d\x64\x8b\xee\x5c\x81\x0c\x45\x91\x59\x72\x9b\x6e\x3b\x52\x7b\x53\x95\x2d\x7a\xbe\x89\x56\x3a\xef\x8a\x2b\x92\xb8\xb1\x57\xab\x8b\xff\x59\x18\xac\x79\x84\xa7\x09\xd1\xba\x67\x73\x2d\xfd\x2d\x8d\x6d\x20\x6d\x9f\xde\x3d\xf0\x0f\x31\x15\xc4\x16\x4e\xb3\x2c\xd9\xc6\x3c\x4d\x91\xd9\x83\x7b\xb2\x6d\x72\xf9\x1e\x8b\xe4\x46\xc6\x29\x17\x52\x95\x6d\x68\x9c\x67\x2b\x45\x98\x05\xce\x25\x49\x74\x0f\x06\x36\x76\x18\x40\x50\xef\x71\xd8\x7b\x7b\xde\xeb\xf7\xd9\x76\xd0\x37\xd6\x19\xb6\x91\x58\x10\x8d\xcd\x6e\xbc\x9f\xa1\xa0\x4f\x89\x1b\xa9\x0e\xcb\x2d\x03\x96\xa3\x35\x5d\x46\xb4\x3e\x97\x8a\xb5\xe9\xca\xd1\x09\x80\x3e\xe3\x59\xbc\xe4\x82\x24\xb1\x16\x24\xd3\x6b\x69\x1a\xa6\xed\x31\x7f\x35\xd9\xe7\xd1\x11\x57\x16\x3f\xaa\xa3\x43\x9b\xbc\x3d\xf9\xa6\x5f\xc8\xe9\xf8\x17\x91\xfe\xe6\x9f\x2d\xea\xbe\x7f\xec\x5e\xac\x7c\xcd\x11\x93\x55\xf1\xba\xe2\x5a\x6f\x0f\x2c\xcf\xde\xaf\x0f\x3e\xd8\xe7\xab\xa1\xa7\x04\x56\xdb\xdb\x7c\x4c\xd0\x96\x57\xb4\x95\x37\x70\x95\x93\xe3\x5d\xf5\x37\xbc\x1e\xfb\x7b\x5f\x52\x95\xdf\xc1\x4d\x9a\xb5\xbf\x7d\xbb\x8f\xdd\x2e\x33\xaf\xf8\xf4\x5d\x73\xd6\x73\xad\x2f\xdd\xee\xc5\x56\x68\x45\x85\x62\xf5\xc5\xd0\x44\xcd\xac\xd2\xa6\xcc\xb1\x8b\xa4\x76\x20\x17\xaf\x98\x76\x4b\xc9\x9e\x25\xa4\x79\x2d\x33\xf2\xd6\xa9\x5c\x33\x2c\xd6\x74\x27\x44\x4d\x15\xcf\xca\x27\x21\x2f\xb2\xac\xba\x26\x01\x47\xe4\x3c\x5d\x02\x5d\x59\xaa\xa0\x67\x81\x60\xe2\xa0\x63\xe5\xae\xc6\x7d\xae\x29\x99\xc6\xd6\x69\x4e\xab\x83\x83\x02\xc9\x64\x39\xd4\x18\xcc\x94\x34\x92\xca\xf2\x1c\x64\x68\x56\xd8\x8e\x72\xa6\x8a\xd4\x28\x30\x60\x16\xb9\x7f\xd3\x59\x50\x1e\x76\xc7\x56\x7c\x36\x7b\xf2\xb8\x67\xcd\x6a\xf8\xf6\x57\x75\xc2\x9f\x76\xd6\x6c\x0c\xd6\x2b\x36\xd7\xbb\x07\xbf\x90\xed\x02\x41\xd9\x53\x18\xa7\x06\xa4\x48\xb6\x4e\x2a\xbc\xae\x92\x00\xfc\x67\xa0\x6f\x3c\xcb\xb7\xb9\x81\x35\x11\x6c\x0b\x45\x4a\x1b\x72\x66\x13\xd3\xbf\x37\xd4\x70\xce\xcd\x5a\xe6\x06\x52\x22\x72\x92\x24\x5b\xd0\x7a\x1d\x5a\x0a\x2e\x8c\x04\xb3\x46\x2f\x30\x7a\x6f\x43\x17\xe6\x7b\x3e\x9f\xcd\x76\x8c\xdd\x99\x6a\x1a\xbc\x6b\xf4\x76\x3e\x8c\x40\x7e\xe7\xa9\x42\xa9\x1f\x0e\xc7\xc1\xae\x5e\xe5\x58\x27\x02\x8a\x07\x98\x57\x5b\x63\xaf\x64\xf6\x6f\xd7\x3e\x6c\x4e\x87\x7e\xd1\xbd\x53\xbb\xa0\xdf\x33\xc3\xaf\x8e\x82\x67\xb3\xa7\x47\x03\x51\x50\x4d\xf5\x44\x41\xce\xae\x1b\x05\x8d\x37\x84\xfb\x46\xe8\x0d\x75\xbb\x7e\x84\xde\x4c\xb7\x5d\xa8\xea\x4c\x7d\x44\xbb\xdd\x44\xb7\x5b\xb1\xdb\x07\xce\xea\xab\xd2\x9a\x2d\xde\x2f\x9d\x87\x8f\xdc\xdd\xd2\xbc\x87\x5f\x0e\x0f\x67\x4f\x06\xfc\x52\x4d\xdd\x8d\x5f\xf6\x50\xee\xf1\xd1\xe1\x6e\xbd\xef\x4c\xdd\x8d\x72\x7b\x80\x73\x7d\x5c\x6b\x7f\xcf\x1a\x3d\xaa\x8d\x37\x4f\x8e\xf9\x65\x89\xa2\x8e\xe3\x2f\xd5\x49\xed\xe1\xd2\xa3\xd9\x60\x85\xaf\xa6\xc6\x5d\x9a\x2c\x01\x9a\xd6\xae\xbe\x78\x35\xb5\x2b\xa6\x7a\x35\xfc\x84\x6a\x7c\xac\x72\xf7\xd5\xb7\x88\x0d\xdf\x93\x84\x46\x86\x8d\x37\x6b\xe3\xd7\x7a\xfb\x5e\xed\xef\xbe\x79\xa9\x4c\xeb\x3d\x66\x37\xd4\x75\xd7\xae\x73\xba\x5e\xdb\xa5\xe8\x3a\x0f\x76\xbd\xb8\x73\x36\xaf\x49\x46\x4e\xe7\x93\xf2\xa5\xfa\xee\xd9\xbe\x9f\xb1\xd5\xe3\x5d\xcf\x15\xed\xb3\xe2\x27\xe2\x02\xdf\x01\x8f\xb8\xc0\x53\xfc\x45\x5d\x50\xbf\xf2\xee\xb3\xf8\x0d\x1a\xde\x41\x2c\x2e\x33\xed\x5a\xf5\xf2\x63\x1c\x3e\x9f\xcf\x9e\xf7\x61\x52\x35\x7c\x37\xab\x1e\xf6\x61\x74\x63\xf8\xe6\xab\x7e\x42\xd8\x1b\x40\xe0\xdf\x67\x34\x8a\xf8\xd0\x53\x94\x82\xf0\xea\xab\x8f\xdf\x76\x8b\xb5\xe7\xad\x2e\x44\xf7\xea\xca\x8e\x8e\x0e\x87\x8a\xa4\x9f\xb9\xed\xb6\xe7\xd1\x7e\x6f\xfa\x4f\xeb\xcb\xe5\xb1\x07\x4a\xcd\x9c\xbc\x9c\x4c\xee\xc1\x1f\x08\x02\x91\x01\x01\x8d\x19\x51\xc4\x60\xb7\xb1\xb1\xf8\x0b\x46\x42\xa6\x70\x63\xfb\x1e\xba\xa5\x09\xa7\xfe\xf5\x01\x0a\xba\x85\x05\x9a\x73\x44\x31\xb9\xe7\x2e\x1e\x48\x96\x79\x4e\x22\x18\x78\x35\x8b\x91\x68\x3f\xa4\xcf\x32\x5b\x6a\xab\xc7\xae\x37\x46\xf9\xd9\xad\xa2\xfc\xc1\xe3\xab\x50\xde\x53\xdc\x3a\xca\xb7\xc1\xfa\xba\x50\x5f\xc5\xd2\x1e\x89\x57\x3c\xe8\xbd\xce\x21\x68\x7e\xbd\x3b\x0d\xb7\xc0\xd5\xe9\xfa\xda\x92\xdd\x59\x87\xfd\xac\x0f\xd2\x9e\xbd\x1f\x84\x7e\x9a\x4d\xfd\xc7\xbd\xb6\xfb\xe0\x75\xe5\xdf\x01\x00\x00\xff\xff\x5c\xef\x2b\xee\xa2\x3d\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0x99, 0x3e, 0x28, 0xeb, 0x2d, 0xba, 0x86, 0x19, 0x5e, 0xcb, 0xac, 0x43, 0x20, 0x49, 0x5c, 0xb5, 0x67, 0xa3, 0xcd, 0x7d, 0x3c, 0xa5, 0xfd, 0x6e, 0xa, 0x73, 0x2d, 0x21, 0x2e, 0x3e, 0x9}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\xb6\xf6\xc0\xdf\xf7\x53\x10\xc4\xff\x7f\x91\x0e\x71\x16\x3b\x71\xb2\x04\xd8\x8b\x34\x6b\xb7\x02\xcd\x96\x9b\x87\xdd\xe1\xb6\x85\x40\x4b\xc7\x36\x11\x49\x54\x49\xca\x89\xd7\x65\x9f\xfd\x82\x94\x64\x53\x0f\xb6\x65\xc5\x9e\x9d\x86\x7b\xb1\x46\x47\x14\xc5\x73\x78\x78\xf8\xcb\x21\xa9\x7c\x7d\x85\x10\x26\x61\xc8\x24\x91\x94\x85\x02\x9f\x22\x25\x42\x08\xfb\x54\x48\x7c\x8a\x3e\xea\x2b\x94\x4a\xf5\x9d\x5e\x4c\x7d\xf9\x3e\xc4\xa7\xa8\xbd\x3b\x95\x7a\x44\x12\xc1\x62\xee\x02\x3e\x45\xb8\xd5\x42\x3f\x73\xd2\x27\x21\x41\xad\x16\x36\x8a\x41\x48\x7a\xbe\x2a\x22\x79\x0c\x86\x7c\x48\xbd\x0a\x29\x75\x59\x78\xce\x7c\xc6\x55\x9d\x7c\xd0\x23\x3b\xfb\xbb\xa8\xd3\x6e\xef\xa2\x4e\xb7\xbb\x8b\xda\xaf\xcd\xaa\x43\x12\xe8\x77\x9f\x4d\xd5\x41\xff\x42\x67\x3e\x70\x29\xcc\x72\x72\x1c\xe9\x72\x1e\x11\xc3\x1e\x23\xdc\xc3\xe9\xbd\x47\xfd\xef\xe7\x57\x08\x3d\xaa\xe2\x18\x3c\x2a\x0b\xad\xc5\x83\x10\xe4\x7b\x0f\x9f\xa2\x4e\xf7\xb0\x93\x48\x38\x89\x86\x37\x8c\xf9\x92\x46\x99\x4d\x30\xd5\x45\x92\x1f\x25\x70\xdd\x1a\x75\xb3\x7b\x72\x70\xfc\xc3\xc9\x71\xf7\xf8\xa0\x7b\xa0\xef\xfa\x34\xbc\x53\x56\xff\xf8\x59\x5f\x46\x24\x04\x5f\x4c\xec\x9e\x59\x1d\x13\x9f\x12\xa1\x2d\xa1\xbb\xe8\x31\x53\x07\xf7\x88\x96\xf4\x89\x2f\x26\x86\xd3\x9a\x7d\x80\x70\x20\x87\xea\x9d\xfb\x39\x39\x54\x15\x37\xbb\xce\x67\xc4\x93\x20\x64\x2b\x15\x4d\x8a\x55\x98\x23\x91\x73\xae\x3b\x28\x5f\x69\x9f\xfa\xbe\xe9\x22\x5a\xf0\x33\x27\x1e\x85\x50\x39\xd6\xb4\x55\x03\x4e\xbd\x4b\x36\x75\xbd\xc4\x1f\xf0\x29\x3a\x31\x3a\xed\x5e\xd5\xd5\x31\x04\x0f\x66\x1d\x08\xe1\xb1\xba\xce\x3a\x72\x52\xf7\x90\x7a\x1e\x84\xd7\xc0\x69\x85\xde\xba\x93\x8e\x27\x97\x3e\x0c\x20\xf4\xf2\xcd\x20\xa3\x41\xf1\x31\x84\xb0\x1b\x73\x9e\x68\x51\xbc\x13\x90\x87\x2a\x29\x0d\x2b\xa4\x62\xc8\xee\xcb\x2e\x2f\x99\x24\x7e\x45\xe9\x11\xf1\xe3\xa9\x0e\x25\x45\x7d\x1a\xea\xbb\xb9\x9e\x51\xc2\x7b\xea\x25\x6e\x60\x4a\x0d\x97\x4b\x86\x4e\xec\xfb\x97\x8c\x86\xf2\x82\xe9\x61\x88\x5d\x16\x86\xe0\x4a\xf0\xa6\xdd\xcf\xa2\x7c\x84\x98\xb8\xce\x87\x49\x7d\xa5\x56\x45\xc0\x5d\x08\x25\x19\x40\xc9\xf8\x91\x7a\x9d\x72\x87\x58\x3d\xdb\xcd\xcb\xcb\x7d\xc5\x21\xf4\x80\x83\x0e\x04\x7d\x9f\xc9\x69\xbb\x84\xee\xdc\xdf\x46\xc0\x39\xf5\xa0\xa0\x98\x88\x88\x0b\x55\x43\x41\x48\xe2\xde\x95\xde\x22\x24\x44\x11\x78\x1f\x68\x58\x6e\xb0\x24\x7c\x00\x52\x18\x31\xd1\x8c\x8a\x6a\x1c\x3c\x44\x49\x9c\x22\x12\x76\x02\x22\x25\xf0\x80\x09\xe9\x44\xea\x7f\xba\x5b\xbf\xd2\x50\x48\x12\xba\xf0\xe3\xdf\x9f\xf0\xff\x09\xe0\x23\xe0\x9f\xf0\xe3\xc7\x76\xf0\xd9\x8c\x64\x6a\xb0\x30\x1e\x10\xe5\x60\x58\xd2\x00\x9c\x44\xc7\x7c\x11\x1a\x4a\xe0\x23\xe2\xbf\x23\xae\xd4\xe3\xaf\x9d\xbb\x9d\x78\xf3\xbb\x49\x3d\x5f\x27\x2f\x7f\x7c\xcc\x57\x14\x80\xe4\xd4\x55\x65\x2a\x1b\x9d\x2f\xcc\xa1\xaf\xc3\x1f\x3e\xcb\xcb\x95\xe5\x54\x3f\x4e\x64\x8f\xbb\xf3\xad\x24\xe2\x60\xa7\x99\xa5\xd6\x6e\xaa\x9b\xb2\xda\xcd\x6c\xf4\x66\x91\x8d\xd2\x9f\xa6\xfe\x2a\x87\x1c\xc4\x90\xf9\x5e\xc1\x8f\x95\x6a\xef\x38\x0b\xf0\x29\x52\x63\x35\x27\xbf\x82\x41\x3a\x30\x0b\x0f\x5c\x0f\x69\x5f\x96\x9f\x90\x3a\x84\xe3\x4b\x26\xa4\x40\x11\x70\x74\x0d\x2e\x0b\x8d\x91\x2e\x27\x93\x99\x31\xd2\x03\x71\x05\x82\xf9\x71\x3a\x93\x95\x83\x19\xe1\xe0\x95\xc3\x99\x60\x5c\x16\x22\xb5\x8e\x64\x4e\x36\x0b\xd3\xd0\xa3\x23\xea\xc5\xc4\xc7\xa5\xf0\x91\x95\xd1\x53\xec\xb4\x7d\x0f\xe4\x81\x16\xe2\x50\x2f\x76\xef\x92\xc1\x69\x2a\xab\x9a\x9d\x06\x34\x65\x8f\x0a\x58\x28\x94\xae\x0e\xc9\x93\xd0\x5b\x11\xe1\xc6\xe4\x01\xe6\xc4\x84\xa9\x73\x8a\xa1\xb2\x44\xde\xef\x48\x0f\x54\xa8\xc7\xe7\x2c\x0e\x8b\xf7\xd8\xe0\x0d\x11\x50\xf2\xd5\x64\x82\xc9\x37\x7b\x32\xc3\x94\xc4\x86\x3e\x0b\x07\x66\xad\xa6\x96\xde\xb0\xc6\x76\x96\x06\xc7\xb8\xdc\xef\xc4\xa7\x83\x2a\x77\xd4\xf2\x0f\x30\x9a\x34\x3a\x87\x78\xa9\x09\x2c\x5d\x65\xd7\x95\x74\x95\x13\x34\xc5\x2b\xc3\x3e\xb3\xf9\xaa\x30\xde\x16\xe1\x55\xa1\x78\xe2\x53\xc5\xb8\xd3\x0c\xae\x0c\x0f\xb4\x6c\xf5\x0c\xd8\x6a\x28\x65\xe4\x70\xf8\x12\x83\x90\x62\x1b\x20\x0b\x65\x6f\x47\xb5\x30\x4b\xb7\x5f\x0f\x71\xf1\x8f\xd3\xd6\x92\xb6\xdb\x1a\xec\xaa\x6b\xb3\xad\xa6\xaf\xab\xd4\xee\x16\xc0\x2c\x80\x2d\xd3\x54\x0b\x60\x2f\x07\xc0\x8a\xe9\xad\x93\x06\xfc\x75\x54\x03\xbf\x6c\x7a\xcb\x22\x58\x7d\x04\x2b\xce\xc4\xf7\xd0\x13\x4c\x07\xff\xb9\x0c\xb1\x65\xf9\xad\xca\xa6\xaf\x11\xbe\x1a\x5a\x6d\x13\xd0\xf5\x3c\x00\xea\xd7\x38\xe8\x01\x47\xac\x8f\xce\xb3\xc1\x8c\x7e\x82\x11\x75\x41\xa0\x9d\xff\x40\xef\x5a\x5b\x37\xbb\xa9\xde\xf0\xda\x02\x96\x05\x2c\x0b\x58\x16\xb0\x10\x9a\x95\xe1\x6a\x42\x58\x6d\x4b\x58\x96\xb0\xd6\x45\x58\x5e\xcf\x09\x88\x90\xc0\x1d\x77\x3a\x91\x3d\x27\xce\x9a\xa3\xc0\x3f\x43\x5b\xcb\x5b\x70\x6b\x12\x5d\xcb\xdb\xee\x79\x11\x9b\xde\xa1\x23\x19\xba\xd0\x4a\xa2\x9f\x88\x24\x3d\x35\xd3\x5a\x4c\xb3\x98\x66\x31\xcd\x62\x1a\x9a\x91\x07\x6b\xff\xd0\x04\xd3\x2c\xa7\x59\x4e\x5b\x2d\xa7\x55\x2d\xaa\x91\x88\x3a\x09\x27\xc4\x41\xb2\x6c\x86\x7a\x63\xb4\x93\x91\xc6\x6b\xf4\x3d\x9a\xfb\x98\xab\x22\x70\xd5\x83\x4b\x43\x49\xba\xa3\xb6\xe0\x5e\xcb\xd3\x0a\x19\x0d\x5a\x4b\xaf\x6b\x9a\x66\x58\x13\xe7\x0d\xa9\x90\x6c\xc0\x49\xe0\x7c\x89\x49\x28\xa9\x0f\x3b\xfb\x7b\x27\x27\xbb\xf3\xed\x9b\xcc\xcf\x15\x06\xde\xf5\xa1\xc1\x12\xe7\x4c\x23\x17\xad\x18\x9d\x9c\xb4\x66\xa3\xb3\x01\x70\xdb\xc1\x6a\x67\x97\xef\x51\xba\x44\x89\x6e\x68\x00\x68\xe7\x5a\xe3\xb1\xcd\xa1\xad\x19\xce\x66\x80\x99\x65\x32\xcb\x64\x5b\xc5\x64\xa5\xd4\x59\x23\x28\x3b\xe8\x58\x28\xb3\x50\xb6\x1e\x28\xcb\x06\x53\x6e\x9f\x53\x6d\x36\x9b\xf3\xb4\x45\xb4\x4c\xf2\x74\x44\x9b\x63\x66\x4b\x6a\x0d\x49\xed\xdc\x57\x71\xde\x92\x9a\x25\x35\x4b\x6a\xc9\x8d\x17\x4d\x6a\xc5\xec\x59\xe7\xb8\x01\xa8\xb5\x0f\x2c\xa8\x59\x50\x5b\x29\xa8\xd1\xd2\xe9\x3f\xce\x5c\x10\xc2\x71\xa3\xd8\x11\x7a\x47\x74\x8d\x5d\xe9\xdf\xa1\xf6\xfe\xfe\xe6\xd6\x3c\xeb\xa3\xd2\x26\x19\xe1\xfc\xf2\x16\xdd\x4a\xea\xd3\x3f\xf5\x41\x74\x74\x45\x24\xa0\x9d\xff\xb7\x88\xb0\xb9\x95\xb6\xb9\xdd\x81\x2c\x3a\x20\x8b\x0e\x9b\x47\x87\x52\x92\xa7\x11\x3b\x74\x2d\x3a\x58\x74\x58\x29\x3a\x0c\x98\x13\x40\x20\x24\x91\xc2\x21\xbe\xcf\x5c\xa7\x37\x96\x20\x36\xb4\x23\xea\x4c\xb5\x60\x4e\xca\x60\x9a\x7d\x99\xd1\xee\xb5\x6e\x87\x32\xdf\xa9\xbb\xc4\xa1\x61\x2c\x60\xb5\x16\x5b\x55\x22\xeb\x5a\x35\x70\xbd\xf6\x5c\xb8\x45\x6a\x09\x7b\x0e\x81\x44\xdb\x6c\xce\x5f\x80\x44\xeb\xb5\xe6\xf9\x36\x63\xef\x05\x04\x8c\x8f\xd1\xad\x50\xd1\xd1\xa2\xee\x3a\x51\x57\x7b\x8a\xcd\x88\xcd\x6a\xa7\x49\x14\xdf\x28\xd7\xe6\x86\xe0\x26\xf2\x5a\x07\x47\x0d\xd8\xb4\x73\x52\x03\x4e\x57\xf1\x79\x8a\x15\xa1\xe9\x53\xbf\x4f\x51\xc2\x50\x25\xf8\x87\x08\xb4\xf3\x0d\x11\xa8\x88\x83\x1d\x1a\xba\x1c\x88\x28\x2e\x62\xa9\x58\xcc\xe2\x5a\x5f\x54\x98\xb7\x7c\xb8\xcc\xa7\x25\x0c\x58\xac\xcd\x31\xab\xd1\x60\x7e\x9b\xe7\x1f\x2e\xdc\x0e\x48\x48\x56\xcb\xf4\xd2\x99\xd2\x59\x7f\x8f\xe1\x82\x86\xb1\x5c\x84\x0c\x96\x09\x2a\xfd\x6b\x0b\x66\x5b\x4b\x05\x5b\x43\x05\xcf\x3a\xdb\xd5\x88\x28\x0e\x6b\x00\x85\xcd\x76\xd9\x6c\xd7\x52\xd9\xae\x01\xe3\x2c\x96\xaa\x4b\xb6\xf8\xd4\x5f\xae\x9d\x6b\x3c\xdc\x57\xc7\x1e\x9b\x3d\xc3\x57\xc7\x12\xcf\xe4\xa8\xde\xcf\x0c\x5d\x15\x15\xb1\x29\x14\x7b\x2e\x6f\x1b\xc8\xee\x5b\x04\xa6\xdc\x78\xf4\x40\xb8\x9c\x46\xe9\x88\x9a\x26\xd2\x36\x92\x5f\x39\xec\x36\xa0\xa1\x4e\x9d\x53\x77\x33\xf3\x2b\xc5\x4c\x4a\xed\xaf\x7f\x72\x3a\x18\xca\xeb\xca\x2c\xba\xcd\xbc\x3c\x6f\x1a\x9a\x6c\x1d\x0e\x99\x07\x8e\x1b\xc5\xd5\x04\xb0\xab\xe2\xfa\x8f\x9f\x70\x2c\x6a\xe6\x5b\xe6\xac\xb9\xa8\xf2\x15\x70\x5e\x41\x05\xb7\x02\x38\xaa\xb5\x5b\x68\x29\xe2\x59\x42\x5f\x31\x16\x12\x82\xa7\x69\x5c\x5a\x95\xd3\x75\xd6\xd1\xeb\xcd\xda\xf4\xa2\x9e\x0f\xab\xd5\xea\xbd\xe7\x43\x1d\x9d\xce\xd7\xa4\xd3\xdf\x9f\x30\xe5\x5f\xfe\x12\xac\x2f\xd5\xbf\x94\xdd\x13\x2a\x57\xab\xe2\x6f\x72\x58\xcf\x1f\x7f\xda\x96\x64\xdc\xe5\x2d\xfa\xc0\x88\x87\x76\xda\xc1\xa2\xdd\x69\x16\x28\x2b\x7d\x71\xeb\x28\xcd\xd2\xe4\x96\xd0\xe4\x46\x72\x68\x8d\xa8\xf1\xe0\xe5\x7d\xab\xc1\xe2\xe1\xda\x17\xe6\xcc\x4f\x86\x2f\x5e\x96\x13\x92\xc8\x58\x38\x2e\xf3\x16\xad\xcc\x91\x01\x84\x12\xb5\xd0\xd7\xaf\xc8\x78\x08\x3d\x3e\xa2\x15\xaf\xd2\xcd\xfc\x5e\xc4\x0c\xcc\x30\x5a\xa3\x6e\x1c\xee\xed\xfd\xd5\xdd\xdb\x6b\xac\x66\x14\x55\x29\xb9\xe5\xcb\x7b\xbf\xdc\xdc\x5c\xa2\xb7\xba\xe7\xed\xd2\x9e\x45\x0b\xbb\xb4\xf7\x7c\xd9\xa2\x98\x90\xea\x1e\x36\x40\x8b\xce\x74\x65\x28\xcb\xf8\xe7\x53\x6b\x2f\xe1\xaf\xd4\x58\xd8\x58\x0d\x6c\xec\xe4\x7f\xe1\x0f\x41\xde\x33\x7e\xe7\x48\x4e\x42\x11\x50\x39\x77\x53\x70\xd5\xaf\xf9\xaf\xbf\xfb\xa1\x7a\x51\xaa\xbc\x8d\x72\xd9\xe5\xaa\x3f\x92\x53\x46\xab\xde\x45\x34\xc3\x02\x1c\x5c\xa0\xa3\xf9\xbb\xa2\x6b\x19\xa0\x51\x56\x6e\x49\xdb\x5c\x2d\x63\x9b\x6d\xe1\x9a\x5f\x13\x4b\xa3\xab\x3f\xbe\x4f\xfb\x76\xd1\xfa\x9c\x85\x9a\x4a\x4f\x36\xf6\x30\x47\x33\x76\x30\x5b\xa4\x79\x89\x48\xe3\x81\x4b\x03\xe2\x17\x3d\x76\x33\x69\x94\x66\xac\xb3\xda\x43\xfb\x2a\x16\xbf\x0d\x22\x39\x9e\x71\xef\xbf\xc0\xd9\x13\xb3\x2f\x6b\x58\xb7\xb3\x99\x99\x6d\x81\x25\x4d\x08\x81\x3e\x93\xe3\x5c\x40\x70\x33\x27\x0f\x83\x5a\xa8\x50\xfa\x1d\x07\xa8\x57\xf8\x4d\xdc\xef\x03\x9f\x45\x1d\x85\xc2\xe7\xc4\x1d\x82\x57\x6f\x13\xd1\xaa\x56\x08\xbd\x95\x53\xd8\x12\x96\xad\xb1\x61\xfb\x79\x81\xd0\x12\x87\xbc\x2c\x01\x55\x7a\x51\xad\x53\x5c\x96\x81\x5e\x22\x03\x6d\x84\x75\x8e\x0e\x9a\xb0\xce\x71\x0d\xd6\xb1\x19\x9c\x86\x50\xe2\xc7\x03\x1a\xfe\x0e\x5c\xa4\x3b\xd1\x8e\xf6\x8e\xf6\x3a\xf8\x05\x40\x4b\x96\xd5\x10\x92\x48\xe7\xc6\x8d\x9c\xf3\x98\xf3\xb7\x42\x92\x5e\xad\xf9\x75\x25\xc8\xa0\x5f\xe7\x53\x31\x5c\x03\x39\xd0\x5c\xee\x26\xd3\xf2\xed\x83\x74\x6e\xce\x2f\xb3\x33\x51\xf5\xff\xa2\xf2\x4a\xf4\x9d\x1c\xc5\x5a\x9a\x43\x16\x28\x2b\xe2\xa0\xa4\xea\xc2\x0e\x6d\xba\xf7\x26\x41\x29\xa3\xef\x56\xb3\xbd\xe8\xc9\x1d\xf6\x34\x7d\xb2\x37\x6c\xf9\x3e\xa2\x9b\xf3\x4b\xf3\x8f\xcc\x58\x2e\xb4\xcb\x7d\xdf\x08\x17\xbe\x4a\xab\x55\x63\x4e\x0d\x27\xa5\x76\x7b\x3f\xf1\x70\x2c\xdc\x21\x04\x64\x3a\x4f\x77\x3a\x89\x58\x8e\x93\x61\xe1\x11\x7e\x97\x94\x94\x64\x30\xed\x79\xe3\xab\xc0\xa9\xf1\x0c\x49\x2b\x02\xde\xc7\x93\xd7\x4a\x08\x22\x9f\x48\x1a\x0e\x26\xea\x60\x9f\x0a\x69\xb8\x51\x4e\x49\xff\x77\xe5\x80\x65\x6f\x9d\xb2\x57\xae\x2f\x25\x3c\xc8\xf2\x62\xc7\x28\xad\xe3\xa3\x21\x44\x08\x63\xe3\xf2\x73\x95\x9b\xd4\x3c\x8b\xa8\x93\x7d\x7d\x1a\xd2\x6c\xa3\xbd\x76\x1a\x27\x19\x3a\x95\x9b\x30\xb3\xb0\x69\x86\x06\x1a\xba\x7e\xec\xc1\x99\x5f\x05\x7e\x93\x93\x1c\x49\x30\x36\xab\x0a\x62\x5f\xd2\xf2\xc0\x4d\x07\x79\xc5\x03\x53\xb8\x9b\xc6\x44\x84\xf0\x97\x18\xf8\xb8\x5e\xeb\xa7\xbe\xd3\xce\x49\x07\xf0\x50\x30\x3e\x16\x77\x34\xba\xe5\xfe\xf5\x38\x74\xab\x72\x72\xe5\x08\x29\xc9\x40\x77\xb9\xf8\x77\xd6\x1e\x9c\xbf\x5b\x6a\xb8\x92\x55\x17\x4e\x43\x68\xa2\x99\x71\x23\x16\x70\x93\x54\x94\xcb\xee\xbd\xca\x1c\xe1\x31\x71\x55\xaa\x2d\x98\x3a\x69\x3f\x99\x61\x70\xc8\xee\x5b\xed\x6e\xf6\xc5\x6b\x2c\x59\x2a\xc4\xb9\xe7\x22\xea\xde\x69\x40\x4d\x9f\x4e\x2d\xe6\x64\x4b\x4b\x66\xd8\xc4\x5d\x63\x82\xc9\xc6\xa2\xbe\x38\x30\x2f\xda\xd3\xaf\x6c\xe3\xae\xf1\x73\xdb\xbc\x38\xd8\x37\xef\x18\xf3\x46\xc7\xf8\xb9\xed\x25\x9e\xff\x39\xd3\x81\x06\xe0\x18\x5e\xb1\xf0\x2d\x66\xc5\x47\x66\xc5\xe6\x5b\x3a\x87\xe6\x85\x71\x70\xf3\xd8\x33\xdb\x9b\xb5\x25\x67\xbe\x3f\x99\x86\x6e\xdc\xe3\xec\x5e\xa4\xde\x6b\xa4\x6c\x26\xc1\x45\x6f\xf6\x6d\xdd\x80\x90\xe8\x12\xb8\x0e\xe4\x0a\xf6\x2e\x58\x48\x25\xe3\x2a\xc8\xe8\x27\x63\xfd\x2b\x1e\xde\x4f\xfe\x6b\xb7\x13\xe9\x68\x12\xe7\x0e\x5f\x3d\xbe\xfa\x5f\x00\x00\x00\xff\xff\xa5\x9b\xdf\xab\xca\x92\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0xec, 0x9c, 0x65, 0xc2, 0x69, 0x3a, 0x4a, 0x72, 0x62, 0x11, 0x9d, 0x39, 0xc7, 0x45, 0x4f, 0xe1, 0x5d, 0x5e, 0xf6, 0xb5, 0xad, 0x8f, 0x5, 0x40, 0x17, 0x30, 0x2d, 0xd5, 0x24, 0xc6, 0x26}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _es_dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xf8\x30\x74\x40\x82\x5a\xce\x52\x04\x7e\x4b\xd7\xb5\x28\x90\xa2\xdd\x32\xec\x25\x08\x0c\x5a\x3c\x96\x38\x53\xa4\x40\x1e\x39\x76\x0b\xff\xf7\x81\xd4\x8d\xba\xb4\xc9\x8c\xac\x6b\x51\x3d\x45\xfa\x78\x48\x7e\xe7\xfa\x21\xd6\xa7\x13\x42\x28\x53\x4a\x23\x43\xa1\x95\xa5\x0b\xe2\x20\x42\xa8\x14\x16\xe9\x82\xdc\xfa\x37\x52\xa1\x7e\x65\x55\x08\x89\x6f\x15\x5d\x90\xe8\xb4\x45\x39\x43\x66\x75\x61\x62\xa0\x0b\x42\xcf\xce\xc8\x1b\xc3\xd6\x4c\x31\x72\x76\x46\x03\x33\x50\x6c\x25\x9d\x09\x9a\x02\x02\x3c\x15\x7c\x04\x15\xb1\x56\xbf\x6a\xa9\x8d\x3b\xd3\x24\x2b\xf6\x6c\x76\x4a\xe6\x51\x74\x4a\xe6\x17\x17\xa7\x24\xfa\x39\x3c\x5a\xb1\xcc\xdf\x7d\xd5\xba\x43\x7e\x22\x57\x12\x0c\xda\xd0\x0e\xf7\xb9\xb7\xe3\xcc\xa6\x2b\xcd\x0c\xa7\xd5\xda\xc1\xff\xbd\x3b\x21\xe4\xe0\xcc\x29\x70\x81\x3d\xb6\x34\x51\x80\x6f\x39\x5d\x10\x55\x48\x59\x22\x86\xe5\xe9\x9f\x5a\x4b\x14\x39\x5d\x90\x99\x07\x85\x33\x39\xf7\x8f\x52\xa8\x8d\x8b\xeb\xed\x9d\x7f\xcd\x99\x02\x69\x9b\xc8\xd6\x71\xa5\x4c\x0a\x66\xbd\xaf\x3e\x09\x87\x9a\x30\x5d\x31\x8f\xac\x99\xb4\x4d\x68\x3c\xf7\x6b\x50\x09\xa6\x2e\x0d\xb3\x0e\x0e\x63\xe6\x41\x72\x6a\xe6\x7e\x65\x2d\xa4\x0c\x33\xe9\x81\x37\x86\x71\x01\x0a\x6b\x77\xfc\x42\x62\x04\xff\xa0\xdb\x0a\x29\xd3\x46\x17\xe4\x32\x88\xed\xbd\x3b\x6b\x1e\x00\xbb\xf0\x0c\x42\xe8\xde\xbd\xd7\xf1\x6e\xce\x4e\x05\xe7\xa0\x6e\xc0\x88\x11\xf2\x3e\x96\xcd\x25\x54\x42\x02\x8a\x77\x69\xb0\x6d\xd2\xdf\x46\x08\x8d\x0b\x63\x4a\x2f\xfa\x2b\x19\xdb\x8d\xa1\x42\x8d\xa0\x36\xd5\xf7\xc3\xca\x44\x8d\x4c\x8e\x58\x6f\x99\x2c\x5a\x1f\x06\x8e\x4a\xa1\xfc\x6a\x78\x9a\x07\xef\x05\x2f\x73\xd9\xa0\x2e\x4d\x1f\xb4\x50\xf8\x4e\xfb\xd6\xf0\x40\x53\xc7\x54\xe7\xdd\x86\x6d\xf2\x7c\xdd\xd4\xdb\xe0\xf6\x1c\x4c\x0c\x0a\x59\x02\x83\x20\xe7\xee\x26\x97\xf6\xc2\xed\x9d\x77\xf1\x61\x4e\x0c\x28\x0e\x06\x7c\x5f\xae\xa5\xc6\x96\x97\xf5\x49\x7c\xbf\x05\x63\x04\x87\xb6\xf0\xcb\xc5\x9c\xc5\x30\x56\xb7\x16\x59\xbc\x19\xdc\x62\x11\xf2\x1c\xf8\xb5\x50\x43\xc2\xc8\x4c\x02\x68\x83\x11\x15\x0e\x29\xd7\xbd\xbb\xbc\x1c\x1b\x0c\xe1\x19\x48\x66\x51\xc4\x16\x98\x89\xd3\xa5\x50\x5c\xc4\x60\x97\xd5\xeb\x1a\x30\x4e\x97\x3e\xa3\xb7\x51\x76\x17\x0e\x95\xa6\xde\x5e\x6b\x93\x31\xac\xcf\xeb\x5a\x18\x58\xfb\x91\x40\xaf\x68\x03\x1f\xaa\xa7\xd6\x77\x4c\x0d\xd8\x54\x4b\xde\x8b\x09\x8a\x0c\x5e\x1b\x9d\xf5\x3b\xd3\xe1\x7f\x40\x52\x25\xb9\xb7\xe1\x26\x15\x6b\x1c\xee\x40\x3f\xac\xe8\xef\x05\x98\x3d\xe9\x10\xa5\xd8\x4c\xa8\x4f\x61\x6d\x33\x03\x7c\x58\xdd\x56\x1b\xec\x35\xae\x2f\xec\x65\x3d\x3b\x5d\x04\xb7\x82\x17\x4c\xd2\x41\x95\xd5\x36\x7e\x30\xb6\x04\x76\x6c\x27\x7a\xe5\xba\x2a\xe2\x4d\x99\xc3\xd0\x0f\xd7\x89\x55\xc9\x3b\x57\x47\x46\x7c\xcf\x7a\xbc\x43\x9b\x4e\x1c\x69\x84\x3d\xdb\xc1\x17\x4a\x67\xdd\x24\x5b\x69\xd5\x4b\xb6\x64\x2b\x90\x75\x90\x05\xd8\xe7\xb6\xb7\xae\x93\x97\xcc\x42\x57\x1d\x9b\x91\xd3\x65\xde\xcc\x9c\x01\x1c\xb8\xd4\x96\xd4\xe9\x43\x6c\x6d\xea\xf2\x36\x4a\x77\x70\xc3\x7f\xc8\x73\x50\xfa\xfb\x61\xea\x99\x14\xc9\xd8\xb4\xf5\xf8\x35\x6c\x1b\xd2\x1d\x6d\xae\x42\xf0\x23\x88\x66\x07\x38\x56\x35\x7f\x99\x54\x73\x52\xcd\xa7\x56\x4d\xa1\x38\xec\x84\x4a\xca\x87\x47\xeb\x66\xbd\xed\x11\xda\xf9\x99\x41\xf7\x6f\xb8\x71\x90\x80\xf0\x68\x72\xde\xdc\x57\xc6\x38\xbb\x97\xdf\x88\xb2\xbf\xd2\x71\x91\x81\x42\x4b\x6a\x4f\x9f\xd7\xd4\x27\xbd\x7f\x02\xbd\xff\x82\x82\xd2\xf7\xf9\x24\xf6\x93\xd8\x7f\x95\xff\x90\x2f\x8f\xd0\xfa\xf9\xa4\xf5\x93\xd6\x1f\xa5\xf5\xe3\x52\xca\x75\xdc\x9f\x76\x7d\xd1\x1c\x58\x1c\xa3\xe6\x9f\xbf\xbd\x12\x71\xee\xcd\x1f\x64\x42\x2a\xeb\xef\x4b\xc1\x03\xbe\x93\x64\x3f\xb5\x64\x7f\x4d\x1d\x9c\xf4\xfa\x07\xd2\xeb\xc1\x3f\xe7\xc7\x08\xf6\x8b\x49\xb0\x27\xc1\x7e\x42\xc1\xb6\xa8\x0d\x2c\xad\xf8\x08\xcb\xd5\x1e\xe1\x01\xf1\x76\x76\xdf\xf8\xcf\xd8\x37\xce\x21\x5e\xea\x24\xe9\xf0\x9d\xa4\xf2\x28\xa9\xe4\x10\x8f\x55\xc6\xa4\x96\xff\x87\x5a\x9e\x54\xc7\xba\xbe\x73\x2d\xe5\xbc\x8e\x66\x65\x6e\xa8\x8d\x53\xc8\xd8\x5f\x60\xac\xd0\xee\xec\xf9\xbc\x84\x71\x2f\xab\x6f\xd7\x66\x53\x5a\x22\x4b\x82\xaf\xcb\x08\x59\x2e\x19\x0a\x95\x0c\xbf\xe4\xb7\x1f\xb6\x7d\x21\x36\xeb\xeb\xb2\x6b\xa9\xd2\xf7\x67\xd1\x45\x56\x05\x9d\xa2\xae\x40\xda\xd9\x97\x8b\x78\xe3\x87\x64\xb5\xbb\x62\xbf\x14\x0a\xc1\x6c\x99\x0c\x0b\x91\x5e\xb4\xa5\xd6\xf8\xe6\x5f\xce\xc3\x97\x28\x6b\x9f\x2f\x82\xe7\x28\x7c\x39\x9f\x85\x2b\x41\x27\xce\x83\xe7\xa8\xfa\x96\xdf\x75\xf5\xa3\xf6\xc3\x96\x56\x01\xab\xc7\xcb\x6f\xe1\x14\x25\x99\x56\x02\xb5\xa9\x7f\xa0\xa4\x85\xd7\x68\xfa\xea\xf2\x3a\x7b\xf1\xf7\xe6\x5d\x15\xed\x6d\x93\x91\x68\x76\x72\xf8\x27\x00\x00\xff\xff\x22\xec\x09\x54\x3e\x21\x00\x00")

func es_dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_es_dashboard_dataJson,
		"es_dashboard_data.json",
	)
}

func es_dashboard_dataJson() (*asset, error) {
	bytes, err := es_dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "es_dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x46, 0xe9, 0xd1, 0x18, 0xcb, 0xff, 0x63, 0x5e, 0xd6, 0x30, 0x59, 0x59, 0x16, 0x1e, 0xc9, 0x1c, 0xa7, 0x6b, 0xe1, 0x2e, 0x3, 0x1b, 0x66, 0xeb, 0xb9, 0xfa, 0xec, 0xe6, 0x5f, 0xb2, 0x5a}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xbd\x4e\xc4\x30\x10\x84\xfb\x3c\x85\x15\x51\x51\xb8\x49\x4d\x45\x49\xc9\x03\xac\x36\xeb\x11\x58\xf9\x95\x77\x7d\x10\x9d\xee\xdd\x91\x92\xb8\xb8\x23\x84\xce\xd2\xcc\xf7\x79\x76\xca\x36\x67\x73\x75\x1c\xd5\x78\x14\x68\xed\xae\x95\x73\x17\xee\x33\xdc\x8b\xab\x9f\xae\xfc\xa5\x54\x52\xcf\xf3\x4c\x8a\x74\x41\xf2\xcf\xb7\xba\xba\x55\x55\x11\x84\xf6\xb5\xcf\x6a\x48\x87\x82\x14\x94\x64\xcb\x7d\x68\xcb\xf3\xde\xc0\x1f\x18\xed\x9f\xff\xfb\x89\x83\x41\x8d\xd6\xf2\xe3\x86\x01\x96\xa2\xe8\xfb\x3a\xf0\x5c\xb4\x57\xf7\x63\xee\x35\x73\x9a\xbe\x97\x73\x7c\xad\x1c\xc2\xe8\x59\x2d\xca\xc9\x86\xbd\xa1\xe0\x24\x9f\x14\xa6\x81\xe3\xe8\x71\x3c\x45\x9b\x36\x4b\x07\xdb\x44\xbf\x54\xda\xd0\x96\xfb\x52\x7c\xc4\xdf\xb0\xfc\xc1\x46\x1e\x88\x45\xa0\x4a\x1d\x16\xaf\x4d\x87\x65\xa5\x7f\x02\x00\x00\xff\xff\x3c\xc7\x94\x07\x13\x02\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0x33, 0x41, 0x76, 0x86, 0x79, 0xa8, 0x17, 0x9f, 0xd3, 0x29, 0x10, 0x3b, 0xf1, 0x6, 0x24, 0xeb, 0xa3, 0x90, 0xc0, 0x68, 0x2e, 0xfe, 0xd2, 0xec, 0x16, 0x3e, 0x79, 0xb7, 0xef, 0xa6, 0xb2}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcd\x8e\xd4\x30\x0c\xbe\xf7\x29\xac\x70\x85\x6a\x59\xb4\xfc\x1c\x7a\xe4\x29\x10\x8a\xdc\xd4\xdb\x8d\x36\x8d\x43\x9c\x74\x28\x68\xde\x1d\xb5\x9d\x11\x2d\x13\x4d\x2f\xe4\xe8\xef\x27\xf6\xa7\x6f\xc4\x68\xb1\x75\x04\xca\xb8\x2c\x89\xa2\xf6\x38\x90\x82\xdf\xd5\xb9\xaa\xfe\x82\x18\x82\xb6\x5e\x12\x7a\x43\xda\x70\xf6\xe9\x3e\x25\x4d\xa1\x60\xd2\x93\x4f\x87\x36\x7b\xd2\xc6\xe8\x0d\x7c\x75\x28\xc9\x1a\x21\x8c\xe6\x05\xae\x1a\xd9\xca\x49\x8e\x3e\xd8\x32\x8a\x6b\x92\xe8\x91\xa2\x58\xf6\x45\x28\x98\xd2\xd8\x44\xc2\x44\x3a\xb2\x2b\x1a\x52\x2b\x9a\x43\xb2\xec\x65\x86\x01\x3a\x7a\xc6\xec\x12\x34\xf0\xad\x02\x80\x65\x36\xbf\x91\x5d\x1e\xd6\xc5\xa0\x01\xd5\x87\x47\xb5\x47\xc4\xfe\x9a\x91\xf7\x0f\xcb\xf8\xfc\xb6\x02\xf8\xbe\xff\x2e\x44\xfe\x39\x1d\xdc\xd8\xb5\x47\x31\x6d\x19\xe4\x7b\xeb\x0f\x4c\x1c\x8a\x94\x18\xab\x76\x9b\x28\xc0\xe5\xba\x01\xc3\x2e\x89\x35\x03\x85\x39\x72\xc4\x77\xc3\x24\x3f\x9c\x5a\x6f\x6f\x40\x3d\xd5\x9f\xea\x65\xa4\x57\xbc\x7e\xac\x1f\x3e\xd4\x97\x74\xae\x9a\xc0\x92\xfa\x48\x8b\xb0\x01\xf5\xa5\xfe\x58\x7f\x9e\x19\xe7\x9b\xb5\xb2\x50\x2c\x36\xbd\x6b\x75\x40\x91\x13\xc7\xee\x06\x13\x79\xd1\x21\xb7\xce\x1a\xfd\x4a\xd3\x0d\x3c\x60\x4a\x14\x07\x96\xa4\x3b\x3e\x79\xc7\xd8\xe9\x1c\xdd\x3d\x9e\xb3\x86\xbc\x90\x7e\xb6\x85\xde\x2c\x06\x89\x8e\xec\x22\x73\xd2\xad\x63\xf3\xaa\x3b\x1a\xad\xa1\xff\xd3\xb0\xa7\x7f\x1a\xf6\x27\x00\x00\xff\xff\x4f\x42\x2e\xe6\x2a\x04\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0xa7, 0x46, 0xd8, 0x98, 0x87, 0x46, 0x7a, 0x69, 0xcc, 0x9, 0xbe, 0xea, 0x39, 0xa1, 0xd6, 0x9c, 0x39, 0xd5, 0x17, 0x0, 0x30, 0xd3, 0x4d, 0x39, 0x4d, 0x43, 0x4c, 0xa9, 0xc5, 0x1c, 0x53}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":             clusterTf,
	"dashboard.yaml":         dashboardYaml,
	"dashboard_data.json":    dashboard_dataJson,
	"datasource.yaml":        datasourceYaml,
	"es_dashboard_data.json": es_dashboard_dataJson,
	"outputs.tf":             outputsTf,
	"variables.tf":           variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":             &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":         &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json":    &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":        &bintree{datasourceYaml, map[string]*bintree{}},
	"es_dashboard_data.json": &bintree{es_dashboard_dataJson, map[string]*bintree{}},
	"outputs.tf":             &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":           &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
