// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (10.463kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (40.373kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (327B)
// assets/variables.tf (779B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xe3\x36\x12\xfe\xee\x5f\x31\xa7\x5d\xa0\xed\x61\x25\xd9\x49\x9a\x4d\x5a\xa4\x45\xef\x0d\x38\xa0\xbd\x16\xb8\x02\xf7\x61\x11\x08\x34\x39\x96\x08\x53\x24\x8f\xa4\x9c\x78\xf7\x72\xbf\xfd\x40\x4a\xb2\x65\x59\x72\xbc\xde\x4d\x77\x7b\xbb\xc9\x17\x63\x38\x33\x1c\x3e\x33\xf3\xf0\x45\xda\xa8\x15\x67\x68\x20\x22\x77\x36\x82\x37\x13\x00\x6d\xd4\x82\x0b\x84\x1b\x88\xca\x32\x16\x8a\x30\x87\xd6\x45\x13\x00\x83\x39\x57\x12\xfc\x48\x65\x63\x24\xd6\xc5\x67\x5e\xbe\x42\x63\xfd\xc0\x0d\x44\xff\xfd\x0e\xce\x92\x8b\x97\xd1\xe4\x61\x32\x31\x68\x55\x65\x28\x06\xdf\xd9\x12\xd7\x99\x26\xdc\x44\x10\x2d\x71\x5d\x4f\xe5\x65\x92\x94\x08\xc1\xe7\xf3\x37\x2b\x62\x12\x2a\x2a\xeb\xd0\x04\xf9\x43\xbc\xc4\x75\x30\xf2\x71\x55\x73\xc1\xa9\xf7\x03\x37\xe0\x23\xfc\xd2\xab\x5b\x5b\x64\xdb\x91\xaf\xf6\xe7\xe5\xd2\x3a\x22\x29\x46\x10\x11\xad\x33\x8b\x66\x85\xa6\x9e\xde\x91\xdc\xc2\x4d\xf8\x09\xf0\x0f\x1f\xc7\x48\x14\x44\xeb\xf8\xf9\x1b\xaa\x2a\xe9\x12\x2e\x19\xde\x3f\xf8\x80\x1e\x26\x13\x00\xaa\xa4\x44\xea\xfc\xf2\x6b\x3f\xcf\xe0\xd7\x02\x81\xe1\x82\x54\xc2\x41\x65\xd1\x84\x15\x2e\x94\x01\x55\x19\xf8\xe1\xa7\xbf\x07\x35\xb7\xd6\x61\x3a\x6b\x8b\x28\x08\xbc\x66\x40\x76\x5e\x49\x57\xd5\xb2\x42\x59\x07\x37\x60\x51\x2c\x92\x66\x91\x5c\xb7\x33\x93\x92\xc3\xf6\xef\x06\x22\x52\xf2\x78\xba\xa0\x67\x53\xc6\x66\x8c\x5c\x4c\x2f\x5f\x5e\x4d\xe7\x11\x3c\x83\xd9\x55\x32\xbd\x80\x1f\x7f\xfd\xe7\x04\xa0\x85\x23\x6b\x02\xf0\x8b\xf5\xb8\xec\xc8\x77\x53\x13\xbc\x77\x53\x98\x2c\x71\x9d\x70\x16\x56\x5f\x49\xd7\x89\x61\xcf\x5b\x50\xf0\x25\xa2\x69\x66\x91\x56\x86\xbb\x75\x96\x1b\x55\xe9\x8c\x33\x0f\xfe\xab\xb0\xd0\xe8\xf9\x1b\x3f\xc1\xae\x86\xf7\x94\x70\xf6\x10\xbd\x38\xac\x93\xe5\xca\x5a\x5e\xab\x4e\x00\x6e\x3d\x38\x6c\x2d\x49\xc9\x29\x44\x46\x29\x97\xcd\x85\xa2\xcb\x8c\xe1\x8a\xfb\x3a\xa8\xf3\xb4\x50\x26\x43\x42\x8b\x26\xea\x3d\xbd\xa0\x44\x95\x74\x28\x5d\x63\x02\xb0\x52\xa2\x2a\x31\xb3\xfc\xb5\xc7\x4e\x28\xb5\xac\xf4\x97\x7b\xa6\xc9\x8a\x88\x0a\x5f\x40\xd4\x51\x8f\x5e\x80\xac\x84\xf8\x6a\xd7\x51\x93\x84\x63\x1d\x79\xf5\x1d\x47\x0f\x6d\x31\x84\x3e\xf6\x4d\xe8\x5b\xd9\x37\x47\xbb\xcc\xa6\x15\x3a\xf9\x29\x89\x73\x68\x4a\x65\x5d\x26\x38\x45\x69\x31\xf3\x06\x41\x9b\xa1\x75\x5c\x12\xd7\x74\x73\x5a\xa8\x12\xd3\xba\x22\xd3\xad\x5d\xc7\x45\xdc\xb8\x88\x06\x03\x31\x58\x2a\x87\x31\xde\x23\x6d\xe3\xe1\x52\x70\x89\x9b\xc4\x03\x44\x77\x85\x67\x9b\x57\xf0\x07\x88\x17\x90\xae\x88\x49\x05\x9f\xa7\x54\xa8\x8a\xa5\x6d\x1d\xa5\x73\xa5\x5c\xbc\xe0\x92\xdb\x02\x19\xdc\x7e\x0b\x4c\x01\xd2\x42\xc1\x17\xff\x22\xdc\x71\x99\x87\x06\x0b\x46\x31\x97\xdc\x25\x49\xf2\xc5\xb7\x60\x05\xa2\x86\x99\xd7\x96\xd8\x94\x91\x9f\x31\x47\x07\x71\x2c\x55\x4c\x0b\xa4\xcb\x98\xa2\x71\x7c\xc1\x29\x71\x08\xf1\xbf\x7f\x86\x18\x0a\xe7\xb4\xfd\x26\x4d\xed\x79\x8c\x55\x7c\x87\xd6\xc5\xb3\x84\x94\xe4\xb5\x92\xe4\xce\x26\x54\x95\x29\xc3\x79\x62\xd4\xbc\xb2\x4e\xa3\xa1\xa8\x3d\x66\x09\x57\xe9\xc5\xec\xaf\x7f\xfb\xf3\xf5\xf5\x5f\x92\x5c\xe7\xf0\x1f\xb0\x15\x53\x40\xb4\xf3\x4c\x06\x84\x31\x88\xb7\x71\x6c\xc6\x42\x3c\x6b\xa8\x34\x23\x0e\x47\xc6\x03\x14\x42\x78\x3d\x6d\x54\x89\xae\xc0\xca\xc6\x52\x31\x8f\xaf\x56\xc6\xa1\xe9\xaf\xf0\x67\xe8\x24\x8a\x71\xeb\x12\x47\x4c\x92\xbf\x86\x9a\xe3\x3a\x85\xc0\xd4\x9d\xf4\x4c\x9f\x55\x46\x3c\x6c\xdd\x38\x62\xe0\xfe\xf5\x62\xc4\x4d\x2f\xd0\x72\xd5\xd1\x83\x54\x69\x97\xd6\x2c\x76\x1b\x6a\xe3\x10\x31\x97\xe8\x0c\xa7\xf6\x34\x72\x6e\x8c\xff\x6f\x18\x39\x72\x67\x89\x20\x26\x0f\x3d\x75\x0c\x0d\x9f\x4a\xaf\x0d\x70\x1b\x8a\xfd\x4c\x9c\x9f\xf9\xea\x89\xf9\xaa\xa7\x6b\xd7\xd6\x61\x49\x9d\x00\x94\x64\x2e\x70\x5c\x73\xc0\x2b\x61\x2c\x74\xa8\xe0\xf3\x85\x92\x8e\x2a\xb9\xe0\xf9\xac\x87\x5a\x0b\x0c\x13\x49\x6e\xc8\x82\x48\x12\xc0\x50\xd6\xa6\x06\x05\x12\x8b\x69\x23\xcf\x2e\x93\xcb\xe4\x2c\x23\x25\xbb\xbc\x48\x18\xce\x7b\x01\x30\xbd\xcc\x21\xe6\x70\x9c\xf6\x76\x61\x8c\x60\xa9\x64\x6c\xd0\xd3\xeb\x63\xcb\x6f\x9c\xc7\x0d\x0f\xf6\xb4\xd1\xf8\xd2\xee\x29\x81\x75\xc4\xb8\x63\x89\x56\x1b\x75\xbf\x3e\x8d\x66\x83\x69\x4d\xb2\x7d\xa6\xdb\xfd\x1b\xe5\xbd\x3d\xae\xeb\xdb\xf9\x49\xeb\x08\xfb\xa7\xd1\xdd\x73\xe6\x90\xdd\xfe\xa9\x13\xbe\x83\x19\x7c\x0f\x33\xf8\x06\xa6\x3e\x64\x6b\x15\xe5\xc4\x61\xb6\xe1\xed\x8c\x30\x66\xd0\xfa\xf5\x3b\x53\xe1\xa9\x3c\x1a\x42\xde\x9e\x3e\x3b\xa4\x3d\xca\xd7\x9f\x1a\xcb\x7e\xb8\x3d\xf9\xf7\xc0\xef\x4f\x77\x0e\x1c\xb3\x94\x39\x97\xf7\xef\x87\xb3\x86\x5c\x99\x32\x60\x87\x8e\xa6\x61\x38\xb5\xdc\xa1\x8d\x6b\x0b\x96\x36\x69\xef\x19\x09\x09\xf1\xc2\xee\x5b\x91\x15\xe1\xc2\x1b\xa6\xdd\xe3\xe5\x98\xef\xad\x4e\x8f\x13\x7b\xa4\x68\x98\xcd\x5a\x82\xeb\x10\x64\x5f\xd4\xbc\x89\x1c\xe0\x9f\xba\x3f\xd9\x7c\xff\xce\xcb\x19\x4a\xbf\x4f\xa3\x19\xe2\xc8\x21\x8e\x65\xf3\x81\x67\x86\x4d\x48\xfb\xee\x6a\x7e\xe9\x2c\xc5\xc7\xd1\xfe\x0c\x17\xf4\x6d\x50\x82\x58\xfb\x58\xe0\x5e\x67\x02\x80\x1e\xd8\x3e\x3d\x8f\x19\xd5\xca\x9e\x60\xb5\x16\xeb\x8c\x97\x25\x32\x4f\xb3\x62\xdd\xb5\x6a\xf8\x95\x54\x4e\x65\x25\x97\xca\x64\xcd\xa3\x51\x56\xe9\xdc\x10\xe6\x3b\x70\x41\x84\xc5\xfd\xed\xab\xb3\xbc\x08\xa2\xed\x02\x9b\xcc\x0c\xa0\x33\x8a\xae\x87\x93\x11\x47\xe6\xc4\x62\xe7\x58\x3d\x62\x50\xeb\x97\x24\x48\x36\x14\xb5\x83\x42\x2b\xdd\xea\x69\x62\xed\x9d\x32\x6c\x57\xaf\x95\x4e\x00\xec\x92\xeb\x6c\xc1\x25\x11\x99\x95\x44\xdb\x42\xb9\x0e\x3e\x03\x18\x6e\x06\x87\xd2\x72\x20\x1f\xf5\x8f\x16\xe7\x9e\xfa\xee\xe0\xab\x61\x27\xb7\x87\xaf\x16\xc3\xbb\x21\x9b\x87\xad\xf0\xf6\xe0\x39\xa4\x7d\x55\xcc\x48\x8e\xd2\xbd\xed\x6b\x9c\xb7\x39\xfa\x3d\xee\x37\xbb\xd6\x8d\x3d\xae\xf9\x68\xdf\xe7\xf3\xda\xae\xbf\x9a\x6c\x4e\xc8\x53\xf0\xd3\xa4\xea\x13\x3c\x91\x7c\xda\xe7\x82\xf6\x7d\xc8\x95\x7a\xf7\x4d\x28\x3c\x02\x85\xce\x7c\xe4\x49\x68\x6b\xb9\x1d\xdb\x79\x01\x0a\x5f\x0e\x62\xef\x2a\x96\xf9\x1f\xc7\x06\xb6\xc6\xa6\xec\xfa\x3c\x74\x9f\xd9\x2d\xe4\xfa\x5d\xbf\x4e\x5b\x87\xd2\x0f\x3d\xe5\xb7\x0e\xe2\xda\xc1\x24\xbc\x7b\x52\xc3\x75\xfb\xee\xf9\x83\xd6\xd0\x2a\x41\x50\x0a\x69\x6b\x59\xab\xdd\x74\x60\x60\x82\x68\x12\x78\x20\x0f\xf7\x8a\xa6\x71\x8c\x2a\x33\x9f\x81\x10\xd5\xd9\x59\x4d\x4b\xaa\x15\x75\x84\xda\x28\xa7\xa8\x12\x4d\xfc\x8e\xea\x1a\x08\xca\x99\xa9\xeb\xbc\x6e\xe8\x69\x12\xfe\xd3\x69\x74\xdb\x5c\xc8\x0e\xcd\x78\x35\xbd\xfc\x7a\x60\xce\x8d\xf8\xfd\xcf\x1a\x9c\xbf\xec\xcd\xd9\x11\x6e\x67\xec\xce\xf7\x0c\x7e\x22\xeb\x39\x82\x41\xeb\x0c\xa7\x0e\x94\x14\xeb\xe0\x15\x7e\xd9\x54\x34\x34\xd7\xde\xef\x1b\x93\x3f\x55\x0e\x0a\x22\xd9\x1a\xea\xfe\x74\x64\xe9\xbb\xac\xf9\x88\x65\xe1\x8e\xbb\x42\x55\x0e\x4a\x22\x2b\x22\xc4\x1a\xac\x2d\x62\xaf\xc1\xa5\x53\xe0\x0a\x6c\x1c\x26\xef\x0c\x74\x0d\xdf\xf5\x6c\x3a\xdd\x03\xbb\x37\xd4\x05\xbc\x0f\xfa\x6e\x71\x1f\xe0\xef\xee\xeb\x5d\x1b\x1c\x8e\x17\xc1\x7e\x50\xad\xac\x97\xfe\x78\x76\x5c\xf6\x8f\x6a\xcb\xe6\xd3\xcc\x3b\x74\x67\xdc\x78\x38\xba\x49\x6b\xfd\x23\x7b\xf5\xf1\x7c\x5e\x4d\x5f\x5e\x8c\xe4\x73\x33\x34\x90\xcf\x8a\xbd\x6d\x3e\xdb\x8f\x5d\xc7\x16\xda\x89\x81\xbd\x7d\xa1\x9d\x10\xd8\x3e\xdd\xf4\x86\x3e\x14\x62\xa7\x04\xf6\xee\x88\xfd\xc6\x6d\xf9\x58\x5f\xb2\x79\xa7\x1f\xc7\x6f\xa2\xfd\x5d\xf2\x08\x84\xcf\xcf\xa7\x97\x23\x08\x6f\x86\x9e\x00\xe1\x23\x22\xfb\xfa\xe2\x7c\x7f\xdf\xed\x0d\x3d\x41\x64\x47\x90\xe4\xf6\x02\x74\x0c\x3f\x86\xab\xcf\xa3\xe7\x97\x1f\x5b\xf2\x0b\xfa\xbf\xab\xa3\xcc\xc1\x53\xc5\xc5\x74\x6f\x73\xed\x08\x87\x4f\x15\xfe\x4e\xd7\x62\xda\x5c\xa4\x8f\xaa\x98\x0f\xb8\x91\x7f\x74\x3b\x79\xfb\x89\xf5\x51\xda\x68\x14\xdf\x8e\x3b\x3e\xc4\x99\xf8\x7a\x7a\x3d\x84\xe3\x46\xfc\x34\xb3\x9e\xef\xd7\xef\x8e\xf8\xf4\x59\x3f\xae\x7a\xa9\xbf\x15\x1d\x4b\x6a\x41\xfb\x71\x52\xfb\xc5\xab\x3d\x19\x97\x5d\x0d\xc1\x74\xf5\x6e\x69\xf9\xb8\xe8\xf3\x53\x24\xb6\xff\x05\x00\x00\xff\xff\x25\x99\xf8\x63\xdf\x28\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x5d, 0x68, 0xc3, 0xaa, 0x14, 0xa7, 0xeb, 0xc5, 0x5c, 0xf7, 0x6, 0x28, 0x9f, 0x7b, 0x22, 0xb1, 0x92, 0x0, 0xa1, 0x16, 0x8e, 0xfe, 0xb4, 0xda, 0xf5, 0x14, 0x55, 0xf3, 0xa1, 0xba, 0x3d}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\x38\xf2\xc0\xdf\xf7\x53\x10\x44\xff\x7f\x24\x45\xd2\x8d\x9d\x3a\xbb\x29\xb0\x38\xa4\xe9\x76\xaf\x40\xbb\x9b\x4b\xd2\xbd\xc5\xb5\x81\x40\x4b\x63\x9b\x08\x25\xaa\x24\x95\x87\xed\x65\x3f\xfb\x41\xd4\x13\xf5\x60\x5b\x56\xec\xd8\x69\xb8\x2f\xb6\xf1\x88\x92\x38\xc3\x19\xce\x4f\x43\x5a\xfe\xf6\x0c\x21\x4c\x82\x80\x2b\xa2\x28\x0f\x24\x7e\x8d\x62\x11\x42\x98\x51\xa9\xf0\x6b\xf4\x59\x7f\x42\xa9\x54\x1f\x19\x46\x94\xa9\xf7\x01\x7e\x8d\x7a\x3b\x85\xd4\x23\x8a\x48\x1e\x09\x17\xf0\x6b\x84\x77\x77\xd1\xaf\x82\x8c\x48\x40\xd0\xee\x2e\x36\x9a\x41\x40\x86\x2c\x6e\xa2\x44\x04\x86\x7c\x42\xbd\x06\x29\x75\x79\x70\xcc\x19\x17\xf1\x35\xc5\x78\x48\xb6\xf6\x76\x50\xbf\xd7\xdb\x41\xfd\xc1\x60\x07\xf5\xb6\xcd\x4b\x07\xc4\xd7\xf7\x3e\x2a\xd4\x41\xff\x8f\x8e\x18\x08\x25\xcd\x76\xea\x36\xd4\xed\x3c\x22\x27\x43\x4e\x84\x87\xd3\x63\x77\xfa\xdf\x8b\x67\x08\xdd\xc5\xcd\x31\x78\x54\x55\x7a\x8b\xc7\x01\xa8\xf7\x1e\x7e\x8d\xfa\x83\x57\xfd\x44\x22\x48\x38\x39\xe7\x9c\x29\x1a\x66\x36\xc1\x54\x37\x49\xfe\x54\x20\x74\x6f\xe2\x83\x83\x9f\x0e\xf7\x07\x87\xaf\xfa\xbd\x83\xc3\x03\x7d\x94\xd1\xe0\x32\xb6\xfa\xe7\x0b\xfd\x31\x24\x01\x30\x99\xdb\x3d\xb3\x3a\x26\x8c\x12\xa9\x2d\xa1\x87\xe8\x2e\x53\x07\x0f\x89\x96\x8c\x08\x93\xb9\xe1\xb4\x66\x1f\x20\x18\xab\x49\x7c\xcf\xbd\x92\x1c\x9a\x9a\x1b\x43\x17\x44\x8c\xe5\x47\x46\x94\x31\x73\x9c\xb5\xe0\x57\x41\x3c\x0a\x41\xec\x1d\xc5\xa5\xc7\x82\x7a\x27\xbc\xf0\x9f\x64\x50\xf1\x6b\x74\x68\x58\xfe\x3a\xbe\x56\xdf\x10\xdc\x98\xd7\x40\x08\xdf\xc6\x9f\xb3\xd1\xc8\xaf\x3d\xa1\x9e\x07\xc1\x19\x08\xda\xd0\x79\x6d\xe9\x5e\x7e\x17\xcc\x60\x0c\x81\x57\xee\x07\xb9\x1a\x57\xcf\x43\x08\xbb\x91\x10\x89\x1a\xd5\x23\x3e\xb9\x69\x92\xd2\xa0\x41\x2a\x27\xfc\xba\x41\xac\xb8\x22\xac\x41\x7e\x45\x58\x54\x68\x51\x53\x95\xd1\x40\x1f\x35\xe3\x40\x0b\xaf\xa9\x97\x8c\x66\x2e\x8d\x07\xea\x84\xd3\x40\x7d\xe4\x3a\x74\xb4\x20\xf7\x73\xcc\xc3\x72\x40\xe7\x23\xfd\x21\xf7\xb8\xda\xdd\x43\x10\x2e\x04\x8a\x8c\xa1\x66\xe6\x30\xbe\x53\x3c\xf0\x91\xcc\x3c\xbb\x90\xd7\x47\x45\x40\xe0\x81\x00\x1d\xb7\x23\xc6\x55\xd1\x2f\xa9\x87\xf1\xf7\x2b\x10\x82\x7a\x50\xb8\x7e\x72\x30\x24\x2e\x34\x79\xae\x54\xc4\xbd\xac\xdd\x45\x2a\x08\x43\xf0\x3e\xd0\xa0\xde\x61\x45\xc4\x18\x94\x34\xa6\x30\x73\x12\x8b\xa3\xfb\x26\xd4\xdd\x93\x91\xbf\x45\x03\x57\x00\x91\xb0\xe5\x13\xa5\x40\xf8\x5c\x2a\xc7\x1b\x3a\x52\x71\x01\x8e\xa2\x3e\x38\x2e\x8f\x02\xf5\xcd\x07\x35\xe1\xde\xcf\x7f\x7f\xc1\xcf\x15\x0f\xe3\x26\x5a\xfe\x05\xdf\x7d\x7e\xee\x38\x82\x04\x63\xb8\xd8\xde\x46\xc3\x5b\xb4\x95\x34\x35\x27\xa8\xdc\x39\xdf\x71\xe1\x93\xd8\xef\xf0\xb7\xf4\x8a\x77\x77\xe5\x76\x02\x46\x7a\x92\xc1\x47\x38\x17\xdf\xa5\x7f\x15\xd6\x52\x13\x01\x72\xc2\x99\x57\xb1\x62\xdc\xe1\x77\x82\xfb\xd5\x68\x8e\xe5\xa7\x30\x4e\xdd\xa2\x72\xc2\xd9\x84\x8e\x54\xfd\x0c\xa5\xa7\x3f\x7c\xce\x43\x74\x16\x5b\x03\x1d\x13\xc6\x64\xac\xe1\x71\xac\x79\x31\xae\x2a\x9f\x01\xbf\x99\xc1\x41\x04\x78\xf5\x79\x5d\x72\xa1\x4c\x37\xca\x02\xc3\xc9\xe6\x66\x1a\x78\xf4\x8a\x7a\x11\x61\xb8\xe6\xa5\x59\x1b\x3d\xf1\x16\x1d\xb8\x21\x37\xb4\xe2\xee\xc3\xc8\xbd\x4c\x7c\xc0\xd4\x2a\x0e\xe5\x34\x64\x62\xc5\x1b\x52\x48\xa5\x75\x1a\xe2\x15\x1d\xf2\x48\x6e\x08\xa4\x5b\x72\x03\x33\x5c\x6f\x94\x3b\x80\x9c\xc4\x96\x28\xfb\x08\x19\x02\xab\x75\x22\x3e\xc0\xc7\x6f\x88\x84\x72\xde\xcd\x67\xab\x5a\xf3\x64\xba\xaa\x89\x0d\x65\x0a\xd7\xda\xd9\xd8\x7e\x9a\xd3\x64\x53\x0c\xdc\xd6\x47\x9d\x30\x3a\x6e\x9a\xa9\xb5\xfc\x03\x5c\xe5\xbd\x2e\xa5\xfd\xd4\x06\x4f\x21\xe3\x96\x04\x9d\x53\xee\x8f\x6b\x4b\xb9\x82\x8e\x27\xea\x2c\x01\x46\x9b\x8e\x9f\x48\x3a\x26\x21\x35\x33\xf1\x84\x04\x1e\x03\x91\xa7\xe2\xf8\xf0\xd4\x5c\x9c\x36\xae\x24\x63\x1a\x28\x10\x57\x84\xbd\x23\xae\xd2\x4f\x18\xbd\x39\xb9\x3a\xbd\xcc\xa3\x48\xd6\x47\x27\xef\x6d\xaa\x2e\x75\xd8\xa6\x6a\x9b\xaa\x1f\x5d\xaa\xae\x3e\x1c\x1f\x76\xc8\xd4\xfb\x7b\xf6\xe1\xd8\x66\xe3\x55\x3e\x1c\xcb\xc8\xef\xf0\x68\x8c\x7e\x40\xeb\x7d\xf6\x46\x49\x3b\xf4\x28\x12\x7a\xe5\xe9\xfb\x6d\x94\x16\x15\x6d\x56\xbf\x5f\x56\xb7\x19\xdd\x66\xf4\x87\xcc\xe8\xb5\x87\xef\x4e\x29\xbd\xb7\xee\x94\x5e\x89\x45\x9b\xd1\x1f\x7b\x46\xcf\x9f\xaf\xe3\x64\xde\xe9\xe9\x7a\x46\x3e\x5f\xfe\xc3\x7b\x43\x36\x4f\x1b\x3e\x8e\x74\x5e\x7a\x3e\xb7\xc9\xdc\x26\x73\x9b\xcc\x13\xe1\x7d\x92\x39\x66\x9c\x78\x0a\xa4\xda\x4d\x45\x79\xb3\x86\xa5\xfc\x44\x2e\x84\x2e\xfd\x95\x2f\xba\x8e\x27\xfb\xde\x4f\x1d\x38\x60\x7d\x35\xf8\x75\x61\x40\x79\xbf\x04\x6a\x24\x03\x97\x07\x01\xb8\x0a\xbc\x07\xc2\x83\xc1\x77\x84\x07\x82\xa8\x52\xe6\x0e\xe3\xff\xe9\x61\xfd\x46\x03\xa9\x48\xe0\x82\x4e\xdb\x12\xc4\x15\x88\x38\x5f\xf7\xfc\x8b\x4a\x6e\x2e\x26\xbb\x04\x28\x12\x07\x2e\x35\x59\xb8\xf6\x9e\xdd\xbc\x9a\xdc\x7d\x50\x82\xba\x71\x9b\xc6\x4e\x4f\x25\x81\xf2\x0c\xa9\x20\x4e\xb5\x83\xb9\xd3\xb8\x09\x51\xdd\x2c\xb5\x72\x53\x9d\xd7\xd5\xee\x66\xa3\x37\xf3\x6c\xb4\x4e\x84\x3a\xe1\x52\x49\x14\x82\x40\x67\xe0\xf2\xc0\x9b\x43\x4e\xbe\x3c\x05\xc9\x59\x94\x6e\xc3\xaa\x4f\x66\x33\xc1\x6a\xcf\x82\xd5\x74\x68\xc1\xe5\xc5\x25\xf4\x64\xf9\xaa\xdc\x4f\x8b\x57\xeb\xc5\xab\x5a\x99\xa5\x13\x5f\xf5\xd6\xbe\x74\x62\x01\xeb\x3b\x07\xac\x89\x52\xa1\x23\xe0\x6b\x04\x52\xc9\x4d\x20\x2d\x94\xdd\xbd\x56\x48\x69\xe4\x08\xdd\x7f\x1d\xe7\xf2\xc1\x91\x6b\x41\xdb\x6d\x0c\x7b\xb5\xb5\xd9\x46\x23\xd8\x69\x6a\x77\x4b\x61\x96\xc2\x16\xe9\xaa\xa5\xb0\xa7\x43\x61\xd5\x22\x57\xff\xc7\x0e\x10\x76\x60\x19\xcc\x32\xd8\x52\x19\xac\x9a\x8a\xaf\x61\x28\xb9\x9e\xfd\x67\x42\xc4\x86\x55\xb9\x1a\xbb\xbe\x42\xfa\xea\x68\xb5\x75\x50\xd7\xe3\x20\xa8\xdf\x22\x7f\x08\x02\xf1\x11\x3a\xce\x82\x19\xbd\x85\x2b\xea\x82\x44\x5b\xff\x86\xe1\x99\xb6\x6e\x76\x30\xbe\xc3\xb6\x25\x2c\x4b\x58\x96\xb0\x2c\x61\x21\x34\xad\xce\xd5\x09\xb1\x9e\xde\x76\x22\x8b\x58\x0f\x86\x58\xde\xd0\xf1\x89\x54\x20\x1c\xb7\xc8\x64\x8f\x09\xb4\x66\x28\xf0\x30\xb8\xb5\xb8\x05\x37\xa6\xd4\xb5\xb8\xed\x1e\x17\xb2\xe9\xb7\x4c\x28\x8e\x3e\x6a\x25\xd1\x5b\xa2\xc8\x30\x4e\xb5\x96\xd3\x2c\xa7\x59\x4e\xb3\x9c\x86\xa6\x54\xc2\xf6\x0f\xba\x60\x9a\xe5\x34\xcb\x69\xcb\xe5\xb4\x36\xdb\xc1\x93\xc5\x33\xbd\x19\x3b\xa3\x8d\xf6\x9b\xbd\x9b\x4e\x5e\x18\x4e\x26\x8d\x5f\xf6\x5f\x9c\x5a\x04\x51\xd0\x02\x5a\x4c\xe5\x57\x44\x78\x13\x2a\x15\x1f\x0b\xe2\x3b\x5f\x23\x12\x28\xca\x60\x6b\xef\xe5\xe1\x0e\x6a\x5a\xe6\xcc\xbb\x93\x24\xe6\x06\x8b\xee\x30\xe8\xb0\xba\x39\xd5\xaa\x55\xb3\x1d\xee\x85\xbb\xd3\x99\xd9\x20\xb7\xcd\x80\xb4\x8f\x40\x02\xbd\xc1\x3e\x5d\xa2\x44\xe7\x26\xaf\x58\x22\x7b\xc0\xad\xf7\xd8\x82\x98\x05\xb1\x8d\x02\xb1\x5a\xc1\xac\x13\x89\x0d\x2c\x88\x59\x10\x5b\x2a\x88\x8d\xb9\xe3\x83\x2f\x15\x51\xd2\x21\x8c\x71\xd7\x19\xde\x2a\x90\x6b\xaa\x90\x1d\xc5\x3d\x98\x91\xf3\x0b\x6c\x9a\xd2\xef\x95\x96\xc7\xcc\x7b\xea\x21\x71\x68\x10\x49\x58\xae\xc5\x96\xc5\x9c\x67\x71\x07\x57\x6b\xcf\xb9\x25\xb3\x05\xec\x39\x01\x12\x6e\xb2\x39\xff\x09\x24\x5c\xad\x35\x8f\x37\xb9\x00\xf9\x11\x7c\x2e\x6e\xd1\x27\x19\xcf\x8e\x16\x69\x57\x89\xb4\xda\x53\x2c\xd6\xda\xef\x93\x3e\x0a\xae\xad\x16\x18\x5f\x0d\x3a\x60\x6d\x6f\xdf\x72\xad\xe5\xda\xa5\x72\x2d\xad\x7d\x4f\x52\x70\x17\xa4\x74\xdc\x30\x72\xa4\xde\x36\xde\x62\xeb\xfe\x0b\xd4\xdb\xdb\x5b\xdf\xb2\x70\x7b\x72\x5d\x27\x1b\x1c\x9f\x7c\x42\x9f\x14\x65\xf4\x2f\xfd\x36\x09\x74\x4a\x14\xa0\xad\xff\xb3\x9b\xc6\xd6\xb7\x18\x39\x73\x38\xd0\x93\x65\x07\x5b\x12\xdb\x24\x74\xa8\x95\xc4\x3a\xb1\xc3\x2b\x8b\x0e\x16\x1d\x96\x8a\x0e\x63\xee\x8c\xb9\xe0\x91\x8a\x87\x64\x83\xb7\x8a\x95\xfa\xb9\xc2\x1d\x61\x6d\xec\xb1\xde\x8d\x5f\x6d\x2c\xf1\x48\xf6\x77\xfd\xca\xd1\x69\x55\x11\xcb\x4f\x76\x33\x97\x05\x26\xb4\x12\x60\x2a\xc5\xa3\x07\xd2\x15\x34\x4c\x23\xaa\xa8\xb6\xad\xa5\x92\x32\x78\xd5\x81\x86\xfa\x6d\xb6\x6a\x55\xa2\xa9\xa0\xa1\xca\x81\xc4\x65\xaa\x42\xed\x30\x15\x61\x8b\x9f\xc6\x58\x14\x93\x0c\xd7\xb3\x2f\xee\xcc\x0e\xae\x69\xa7\x96\xae\xa5\x04\xdc\x03\xc7\x0d\xa3\x66\x02\xd8\x89\xe7\xf5\x9f\xbf\xe0\x48\x1a\x2f\x3e\x98\xb5\xfd\x6a\xc6\xc2\x4c\xdc\xbe\x01\xce\x1b\xa8\xe0\x93\x04\x81\x5a\xd5\x4f\x16\x22\x9e\x05\xf4\x95\xb7\x52\x81\x7f\x3f\x8d\x6b\x4b\x77\xfa\x9a\x6d\xf4\x7a\xb3\x32\xbd\xa8\xc7\x60\xb9\x5a\xbd\xf7\x18\xb4\xd1\xe9\x78\x45\x3a\xfd\xfd\x05\x53\xf1\xf5\xbf\x92\x8f\x54\xfc\x2f\xe5\xd7\x84\xaa\xe5\xaa\xf8\xbb\x9a\xb4\xf3\xc7\xb7\x1b\xb2\x65\xed\xf8\xe4\x13\xfa\xc0\x89\x87\xb6\x7a\xfe\xbc\x7a\x9d\x05\xca\x46\x5f\xdc\x38\x4a\xb3\x34\xb9\x31\x34\xe9\x52\x9f\xb0\xaa\xcb\xae\xa7\xb6\xd6\x8d\x26\x97\xbb\x2e\x17\xcf\xa3\xbf\xf8\xa1\xba\x9d\x72\xec\x3f\x20\xf8\x3d\x6b\x72\x2b\x00\xd1\x7b\xd7\xeb\x2c\x89\x2e\x87\x44\x93\x2c\xef\xeb\x9d\x28\xce\x47\xf0\xcf\x67\xac\xde\xa1\x5d\x54\x69\xfd\x4e\x00\xb4\x6b\xfc\x26\x1a\x8d\x40\x4c\xab\x74\x55\x1a\x1f\x13\x77\x02\x5e\xbb\xaa\xd8\xb2\x90\xd7\x43\xb3\x5e\x97\xd6\x05\x7a\x17\xb0\x2c\x9e\xd9\x3b\x7d\x66\xbb\xee\x6d\xce\xb6\xfd\xd6\x5b\x9b\x2c\x02\x35\x7a\x51\xab\xbd\x4b\x16\x81\x9e\xc8\xee\xa5\x07\x67\x9d\x6a\xe1\xec\x60\xbf\x0b\xea\x14\x2b\x58\xd9\xca\x44\xb9\x04\xd8\xa1\x9c\xd6\x0c\x32\x6d\xea\x69\xb6\x66\xf6\xb8\x49\xa5\x5c\x98\x08\x40\x5d\x73\x71\xe9\x28\x41\x02\xe9\x53\x35\x73\x87\x73\x53\x39\x62\xfb\xc5\x4f\xcd\x8b\x67\xf5\x3d\xa1\x8b\x2e\xab\xfd\x99\xec\x0f\x59\x36\x50\x4c\xb1\x80\x00\x17\xe8\xd5\xec\x2d\xde\xad\x0c\xd0\x09\xa5\x16\xb4\xcd\xe9\x22\xb6\xd9\x14\x9a\xf9\x2d\xb1\x34\x3a\xfd\xf3\x87\x74\x6c\xe7\xad\x23\x5a\xa8\x69\xf4\x64\x03\x6a\x42\x8b\x34\x16\x69\x1e\x14\x69\x6a\xe5\x9b\x6e\x4c\xd3\xe6\x77\x7a\x2c\xbd\x74\xa4\x17\x16\x8d\x69\xf0\x07\x08\x99\xae\x16\x1f\xbc\x3c\x78\xd9\xc7\x4f\x80\x6e\xb2\x8c\x2e\x15\x51\xce\xb9\x1b\x3a\xc7\x91\x10\xbf\x48\x45\x86\xad\x4a\x06\x4b\xa9\x82\xe8\xdb\x31\x2a\x27\x2b\x28\x86\xd0\x12\xb7\x64\x5a\xfe\x72\xa3\x9c\xf3\xe3\x93\x73\xea\x03\x8f\xd4\x4c\x78\x59\x81\xbe\xd9\x6d\x17\x87\x91\x39\xca\xc6\x9c\xb6\xf0\x80\x76\x5d\x1f\x4b\xaa\x43\xc6\xd8\x2d\x67\x09\xf0\xde\x03\x76\x3f\x7d\xb2\x3b\x6c\xf8\x5a\xdf\xf9\xf1\x89\xf9\xf6\x30\x4b\x85\x76\xb5\xef\x3b\xe1\xc2\x67\xe9\x65\xe3\x98\x8b\xc3\x29\x56\xbb\xb7\x97\x78\x38\x96\xee\x04\x7c\x52\xe4\xe9\x7e\x3f\x11\xab\xdb\x24\x2c\x3c\x22\x2e\x93\x96\x8a\x8c\x8b\x91\x37\xde\xcb\x93\x1a\xcf\x90\xec\x86\x20\x46\x38\xbf\xad\x02\x3f\x64\x44\xd1\x60\x9c\xab\x83\x19\x95\xca\x70\xa3\x92\x92\xec\x8f\xd8\x01\xeb\xde\x5a\xb0\x57\x69\x2c\x15\xdc\xa8\xfa\x83\xfe\x55\x7a\x8d\xcf\x86\x10\x21\x8c\x8d\x8f\x17\x4d\x6e\xd2\xf2\xfb\x02\x7a\xfd\x72\x44\x03\x9a\x6d\x86\xd3\x4e\xe3\x24\xa1\xd3\xb8\x51\x22\x9b\x36\xcd\xa9\x81\x06\x2e\x8b\x3c\x38\x62\x4d\xe0\x97\xef\xb6\x4c\x26\x63\xf3\x52\x7e\xc4\x14\xad\x07\x6e\x1a\xe4\x0d\x27\x14\x70\x57\xcc\x89\x08\xe1\xaf\x11\x88\xdb\x76\xbd\x2f\x7c\xa7\x57\x92\x8e\xe1\xa6\x62\x7c\x2c\x2f\x69\xf8\x49\xb0\xb3\xdb\xc0\x6d\x5a\x66\xac\xcf\x90\x8a\x8c\xf5\x90\xcb\x7f\xa5\xfd\xa9\x0c\x7c\xe6\x79\x17\x15\xd9\xb4\xe6\xe9\x34\x9a\x68\x67\x1c\x88\x24\x9c\x27\x97\x6a\x5c\xb4\x5c\x86\x13\x1e\x31\xd6\xca\x0f\x9f\x3b\x0e\x61\x6c\x65\xde\xa8\x55\x77\x04\xc8\x88\xa9\x2d\xc5\xc3\xcb\xad\xde\xde\x4e\xdb\x57\x83\x3d\xff\x96\xfe\xd6\xb3\x23\xef\x64\xf5\xf7\x9e\xb7\x17\xf2\xe9\x8a\x83\x36\xcf\xac\xf3\xdc\xb9\xf4\x5b\xd4\x8b\x78\xf5\x43\x59\x61\x4e\x6c\xbc\x7c\x91\xfd\xb2\xf6\x17\xbc\xf5\xf2\xc5\x3f\xb6\xbf\xe0\x97\x2f\x96\x1b\x30\xa5\xf8\x9b\x17\x2e\xe5\xc6\x36\x58\x16\x73\x13\x6f\xe8\x48\xc5\x05\x98\xbe\x32\xc8\x4b\xb2\x3e\xa8\x09\xf7\xd6\x15\x25\xde\x70\xd5\x41\xd2\x41\xfb\xb9\xd1\x91\x9c\xf5\x3d\x04\xc7\xb3\xcc\x37\xef\x12\xf0\xa1\x7a\x68\x52\xe4\x19\x25\xcf\x2b\x38\xe0\xd7\xbb\xbd\x41\xf6\x06\x43\xac\x78\x2a\xc4\xa5\xf3\x42\xea\x5e\xea\x72\x47\x7a\x76\x6a\x45\x27\x2b\xd2\x9b\x10\x8e\x07\xc6\xe3\x4a\x46\x76\xfa\xc3\xbe\xf9\xa1\x57\xbc\x35\x11\x0f\x8c\xbf\x7b\xe6\x87\xfd\x3d\xf3\x88\xf1\x14\xd2\x37\xfe\xee\x79\x49\x30\x5e\x64\x3a\xc4\xce\x60\x38\xda\xdc\xbb\x98\x17\x3e\x30\x2f\x6c\xde\xa5\xff\xca\xfc\x60\x7c\x55\xef\x47\xcf\xec\x6f\xd6\x97\x92\xf9\xfe\xe2\xba\x84\x83\x87\x82\x5f\xcb\x94\x85\x8c\x3d\x0d\xb9\x43\xeb\xed\x9d\xbb\xe7\x20\x15\x3a\x01\xa1\x1f\x0b\x02\x17\xd0\x47\x1e\x50\xc5\x45\x8c\xac\xfa\xcc\x48\x17\x0c\xf1\x5e\xf2\x5f\xaf\x97\x48\xaf\x72\x6a\x1e\x3c\xbb\x7b\xf6\xbf\x00\x00\x00\xff\xff\xd5\x41\x27\x7e\xb5\x9d\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x35, 0x87, 0x98, 0xf5, 0xe6, 0xe8, 0xc4, 0x54, 0x97, 0x4b, 0x3e, 0x84, 0xd5, 0xa8, 0x64, 0xe2, 0xc0, 0xf1, 0x64, 0x5a, 0xe3, 0xe8, 0xaa, 0x62, 0xc0, 0x3e, 0xc, 0x18, 0xd1, 0x82, 0xf7}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6e\x83\x30\x10\x85\xf7\x9c\x62\xe4\x75\x6b\x45\xa9\xd2\x9f\x05\x27\xa9\x2a\xcb\xd8\x13\x6a\xc5\xd8\xae\xc7\x26\xa5\x15\x77\xaf\x30\x55\xd3\x08\x14\x58\xce\xf7\xcd\x63\xf4\xa0\x97\xd1\xc8\xc6\x22\x30\x65\x33\x25\x8c\xc2\xc9\x0e\x19\x7c\x57\x63\x55\x5d\xa0\x0c\x41\x18\x47\x49\x3a\x85\x42\xf9\xec\xd2\x6d\x25\x0d\x61\x25\xa4\x45\x97\x36\x63\xae\xa5\xd5\xa0\x10\xfd\xe7\xb0\xe1\xe8\x66\xeb\x4d\xff\x0d\x74\xad\x71\x1b\x21\x56\x12\xad\x19\xf3\xae\xe8\x31\x92\xf1\x6e\x32\x00\xa6\x93\xa0\x86\x4e\x86\x0a\x40\xe3\x51\x66\x9b\xa0\x2e\x08\x80\xc9\x1c\x7d\x94\xf7\xdd\x40\x1f\x96\x41\x79\x6a\x60\x07\xfe\xc4\xcb\x48\xcc\x9c\xef\xf9\xee\x81\xef\xd9\xd5\x4e\xf0\x94\xda\x88\x65\xb1\x06\xf6\xc2\x1f\xf9\xf3\x64\x8c\x8b\xb3\x32\x61\x5c\xfd\x96\xba\x11\x41\x12\x9d\x7d\xd4\x0b\x46\xf4\x2e\x42\x6e\xac\x51\xe2\x84\xc3\x02\x77\x32\x25\x8c\x9d\xa7\x24\xb4\x3f\x3b\xeb\xa5\x16\x39\xda\x5b\x9e\x35\x0a\x1d\xa1\x38\x1a\xbb\x3c\xa5\x04\x24\xdc\x8a\x8b\xde\x27\xd1\x58\xaf\x4e\x42\x63\x6f\x14\xce\x25\x5f\x7a\x7d\x2d\x1d\xcd\xed\x02\xf4\xde\xe6\x6e\xfe\x2d\xa6\x8e\xda\xf0\xdb\xe1\x1f\x21\xf3\x35\x91\xc3\xae\x8c\xc7\xbb\x0a\xe0\xad\x1a\x7f\x02\x00\x00\xff\xff\x13\x26\x6f\x52\x0b\x03\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x86, 0xe, 0x94, 0xf, 0xf5, 0xd6, 0xbc, 0x4d, 0x91, 0xd2, 0xcd, 0x71, 0x7a, 0x6a, 0x8f, 0x4c, 0x1f, 0xeb, 0xe7, 0x50, 0x1b, 0xf, 0xb4, 0x63, 0xa9, 0xb4, 0x10, 0x3c, 0x21, 0x8e, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
