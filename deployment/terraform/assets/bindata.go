// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (10.463kB)
// assets/dashboard.yaml (228B)
// assets/dashboard_data.json (26.823kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (327B)
// assets/variables.tf (779B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xe3\x36\x12\xfe\xee\x5f\x31\xa7\x5d\xa0\xed\x61\x25\xd9\x49\x9a\x4d\x5a\xa4\x45\xef\x0d\x38\xa0\xbd\x16\xb8\x02\xf7\x61\x11\x08\x34\x39\x96\x08\x53\x24\x8f\xa4\x9c\x78\xf7\x72\xbf\xfd\x40\x4a\xb2\x65\x59\x72\xbc\xde\x4d\x77\x7b\xbb\xc9\x17\x63\x38\x33\x1c\x3e\x33\xf3\xf0\x45\xda\xa8\x15\x67\x68\x20\x22\x77\x36\x82\x37\x13\x00\x6d\xd4\x82\x0b\x84\x1b\x88\xca\x32\x16\x8a\x30\x87\xd6\x45\x13\x00\x83\x39\x57\x12\xfc\x48\x65\x63\x24\xd6\xc5\x67\x5e\xbe\x42\x63\xfd\xc0\x0d\x44\xff\xfd\x0e\xce\x92\x8b\x97\xd1\xe4\x61\x32\x31\x68\x55\x65\x28\x06\xdf\xd9\x12\xd7\x99\x26\xdc\x44\x10\x2d\x71\x5d\x4f\xe5\x65\x92\x94\x08\xc1\xe7\xf3\x37\x2b\x62\x12\x2a\x2a\xeb\xd0\x04\xf9\x43\xbc\xc4\x75\x30\xf2\x71\x55\x73\xc1\xa9\xf7\x03\x37\xe0\x23\xfc\xd2\xab\x5b\x5b\x64\xdb\x91\xaf\xf6\xe7\xe5\xd2\x3a\x22\x29\x46\x10\x11\xad\x33\x8b\x66\x85\xa6\x9e\xde\x91\xdc\xc2\x4d\xf8\x09\xf0\x0f\x1f\xc7\x48\x14\x44\xeb\xf8\xf9\x1b\xaa\x2a\xe9\x12\x2e\x19\xde\x3f\xf8\x80\x1e\x26\x13\x00\xaa\xa4\x44\xea\xfc\xf2\x6b\x3f\xcf\xe0\xd7\x02\x81\xe1\x82\x54\xc2\x41\x65\xd1\x84\x15\x2e\x94\x01\x55\x19\xf8\xe1\xa7\xbf\x07\x35\xb7\xd6\x61\x3a\x6b\x8b\x28\x08\xbc\x66\x40\x76\x5e\x49\x57\xd5\xb2\x42\x59\x07\x37\x60\x51\x2c\x92\x66\x91\x5c\xb7\x33\x93\x92\xc3\xf6\xef\x06\x22\x52\xf2\x78\xba\xa0\x67\x53\xc6\x66\x8c\x5c\x4c\x2f\x5f\x5e\x4d\xe7\x11\x3c\x83\xd9\x55\x32\xbd\x80\x1f\x7f\xfd\xe7\x04\xa0\x85\x23\x6b\x02\xf0\x8b\xf5\xb8\xec\xc8\x77\x53\x13\xbc\x77\x53\x98\x2c\x71\x9d\x70\x16\x56\x5f\x49\xd7\x89\x61\xcf\x5b\x50\xf0\x25\xa2\x69\x66\x91\x56\x86\xbb\x75\x96\x1b\x55\xe9\x8c\x33\x0f\xfe\xab\xb0\xd0\xe8\xf9\x1b\x3f\xc1\xae\x86\xf7\x94\x70\xf6\x10\xbd\x38\xac\x93\xe5\xca\x5a\x5e\xab\x4e\x00\x6e\x3d\x38\x6c\x2d\x49\xc9\x29\x44\x46\x29\x97\xcd\x85\xa2\xcb\x8c\xe1\x8a\xfb\x3a\xa8\xf3\xb4\x50\x26\x43\x42\x8b\x26\xea\x3d\xbd\xa0\x44\x95\x74\x28\x5d\x63\x02\xb0\x52\xa2\x2a\x31\xb3\xfc\xb5\xc7\x4e\x28\xb5\xac\xf4\x97\x7b\xa6\xc9\x8a\x88\x0a\x5f\x40\xd4\x51\x8f\x5e\x80\xac\x84\xf8\x6a\xd7\x51\x93\x84\x63\x1d\x79\xf5\x1d\x47\x0f\x6d\x31\x84\x3e\xf6\x4d\xe8\x5b\xd9\x37\x47\xbb\xcc\xa6\x15\x3a\xf9\x29\x89\x73\x68\x4a\x65\x5d\x26\x38\x45\x69\x31\xf3\x06\x41\x9b\xa1\x75\x5c\x12\xd7\x74\x73\x5a\xa8\x12\xd3\xba\x22\xd3\xad\x5d\xc7\x45\xdc\xb8\x88\x06\x03\x31\x58\x2a\x87\x31\xde\x23\x6d\xe3\xe1\x52\x70\x89\x9b\xc4\x03\x44\x77\x85\x67\x9b\x57\xf0\x07\x88\x17\x90\xae\x88\x49\x05\x9f\xa7\x54\xa8\x8a\xa5\x6d\x1d\xa5\x73\xa5\x5c\xbc\xe0\x92\xdb\x02\x19\xdc\x7e\x0b\x4c\x01\xd2\x42\xc1\x17\xff\x22\xdc\x71\x99\x87\x06\x0b\x46\x31\x97\xdc\x25\x49\xf2\xc5\xb7\x60\x05\xa2\x86\x99\xd7\x96\xd8\x94\x91\x9f\x31\x47\x07\x71\x2c\x55\x4c\x0b\xa4\xcb\x98\xa2\x71\x7c\xc1\x29\x71\x08\xf1\xbf\x7f\x86\x18\x0a\xe7\xb4\xfd\x26\x4d\xed\x79\x8c\x55\x7c\x87\xd6\xc5\xb3\x84\x94\xe4\xb5\x92\xe4\xce\x26\x54\x95\x29\xc3\x79\x62\xd4\xbc\xb2\x4e\xa3\xa1\xa8\x3d\x66\x09\x57\xe9\xc5\xec\xaf\x7f\xfb\xf3\xf5\xf5\x5f\x92\x5c\xe7\xf0\x1f\xb0\x15\x53\x40\xb4\xf3\x4c\x06\x84\x31\x88\xb7\x71\x6c\xc6\x42\x3c\x6b\xa8\x34\x23\x0e\x47\xc6\x03\x14\x42\x78\x3d\x6d\x54\x89\xae\xc0\xca\xc6\x52\x31\x8f\xaf\x56\xc6\xa1\xe9\xaf\xf0\x67\xe8\x24\x8a\x71\xeb\x12\x47\x4c\x92\xbf\x86\x9a\xe3\x3a\x85\xc0\xd4\x9d\xf4\x4c\x9f\x55\x46\x3c\x6c\xdd\x38\x62\xe0\xfe\xf5\x62\xc4\x4d\x2f\xd0\x72\xd5\xd1\x83\x54\x69\x97\xd6\x2c\x76\x1b\x6a\xe3\x10\x31\x97\xe8\x0c\xa7\xf6\x34\x72\x6e\x8c\xff\x6f\x18\x39\x72\x67\x89\x20\x26\x0f\x3d\x75\x0c\x0d\x9f\x4a\xaf\x0d\x70\x1b\x8a\xfd\x4c\x9c\x9f\xf9\xea\x89\xf9\xaa\xa7\x6b\xd7\xd6\x61\x49\x9d\x00\x94\x64\x2e\x70\x5c\x73\xc0\x2b\x61\x2c\x74\xa8\xe0\xf3\x85\x92\x8e\x2a\xb9\xe0\xf9\xac\x87\x5a\x0b\x0c\x13\x49\x6e\xc8\x82\x48\x12\xc0\x50\xd6\xa6\x06\x05\x12\x8b\x69\x23\xcf\x2e\x93\xcb\xe4\x2c\x23\x25\xbb\xbc\x48\x18\xce\x7b\x01\x30\xbd\xcc\x21\xe6\x70\x9c\xf6\x76\x61\x8c\x60\xa9\x64\x6c\xd0\xd3\xeb\x63\xcb\x6f\x9c\xc7\x0d\x0f\xf6\xb4\xd1\xf8\xd2\xee\x29\x81\x75\xc4\xb8\x63\x89\x56\x1b\x75\xbf\x3e\x8d\x66\x83\x69\x4d\xb2\x7d\xa6\xdb\xfd\x1b\xe5\xbd\x3d\xae\xeb\xdb\xf9\x49\xeb\x08\xfb\xa7\xd1\xdd\x73\xe6\x90\xdd\xfe\xa9\x13\xbe\x83\x19\x7c\x0f\x33\xf8\x06\xa6\x3e\x64\x6b\x15\xe5\xc4\x61\xb6\xe1\xed\x8c\x30\x66\xd0\xfa\xf5\x3b\x53\xe1\xa9\x3c\x1a\x42\xde\x9e\x3e\x3b\xa4\x3d\xca\xd7\x9f\x1a\xcb\x7e\xb8\x3d\xf9\xf7\xc0\xef\x4f\x77\x0e\x1c\xb3\x94\x39\x97\xf7\xef\x87\xb3\x86\x5c\x99\x32\x60\x87\x8e\xa6\x61\x38\xb5\xdc\xa1\x8d\x6b\x0b\x96\x36\x69\xef\x19\x09\x09\xf1\xc2\xee\x5b\x91\x15\xe1\xc2\x1b\xa6\xdd\xe3\xe5\x98\xef\xad\x4e\x8f\x13\x7b\xa4\x68\x98\xcd\x5a\x82\xeb\x10\x64\x5f\xd4\xbc\x89\x1c\xe0\x9f\xba\x3f\xd9\x7c\xff\xce\xcb\x19\x4a\xbf\x4f\xa3\x19\xe2\xc8\x21\x8e\x65\xf3\x81\x67\x86\x4d\x48\xfb\xee\x6a\x7e\xe9\x2c\xc5\xc7\xd1\xfe\x0c\x17\xf4\x6d\x50\x82\x58\xfb\x58\xe0\x5e\x67\x02\x80\x1e\xd8\x3e\x3d\x8f\x19\xd5\xca\x9e\x60\xb5\x16\xeb\x8c\x97\x25\x32\x4f\xb3\x62\xdd\xb5\x6a\xf8\x95\x54\x4e\x65\x25\x97\xca\x64\xcd\xa3\x51\x56\xe9\xdc\x10\xe6\x3b\x70\x41\x84\xc5\xfd\xed\xab\xb3\xbc\x08\xa2\xed\x02\x9b\xcc\x0c\xa0\x33\x8a\xae\x87\x93\x11\x47\xe6\xc4\x62\xe7\x58\x3d\x62\x50\xeb\x97\x24\x48\x36\x14\xb5\x83\x42\x2b\xdd\xea\x69\x62\xed\x9d\x32\x6c\x57\xaf\x95\x4e\x00\xec\x92\xeb\x6c\xc1\x25\x11\x99\x95\x44\xdb\x42\xb9\x0e\x3e\x03\x18\x6e\x06\x87\xd2\x72\x20\x1f\xf5\x8f\x16\xe7\x9e\xfa\xee\xe0\xab\x61\x27\xb7\x87\xaf\x16\xc3\xbb\x21\x9b\x87\xad\xf0\xf6\xe0\x39\xa4\x7d\x55\xcc\x48\x8e\xd2\xbd\xed\x6b\x9c\xb7\x39\xfa\x3d\xee\x37\xbb\xd6\x8d\x3d\xae\xf9\x68\xdf\xe7\xf3\xda\xae\xbf\x9a\x6c\x4e\xc8\x53\xf0\xd3\xa4\xea\x13\x3c\x91\x7c\xda\xe7\x82\xf6\x7d\xc8\x95\x7a\xf7\x4d\x28\x3c\x02\x85\xce\x7c\xe4\x49\x68\x6b\xb9\x1d\xdb\x79\x01\x0a\x5f\x0e\x62\xef\x2a\x96\xf9\x1f\xc7\x06\xb6\xc6\xa6\xec\xfa\x3c\x74\x9f\xd9\x2d\xe4\xfa\x5d\xbf\x4e\x5b\x87\xd2\x0f\x3d\xe5\xb7\x0e\xe2\xda\xc1\x24\xbc\x7b\x52\xc3\x75\xfb\xee\xf9\x83\xd6\xd0\x2a\x41\x50\x0a\x69\x6b\x59\xab\xdd\x74\x60\x60\x82\x68\x12\x78\x20\x0f\xf7\x8a\xa6\x71\x8c\x2a\x33\x9f\x81\x10\xd5\xd9\x59\x4d\x4b\xaa\x15\x75\x84\xda\x28\xa7\xa8\x12\x4d\xfc\x8e\xea\x1a\x08\xca\x99\xa9\xeb\xbc\x6e\xe8\x69\x12\xfe\xd3\x69\x74\xdb\x5c\xc8\x0e\xcd\x78\x35\xbd\xfc\x7a\x60\xce\x8d\xf8\xfd\xcf\x1a\x9c\xbf\xec\xcd\xd9\x11\x6e\x67\xec\xce\xf7\x0c\x7e\x22\xeb\x39\x82\x41\xeb\x0c\xa7\x0e\x94\x14\xeb\xe0\x15\x7e\xd9\x54\x34\x34\xd7\xde\xef\x1b\x93\x3f\x55\x0e\x0a\x22\xd9\x1a\xea\xfe\x74\x64\xe9\xbb\xac\xf9\x88\x65\xe1\x8e\xbb\x42\x55\x0e\x4a\x22\x2b\x22\xc4\x1a\xac\x2d\x62\xaf\xc1\xa5\x53\xe0\x0a\x6c\x1c\x26\xef\x0c\x74\x0d\xdf\xf5\x6c\x3a\xdd\x03\xbb\x37\xd4\x05\xbc\x0f\xfa\x6e\x71\x1f\xe0\xef\xee\xeb\x5d\x1b\x1c\x8e\x17\xc1\x7e\x50\xad\xac\x97\xfe\x78\x76\x5c\xf6\x8f\x6a\xcb\xe6\xd3\xcc\x3b\x74\x67\xdc\x78\x38\xba\x49\x6b\xfd\x23\x7b\xf5\xf1\x7c\x5e\x4d\x5f\x5e\x8c\xe4\x73\x33\x34\x90\xcf\x8a\xbd\x6d\x3e\xdb\x8f\x5d\xc7\x16\xda\x89\x81\xbd\x7d\xa1\x9d\x10\xd8\x3e\xdd\xf4\x86\x3e\x14\x62\xa7\x04\xf6\xee\x88\xfd\xc6\x6d\xf9\x58\x5f\xb2\x79\xa7\x1f\xc7\x6f\xa2\xfd\x5d\xf2\x08\x84\xcf\xcf\xa7\x97\x23\x08\x6f\x86\x9e\x00\xe1\x23\x22\xfb\xfa\xe2\x7c\x7f\xdf\xed\x0d\x3d\x41\x64\x47\x90\xe4\xf6\x02\x74\x0c\x3f\x86\xab\xcf\xa3\xe7\x97\x1f\x5b\xf2\x0b\xfa\xbf\xab\xa3\xcc\xc1\x53\xc5\xc5\x74\x6f\x73\xed\x08\x87\x4f\x15\xfe\x4e\xd7\x62\xda\x5c\xa4\x8f\xaa\x98\x0f\xb8\x91\x7f\x74\x3b\x79\xfb\x89\xf5\x51\xda\x68\x14\xdf\x8e\x3b\x3e\xc4\x99\xf8\x7a\x7a\x3d\x84\xe3\x46\xfc\x34\xb3\x9e\xef\xd7\xef\x8e\xf8\xf4\x59\x3f\xae\x7a\xa9\xbf\x15\x1d\x4b\x6a\x41\xfb\x71\x52\xfb\xc5\xab\x3d\x19\x97\x5d\x0d\xc1\x74\xf5\x6e\x69\xf9\xb8\xe8\xf3\x53\x24\xb6\xff\x05\x00\x00\xff\xff\x25\x99\xf8\x63\xdf\x28\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x5d, 0x68, 0xc3, 0xaa, 0x14, 0xa7, 0xeb, 0xc5, 0x5c, 0xf7, 0x6, 0x28, 0x9f, 0x7b, 0x22, 0xb1, 0x92, 0x0, 0xa1, 0x16, 0x8e, 0xfe, 0xb4, 0xda, 0xf5, 0x14, 0x55, 0xf3, 0xa1, 0xba, 0x3d}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x4e\x03\x41\x0c\x44\xfb\xfd\x8a\xe9\x52\xa1\x0b\xa2\xdb\x9a\x26\x35\x0a\xbd\x0f\xfb\x12\x4b\xce\x7a\x65\x6f\x0e\xf1\xf7\x68\xaf\x40\xa2\x9d\xf7\xe6\x51\xd7\x4f\x89\x54\x6f\x15\xaf\xa5\xf4\xf0\x5d\x59\x22\x6b\x79\x41\xa3\x87\x54\x9c\x92\x1e\xdd\xe4\x54\x00\x8f\xdb\x85\xa7\x07\x6c\x6e\x2c\xf1\x8f\x8e\x9f\x2e\x15\x9b\x9a\x14\x80\x35\x69\x35\x79\x17\x93\x71\xc4\x37\xb2\x9c\x40\x58\xc7\x24\x15\x23\x9e\x73\x78\x76\xa6\x21\x97\x36\x24\x76\xb2\x0f\xf9\xf2\xc6\x59\xf1\x76\x3e\x17\x80\xcc\xfc\xfb\xaa\xd7\xc3\xc9\xbf\x8f\xf7\x19\xcd\x5a\x00\xa0\xd3\xb8\x57\x2c\x3b\xc5\x62\xba\x2e\xb7\xa0\x8d\x1a\x2d\x4c\x79\x5f\x9d\x82\xf3\x37\x00\x00\xff\xff\x94\x42\xcd\x38\xe4\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x3e, 0x13, 0x14, 0xd7, 0xd7, 0xbd, 0xed, 0xe7, 0xca, 0xfc, 0xe7, 0x3a, 0x3a, 0x0, 0xc1, 0x74, 0x2d, 0xef, 0xf0, 0x9d, 0x47, 0xe0, 0x99, 0xba, 0x23, 0x47, 0x12, 0x37, 0x12, 0x52, 0xd9}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\xdb\x6e\xdb\x3a\xd6\x80\xef\xfb\x14\x04\xd1\xff\x47\x52\x24\xd9\x96\x13\xb7\x69\x80\xc1\x20\x6d\xd1\x4e\x81\x66\xa6\xd3\xb4\x7b\x2e\xda\x40\xa0\xa5\x65\x99\x08\x45\xaa\x24\x95\xc3\x0e\x32\xcf\x3e\x20\x25\x4b\xd4\x21\x75\x62\xc4\xb1\xd3\xb0\x17\x8d\xb5\x48\x51\xe4\xe2\x3a\x7c\xa2\x68\xf9\xea\x19\x42\x98\x70\x2e\x34\xd1\x54\x70\x85\x0f\x90\x11\x21\x84\x19\x55\x1a\x1f\xa0\xef\xf6\x08\x95\x52\x5b\x32\xce\x29\xd3\x1f\x39\x3e\x40\xc1\x56\x2d\x8d\x89\x26\x4a\xe4\x32\x02\x7c\x80\xf0\xf6\x36\xfa\x20\xc9\x84\x70\x82\xb6\xb7\xb1\x53\x0d\x38\x19\x33\x53\x45\xcb\x1c\x1c\xf9\x94\xc6\x3d\x52\x1a\x09\xfe\x56\x30\x21\x4d\x9b\x32\x19\x93\x8d\xc1\x16\x1a\x06\xc1\x16\x1a\x8e\x46\x5b\x28\xd8\x74\x9b\xe6\x24\xb5\xd7\x3e\xac\x87\x83\xfe\x1f\x1d\x32\x90\x5a\xb9\xf5\xf4\x65\x66\xeb\xc5\x44\x4d\xc7\x82\xc8\x18\x97\x65\xd7\xf6\xef\xc9\x33\x84\xae\x4d\x75\x0c\x31\xd5\xad\xde\xe2\x84\x83\xfe\x18\xe3\x03\x34\x1c\xed\x0d\x0b\x89\x24\xd9\xf4\xab\x10\x4c\xd3\x6c\xa6\x13\x4c\x6d\x95\xe2\xa3\x06\x69\x7b\x63\x0a\x47\xfb\x2f\xf7\x86\x83\xc1\x70\xb0\xbf\xbf\x6b\x4b\x19\xe5\xa7\x46\xeb\xdf\x4f\xec\x61\x46\x38\x30\x55\xe9\x7d\xa6\x75\x4c\x18\x25\xca\x6a\xc2\x4e\xd1\xf5\x6c\x38\x78\x4c\xac\x64\x42\x98\xaa\x14\x67\x47\xf6\x09\x78\xa2\xa7\xe6\x9a\x83\x86\x1c\xfa\xaa\x3b\x53\xc7\x73\xc6\xaa\x92\x09\x65\xcc\x9d\x67\x2b\xf8\x20\x49\x4c\x81\x1b\xeb\xa8\x9b\x4e\x24\x8d\x3f\x8b\xda\x7e\x8a\x49\xc5\x07\x68\xdf\xd1\xfc\xb9\x69\x6b\xe8\x08\x2e\xdc\x36\x10\xc2\x97\xe6\x78\x36\x1b\x55\xdb\x53\x1a\xc7\xc0\x8f\x41\xd2\x9e\xce\x5b\x4d\x07\xaf\xab\x63\x06\x09\xf0\xb8\xd9\x0f\x72\x96\xb4\xcf\x43\x08\x47\xb9\x94\xc5\x30\xda\x25\x29\xb9\xe8\x93\x52\xde\x23\x55\x53\x71\xde\x35\x5c\x2d\x34\x61\x3d\xb5\xcf\x08\xcb\xeb\x41\x74\x46\xca\x28\xb7\xa5\x6e\x6b\x56\x78\x4e\xe3\x62\x32\x2b\xa9\x99\xa7\xcf\x82\x72\x7d\x24\xac\xe7\x58\x41\x65\xe6\x58\x64\x4d\x7f\xae\x26\xfa\x53\x65\x70\x9d\xab\x67\x20\x23\xe0\x9a\x24\xd0\xd1\x72\x66\xae\x64\xe6\x3d\x57\x33\xc3\xae\xe5\xdd\x49\x91\xc0\x63\x90\x60\xdd\x76\xc2\x84\xae\xfb\xa5\xec\x2c\xfe\xeb\x0c\xa4\xa4\x31\xd4\x96\x5f\x14\x66\x24\x82\x3e\xc3\x55\x9a\x44\xa7\x9d\xab\x28\x0d\x59\x06\xf1\x27\xca\xbb\x1d\xd6\x44\x26\xa0\x95\x13\xc1\xdc\x18\x66\x9c\xfb\x22\xb3\xdd\x53\x79\xba\x41\x79\x24\x81\x28\xd8\x48\x89\xd6\x20\x53\xa1\x74\x18\x8f\x43\xa5\x85\x84\x50\xd3\x14\xc2\x48\xe4\x5c\x5f\xa5\xa0\xa7\x22\xfe\xdb\x7f\x7f\xe0\xe7\x5a\x64\xa6\x8a\x95\xff\xc0\xd7\xdf\x47\xe9\xc9\xe6\x26\x1a\x5f\xa2\x8d\xa2\x92\x1b\x99\x2a\xab\x7c\x2f\x64\x4a\x8c\xc1\xe1\xab\xb2\xad\xeb\xeb\x66\x3d\x09\x13\x1b\x5d\xf0\x21\xae\xc4\xd7\xe5\xa7\x5a\x4f\x7a\x2a\x41\x4d\x05\x8b\x5b\xfa\x33\x5d\x7d\x2f\x45\xda\x76\x63\x23\xff\x02\x49\x69\x10\xad\x13\x8e\xa7\x74\xa2\xbb\x67\x68\x1b\xf7\xf0\x57\x91\xa1\x60\x80\xde\xbd\x41\x3f\x73\x3b\x75\x66\x8c\x76\xd4\xf5\x9c\xea\x2a\xf8\x5d\xb9\x7e\x41\x24\xc4\x5d\xcf\x50\x42\xea\x96\xd7\x5b\xa7\x08\x67\x61\x99\xf2\x98\x9e\xd1\x38\x27\x0c\x77\x2c\x74\x56\xc7\xc6\xdc\xba\x03\x17\xe4\x82\xb6\x4c\x7d\x9c\x47\xa7\xc5\xfc\xbb\xe3\x32\x5e\x5c\xba\x8b\x19\x7a\x4f\xf6\x68\xd5\xee\xf7\xee\xca\x8b\x7b\x9c\xe8\x92\x5c\xc0\x2f\xcc\x6e\x52\x99\x80\x9a\x1a\x4d\x34\xad\x84\x8c\x81\x75\x3a\x61\x0a\x44\xf2\x86\x28\x68\xa6\xdc\x2a\x50\x75\xaa\x17\x91\xaa\x23\x76\x06\x53\x1b\xd7\xd6\x23\xe9\x67\xc7\x09\x2e\xbb\x93\x4e\x18\x4d\xfa\x62\xb4\x95\x7f\x82\xb3\xaa\xd3\x8d\x84\x5f\xaa\xe0\x37\xc8\xb5\xaf\xe7\xe5\xda\x86\x60\xe1\x64\xfb\xca\x27\x5b\x9f\x6c\xef\x35\xd9\x92\x8c\xba\x79\x76\x4a\x78\xcc\x40\x56\x89\xd6\x14\xf7\x64\xda\xb2\x5a\x2b\xd5\x52\xae\x41\x9e\x11\xf6\x9e\x44\xda\xde\x38\xec\xce\xc9\xc4\x65\x33\x6b\x9f\x8a\x75\x91\x8a\x0f\x3f\x7f\xbc\xe7\x5c\x3c\x7c\xf2\xb9\x38\x55\xab\x4f\x70\x3e\x11\xaf\x2e\x11\x63\x26\x48\xac\x41\xe9\xed\x52\x54\x55\xeb\x59\x03\x28\xe4\x52\xda\xe0\xd2\x6c\x74\x15\xf7\xcb\xfb\x0b\xa4\xf0\xa7\x92\xc1\x87\xae\xf4\xb4\x15\x71\x3b\x49\x3d\x12\x9c\x43\xa4\x21\x7e\xa0\xcc\x3e\xfa\x8d\x32\x7b\x5f\x56\xcf\xcc\x7f\x76\x6a\xaf\x28\x57\x9a\xf0\x08\x6c\x4a\x57\x20\xcf\x40\x9a\x5c\x1e\xa4\x27\xad\xec\x5d\x87\x3b\xcb\x03\xc5\x38\xe7\x24\xf8\x60\x4e\x82\x9f\x5d\xbc\x9d\xe1\x53\xd0\x92\x46\x36\xfe\xf7\x75\xfa\x46\x1c\x68\xc6\x48\x0d\x26\xdb\x8e\xe6\x06\xf2\x79\x0c\x74\x3b\x6d\x2d\x5d\x5d\x5f\xbb\x43\x5f\x4c\x4f\x6f\xe6\xe9\x69\x95\x2c\xf5\xcf\x3c\x1d\x83\x44\x62\x82\x8e\x40\x29\x92\x80\x42\x19\x48\x74\x0c\x91\xe0\xf1\x1c\x9a\x4a\xd5\x17\x50\x82\xe5\xe5\x9a\x6e\x37\xc2\xf9\x85\x8f\xe2\xdf\xdd\x39\x06\xbf\x6d\xd0\x2c\xf2\xc8\x85\x3c\x72\xad\x1e\xb9\x3a\xcb\x26\xaf\x17\x60\x2e\x47\x3f\x1e\xba\x3c\x74\x2d\x0b\xba\xa6\x5a\x67\xa1\x84\x9f\x39\x28\xad\x1e\x1d\x7d\xd9\xde\x5b\x47\x57\x2b\x81\xb0\x3b\x6a\x6f\x6d\x68\xec\xb6\x7a\x5b\x6b\x28\xfb\x52\xea\xdd\xa3\x98\x47\xb1\xbb\x74\xd5\xa3\xd8\xd3\x41\xb1\xf6\xea\x57\xf0\x72\x01\x14\x7b\xe9\x49\xcc\x93\xd8\xbd\x92\x58\x3b\x15\x9f\xc3\x58\x09\x1b\xfd\x7f\x09\x11\xeb\x48\x5f\xed\xae\x2f\x91\xc0\x16\xd4\xda\x2a\xa8\xeb\x71\x10\x54\xbd\xac\xf5\x76\xe6\xcc\xe8\x1d\x9c\xd1\x08\x14\xda\xf8\x0f\x8c\x8f\xad\x76\x67\x85\xe6\x0a\x9b\x9e\xb0\x3c\x61\x79\xc2\xf2\x84\x85\xd0\x4d\x8b\x5d\xc1\xab\x05\x10\x2b\xf0\x88\xe5\x11\x6b\x59\x88\x15\x8f\xc3\x94\x28\x0d\x32\x8c\xea\x4c\xf6\x98\x40\xeb\x17\x03\x78\x18\xdc\xba\xbb\x06\xd7\x66\xa9\xeb\xee\xba\x7b\x5c\xc8\x66\xbf\xb7\xa2\x05\x3a\xb2\x83\x44\xef\x88\x26\x63\x93\x6a\x3d\xa7\x79\x4e\xf3\x9c\xf6\x64\x38\x6d\xee\x5e\xee\xf6\x4a\xd8\x70\x6f\x11\x4c\x7b\x2a\x9c\x16\x78\x4e\x7b\x20\x4e\x93\x44\xdf\xf8\x48\x2d\x8c\xf3\xe2\xbb\x90\xa1\xb2\x8f\x77\x54\xa8\xf2\xf4\xa6\x07\x6c\xa3\xf4\x64\x13\xfd\x81\x10\xba\x5b\x8b\xc5\x16\xf2\x5f\xb4\xb9\x66\x2c\x38\x57\x3f\x4b\x22\xc2\x29\x55\x5a\x24\x92\xa4\xe1\xcf\x9c\x70\x4d\x19\x6c\x0c\x76\x5e\x6f\x21\x43\x8a\x77\xd3\x78\x91\xdd\x9d\x8d\xf9\xb3\xf1\x6f\x31\x58\xfe\x23\xd2\xd7\x83\x6c\xfb\x5e\x55\x5e\x0c\xe7\x31\xb2\xe4\x11\x10\x6e\xbf\x1f\x50\x3e\x49\x45\x5f\x5d\xac\xf2\xe0\xb8\x14\x70\xbc\x01\x1a\x3d\x2f\x7a\x5e\x5c\xef\x75\xbd\xe1\x68\x01\x60\x1c\x79\x5e\xf4\xbc\x78\xaf\xbc\x98\x88\x30\x85\x54\x69\xa2\x55\x48\x18\x13\x51\x38\xbe\xd4\xa0\x6e\x20\xb8\x3f\x82\xc1\x70\xcf\xfe\xb7\x6c\xae\x38\x34\x7d\xb9\x15\x59\xdc\x30\x82\xa5\xae\xe7\xb9\xd7\xb4\x93\x13\x52\x9e\x2b\x58\x96\xee\xca\xd7\xb3\xb4\xbc\xec\xee\x4a\x3d\x36\x5d\x5d\xae\x66\xe7\x12\xda\x1d\x34\x3b\x05\x92\x3d\x0e\xc5\xfe\x03\x48\xb6\x5c\xbd\xbe\x5d\x6f\xf2\x4d\x85\xbc\x44\xdf\x14\x49\xc0\xdc\x7f\xa0\xa3\x37\xfe\xc9\xf6\xea\x56\x4c\x8f\xde\x78\xfc\xf5\xf8\xbb\x56\xf8\xdb\x5e\x2e\xdd\xdd\x5d\x80\x7e\x83\x5d\x8f\xbf\x1e\x7f\xef\x15\x7f\x69\x7b\xad\x2d\x93\x22\x02\xa5\xc2\x28\xcb\xab\x25\xa9\xb9\x5f\x44\x78\x81\x82\xc1\x60\x75\x0b\x9b\xb7\xc7\xda\x55\x42\xc2\xdb\xcf\xdf\xd0\x37\x4d\x19\xfd\xcb\x2e\xf8\xa1\x2f\x44\x03\xda\xf8\x3f\x0f\x0a\xab\x03\x85\x5f\x4e\x07\xf2\xe8\x80\x3c\x3a\xac\x1e\x1d\x3a\x2b\x67\x0b\xb1\xc3\x9e\x47\x07\x8f\x0e\xf7\x8a\x0e\x89\x08\x13\x21\x45\xae\xcd\x94\xac\xf1\xc6\xb7\x46\x3f\x97\xb8\xbf\xed\x36\xfa\x58\xed\x36\xb6\xdb\x68\x62\xad\x9f\x30\xd6\xbb\xd5\x3e\x08\xf4\xa5\x3d\x10\xcf\x4f\x7e\x6b\xda\x6f\x0e\x4c\xcf\xca\x66\x8d\xbf\x1a\xaf\x33\xa3\x0e\x06\x85\x0b\x60\x15\x4d\x21\x25\x7f\x82\x54\x85\xa9\x0f\x8b\x37\x80\x2b\x7d\xc9\xca\x37\x8e\xcb\xd3\xa2\xa6\x26\x49\x3d\xf7\xce\xd6\x84\x52\x77\x8e\x64\x3b\x03\x39\xc1\xd5\x65\x35\xa4\x19\x23\x9a\xf2\xe4\x36\xaf\x6a\x27\x8c\xfd\x69\x4c\xb0\x6b\xaf\x35\x59\x34\xa6\x52\xc3\x85\x9d\xc8\xe0\xd5\x70\x67\x37\xd8\x09\x76\x77\x82\xc1\xe8\x60\x7f\xf0\xf2\x55\x73\x56\xcf\xca\x56\xbf\x3b\x42\xd4\x7b\x9a\x53\xe1\xa4\xcf\x92\x6e\x89\x85\xa6\x22\x4c\x28\xa7\x65\x14\x29\xec\x2a\x2c\x1c\xac\xda\x70\xd2\x78\x1f\x7c\xb9\xb4\xee\x06\x10\xca\x23\x96\xc7\x70\xc8\xfa\xc0\xa7\x72\xaa\x22\x59\xb8\x4d\xa5\x39\xd3\xb4\xeb\xde\xb3\x37\xce\x77\x4f\xa8\x19\xa6\x0e\xaf\x08\xe1\x9f\x39\xc8\xcb\xdb\xf5\xbe\xb6\xaf\xa0\x21\x4d\xe0\xa2\xb5\xbd\x00\xab\x53\x9a\x7d\x93\xec\xf8\x92\x47\x7d\xf1\xb5\x1b\x47\x35\x49\xac\x59\xa8\x7f\x97\xfd\x69\x19\xc7\xcc\x3a\x4f\x5a\xb2\x9b\xaa\x97\xc1\xb6\x18\x9d\x53\x90\x2b\xf8\x5a\x34\xd5\xcb\x92\xf7\x61\xa8\x87\x8c\xdd\xca\x32\x9f\x87\x21\x61\x6c\x69\xd6\x68\x87\x1e\x4a\x50\x39\xd3\x1b\x5a\x64\xa7\x1b\xc1\xa0\xd8\x4a\x35\xff\x75\xa7\xdf\x9f\x5f\x85\xa1\x24\x3c\x81\x50\x5d\xab\xf6\xcb\x4d\x37\xef\x64\xd3\x2d\x03\xed\x0f\xbe\xf3\xcc\xb9\xf1\xca\xd5\x1b\xac\xba\x12\xf6\x9a\xf7\x43\xa9\x63\x8e\x93\xec\xbc\x98\xbd\x49\xf6\x07\xde\xd8\x79\xf1\xf7\xcd\x1f\x78\xe7\xc5\xfd\x7a\x4e\xc3\x11\xe7\xf9\x4d\xb3\xf2\x0a\xbc\x46\x01\x2b\x6e\xb6\xfa\x9e\x38\xce\x75\xa9\x8e\x13\x3d\xb8\xe3\xf4\xbc\x94\xbf\xfb\xe6\xfd\x15\x79\xcc\xec\xd7\x00\x1e\xc0\x61\x16\x50\xc3\x5c\x4f\x29\x7f\xdb\xe0\x37\x70\x14\xfb\xb7\xfe\x15\x17\xcb\xef\x15\x2b\x4d\x8a\xfb\x21\xcc\xc5\xf9\x76\x30\x9a\xed\xad\xc5\x5a\x94\x42\xdc\x38\x2f\xa3\xd1\xa9\x5d\x0a\x28\xcf\x2e\xb5\x18\xce\xee\x09\xdd\x99\xc5\x23\xe7\x46\x68\x86\x84\xf6\x60\xd7\x3d\x08\xea\xfd\xbc\x78\xe4\x7c\x0e\xdc\x83\xdd\x81\x5b\xe2\xdc\xc0\x0c\x9d\xcf\x41\xf9\xc3\x35\x27\xb3\x31\x18\x63\xe8\x5a\xdc\xcd\x57\x71\x1b\x7e\xe9\x36\xec\x5e\x65\xb8\xe7\x1e\x38\xcb\x34\xaf\x62\xb7\xbf\xb3\xbe\x34\xd4\xf7\x97\xb0\xcb\x1b\x78\x2c\xc5\xb9\x2a\x01\xc9\x79\x66\x5f\x19\x34\xfa\x0c\xd2\xde\x44\xf0\x08\xd0\x91\xe0\x54\x0b\x69\x08\xd7\xd6\xcf\xed\xea\x19\x1e\x14\xff\x82\xa0\x90\x9e\x55\x90\xbd\xf7\xec\xfa\xd9\xff\x02\x00\x00\xff\xff\xa7\xd8\x45\x5f\xc7\x68\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x4a, 0xf9, 0xe, 0x2, 0x33, 0x8b, 0x20, 0x40, 0x8d, 0x6a, 0x55, 0x77, 0xfe, 0x87, 0x8d, 0x94, 0x5c, 0xc9, 0x51, 0x4c, 0xb, 0x42, 0x7d, 0xb9, 0x81, 0x57, 0xbf, 0x0, 0x9b, 0xb9, 0xac}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6e\x83\x30\x10\x85\xf7\x9c\x62\xe4\x75\x6b\x45\xa9\xd2\x9f\x05\x27\xa9\x2a\xcb\xd8\x13\x6a\xc5\xd8\xae\xc7\x26\xa5\x15\x77\xaf\x30\x55\xd3\x08\x14\x58\xce\xf7\xcd\x63\xf4\xa0\x97\xd1\xc8\xc6\x22\x30\x65\x33\x25\x8c\xc2\xc9\x0e\x19\x7c\x57\x63\x55\x5d\xa0\x0c\x41\x18\x47\x49\x3a\x85\x42\xf9\xec\xd2\x6d\x25\x0d\x61\x25\xa4\x45\x97\x36\x63\xae\xa5\xd5\xa0\x10\xfd\xe7\xb0\xe1\xe8\x66\xeb\x4d\xff\x0d\x74\xad\x71\x1b\x21\x56\x12\xad\x19\xf3\xae\xe8\x31\x92\xf1\x6e\x32\x00\xa6\x93\xa0\x86\x4e\x86\x0a\x40\xe3\x51\x66\x9b\xa0\x2e\x08\x80\xc9\x1c\x7d\x94\xf7\xdd\x40\x1f\x96\x41\x79\x6a\x60\x07\xfe\xc4\xcb\x48\xcc\x9c\xef\xf9\xee\x81\xef\xd9\xd5\x4e\xf0\x94\xda\x88\x65\xb1\x06\xf6\xc2\x1f\xf9\xf3\x64\x8c\x8b\xb3\x32\x61\x5c\xfd\x96\xba\x11\x41\x12\x9d\x7d\xd4\x0b\x46\xf4\x2e\x42\x6e\xac\x51\xe2\x84\xc3\x02\x77\x32\x25\x8c\x9d\xa7\x24\xb4\x3f\x3b\xeb\xa5\x16\x39\xda\x5b\x9e\x35\x0a\x1d\xa1\x38\x1a\xbb\x3c\xa5\x04\x24\xdc\x8a\x8b\xde\x27\xd1\x58\xaf\x4e\x42\x63\x6f\x14\xce\x25\x5f\x7a\x7d\x2d\x1d\xcd\xed\x02\xf4\xde\xe6\x6e\xfe\x2d\xa6\x8e\xda\xf0\xdb\xe1\x1f\x21\xf3\x35\x91\xc3\xae\x8c\xc7\xbb\x0a\xe0\xad\x1a\x7f\x02\x00\x00\xff\xff\x13\x26\x6f\x52\x0b\x03\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x86, 0xe, 0x94, 0xf, 0xf5, 0xd6, 0xbc, 0x4d, 0x91, 0xd2, 0xcd, 0x71, 0x7a, 0x6a, 0x8f, 0x4c, 0x1f, 0xeb, 0xe7, 0x50, 0x1b, 0xf, 0xb4, 0x63, 0xa9, 0xb4, 0x10, 0x3c, 0x21, 0x8e, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
