// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (9.045kB)
// assets/outputs.tf (327B)
// assets/variables.tf (560B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x8f\xdb\xb8\x11\xfe\xee\x5f\x31\xd5\x06\xb8\xb6\xa8\x24\xef\x4b\x36\xbb\x77\xd8\x16\xe9\x5d\x0b\x14\xb8\x6b\x0e\xe8\x01\xfd\x10\x2c\x04\x8a\x1c\x5b\x84\x25\x92\x25\x29\x7b\x95\x74\xfb\xdb\x0b\x92\x92\x2d\xcb\xb2\xd7\x71\x6e\xf3\x52\x74\xf3\xc5\x18\x0e\x67\x46\xcf\xcc\x3c\x1c\x32\x4a\xcb\x25\x67\xa8\x21\x22\x2b\x13\xc1\xfb\x09\x80\xd2\x72\xc6\x4b\x84\x3b\x88\xaa\x2a\x2e\x25\x61\x16\x8d\x8d\x26\x00\x1a\xe7\x5c\x0a\x70\x2b\xb5\x89\x91\x18\x1b\x5f\x38\xf9\x12\xb5\x71\x0b\x77\x10\xfd\xe7\x8f\x70\x91\x5c\xbd\x8a\x26\x8f\x93\x89\x46\x23\x6b\x4d\xd1\xdb\xce\x16\xd8\x64\x8a\x70\x1d\x41\xb4\xc0\x26\xb8\x72\x32\x41\x2a\x04\x6f\xf3\xc5\xfb\x25\xd1\x09\x2d\x6b\x63\x51\x7b\xf9\x63\xbc\xc0\xc6\x6f\x72\x71\xd5\x79\xc9\xa9\xb3\x03\x77\xe0\x22\xfc\xad\x53\x37\xa6\xc8\x36\x2b\xbf\xdb\xf5\xcb\x85\xb1\x44\x50\x8c\x20\x22\x4a\x65\x06\xf5\x12\x75\x70\x6f\xc9\xdc\xc0\x9d\xff\x09\xf0\x77\x17\xc7\x9e\x28\x88\x52\xf1\x8b\xf7\x54\xd6\xc2\x26\x5c\x30\x7c\x78\x74\x01\x3d\x4e\x26\x00\x54\x0a\x81\xd4\xba\xcf\x0f\x76\xce\xe0\x97\x02\x81\xe1\x8c\xd4\xa5\x85\xda\xa0\xf6\x5f\x38\x93\x1a\x64\xad\xe1\xf5\x4f\x7f\xf3\x6a\xb6\x51\xde\x9d\x31\x45\xe4\x05\x4e\xd3\x23\x9b\xd7\xc2\xd6\x41\x56\x48\x63\xe1\x0e\x0c\x96\xb3\xa4\xfd\x48\xae\x3a\xcf\xa4\xe2\xb0\xf9\xbb\x83\x88\x54\x3c\x9e\xce\xe8\xc5\x94\xb1\x73\x46\xae\xa6\xd7\xaf\x6e\xa6\x79\x04\x67\x70\x7e\x93\x4c\xaf\xe0\xc7\x5f\xfe\x31\x01\xe8\xe0\xc8\xba\x00\xe8\xcb\xe4\xa1\x24\x7a\x8e\x11\xf4\xff\xce\xe0\x75\xb9\x22\x8d\x71\x71\xc1\x5a\xc7\x7f\x06\x95\xc2\x70\x63\x51\xd0\x66\x3b\x87\x3e\x8c\x7e\xae\x93\x05\x36\x09\x67\x1e\xa6\x5a\xd8\x5e\xb0\x0e\x63\x97\x8e\x75\x38\x5e\xc1\xd5\x92\xa2\x99\x41\x5a\x6b\x6e\x9b\x6c\xae\x65\xad\x32\xce\x5c\x96\xde\x7a\x44\xa2\x17\xef\x9d\x83\x6d\x0d\x67\x29\xe1\xec\x31\xfa\xc3\x61\x9d\x6c\x2e\x8d\xe1\x41\xd5\x21\x78\x3f\x09\xe5\xbe\xe4\xae\x7c\x5d\x13\xb8\xb2\x8a\xda\x44\xb6\x45\xd4\x0b\xb8\x22\xd6\xa2\xae\xa4\xb1\x59\xc9\x29\x0a\x83\x99\xdb\xe0\xb5\x19\x1a\xcb\x05\xb1\x6d\x1f\xa4\x85\xac\x30\x0d\xb9\x4c\x37\xfb\x7a\x26\xe2\xd6\xc4\xba\x92\xb6\x02\xd1\x58\x49\x8b\x31\x3e\x20\xed\xe2\xe1\xa2\xe4\x02\xd7\x48\x00\x44\xab\xc2\xf5\xe9\x5b\xf8\x0d\xc4\x33\x48\x97\x44\xa7\x25\xcf\x53\x5a\xca\x9a\xa5\x1d\xb0\x69\x2e\xa5\x8d\x67\x5c\x70\x53\x20\x83\xfb\xef\x80\x49\x40\x5a\x48\xf8\xe6\x9f\x84\x5b\x2e\xe6\x21\xa7\x6e\x53\xcc\x05\xb7\x49\x92\x7c\xf3\x1d\x98\x12\x51\xc1\xb9\xd3\x16\xd8\xe2\xea\x3c\xce\xd1\x42\x1c\x0b\x19\xd3\x02\xe9\x22\xa6\xa8\x2d\x9f\x71\x4a\x2c\x42\xfc\xaf\x37\x10\x43\x61\xad\x32\xdf\xa6\xa9\xb9\x8c\xb1\x8e\x57\x68\x6c\x7c\x9e\x90\x8a\xbc\x93\x82\xac\x4c\x42\x65\x95\x32\xcc\x13\x2d\xf3\xda\x58\x85\x9a\xa2\x72\x98\x25\x5c\xa6\x57\xe7\x7f\xf9\xeb\xf7\xb7\xb7\x3f\x24\x73\x35\x87\x7f\x83\xa9\x99\x04\xa2\xac\xe3\x00\x20\x8c\x41\xbc\x89\x63\xbd\xe6\xe3\x69\xa0\x56\x8c\x58\xdc\xb3\xee\xa1\x28\x4b\xa7\xa7\xb4\xac\xd0\x16\x58\x9b\x58\x48\xe6\xf0\x55\x52\x5b\xd4\x83\x2f\x0c\x1c\xd0\x4b\x37\x93\x2b\xe1\x98\x30\xab\x75\xf9\xb8\x51\xb6\x44\xc3\xc3\xbb\x19\xf4\xb2\xfa\xfb\xc4\x12\x9d\xcc\xdf\x0d\x62\xa9\x96\x3d\x25\x48\xa5\xb2\xe9\x50\x63\xc1\xb8\x86\x58\x85\xc5\x8d\x72\xca\x88\x25\x81\x0e\xee\x7d\xa9\x1c\x62\xb8\x0a\xad\xe6\xd4\x9c\xc6\x72\xed\xe6\xff\x1d\x6a\xb3\x17\x49\x60\xb6\x23\x69\xea\x54\xfa\x69\x81\x5b\x53\xd0\x2e\xaf\xfc\xbf\x9d\x9f\xb9\x9d\x07\xba\xa6\x31\x16\x2b\x6a\x4b\x40\x41\xf2\x12\xf7\x6b\x8e\x58\x25\x8c\xf9\x8a\x2d\x79\x3e\x93\xc2\x52\x29\x66\x7c\x7e\x3e\x40\xad\x03\x86\x95\xc9\x5c\x93\x19\x11\xc4\x83\x21\x8d\x49\x35\x96\x48\x0c\xa6\xad\x3c\xbb\x4e\xae\x93\x8b\x8c\x54\xec\xfa\x2a\x61\x98\x0f\x02\x60\x6a\x31\x87\x98\xc3\x71\xda\x9b\x0f\x63\x04\x2b\x29\x62\x8d\x8e\x97\x9e\xfa\xfc\xd6\x78\xdc\xf2\xc2\x40\x1b\xf5\x92\xd3\xa1\x12\x18\x4b\xb4\x3d\x96\x78\x94\x96\x0f\xcd\x69\xb4\xe3\xb7\x06\xd2\x19\x76\xfe\xf6\xdf\x5e\x1e\xd8\xe9\xfd\x9d\x7d\xd5\x55\x37\xe4\x38\x1f\xc6\x48\xca\x89\xc5\x6c\x4d\x3c\x19\x61\x4c\xa3\x71\x01\x5b\x5d\xe3\xa9\x44\xe0\x3f\x25\x8c\x17\x01\xb4\x6d\xd6\x39\xc8\x3c\x9f\x8f\x6d\xbf\x06\xa6\x3a\x95\x21\xc4\x9c\x8b\x87\x5f\xa7\x87\xc6\x4c\xe9\xca\x23\x80\x96\xa6\x7e\x39\x35\xdc\xa2\x89\xc3\x0e\x96\xb6\xc9\x1b\x6c\x2a\x05\xc4\x33\xb3\xbb\x8b\x2c\x09\x2f\xdd\xc6\xb4\x3f\x2a\xec\xb3\xbd\xd1\x19\xf4\xe8\xa0\x49\x35\x33\x59\xd7\x70\xbd\x86\x1d\x8a\xda\xcb\xdf\xf6\x9c\xde\x56\xac\xeb\x59\x96\xef\xce\xea\x9c\xa1\x70\xe7\x05\xea\x7e\xaf\x8d\xf5\x38\xcb\x47\xee\x4f\xeb\x10\x36\x66\x42\x77\xf4\x42\x76\x7e\xbb\x9f\xfe\x22\xb1\x09\xa2\x24\xc6\xec\x0b\xd0\xad\x4d\x00\xd0\x01\x87\x4f\x7c\x4d\x50\x72\xbc\xa0\x54\xd9\x64\xbc\xaa\x90\x39\x76\x28\x1b\xe8\xe8\x60\x87\xf9\x7a\x11\x46\x10\x6d\x62\x6c\x41\xdc\xfd\xb0\xfd\xc0\x38\x24\xdc\x88\x97\x13\x83\x7d\xae\x18\xdf\x10\xf4\x2b\xe2\x25\x6b\x4e\xd8\xfa\xb0\x4e\xba\xd1\x53\xc4\x98\x95\xd4\x6c\x5b\xaf\x93\x4e\x00\xcc\x82\xab\x6c\xc6\x05\x29\x33\x23\x88\x32\x85\xb4\x1b\x26\x1c\x81\x65\xb3\x38\x82\xf0\x21\x88\xc3\x8f\xac\x7b\x30\xd8\x56\xdf\x5e\x7c\x3b\x6e\xe4\xfe\xf0\x94\x36\xce\xcb\x2c\xf7\xa4\x7c\x7f\xf0\x08\xeb\x5e\x3a\x32\x32\x47\x61\x3f\xf4\x85\xc0\xed\x39\xfa\x8d\xe0\x93\x4d\xc8\x7b\xa6\x62\x97\xca\xba\x3a\x76\x2c\x1e\xbf\xbd\x6f\xc3\xd5\x72\xc2\x09\xb9\xf1\xdb\xdb\xf4\x4c\xfc\xa9\xf7\xe6\x87\x37\xdf\x42\x2d\xa8\xac\x2a\x14\x16\x6c\x81\xe0\x0e\x20\x03\x39\x96\x72\x05\xab\x02\x85\x17\xe6\x5c\x10\xcd\xd1\x40\xfb\x88\xc5\x80\x87\x85\x39\xb7\x45\x9d\x83\x46\x25\x0d\xb7\x52\x37\xc9\x11\xa7\xdc\x57\x71\xce\x9d\xf5\xef\xa7\xfe\x42\xea\x53\x30\x7e\x3d\x3d\x8b\xc2\x9d\xb2\xff\xe6\x20\x09\x8b\xdd\x96\x58\xcc\x7b\x7a\x23\xf7\xd8\xbe\x66\x77\xa7\x85\xf8\xfb\xbd\xc6\xc2\x19\x04\xe3\x83\xe2\x76\xca\xc3\x4b\x5c\xc0\xbd\x3f\x1c\x1d\x78\x7c\xeb\x0c\xc4\xc1\xc0\xc4\xbf\xb7\x50\xcd\x55\xf7\xde\xf2\x5a\x29\xe8\x94\xc0\x2b\x79\xd4\xbb\x22\xed\x28\x19\x46\x1c\xf8\xa7\x20\x2e\xe6\x7e\xfe\x0b\xb5\x30\xd3\xb2\xca\x94\xd4\xd6\x47\x75\x71\x11\x9a\x56\x76\xa2\x9e\x50\x69\x69\x25\x95\x65\x1b\xbf\xa5\x2a\x20\x41\x39\xd3\x59\x5e\x4a\xba\x08\xa5\x3f\x4d\xfc\xbf\x74\x1a\xdd\xb7\x93\xee\x21\x8f\x37\xd3\xeb\x97\x23\x3e\xd7\xe2\x5f\xdf\xab\x37\xfe\x6a\xe0\xb3\x27\xdc\x78\xec\xfb\x3b\x83\x9f\x48\x93\x23\x68\x34\xee\x06\x6c\x41\x8a\xb2\xf1\x56\xe1\xe7\xf5\x85\x0b\xda\xfb\xc4\x9f\xda\x2d\x7f\xae\x2d\x14\x44\xb0\x06\x42\x7b\x59\xb2\x70\x4d\xd2\x3e\x3b\x1b\x58\x71\x5b\xc8\xda\x42\x45\x44\x4d\xca\xb2\x01\x63\x8a\xd8\x69\x70\x61\xa5\xef\xef\x60\x30\xf9\x68\xa0\x03\x7c\xb7\xe7\xd3\xe9\x0e\xd8\x83\xa5\x3e\xe0\x43\xd0\xb7\x8b\xfb\x00\xd3\xf5\x9f\x09\xba\xe0\x70\x7f\x11\xec\x06\xd5\xc9\x06\xe9\x8f\xcf\x8f\xcb\xfe\x51\x6d\xd9\xbe\x91\x7e\x44\x77\xc6\xad\x85\xa3\x9b\x34\xe8\x1f\xd9\xab\x4f\xe7\xf3\x66\xfa\xea\x6a\x4f\x3e\xd7\x4b\x23\xf9\xac\xd9\x87\xe6\xb3\x7b\x75\x3e\xb6\xd0\x4e\x0c\xec\xc3\x0b\xed\x84\xc0\x76\xe9\x66\xb0\xf4\xb9\x10\x3b\x25\xb0\x8f\x47\xec\x13\xb7\xe5\x53\x7d\xc9\xf2\x5e\x3f\xee\xbf\x62\x0d\x4f\xc9\x23\x10\xbe\xbc\x9c\x5e\xef\x41\x78\xbd\xf4\x0c\x08\x1f\x11\xd9\xcb\xab\xcb\xdd\x73\x77\xb0\xf4\x0c\x91\x1d\x41\x92\x9b\xeb\xc1\x31\xfc\xe8\x2f\x06\x4f\xce\x2f\x3f\x76\xe4\xe7\xf5\xbf\xaa\x51\xe6\xe0\x54\x71\x35\xdd\x39\x5c\x7b\xc2\xf1\xa9\xc2\xdd\x78\x3a\x4c\xdb\x6b\xa6\xf7\xf2\x65\x9d\x95\xdd\xff\x96\x3c\xd9\x98\xad\xe2\x87\x75\xe7\xe7\x98\x3a\x6f\xa7\xb7\x63\x38\xae\xc5\xcf\xe3\xf5\x72\xb7\x42\xb6\xc4\xa7\x7b\xfd\xb2\xea\x25\x3c\x73\x1f\x4b\x1b\x5e\xfb\x69\xda\xf8\xd9\xa9\x3d\x1b\x5b\xdc\x8c\xc1\x74\xf3\x71\x69\xf9\x3c\x04\xf5\x69\x4b\xe1\xbf\x01\x00\x00\xff\xff\x18\x91\x97\x2f\x55\x23\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0xe3, 0x41, 0xd0, 0x5e, 0x9, 0xda, 0xef, 0x2e, 0xf7, 0xe3, 0xf, 0xb3, 0xbf, 0xfc, 0x43, 0xc7, 0x2a, 0x72, 0x6e, 0x24, 0xb3, 0x33, 0xb2, 0x90, 0xd6, 0x9f, 0x31, 0x7b, 0x2a, 0x26, 0x37}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\xc8\x7b\x2c\xd4\x0a\x10\x8b\x9c\x65\x34\x89\xa7\xc5\xc2\xb1\x8d\x67\xdc\x2a\x42\xbd\x3b\x8a\xbb\x80\xca\x05\xb2\xcc\x7b\xff\xeb\xcb\x73\xa2\xe2\x69\x0a\x0c\x66\x0e\x55\x94\x0b\x46\x5a\xd8\xc0\xe7\x70\x19\x86\x6f\x48\x39\xa3\x8f\xa2\x14\x67\xc6\x39\xd5\xa8\x9d\x12\x12\x39\x65\x51\xa4\x23\x47\xfd\x45\x72\xd3\x7f\x35\x3f\x0d\x8e\x47\x1f\xfb\x31\x37\x25\x81\x44\xee\x19\xd7\x2c\x9e\xb8\x88\x4f\x71\x33\x00\x74\xcd\x0c\x23\x2c\x94\x07\x00\xc7\x07\xaa\x41\x61\x6c\x08\xc0\x50\x2d\xa9\xd0\xc3\xb2\xca\x47\x30\xd0\xbe\x11\xcc\x93\x7d\xb1\xed\x17\x5e\xb9\xdd\xd9\xc7\xbd\xdd\x99\x9b\x4c\x4e\xa2\xc7\xc2\x2d\x38\x82\x79\xb5\xcf\x76\xbf\x19\x97\x6e\x56\x15\x2e\x77\x5f\xd8\x4d\x98\x49\xe4\x9c\x8a\xeb\x98\xc8\x1b\xe6\x3a\x05\x3f\xe3\x3b\xaf\x1d\x5e\x48\x95\xcb\x92\x44\xd1\xa5\x73\xdc\x0e\x81\xb5\x84\xbf\xbc\xe0\x67\x8e\xc2\x78\xf0\xa1\x9f\xd2\x0a\xda\x29\xfb\xba\xaf\x00\x00\x00\xff\xff\xb4\x82\x23\x39\x30\x02\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xa1, 0xc8, 0x99, 0x32, 0x37, 0x1c, 0xdc, 0xb1, 0x38, 0xcb, 0x56, 0x9d, 0x23, 0xd7, 0xdd, 0x79, 0xb1, 0xd5, 0xda, 0x30, 0x2a, 0x2d, 0xb9, 0x4b, 0x8c, 0xef, 0x78, 0xdc, 0x9c, 0xc3, 0x2b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":   clusterTf,
	"outputs.tf":   outputsTf,
	"variables.tf": variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":   &bintree{clusterTf, map[string]*bintree{}},
	"outputs.tf":   &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf": &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
