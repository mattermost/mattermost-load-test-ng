// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (9.037kB)
// assets/outputs.tf (327B)
// assets/variables.tf (560B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x8f\xdb\xb8\x11\xfe\xee\x5f\x31\x55\x02\x5c\x7b\x28\x25\xef\xae\xb3\xd9\xed\x61\x5b\xa4\x6f\x40\x81\xbb\xde\x01\x3d\xa0\x1f\x82\x85\x40\x91\x63\x99\xb0\x44\xb2\x24\xe5\x5d\x25\xdd\xfe\xf6\x82\x94\x64\xcb\xb2\xfc\x12\xe7\x36\xb9\x0b\x6e\xf3\xc5\x20\xe7\x8d\xcf\xcc\x3c\x1a\x32\xda\xa8\x95\xe0\x68\x20\xa2\x0f\x36\x82\xf7\x13\x00\x6d\xd4\x5c\x14\x08\x77\x10\x95\x25\x29\x14\xe5\x0e\xad\x8b\x26\x00\x06\x73\xa1\x24\xf8\x9d\xca\x12\xa4\xd6\x91\x4b\xbf\xbe\x42\x63\xfd\xc6\x1d\x44\xff\xfb\x23\x5c\xc6\xb3\xd7\xd1\xe4\x69\x32\x31\x68\x55\x65\x18\x06\xdb\xe9\x12\xeb\x54\x53\x61\x22\x88\x96\x58\x37\xae\xfc\x9a\xa4\x25\x42\xb0\xf9\xf2\xfd\x8a\x9a\x98\x15\x95\x75\x68\xc2\xfa\x13\x59\x62\x1d\x94\x7c\x5c\x55\x56\x08\xe6\xed\xc0\x1d\xf8\x08\x7f\xeb\xc5\xad\x5d\xa4\x9b\x9d\xdf\xed\xfa\x15\xd2\x3a\x2a\x19\x46\x10\x51\xad\x53\x8b\x66\x85\xa6\x71\xef\x68\x6e\xe1\x2e\xfc\x04\xf8\xa7\x8f\x63\x4f\x14\x54\x6b\xf2\xf2\x3d\x53\x95\x74\xb1\x90\x1c\x1f\x9f\x7c\x40\x4f\x93\x09\x00\x53\x52\x22\x73\xfe\xf8\x8d\x9d\x17\xf0\xe3\x02\x81\xe3\x9c\x56\x85\x83\xca\xa2\x09\x27\x9c\x2b\x03\xaa\x32\xf0\xe6\xbb\x7f\x04\x31\x57\xeb\xe0\xce\xda\x45\x14\x16\xbc\x64\x40\x36\xab\xa4\xab\x9a\xb5\x85\xb2\x0e\xee\xc0\x62\x31\x8f\xdb\x43\x0a\xdd\x79\xa6\xa5\x80\xcd\xdf\x1d\x44\xb4\x14\x64\x3a\x67\x97\x53\xce\x2f\x38\x9d\x4d\xaf\x5f\xdf\x4c\xb3\x08\x5e\xc0\xc5\x4d\x3c\x9d\xc1\xb7\x3f\xfe\x6b\x02\xd0\xc1\x91\x76\x01\xb0\x57\xf1\x63\x41\x4d\x8e\x11\xf4\xff\x5e\xc0\x9b\xe2\x81\xd6\xd6\xc7\x05\x6b\x99\x70\x0c\xa6\xa4\x15\xd6\xa1\x64\xf5\x76\x0e\x43\x18\xfd\x5c\xc7\x4b\xac\x63\xc1\x03\x4c\x95\x74\xbd\x60\x3d\xc6\x3e\x1d\xeb\x70\x82\x80\xaf\x25\xcd\x52\x8b\xac\x32\xc2\xd5\x69\x6e\x54\xa5\x53\xc1\x7d\x96\xde\x06\x44\xa2\x97\xef\xbd\x83\x6d\x09\x6f\x29\x16\xfc\x29\xfa\xfd\x61\x99\x34\x57\xd6\x8a\x46\xd4\x23\x78\x3f\x69\xca\x7d\x25\x7c\xf9\xfa\x26\xf0\x65\x15\xb5\x89\x6c\x8b\xa8\x17\x70\x49\x9d\x43\x53\x2a\xeb\xd2\x42\x30\x94\x16\x53\xaf\x10\xa4\x39\x5a\x27\x24\x75\x6d\x1f\x24\x0b\x55\x62\xd2\xe4\x32\xd9\xe8\xf5\x4c\x90\xd6\xc4\xba\x92\xb6\x02\x31\x58\x2a\x87\x04\x1f\x91\x75\xf1\x08\x59\x08\x89\x6b\x24\x00\xa2\x87\x85\xef\xd3\xb7\xf0\x1b\x20\x73\x48\x56\xd4\x24\x85\xc8\x12\x56\xa8\x8a\x27\x1d\xb0\x49\xa6\x94\x23\x73\x21\x85\x5d\x20\x87\xfb\x6f\x80\x2b\x40\xb6\x50\xf0\xd5\xbf\xa9\x70\x42\xe6\x4d\x4e\xbd\x12\x11\x52\xb8\x38\x8e\xbf\xfa\x06\x6c\x81\xa8\xe1\xc2\x4b\x4b\x6c\x71\xf5\x1e\x73\x74\x40\x88\x54\x84\x2d\x90\x2d\x09\x43\xe3\xc4\x5c\x30\xea\x10\xc8\x7f\xbe\x07\x02\x0b\xe7\xb4\xfd\x43\x92\xd8\x2b\x82\x15\x79\x40\xeb\xc8\x45\x4c\x4b\xfa\x4e\x49\xfa\x60\x63\xa6\xca\x84\x63\x16\x1b\x95\x55\xd6\x69\x34\x0c\xb5\xc7\x2c\x16\x2a\x99\x5d\xfc\xed\xef\x7f\xb9\xbd\xfd\x6b\x9c\xeb\x1c\xfe\x0b\xb6\xe2\x0a\xa8\x76\x9e\x03\x80\x72\x0e\x64\x13\xc7\x7a\x2f\xc4\x53\x43\xa5\x39\x75\xb8\x67\x3f\x40\x51\x14\x5e\x4e\x1b\x55\xa2\x5b\x60\x65\x89\x54\xdc\xe3\xab\x95\x71\x68\x06\x27\x6c\x38\xa0\x97\x6e\xae\x1e\xa4\x67\xc2\xb4\x32\xc5\xd3\x46\xd8\x51\x03\x8f\xef\xe6\xd0\xcb\xea\xd7\xb1\xa3\x26\xce\xdf\x0d\x62\x29\x57\x3d\x21\x48\x94\x76\xc9\x50\x62\xc9\x85\x01\xa2\x9b\xcd\x8d\x70\xc2\xa9\xa3\x0d\x1d\xdc\x87\x52\x39\xc4\x70\x25\x3a\x23\x98\x3d\x8f\xe5\x5a\xe5\x2f\x87\xda\xdc\x65\xdc\x30\xdb\x89\x34\x75\x2e\xfd\xb4\xc0\xad\x29\x68\x97\x57\x7e\x6d\xe7\x67\x6e\xe7\x81\xac\xad\xad\xc3\x92\xb9\x02\x50\xd2\xac\xc0\xfd\x92\x23\x56\x29\xe7\xa1\x62\x0b\x91\xcd\x95\x74\x4c\xc9\xb9\xc8\x2f\x06\xa8\x75\xc0\xf0\x22\xce\x0d\x9d\x53\x49\x03\x18\xca\xda\xc4\x60\x81\xd4\x62\xd2\xae\xa7\xd7\xf1\x75\x7c\x99\xd2\x92\x5f\xcf\x62\x8e\xd9\x20\x00\xae\x97\x39\x10\x01\xa7\x49\x6f\x0e\xc6\x29\x96\x4a\x12\x83\x9e\x97\x8e\x1d\xbf\x35\x4e\x5a\x5e\x18\x48\xa3\x59\x09\x36\x14\x02\xeb\xa8\x71\xa7\x12\x8f\x36\xea\xb1\x3e\x8f\x76\x82\x6a\x43\x3a\xc3\xce\xdf\xfe\xdb\xcb\x03\x3b\xbd\xbf\xa3\x57\xce\xba\x21\xc7\xfb\xb0\x56\x31\x41\x1d\xa6\x6b\xe2\x49\x29\xe7\x06\xad\x0f\xd8\x99\x0a\xcf\x25\x82\x70\x94\x66\xbc\x68\x40\x5b\xb3\xce\x5e\xc2\xf9\x7c\x24\xfb\x4b\x20\xa8\x73\x89\x41\xe6\x42\x3e\xfe\x34\xad\x33\x66\xca\x94\x01\x01\x74\x2c\x09\xdb\x89\x15\x0e\x2d\x69\x34\x78\xd2\x26\x6f\xa0\x54\x48\x20\x73\xbb\xab\x45\x57\x54\x14\x5e\x31\xe9\x4f\x08\xfb\x6c\x6f\x64\x06\xad\x39\xe8\x4d\xc3\x6d\xda\xf5\x59\xaf\x4f\x87\x4b\xed\x9d\x6f\x7b\x3c\x1f\x74\x8f\x6f\x59\x9e\xed\x8e\xea\x82\xa3\xf4\x9f\x0b\x34\x63\xad\x3a\xd6\xea\x3c\x1b\xb9\x46\xad\x43\xda\x35\xd7\x74\x4d\xef\x28\x3e\x8e\xee\x67\xb8\x57\x6c\x82\x2a\xa8\xb5\xc7\x02\xf7\x32\x13\x00\xf4\xc0\x0e\x59\x62\x9f\x52\x23\xec\x69\x43\xeb\xa2\x4e\x45\x59\x22\xf7\xe4\x51\xd4\x7d\xad\x96\x35\x68\xe5\x54\x5a\x0a\xa9\x4c\xda\x5e\x8a\xd3\x4a\xe7\x86\x72\xdf\x47\x73\x5a\x58\xdc\x65\xd1\xde\xf1\x22\x88\x36\x07\x6c\x33\x33\x82\xce\x5e\x74\x3d\x9c\x7e\x5c\xcc\xa8\xc5\xde\xb4\xb3\x47\xa1\x91\x2f\x69\x58\x59\x13\xcd\x16\x0a\xdd\xea\x46\x4e\x53\x6b\x1f\x94\xe1\xdb\x72\xdd\xea\x04\xc0\x2e\x85\x4e\xe7\x42\xd2\x22\xb5\x92\x6a\xbb\x50\xae\x87\xcf\x08\x86\xeb\xcd\xb1\xb4\x1c\xc8\x47\xf3\xa3\xc3\x79\x20\xbe\xbd\xf9\x76\xdc\xc8\xfd\xe1\x89\x6f\x9c\xe3\x79\x16\x08\xfe\xfe\xe0\xe7\xb0\x7b\x35\x49\x69\x8e\xd2\x7d\xe8\x6b\x83\xd7\x39\xf9\xbd\xe1\x93\x4d\xdb\x7b\x26\x6c\x9f\xca\xaa\x3c\x75\xc4\x1e\x7f\x09\xd8\x86\xab\x25\x98\x33\x72\x13\xd4\xdb\xf4\x7c\x21\x5f\xb8\x66\x44\xff\x1e\x5c\xa9\xdb\x9b\x65\x7b\x3b\x0d\xd7\xd1\x00\xda\x91\xcb\xe9\x46\x73\xb3\xb7\x75\x1d\x0d\x6f\x7c\xc4\x9b\x22\x32\xff\x7a\xdf\xc6\x46\xd9\x94\x7d\x9b\x87\x06\xc4\xed\xf4\x34\x2f\x70\x0d\xf8\x3d\x72\x3a\xf4\xe8\xd6\x19\x20\x8d\x81\x49\x78\x67\x61\x46\xe8\xee\x9d\xe5\x8d\xd6\xd0\x09\x41\x10\x0a\xe0\x77\x05\xd5\xd1\x27\x8c\x38\x08\x4f\x40\x42\xe6\x61\xee\x6b\x0a\x62\x6e\x54\x99\x6a\x65\x5c\x88\xea\xf2\xb2\x69\x30\xd5\x2d\xf5\x16\xb5\x51\x4e\x31\x55\xb4\xf1\x3b\xa6\x1b\x20\x98\xe0\x26\xcd\x0a\xc5\x96\x4d\x99\x4e\xe3\xf0\x2f\x99\x46\xf7\xed\x84\x7b\xc8\xe3\xcd\xf4\xfa\xd5\x88\xcf\xf5\xf2\x4f\xef\x35\x18\x7f\x3d\xf0\xd9\x5b\xdc\x78\xec\xfb\x7b\x01\xdf\xd1\x3a\x43\x30\x68\xfd\xcd\xd7\x81\x92\x45\x1d\xac\xc2\x0f\xeb\x8b\x16\xb4\xf7\x88\x3f\xb5\x2a\x7f\xae\x1c\x2c\xa8\xe4\x35\x34\x5d\xe6\xe8\xd2\xf7\x4a\xfb\xdc\x6c\xe1\x41\xb8\x85\xaa\x1c\x94\x54\x56\xb4\x28\x6a\xb0\x76\x41\xbc\x84\x90\x4e\x81\x5b\x60\x6b\x30\xfe\x68\xa0\x1b\xf8\x6e\x2f\xa6\xd3\x1d\xb0\x07\x5b\x7d\xc0\x87\xa0\x6f\x17\xf7\x01\x56\xea\x3f\x0f\x74\xc1\xe1\xfe\x22\xd8\x0d\xaa\x5b\x1b\xa4\x9f\x5c\x9c\x96\xfd\x93\xda\xb2\x7d\x1b\xfd\x88\xee\x24\xad\x85\x93\x9b\xb4\x91\x3f\xb1\x57\x8f\xe7\xf3\x66\xfa\x7a\xb6\x27\x9f\xeb\xad\x91\x7c\x56\xfc\x43\xf3\xd9\xbd\x36\x9f\x5a\x68\x67\x06\xf6\xe1\x85\x76\x46\x60\xbb\x74\x33\xd8\xfa\x5c\x88\x9d\x13\xd8\xc7\x23\xf6\x89\xdb\xf2\x58\x5f\xf2\xac\xd7\x8f\xfb\xef\x54\xc3\xaf\xe4\x09\x08\x5f\x5d\x4d\xaf\xf7\x20\xbc\xde\x7a\x06\x84\x4f\x88\xec\xd5\xec\x6a\xf7\xbb\x3b\xd8\x7a\x86\xc8\x4e\x20\xc9\xcd\x28\x7f\x0a\x3f\x86\x21\xfe\xe8\xfc\xf2\x6d\x47\x7e\x41\xfe\x17\x35\xca\x1c\x9c\x2a\x66\xd3\x9d\x8f\x6b\x6f\x71\x7c\xaa\xf0\xb7\x93\x0e\xd3\xf6\x4a\x18\xbc\xfc\xbc\xbe\x95\xdd\xff\x92\x1c\x6d\xcc\x56\xf0\xc3\xba\xf3\x73\x4c\x9d\xb7\xd3\xdb\x31\x1c\xd7\xcb\xcf\xe3\xf5\x6a\xb7\x42\xb6\x96\xcf\xf7\xfa\xf3\xaa\x97\xe6\x79\xfb\x54\xda\x08\xd2\xc7\x69\xe3\x07\x2f\xf6\x6c\x6c\x71\x33\x06\xd3\xcd\xc7\xa5\xe5\xf3\x10\xd4\xa7\x2d\x85\xff\x07\x00\x00\xff\xff\x4c\x2b\x03\xcf\x4d\x23\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x7, 0x53, 0x70, 0x3d, 0x90, 0xe3, 0x9, 0xbf, 0x3e, 0x5d, 0x91, 0xa1, 0x8b, 0x95, 0x7f, 0xa5, 0x71, 0xc4, 0xa6, 0x52, 0xe2, 0xdf, 0xe0, 0x24, 0x82, 0x4e, 0x51, 0xa0, 0x42, 0xbd, 0x0}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\xc8\x7b\x2c\xd4\x0a\x10\x8b\x9c\x65\x34\x89\xa7\xc5\xc2\xb1\x8d\x67\xdc\x2a\x42\xbd\x3b\x8a\xbb\x80\xca\x05\xb2\xcc\x7b\xff\xeb\xcb\x73\xa2\xe2\x69\x0a\x0c\x66\x0e\x55\x94\x0b\x46\x5a\xd8\xc0\xe7\x70\x19\x86\x6f\x48\x39\xa3\x8f\xa2\x14\x67\xc6\x39\xd5\xa8\x9d\x12\x12\x39\x65\x51\xa4\x23\x47\xfd\x45\x72\xd3\x7f\x35\x3f\x0d\x8e\x47\x1f\xfb\x31\x37\x25\x81\x44\xee\x19\xd7\x2c\x9e\xb8\x88\x4f\x71\x33\x00\x74\xcd\x0c\x23\x2c\x94\x07\x00\xc7\x07\xaa\x41\x61\x6c\x08\xc0\x50\x2d\xa9\xd0\xc3\xb2\xca\x47\x30\xd0\xbe\x11\xcc\x93\x7d\xb1\xed\x17\x5e\xb9\xdd\xd9\xc7\xbd\xdd\x99\x9b\x4c\x4e\xa2\xc7\xc2\x2d\x38\x82\x79\xb5\xcf\x76\xbf\x19\x97\x6e\x56\x15\x2e\x77\x5f\xd8\x4d\x98\x49\xe4\x9c\x8a\xeb\x98\xc8\x1b\xe6\x3a\x05\x3f\xe3\x3b\xaf\x1d\x5e\x48\x95\xcb\x92\x44\xd1\xa5\x73\xdc\x0e\x81\xb5\x84\xbf\xbc\xe0\x67\x8e\xc2\x78\xf0\xa1\x9f\xd2\x0a\xda\x29\xfb\xba\xaf\x00\x00\x00\xff\xff\xb4\x82\x23\x39\x30\x02\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xa1, 0xc8, 0x99, 0x32, 0x37, 0x1c, 0xdc, 0xb1, 0x38, 0xcb, 0x56, 0x9d, 0x23, 0xd7, 0xdd, 0x79, 0xb1, 0xd5, 0xda, 0x30, 0x2a, 0x2d, 0xb9, 0x4b, 0x8c, 0xef, 0x78, 0xdc, 0x9c, 0xc3, 0x2b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":   clusterTf,
	"outputs.tf":   outputsTf,
	"variables.tf": variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":   &bintree{clusterTf, map[string]*bintree{}},
	"outputs.tf":   &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf": &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
