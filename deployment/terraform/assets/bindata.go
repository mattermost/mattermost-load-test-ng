// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (14.631kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (30.868kB)
// assets/datasource.yaml (296B)
// assets/es_dashboard_data.json (8.51kB)
// assets/outputs.tf (531B)
// assets/variables.tf (1.032kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x8f\xdb\xb6\xf2\x7f\xf7\xa7\x98\xbf\x12\xa0\x49\x11\xc9\xf6\xee\x36\x97\x6d\xb7\x45\x7a\x45\x81\xb4\x09\xfe\xed\x39\x7d\x08\x16\x02\x4d\x8e\x6d\x76\x25\x52\x87\xa4\xbc\x71\x72\x7c\x3e\xfb\x01\x2f\x92\x65\x5d\x6c\x67\x93\x6d\xda\x93\x6e\x5e\x64\x72\x66\x38\x9a\xcb\x6f\x86\xa4\x52\x28\xb9\xe2\x0c\x15\x44\xe4\x5a\x47\xf0\x66\x04\x50\x28\x39\xe7\x19\xc2\x05\x44\x79\x1e\x67\x92\x30\x83\xda\x44\x23\x00\x85\x0b\x2e\x05\xd8\x99\x52\xc7\x48\xb4\x89\x4f\xec\xf8\x0a\x95\xb6\x13\x17\x10\xfd\xe7\x4b\x38\x49\xce\x1e\x45\xa3\xcd\x68\xc4\x88\x21\x4e\x6e\xea\x19\x23\x88\x68\xa9\x14\x0a\x13\xc1\x9b\x9d\x79\x4a\xb2\x0c\x55\xca\x19\x0a\xc3\xcd\x7a\x98\x50\x97\x33\x81\x26\xe5\x4c\x47\x10\x69\xcc\x90\x1a\x64\x5e\xed\x55\x41\x53\xce\xac\x0e\x77\xdf\xac\x88\x4a\x56\x05\xdd\x38\x35\x14\x6a\x59\x2a\x8a\x5e\xc2\x15\xae\xd3\x82\x70\x15\x41\x74\x85\x6b\xcf\x6a\xc7\x04\xc9\x11\x60\xcb\x4e\xb3\x52\x1b\x54\x6e\x7c\x13\x5f\xe1\xda\x31\x59\xf3\x94\xb3\x8c\x53\x2b\x07\x2e\xc0\x1a\xea\x9e\x25\xd7\x7a\x99\x6e\x67\xee\x77\xd7\xe5\x42\x1b\x22\x28\x46\x10\x91\xa2\x48\x35\xaa\x15\x2a\xbf\xbc\x21\x0b\x0d\x17\xee\x11\xe0\x67\xab\xc7\x80\x16\xa4\x28\xe2\xbb\x6f\xa8\x2c\x85\x49\xb8\x60\xf8\x6a\x63\x15\xda\x8c\x46\x00\x54\x0a\x81\xd4\x58\x2f\x78\x39\x77\xe0\xd7\x25\x02\xc3\x39\x29\x33\x03\xa5\x46\xe5\xde\x70\x2e\x15\xc8\x52\xc1\xd3\x9f\x7e\x74\x64\x66\x5d\xb8\xe5\xb4\x5e\x46\x6e\xc0\x52\x3a\x07\xcf\x4a\x61\x4a\x3f\xb6\x94\xda\xc0\x05\x68\xcc\xe6\x49\x78\x49\x5e\x54\x2b\x93\x9c\xc3\xf6\xef\x02\x22\x92\xf3\x78\x32\xa7\x27\x13\xc6\xa6\x8c\x9c\x4d\x1e\x3e\x7a\x3c\x99\x45\x70\x07\xa6\x8f\x93\xc9\x19\x3c\xfb\xf5\x97\x11\x40\x65\x8e\x34\x28\x60\x5f\xd6\xda\x65\x67\x7c\xd7\x35\x4e\x7a\xd3\x85\xc9\x15\xae\x13\xce\xdc\xdb\x97\xc2\x34\x74\xe8\x48\x73\x04\x21\x48\x34\xd2\x52\x71\xb3\x4e\x17\x4a\x96\x85\x8d\x25\xb8\x80\x97\xee\x45\xa3\xbb\x6f\x5c\x94\xed\x50\x58\x49\x09\x67\x9b\xe8\xc1\x7e\x9a\x74\x21\xb5\xe6\x9e\x74\x04\x70\x69\x8d\xc3\xd6\x82\xe4\x9c\x42\xa4\xa4\x34\xe9\x2c\x93\xf4\x2a\x65\xb8\xe2\x36\x0e\xbc\x9f\xe6\x52\xa5\x48\xe8\x32\x68\xdd\xa1\x73\x44\x54\x0a\x83\xc2\x04\x16\x80\x95\xcc\xca\x1c\x53\xcd\x5f\x5b\xdb\x65\x52\x5e\x95\xc5\xbd\x0e\x6b\xb2\x22\x59\x89\x0f\x20\x6a\x90\x47\x0f\x40\x94\x59\x76\x7f\x57\x50\x70\xc2\xb1\x82\x2c\xf9\x8e\xa0\x4d\x15\x0c\x0e\x4e\x2c\x16\x58\x44\xb1\xc9\x51\xbd\x66\x48\x85\x86\x7f\x72\x62\x0c\xaa\x5c\x6a\x93\x66\x9c\xa2\xd0\x98\x5a\x06\x47\xcd\x50\x1b\x2e\x88\x09\xa0\x32\x5e\xca\x1c\xc7\x3e\x22\xc7\x5b\xbe\x86\x88\x38\x88\x88\x7a\x15\x51\x98\x4b\x83\x31\xbe\x42\x5a\xe9\xc3\x45\xc6\x05\xd6\x8e\x07\x88\xae\x97\x16\xf4\x5e\xc2\xff\x41\x3c\x87\xf1\x8a\xa8\x71\xc6\x67\x63\x9a\xc9\x92\x8d\xab\x38\x1a\xcf\xa4\x34\xf1\x9c\x0b\xae\x97\xc8\xe0\xf2\x73\x60\x12\x90\x2e\x25\x7c\xf2\x1b\xe1\x86\x8b\x85\x4b\x30\xc7\x14\x73\xc1\x4d\x92\x24\x9f\x7c\x0e\x3a\x43\x2c\x60\x6a\xa9\x05\x86\x30\xb2\x2b\x2e\xd0\x40\x1c\x0b\x19\xd3\x25\xd2\xab\x98\xa2\x32\x7c\xce\x29\x31\x08\xf1\xbf\x9e\x43\x0c\x4b\x63\x0a\x7d\x3e\x1e\xeb\xd3\x18\xcb\xf8\x1a\xb5\x89\xa7\x09\xc9\xc9\x6b\x29\xc8\xb5\x4e\xa8\xcc\xc7\x0c\x67\x89\x92\xb3\x52\x9b\x02\x15\xc5\xc2\xda\x2c\xe1\x72\x7c\x36\xfd\xee\xfb\x6f\x9e\x3c\xf9\x36\x59\x14\x0b\xf8\x37\xe8\x92\x49\x20\x85\xb1\x48\x06\x84\x31\x88\xb7\x7a\xd4\x73\x4e\x9f\x35\x94\x05\x23\x06\x07\xe6\x9d\x29\xb2\xcc\xd2\x15\x4a\xe6\x68\x96\x58\xea\x58\x48\x66\xed\x5b\x48\x65\x50\xb5\xdf\xf0\x39\x34\x1c\xc5\xb8\x36\x89\x21\x2a\x59\xbc\x06\x8f\x71\x8d\x40\x60\xf2\x5a\xd8\x82\x93\x96\x2a\xdb\x6c\xc5\x18\xa2\xe0\xd5\xeb\xf9\x80\x98\x96\xa2\xf9\xaa\x41\x07\x63\x59\x98\xb1\x47\xb1\x4b\x17\x1b\xfb\x80\x39\x47\xa3\x38\xd5\x37\x03\xe7\xc0\xfc\x3f\x83\xc8\x91\x39\x49\x32\xa2\x16\x2e\xa7\x8e\x81\xe1\x9b\xc2\x6b\x30\x5c\x0d\xb1\x7f\x03\xe7\xdf\x78\x75\xcb\x78\xd5\xa2\xd5\x6b\x6d\x30\xa7\x26\x03\x14\x64\x96\xe1\x30\x65\x8f\x54\xc2\x98\xcb\xd0\x8c\xcf\xe6\x52\x18\x2a\xc5\x9c\x2f\xa6\x2d\xab\x55\x86\x61\x59\xb2\x50\x64\x4e\x04\x71\xc6\x90\x5a\x8f\x15\x66\x48\x34\x8e\xc3\x78\xfa\x30\x79\x98\x9c\xa4\x24\x67\x0f\xcf\x12\x86\xb3\x96\x02\xac\xb8\x5a\x40\xcc\xe1\x20\xf5\xce\xb2\x0b\x6e\x96\xe5\xcc\x2d\xc9\xc5\xac\xa4\x57\x68\xb6\x0f\x41\x01\x3d\xae\xd0\x77\xbc\x3a\x49\xa6\xc9\xa4\xa6\x48\xdd\xcf\x34\xe3\xa2\x7c\x75\x50\xb1\x63\x99\x86\xf4\xfb\xbd\xd4\xe6\x9a\x18\xba\xb4\x3f\x30\x23\xda\x70\xaa\x91\x28\xba\x4c\xab\xfa\xd2\xa7\xf1\xd4\x69\xdc\x4f\x1f\xbb\xc9\xc4\xa9\x12\x7b\x55\xfa\x2b\xc7\x15\xe3\xca\x57\x8c\x7e\x41\x2d\x7a\x5b\x96\xe2\xd7\xaf\x56\x73\x78\xcb\x75\x21\xfe\x66\xdf\x32\x10\xc7\xda\x28\x5e\xc4\x54\xe6\x85\x14\x28\x8c\xbe\x98\x0e\x86\x2c\x23\x98\x4b\x11\x2b\xb4\x86\x38\x14\xd8\x21\x6c\xe2\x50\xe1\x5a\xd4\xa8\x2c\x68\xb5\x88\x40\x1b\xa2\xcc\x21\xc1\x95\xdb\x07\x44\x56\xd3\x41\xd8\x91\xf5\xb8\x50\xf2\xd5\xfa\x66\xd5\xd8\xb1\xfa\x5a\xdc\x2e\x88\xbb\x7f\x83\xe5\xb1\x53\x12\xdb\x7c\x76\x51\xaf\x61\x7b\xd3\xb2\xbb\x1d\xe9\xe3\xeb\x6e\x4e\xe0\x4b\x98\xc2\x57\x30\x85\x73\x98\x58\x95\xb5\x96\x94\x13\x83\x69\x5d\xde\x53\xc2\x98\x42\x6d\xdf\xdf\xa8\x12\x6f\x5a\x6e\x9d\xca\xdb\x4d\x4a\xa3\xb6\x0f\x96\xf5\x8f\xad\x18\x7f\xb8\xd6\xed\xaf\xd0\x06\xdc\xde\x76\x61\x88\x53\x2c\xb8\x78\xf5\x7e\x00\xb0\x4f\x94\xca\x9d\xed\xd0\xd0\xb1\x9b\x1e\x6b\x6e\x50\xc7\x9e\x83\x8d\x83\xdb\x5b\x4c\x99\x80\x78\xae\xbb\x5c\x64\x45\x78\x66\x19\xc7\xcd\x5d\xc8\x90\xec\x2d\xcd\x7e\x4c\x24\x79\x1a\xa0\xd4\x56\xd4\x2b\x64\xa9\x92\x76\x73\x1d\x61\x38\xb4\xf3\x89\xee\x29\x42\x32\x47\xa8\x77\x7b\xaf\x9e\xd3\xb0\xdd\x02\xc4\x64\x4e\xb8\x70\x52\x6f\x86\xba\x5b\xbe\x2a\xa0\xbd\xc8\xc6\xde\xa1\x02\xdd\x7e\x76\xcb\xb7\xab\xd3\xf6\x6c\xd1\xd2\xa3\xae\x06\xaa\xed\x86\x74\x1d\xa4\xae\x8e\x19\xea\xf3\xc1\x46\x8e\x60\x86\x39\x0a\x73\xcf\xc8\x8c\x6b\x73\x8f\x11\x43\x92\xdd\xc3\xc4\xa4\x3a\x4a\x4c\x38\xd3\xf7\x1f\xc0\xe4\x7e\xed\x0d\x80\x7e\x84\xed\x07\xd7\xa0\xbb\x83\xd7\xcb\xda\x06\x15\x7c\xe2\x4c\x57\xfa\x0e\x00\x27\xea\xb4\x41\xd4\x8b\x9a\x76\x3e\x84\xcf\xb6\x12\x0c\xa2\x60\x43\xda\x00\xfe\x45\x8b\xe2\x24\xba\xbf\x0f\x92\xf7\xc8\x08\x60\x3c\x9d\xb4\x11\x34\xf8\xd5\x77\xc3\x35\x78\x75\xcf\xfc\x50\x77\xaa\xa7\xdf\xc3\x52\x8a\x5a\xa7\x85\xcc\x38\xe5\x68\x2d\xfe\xc5\x17\xdf\x3c\xff\xf9\xfb\x1f\x7f\x18\x41\x6d\x8a\xe8\x9f\x3e\x16\xa2\x73\x88\x4e\x26\xd3\x93\x78\x3a\x89\xa7\x8f\xb6\x89\xfa\x8b\x21\xc6\xb9\x3e\x3a\xaf\x83\xc1\xfe\xbd\x19\xed\xd6\xe4\xe8\xa9\x03\x7b\x2b\x06\xf5\xf9\xa7\xb5\x80\x7a\xfe\x85\xe2\x82\xf2\x82\x64\x96\xa4\x67\xfe\xbb\xf9\x1c\xa9\x5d\x25\x7a\x9a\x65\xf2\xba\x4b\xf0\xff\x21\xeb\x2c\x09\x51\xe2\x9c\x5c\xeb\x73\xd4\xe7\x77\xdf\xd4\xc1\xe8\x8f\xc8\x93\x70\xee\x9d\xb8\x84\x68\xce\xb7\x8e\xc8\x6b\x42\x42\x5d\xfb\x90\x72\xb6\x39\xf7\xc9\x36\xee\x4f\xad\xf1\xa7\x51\x43\xab\x4d\x78\xbe\x0c\x2d\x52\xb0\xad\x8d\x56\x2c\x50\x30\x9d\xba\x9c\xf3\x56\xdb\x03\x41\x09\xea\x7a\xcf\xee\xfb\x98\xae\x5f\xfd\xe1\xeb\x66\xd4\x87\x6a\xb6\x42\x46\x10\xe9\x53\xff\x60\x3d\xe3\xb1\x62\x00\x22\x02\x61\x6b\xb5\x03\xed\x54\x2f\x9e\x86\x08\x73\x97\x00\x91\x3e\xad\x2f\x03\x5c\xcd\x0e\xbd\x50\xa5\x61\xe2\x97\x7d\x39\xb9\x74\x8e\x79\xc7\xd5\xf5\x69\x1a\x9a\x65\xbb\x70\xf5\x68\xd7\x0e\x4d\x72\xff\xbb\x27\x35\xad\xcb\x8f\x2c\x00\x69\xa1\xf8\xca\xd6\xdf\x6d\xdf\x79\x64\x8b\x79\x34\xaa\x37\xd7\x75\xc9\x39\x97\x8a\x62\xca\x50\x1b\x25\xd7\x15\x08\xf5\x1a\xd9\x5a\xcd\x27\xf1\xba\xf6\x72\xf5\xf3\x48\x5f\x07\xf2\xdb\xf0\x8c\x6d\xb8\x9c\x74\x07\x2f\xdf\x3d\xff\x7e\x64\x75\xda\x83\x2a\xbd\x88\xd2\x44\x93\xbd\x48\xb0\x85\x99\x97\x6d\x7c\xd0\xa7\xe7\xcf\xb8\x36\x5f\xef\xee\xa1\x9a\xd3\x3f\x60\x98\x7d\x26\xa9\x3b\x18\x6f\x66\xf3\xe5\xce\x32\x7d\x60\xa3\x4f\xcf\xcf\xcf\x43\xc9\xaa\xc2\xaf\x0e\x28\x6b\xbd\xb0\x21\x70\xd8\xf0\xa0\xef\xcd\xf6\x2a\xff\x74\x26\x95\xf9\xa9\xcc\x0c\x2f\x88\x32\xff\x28\x76\x5a\xb1\x26\xe1\xb7\x98\xa1\xc1\xe7\xb3\xdf\xad\x95\x06\xde\xf3\x98\xd9\xa7\x34\xeb\x25\x78\x51\xee\x63\xaf\x67\x2d\xfb\xa0\xfd\xf6\xfa\xf0\xa6\xc6\xdd\xc2\xef\xc6\xe1\xe5\x66\x64\xe3\xad\x0b\x8a\x8a\xe9\xb4\x4a\x83\xc6\x56\xb8\x3d\x14\x1a\x88\x3d\x3b\x4d\x9f\x01\x6c\xd6\xbd\x04\xf3\x35\x64\xce\x6d\x36\x75\x98\x7a\x33\x91\xcd\x7a\xee\x1d\x6b\x95\xba\xe2\x7c\x8e\x36\x5e\xc5\xea\x51\x3d\xba\x1b\xbb\xad\x52\x19\xd1\xfa\x90\xe2\x96\xc6\x76\x86\xb6\x85\x6e\x6f\xc4\x87\x98\x3c\xb1\x85\xca\xa2\xc8\xd6\x29\xcf\x73\x64\x76\x43\x9d\xad\x9b\x5c\xa1\x7f\x22\xa5\x91\x69\xce\x85\x54\x55\x7f\x99\x96\xc5\x42\x11\x66\x41\x71\x4e\x32\xdd\x83\x6f\x8d\xd7\x8b\x20\xda\xbe\x60\xf0\x4c\x8f\x75\x06\xad\x6b\xcd\x69\x2b\xfd\x8c\x68\x6c\xf6\xca\xfd\x0c\x9e\x3e\x27\x6e\xa4\xde\x8c\xee\x58\xa1\x1a\xdd\xd2\x15\x44\xeb\x6b\xa9\xd8\x2e\x5d\x35\x3a\x02\xd0\x57\xbc\x48\xe7\x5c\x90\x2c\xd5\x82\x14\x7a\x29\x4d\xc3\x3e\x3d\x36\xac\x27\xfb\xdc\xb2\xc7\x1f\xfe\xa1\x6e\xec\x77\xc9\x77\x27\x5f\xf6\x0b\xb9\xdc\x7f\xd7\xd0\xdf\x9a\xb3\x59\xe8\xca\xf7\x9d\x38\x55\x5f\x3b\xa4\x64\xe1\xbf\x3e\x78\xab\xeb\x79\xcb\x73\xf4\x05\xfd\x1f\x76\xcf\x33\x74\xdb\x6e\xb5\x7d\x9f\xf7\xed\xbb\xf2\x3c\xd8\xdc\xc0\x4f\x4e\x4e\x70\xd5\x47\x78\xf6\xf4\x71\x9f\x00\x55\x17\xc6\x26\x2f\x76\x2f\x89\xdd\xad\xb0\xcb\xcc\x03\x77\xc4\x5b\xce\xed\xdc\xce\x95\xb0\xfb\xa2\x29\xb6\xa2\x62\xb1\xf8\x74\x68\x62\xcb\xac\xf2\xa6\xcc\x7d\xa7\x34\xbb\x81\xec\x3f\xf4\x69\xb6\xb9\x7b\x4b\x2c\x29\x8a\xb8\x12\x10\x7b\x01\x6e\x33\xa6\xa9\xe2\x45\xf5\x21\xc4\xd3\xa2\xa8\x8f\x23\xc0\x11\x39\xb7\x55\xa8\x55\x15\x1d\xe8\x59\x20\x1a\x39\x1c\x58\xb8\x13\xe4\x90\x38\x4a\xe6\xa9\xf5\x80\xd3\xea\xe4\xc4\xc3\x92\xac\x86\x1a\x83\x85\x92\x46\x52\x59\x6d\x39\x0c\x2d\xbc\x21\x28\x67\xca\xc7\xb9\x4f\xe8\x49\xe2\xfe\x8d\x27\x51\xb5\xaf\xdc\xb7\xe2\xe3\xc9\xc3\xcf\x7a\xd6\xac\x87\xdf\xff\xaa\x4e\xf8\xa3\xd6\x9a\x8d\xc1\xed\x8a\xcd\xf5\xee\xc0\x4f\x64\x3d\x43\x50\x76\xc3\xc3\xa9\x01\x29\xb2\xb5\x93\x0a\x2f\xea\x88\x86\x70\x5b\xf2\x55\x60\xf9\xba\x34\xb0\x24\x82\xad\xc1\xe7\xa7\x21\x57\x36\xcb\xc2\xc7\x75\x1a\xae\xb9\x59\xca\xd2\x40\x4e\x44\x49\xb2\x6c\x0d\x5a\x2f\x63\x4b\xc1\x85\x91\x60\x96\x18\x04\x26\xef\x6c\x68\x6f\xbe\x27\xd3\xc9\xa4\x63\xec\xd6\x54\xd3\xe0\x6d\xa3\xef\x06\xf7\x1e\xfc\x6e\x5e\xe7\x57\xca\xe1\x70\x10\x74\x95\xaa\xc6\x5a\xee\x8f\xa7\xc7\x79\xff\xa8\xb4\x0c\xdf\x6a\xbd\x43\x76\xc6\x41\xc2\xd1\x49\xea\xe9\x8f\xcc\xd5\xc3\xfe\x7c\x3c\x79\x74\x36\xe0\xcf\x7a\xaa\xc7\x9f\x25\x7b\x5b\x7f\x56\x5f\xbf\x1d\x1b\x68\x37\x54\xec\xed\x03\xed\x06\x8a\x75\xe1\xa6\x35\xf5\xa1\x2c\x76\x13\xc5\xde\xdd\x62\x7f\x70\x5a\x1e\xca\x4b\x36\x6b\xe4\xe3\xf0\x4e\xb4\x5d\x25\x8f\xb0\xf0\xe9\xe9\xe4\xe1\x80\x85\xeb\xa9\x5b\xb0\xf0\x11\x9a\x7d\x76\x76\xda\xad\xbb\xad\xa9\x5b\xd0\xec\x08\x90\xdc\x6e\x80\x8e\xc1\x47\xb7\xf5\x39\xd8\xbf\x3c\xab\xc0\xcf\xd1\xff\xa5\x5a\x99\xbd\x5d\xc5\xd9\xa4\x53\x5c\x1b\x83\xfd\x5d\x85\xdd\xd3\x55\x36\x0d\x1b\xe9\xa3\x22\xe6\x03\x16\xf2\x3f\x5d\x25\xaf\xbe\xb9\x3c\x08\x1b\x81\xf0\xed\xb0\xe3\x43\xf4\xc4\x4f\x26\x4f\xfa\xec\x58\x0f\xdf\xce\xaa\xa7\xdd\xf8\xdd\x19\xbe\xf9\xaa\x7f\xae\x78\x09\xd7\xb3\x87\xe3\x25\x10\x1e\x46\xb4\x5f\xba\x10\x16\x78\xeb\x43\x97\xa3\x2a\xd4\xd9\xd9\xe9\x40\x52\x57\x33\xef\xb5\x0a\x3c\x38\xe2\x5b\xdc\x63\x72\xbe\x4f\xed\x7e\x95\xff\x28\x75\x37\xa3\xd1\x1d\xf8\x0d\x41\x20\x32\x20\xa0\xb1\x20\x8a\x18\x6c\xd7\x1a\x55\xda\x3d\x99\x84\x42\xe1\xca\x96\x22\xba\xa6\x19\xa7\xe1\xf2\x13\x05\x5d\xc3\x0c\xcd\x35\xa2\x18\xdd\x71\x9b\x31\x52\x14\x81\x93\x08\x06\x61\x5d\x3f\x92\xec\x8d\xba\xd4\xae\xe4\x37\x1d\xb1\x91\x71\xfd\x9d\x9c\x3f\x5a\xec\x7e\x57\x56\x3b\x37\x44\x8c\xb5\x58\x3b\x5c\x1a\x64\x27\x9f\xb9\x14\x6d\x87\x4d\x97\xa2\x1d\x3e\xd0\x8d\xa3\xce\x29\xdd\x96\x64\xaf\xed\x47\xd5\x7f\xef\xe8\x9e\xf3\xf5\xb3\x7a\xb7\x1e\x91\xaf\xfe\x2b\xbe\x63\x9b\x10\x47\x7d\x38\x65\x5f\x58\xb2\x5b\xeb\x3d\x1e\xf7\xc1\xda\xe3\x77\x83\xd1\x3f\x57\xbb\x53\xf9\xe0\x63\x6a\x44\xfe\x1b\x00\x00\xff\xff\x69\x56\xbc\x85\x27\x39\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf0, 0x64, 0x51, 0x3c, 0x22, 0x80, 0x18, 0x46, 0x55, 0x46, 0xd5, 0x86, 0xa3, 0x86, 0xe9, 0x97, 0x92, 0xad, 0x37, 0xd8, 0xbb, 0x1f, 0x31, 0xcf, 0x4f, 0x36, 0x70, 0x48, 0x65, 0xe2, 0xb5, 0x60}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x73\xdb\x36\xf2\xc0\xdf\xe7\x53\x60\x30\xff\xff\x8d\xd3\xb1\x5b\x4b\x89\xe3\xd8\x33\x7d\xe1\xa8\x49\x2e\x33\x71\xeb\xf3\x43\xaf\x73\x49\x86\x03\x91\x2b\x09\x63\x12\x60\x00\x50\xb6\x9a\x73\x3f\xfb\x0d\xc0\x27\xf0\x41\x32\xa5\x48\xb6\xd2\xa0\x2f\x6a\x11\x04\x81\xdd\xc5\x62\xf1\xcb\x02\xa2\xbe\x3c\x41\x08\x13\xc6\xb8\x22\x8a\x72\x26\xf1\x31\xd2\x45\x08\xe1\x90\x4a\x85\x8f\xd1\x07\x73\x85\xb2\x52\x73\x67\x98\xd0\x50\xbd\x63\xf8\x18\xf5\x76\xcb\xd2\x80\x28\x22\x79\x22\x7c\xc0\xc7\x08\xef\xed\xa1\xb7\x82\x8c\x08\x23\x68\x6f\x0f\x5b\xd5\x80\x91\x61\xa8\xab\x28\x91\x80\x55\x3e\xa1\x41\x4b\x29\xf5\x39\x1b\xf0\x90\x0b\xdd\xa6\x18\x0f\xc9\xce\xfe\x2e\xea\xf7\x7a\xbb\xa8\x7f\x70\xb0\x8b\x7a\x4f\xed\xa6\x19\x89\x4c\xdf\x27\xa5\x3a\xe8\x1f\xe8\x24\x04\xa1\xa4\x5d\x4f\xcd\x62\x53\x2f\x20\x72\x32\xe4\x44\x04\x38\xbb\x77\x67\xfe\x7e\x7a\x82\xd0\x9d\xae\x8e\x21\xa0\xaa\x26\x2d\x1e\x33\x50\xef\x02\x7c\x8c\xfa\x07\xcf\xfb\x69\x89\x20\xf1\xe4\x92\xf3\x50\xd1\x38\xb7\x09\xa6\xa6\x4a\xfa\x51\x81\x30\xd2\xe8\x9b\x07\x2f\x8f\x8e\x0e\x8f\x7a\x87\x87\x07\x47\x2f\xcd\xdd\x90\xb2\x6b\x6d\xf5\x0f\x9f\xcc\x65\x4c\x18\x84\xb2\xb0\x7b\x6e\x75\x4c\x42\x4a\xa4\xb1\x84\x19\xa2\xbb\x5c\x1d\x3c\x24\xa6\x64\x44\x42\x59\x18\xce\x68\xf6\x1e\xd8\x58\x4d\x74\x9f\xfb\x95\x72\x68\xab\x6e\x0f\x5d\xc8\x49\xa0\x40\xaa\xbd\xac\xa8\xa8\xd6\x62\x8e\xb4\x5c\x08\x33\x40\xd5\x46\x47\x34\x0c\x6d\x17\x31\x05\x6f\x05\x09\x28\x30\xed\x58\xa5\x54\x63\x41\x83\x33\x5e\xba\x5e\xea\x0f\xf8\x18\x1d\x59\x83\x76\xa3\xdb\xea\x5b\x05\xb7\x76\x1b\x08\xe1\x99\xbe\xce\x07\xb2\x68\x7b\x42\x83\x00\xd8\x05\x08\xda\xa2\xb7\x19\xa4\xc3\xe2\x32\x84\x31\xb0\xa0\x2a\x06\x99\x8e\xeb\x8f\x21\x84\xfd\x44\x88\x54\x8b\xfa\x9d\x88\xdc\xb6\x95\x52\xd6\x52\x2a\x27\xfc\xa6\xe9\xf2\x8a\x2b\x12\xb6\xd4\x9e\x92\x30\x29\x75\x68\x28\x1a\x52\x66\xee\x56\x46\x46\x17\xde\xd0\x20\x75\x03\xbb\xd4\x72\xb9\x74\xea\x24\x61\x78\xc6\x29\x53\xa7\xdc\x4c\x43\xec\x73\xc6\xc0\x57\x10\x94\xc3\xcf\xe3\x6a\x84\x28\x5c\xe7\x7d\xd1\x5e\x43\xaa\x18\x84\x0f\x4c\x91\x31\x34\x8c\x1f\xeb\xee\xb4\x3b\x24\xfa\xd9\x83\x6a\x79\x73\xac\x04\xb0\x00\x04\x98\x40\x30\x0a\xb9\x2a\xe5\x92\x66\x70\x7f\x9b\x82\x10\x34\x80\x9a\x62\x32\x26\x3e\xb4\x4d\x05\xa9\x88\x7f\xdd\xe8\x45\x2a\x88\x63\x08\xde\x53\xd6\x14\x58\x11\x31\x06\x25\xad\x98\x68\x47\x45\x3d\x0f\x6e\xe3\x34\x4e\x11\x05\x3b\x11\x51\x0a\x44\xc4\xa5\xf2\x62\xfd\x3f\x33\xac\x5f\x28\x93\x8a\x30\x1f\x7e\xfe\xeb\x23\xfe\x3f\x09\x62\x0a\xe2\x23\xbe\xfb\xd0\x8b\x3e\xd9\x91\x4c\x4f\x16\x2e\x22\xa2\x1d\x0c\x2b\x1a\x81\x97\xea\x58\xad\x42\x99\x02\x31\x25\xe1\x1b\xe2\x2b\x33\xff\x7a\x95\xdb\xa9\x37\xbf\x29\xda\xf9\x52\x74\x7e\x77\x57\x6d\x28\x02\x25\xa8\xaf\xeb\xb4\x0a\x5d\xad\x2c\x60\x64\xc2\x1f\x3e\xa9\x96\x6b\xcb\xe9\x71\x2c\xca\xee\x76\x17\x5b\x49\x26\xd1\xce\x6a\x96\xda\xb8\xa9\x2e\x9b\x6a\xaf\x66\xa3\x57\xf7\xd9\x28\xfb\x54\xfa\xab\x9a\x08\x90\x13\x1e\x06\x35\x3f\xd6\xaa\xbd\x11\x3c\xc2\xc7\x48\xcf\xd5\x4a\xf9\x39\x8c\xb3\x89\x59\x7b\xe0\x62\x42\x47\xaa\xf9\x84\x32\x21\x1c\x9f\x71\xa9\x24\x8a\x41\xa0\x0b\xf0\x39\xb3\x66\xba\x2a\x16\x33\x6b\xa6\x47\xf2\x1c\x24\x0f\x93\x6c\x25\x6b\x06\x33\x22\x20\x68\x86\x33\xc9\x85\xaa\x45\x6a\x13\xc9\xbc\x7c\x15\xa6\x2c\xa0\x53\x1a\x24\x24\xc4\x8d\xf0\x91\xd7\x31\x4b\x6c\x29\xdf\x2d\xb9\xa5\xb5\x38\x34\x4c\xfc\xeb\x74\x72\xda\xca\x6a\xb1\xb3\x80\xa6\xed\xd1\x02\x0b\xb5\xda\xed\x21\xb9\x08\xbd\x2d\x11\x6e\x46\x6e\x61\x41\x4c\x28\x9d\x53\x4e\xb4\x25\xaa\x7e\x47\x86\xa0\x43\x3d\x1e\xf0\x84\xd5\xef\xf1\xf1\x2b\x22\xa1\xe1\xab\xe9\x02\x53\x15\xbb\x58\x61\x1a\xc5\x96\x3e\xf7\x4e\xcc\x4e\xa2\x36\x7a\xd8\xa0\x9c\x8d\xc9\x31\x6b\x8e\x3b\x09\xe9\xb8\xcd\x1d\x4d\xf9\x7b\x98\x16\x42\x57\x10\x2f\x33\x81\xa3\xab\xfc\xba\x95\xae\x2a\x05\xab\xe2\x95\x65\x9f\xf9\x7c\x55\x9b\x6f\xf7\xe1\x55\xad\x7a\xea\x53\xf5\xb8\xb3\x1a\x5c\x59\x1e\xe8\xd8\xea\x1b\x60\xab\x89\x52\xb1\x27\xe0\x73\x02\x52\xc9\x6d\x80\x2c\x94\xf7\x8e\x3a\x61\x96\x91\xdf\x4c\x71\xf9\xe0\xb4\xb5\xa4\xed\xb6\x06\xbb\xba\xda\x6c\xab\xe9\xeb\x3c\xb3\xbb\x03\x30\x07\x60\xcb\x88\xea\x00\xec\xfb\x01\xb0\x7a\x7a\xeb\x68\x05\xfe\x7a\xd1\x01\xbf\x5c\x7a\xcb\x21\x58\x77\x04\xab\xaf\xc4\x37\x30\x94\xdc\x04\xff\x85\x0c\xb1\x65\xf9\xad\x56\xd1\x37\x08\x5f\x2b\x5a\xed\x31\xa0\xeb\xdb\x00\xa8\x5f\x93\x68\x08\x02\xf1\x11\x1a\xe4\x93\x19\xfd\x02\x53\xea\x83\x44\x3b\xff\x86\xe1\x85\xb1\x6e\x7e\x53\xf7\xf0\xd4\x01\x96\x03\x2c\x07\x58\x0e\xb0\x10\x9a\x97\xe1\x5a\x85\xb0\x7a\x8e\xb0\x1c\x61\x6d\x8a\xb0\x82\xa1\x17\x11\xa9\x40\x78\x7e\xb9\x90\x7d\x4b\x9c\xb5\x40\x81\x87\xa1\xad\xe5\x2d\xb8\x35\x89\xae\xe5\x6d\xf7\x6d\x11\x9b\x39\xa1\xa3\x38\x3a\x35\x4a\xa2\x5f\x88\x22\x43\xbd\xd2\x3a\x4c\x73\x98\xe6\x30\xcd\x61\x1a\x9a\x93\x07\xeb\xbd\x5c\x05\xd3\x1c\xa7\x39\x4e\x5b\x2f\xa7\x69\xd2\xa0\xcc\x17\x40\x64\x65\x63\x8d\xc4\xd4\x4b\x59\x21\x89\xd2\xad\x33\x34\x9c\xa1\x9d\x9c\x36\x9e\xa2\x9f\xd0\xbd\x8f\xfa\x3a\x12\xb7\x3d\xbc\x34\x9c\x64\x27\x6b\x6b\x6e\xf6\x00\x7b\x9b\xb6\x19\x36\xc4\x7a\x13\x2a\x15\x1f\x0b\x12\x79\x9f\x13\xc2\x14\x0d\x61\x67\xff\xc7\xa3\xa3\x5d\xd4\xb6\xdf\x59\xc8\x93\xae\xd1\x2d\xc6\xdd\x0d\x61\x85\x6d\xce\xb9\x06\xae\x5b\x30\x3e\x3a\xda\x9b\x8f\xcf\x16\xc4\x6d\x07\xaf\x9d\x02\x61\xe8\xe4\xec\x1d\xca\xf6\x2a\xd1\xa5\x8d\x2e\x0e\xce\x36\x02\x67\x73\xc0\xcc\x31\x99\x63\xb2\xad\x62\xb2\x46\xea\x6c\x25\x28\x3b\x70\x4c\xe6\x98\x6c\xad\x4c\x36\xe6\x5e\x04\x91\x54\x44\x49\x8f\x84\x21\xf7\xbd\xe1\x4c\x81\x7c\xa4\x64\xd9\x89\x96\x60\xc1\x9a\x5f\x72\xd3\x1c\xb9\x37\x9a\x29\xb3\xfb\x34\x43\xe2\x51\x96\x48\x58\xaf\xc5\xd6\x85\x9f\x17\x5a\xc0\xcd\xda\xf3\xde\xec\xd9\x12\xf6\x9c\x00\x89\xb7\xd9\x9c\xff\x04\x12\x6f\xd6\x9a\x83\x6d\xce\x45\x9e\x42\xc4\xc5\x0c\x5d\x49\x1d\x1d\x1d\xd2\x6e\x12\x69\x8d\xa7\x38\xac\x9d\x27\xa7\x4d\x14\x8e\x6b\xf3\xf2\xad\xc9\x35\xf6\x0f\x57\xc0\xda\xde\x33\xc7\xb5\x8e\x6b\xd7\xca\xb5\xb4\xf1\x5d\x49\xc1\x7d\x90\xd2\xf3\xe3\xc4\x93\xe6\xfc\x78\x87\x33\xfc\x3f\xa0\xde\xfe\xfe\xe3\xed\x10\x77\x27\xd7\xc7\x64\x83\xc1\xd9\x15\xba\x52\x34\xa4\x7f\x9a\xaf\xed\xa3\x73\xa2\x00\xed\xfc\xbf\x3b\x3e\xf6\x78\xfb\x92\x0b\x87\x03\x7d\xb7\xec\xe0\x52\x62\xdb\x84\x0e\x8d\x94\xd8\x4a\xec\xf0\xdc\xa1\x83\x43\x87\xb5\xa2\xc3\x98\x7b\x63\x2e\x78\xa2\xf4\x90\x6c\xf1\xa9\xb1\x8a\x9c\x1b\x3c\x1c\xd6\xc5\x1e\x8f\x7b\x06\xac\x8b\x25\xbe\x91\xa3\x5e\x6f\x39\x3a\xaf\x2b\xe2\xf8\xc9\x9d\xeb\x72\xc0\x84\x36\x02\x4c\x95\xf9\x18\x80\xf4\x05\x8d\xb3\x19\x55\x66\xdb\x1e\x25\x93\xf2\xec\xc5\x0a\x34\xd4\xef\x72\x6a\x6b\xee\xeb\x23\xea\x2f\x8a\xe8\xfc\xf6\x08\x41\xc7\x13\x75\xd1\x9a\x6a\x7f\xac\x37\x4b\x34\x90\x48\x17\x3c\x10\x0d\xf5\xff\x46\x34\x54\x9c\x0c\x62\x3c\x00\xcf\x8f\x93\x76\x02\xd8\xd5\x71\xfd\xe7\x8f\x38\x91\xd6\x1b\x10\x16\x9d\xc4\x5a\xb0\x31\xa3\xeb\xb7\xc0\x79\x0b\x15\x5c\x49\x10\xa8\x53\xfe\x64\x29\xe2\x59\x42\x5f\x39\x93\x0a\xa2\xaf\xd3\xb8\xb1\x75\x67\xda\xec\xa2\xd7\xab\x8d\xe9\x45\x83\x10\xd6\xab\xd5\xbb\x20\x84\x2e\x3a\x0d\x36\xa4\xd3\x5f\x1f\x31\x15\x9f\xff\x2b\xf9\x48\xe9\xbf\x94\xdf\x10\xaa\xd6\xab\xe2\x6f\x6a\xd2\xcd\x1f\x7f\xd9\x92\x23\x6b\x83\xb3\x2b\xf4\x9e\x93\x00\xed\xf4\xa2\xfb\xf2\x75\x0e\x28\x5b\x7d\x71\xeb\x28\xcd\xd1\xe4\xd6\xd0\xa4\x4f\x23\x12\xd6\x5d\xf6\x71\x72\x6b\xab\xd1\xe4\x7a\xf7\xe5\x74\x1c\x7d\x1d\xc5\x6a\x36\xe7\xde\x7f\x40\xf0\xaf\xcc\xc9\x6d\x00\x44\xbf\x3a\x5f\xe7\x48\x74\x3d\x24\x9a\xae\xf2\x91\x39\x89\xe2\x9d\x42\x74\xb9\x60\xf7\x0e\xed\xa1\x5a\xed\x37\x02\xa0\x5b\xe5\x57\xc9\x68\x04\x62\x5e\xa6\xab\x56\x79\x40\xfc\x09\x04\xdd\xb2\x62\xeb\x42\xde\x00\x2d\xfa\x6e\xc1\x2a\xd0\xbb\x84\x65\xf1\x42\xe9\xcc\x93\xdd\xc4\xdb\x9e\x63\xfb\x9d\x8f\x36\x39\x04\x6a\xf5\xa2\x4e\x67\x97\x1c\x02\x7d\x27\xa7\x97\x1e\x9c\x75\xea\x89\xb3\xe7\x07\xab\xa0\x4e\xb9\x83\x95\xef\x4c\x54\x53\x80\xdf\xc3\xdb\x58\x1d\xa9\xac\x89\x54\xaa\x89\x09\x06\xea\x86\x8b\x6b\x4f\x09\xc2\x64\x44\xd5\xc2\x13\xce\x6d\xe9\x88\xa7\x3f\xbc\x6c\xdf\x3c\x6b\x9e\x09\x5d\x76\x5b\xed\x8f\xf4\x7c\xc8\xba\x81\x62\x8e\x05\x04\xf8\x40\xa7\x8b\x8f\x78\x77\x32\xc0\x4a\x28\xb5\xa4\x6d\xce\x97\xb1\xcd\xb6\xd0\xcc\xaf\xa9\xa5\xd1\xf9\x1f\x3f\x65\x63\x7b\xdf\x3e\xa2\x83\x9a\x56\x4f\xb6\xa0\x26\x76\x48\xe3\x90\xe6\x41\x91\xa6\x91\xbe\x59\x8d\x69\xba\xfc\x56\x8f\xa3\x97\x15\xe9\x25\x4c\xc6\x94\xfd\x0e\x42\x66\xbb\xc5\x2f\x7e\x7c\xf1\x63\x1f\x7f\x07\x74\x93\xaf\xe8\x52\x11\xe5\x5d\xfa\xb1\x37\x48\x84\x78\x2d\x15\x19\x76\x4a\x19\xac\x25\x0b\x62\xba\x0b\xa9\x9c\x6c\x20\x19\x42\x2b\xdc\x92\x6b\xf9\xfa\x56\x79\x97\x83\xb3\x4b\x1a\x01\x4f\xd4\x42\x78\xd9\x80\xbe\x79\xb7\xcb\xc3\xc8\x3d\xca\x6a\x4e\x5b\x7a\x40\x57\xdd\x1f\x4b\xb3\x43\xd6\xd8\xad\x67\x0b\xf0\xab\x07\xec\xeb\xf4\xc9\x7b\xd8\xf2\xbd\xbe\xcb\xc1\x99\xfd\x22\x31\x47\x85\x6e\xb7\xef\x6f\xc2\x85\x4f\xb2\x66\xf5\x9c\xd3\xd3\x49\xab\xdd\xdb\x4f\x3d\x1c\x4b\x7f\x02\x11\x29\xd7\xe9\x7e\xfa\x2b\x93\x52\xcd\xd2\x69\x11\x10\x71\x9d\xd6\x54\x64\x5c\x8e\xbc\xf5\x62\x9e\xcc\x78\x56\xc9\x5e\x0c\x62\x84\x8b\x6e\x15\x44\x71\x48\x14\x65\xe3\x2e\x3f\x07\x4a\xc2\xf0\x77\xed\x80\x4d\x6f\x2d\xd9\xab\x32\x96\x0a\x6e\x55\xf3\x1f\xfa\xd3\xac\x8d\xc2\x87\x2b\xce\xd0\xf1\x5b\x01\x66\x97\x72\x44\x19\xcd\x8f\xbc\x19\xd7\xf0\xd2\x09\xd2\x7a\x1c\x22\x0f\x8e\x76\x00\xa0\xcc\x0f\x93\x00\x4e\xc2\x36\xbc\x2b\xce\x54\xa6\x21\xd7\x6e\x2a\x4a\x42\x45\x9b\xd3\x33\xff\x5d\xd2\xe6\x03\x25\xc2\x95\x91\x0f\x21\xfc\x39\x01\x31\xeb\x26\x7d\xe9\x21\xbd\x4a\xe9\x18\x6e\x6b\x26\xc6\xf2\x9a\xc6\x57\x22\xbc\x98\x31\xbf\x6d\x33\xb1\x19\x07\x15\x19\x9b\x81\x95\xff\xca\xe5\xc1\xd5\xbb\x0d\xc1\x75\x59\x7b\xe5\x2c\x50\xa6\x9a\x59\x37\x12\x09\x97\x69\x43\x95\x6d\x49\xf3\xb7\xfc\x21\x56\x13\x1c\x0b\x57\x1c\xa5\xeb\x08\x66\xfc\x66\xaf\x77\x90\xbf\x5a\x0a\x2b\x9e\x15\xe2\xca\x73\x31\xf5\xaf\x0d\x86\x66\x4f\x67\x16\xf3\xf2\xe4\x89\x1d\x1c\xf1\x81\xb5\x8c\xe4\x33\xce\x5c\x3c\xb3\x2f\x7a\xe5\xeb\xac\xf0\x81\xf5\xb9\x67\x5f\x3c\xdb\xb7\xef\x58\xab\x43\xdf\xfa\xdc\xcb\x7e\x7b\xf6\x53\xae\x03\x8d\xc0\xb3\xbc\xe2\xde\x5e\xec\x86\x5f\xd8\x0d\xdb\xbd\xf4\x9f\xdb\x17\xd6\x57\x28\x0e\x03\x5b\xde\x5c\x96\x8a\xf9\xfe\xe4\x06\xad\xf1\x50\xf0\x1b\x99\x79\xaf\xb5\xd7\x54\x84\x10\x73\xec\x66\xef\x12\xa4\x42\x67\x20\x4c\xb8\xd6\x48\x77\xca\x19\x55\x5c\xe8\x50\x62\x9e\x4c\xcc\x3f\xe4\xf0\x7e\xfa\x5f\xaf\x97\x96\x4e\x8b\x68\xf6\xec\xc9\xdd\x93\xff\x05\x00\x00\xff\xff\x43\x09\x2b\xee\x94\x78\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa4, 0x48, 0x12, 0x83, 0xcb, 0xbb, 0x98, 0x6, 0xb0, 0xed, 0x7f, 0xa6, 0x41, 0x18, 0xa2, 0xad, 0xed, 0x9, 0x68, 0x77, 0xca, 0x76, 0xa1, 0xce, 0x5e, 0xec, 0x65, 0x1d, 0xc0, 0x8f, 0x94, 0x18}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _es_dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xf8\x30\x74\x40\x82\x5a\xce\x52\x04\x7e\x4b\xd7\xb5\x28\x90\xa2\xdd\x32\xec\x25\x08\x0c\x5a\x3c\x96\x38\x53\xa4\x40\x1e\x39\x76\x0b\xff\xf7\x81\xd4\x8d\xba\xb4\xc9\x8c\xac\x6b\x51\x3d\x45\xfa\x78\x48\x7e\xe7\xfa\x21\xd6\xa7\x13\x42\x28\x53\x4a\x23\x43\xa1\x95\xa5\x0b\xe2\x20\x42\xa8\x14\x16\xe9\x82\xdc\xfa\x37\x52\xa1\x7e\x65\x55\x08\x89\x6f\x15\x5d\x90\xe8\xb4\x45\x39\x43\x66\x75\x61\x62\xa0\x0b\x42\xcf\xce\xc8\x1b\xc3\xd6\x4c\x31\x72\x76\x46\x03\x33\x50\x6c\x25\x9d\x09\x9a\x02\x02\x3c\x15\x7c\x04\x15\xb1\x56\xbf\x6a\xa9\x8d\x3b\xd3\x24\x2b\xf6\x6c\x76\x4a\xe6\x51\x74\x4a\xe6\x17\x17\xa7\x24\xfa\x39\x3c\x5a\xb1\xcc\xdf\x7d\xd5\xba\x43\x7e\x22\x57\x12\x0c\xda\xd0\x0e\xf7\xb9\xb7\xe3\xcc\xa6\x2b\xcd\x0c\xa7\xd5\xda\xc1\xff\xbd\x3b\x21\xe4\xe0\xcc\x29\x70\x81\x3d\xb6\x34\x51\x80\x6f\x39\x5d\x10\x55\x48\x59\x22\x86\xe5\xe9\x9f\x5a\x4b\x14\x39\x5d\x90\x99\x07\x85\x33\x39\xf7\x8f\x52\xa8\x8d\x8b\xeb\xed\x9d\x7f\xcd\x99\x02\x69\x9b\xc8\xd6\x71\xa5\x4c\x0a\x66\xbd\xaf\x3e\x09\x87\x9a\x30\x5d\x31\x8f\xac\x99\xb4\x4d\x68\x3c\xf7\x6b\x50\x09\xa6\x2e\x0d\xb3\x0e\x0e\x63\xe6\x41\x72\x6a\xe6\x7e\x65\x2d\xa4\x0c\x33\xe9\x81\x37\x86\x71\x01\x0a\x6b\x77\xfc\x42\x62\x04\xff\xa0\xdb\x0a\x29\xd3\x46\x17\xe4\x32\x88\xed\xbd\x3b\x6b\x1e\x00\xbb\xf0\x0c\x42\xe8\xde\xbd\xd7\xf1\x6e\xce\x4e\x05\xe7\xa0\x6e\xc0\x88\x11\xf2\x3e\x96\xcd\x25\x54\x42\x02\x8a\x77\x69\xb0\x6d\xd2\xdf\x46\x08\x8d\x0b\x63\x4a\x2f\xfa\x2b\x19\xdb\x8d\xa1\x42\x8d\xa0\x36\xd5\xf7\xc3\xca\x44\x8d\x4c\x8e\x58\x6f\x99\x2c\x5a\x1f\x06\x8e\x4a\xa1\xfc\x6a\x78\x9a\x07\xef\x05\x2f\x73\xd9\xa0\x2e\x4d\x1f\xb4\x50\xf8\x4e\xfb\xd6\xf0\x40\x53\xc7\x54\xe7\xdd\x86\x6d\xf2\x7c\xdd\xd4\xdb\xe0\xf6\x1c\x4c\x0c\x0a\x59\x02\x83\x20\xe7\xee\x26\x97\xf6\xc2\xed\x9d\x77\xf1\x61\x4e\x0c\x28\x0e\x06\x7c\x5f\xae\xa5\xc6\x96\x97\xf5\x49\x7c\xbf\x05\x63\x04\x87\xb6\xf0\xcb\xc5\x9c\xc5\x30\x56\xb7\x16\x59\xbc\x19\xdc\x62\x11\xf2\x1c\xf8\xb5\x50\x43\xc2\xc8\x4c\x02\x68\x83\x11\x15\x0e\x29\xd7\xbd\xbb\xbc\x1c\x1b\x0c\xe1\x19\x48\x66\x51\xc4\x16\x98\x89\xd3\xa5\x50\x5c\xc4\x60\x97\xd5\xeb\x1a\x30\x4e\x97\x3e\xa3\xb7\x51\x76\x17\x0e\x95\xa6\xde\x5e\x6b\x93\x31\xac\xcf\xeb\x5a\x18\x58\xfb\x91\x40\xaf\x68\x03\x1f\xaa\xa7\xd6\x77\x4c\x0d\xd8\x54\x4b\xde\x8b\x09\x8a\x0c\x5e\x1b\x9d\xf5\x3b\xd3\xe1\x7f\x40\x52\x25\xb9\xb7\xe1\x26\x15\x6b\x1c\xee\x40\x3f\xac\xe8\xef\x05\x98\x3d\xe9\x10\xa5\xd8\x4c\xa8\x4f\x61\x6d\x33\x03\x7c\x58\xdd\x56\x1b\xec\x35\xae\x2f\xec\x65\x3d\x3b\x5d\x04\xb7\x82\x17\x4c\xd2\x41\x95\xd5\x36\x7e\x30\xb6\x04\x76\x6c\x27\x7a\xe5\xba\x2a\xe2\x4d\x99\xc3\xd0\x0f\xd7\x89\x55\xc9\x3b\x57\x47\x46\x7c\xcf\x7a\xbc\x43\x9b\x4e\x1c\x69\x84\x3d\xdb\xc1\x17\x4a\x67\xdd\x24\x5b\x69\xd5\x4b\xb6\x64\x2b\x90\x75\x90\x05\xd8\xe7\xb6\xb7\xae\x93\x97\xcc\x42\x57\x1d\x9b\x91\xd3\x65\xde\xcc\x9c\x01\x1c\xb8\xd4\x96\xd4\xe9\x43\x6c\x6d\xea\xf2\x36\x4a\x77\x70\xc3\x7f\xc8\x73\x50\xfa\xfb\x61\xea\x99\x14\xc9\xd8\xb4\xf5\xf8\x35\x6c\x1b\xd2\x1d\x6d\xae\x42\xf0\x23\x88\x66\x07\x38\x56\x35\x7f\x99\x54\x73\x52\xcd\xa7\x56\x4d\xa1\x38\xec\x84\x4a\xca\x87\x47\xeb\x66\xbd\xed\x11\xda\xf9\x99\x41\xf7\x6f\xb8\x71\x90\x80\xf0\x68\x72\xde\xdc\x57\xc6\x38\xbb\x97\xdf\x88\xb2\xbf\xd2\x71\x91\x81\x42\x4b\x6a\x4f\x9f\xd7\xd4\x27\xbd\x7f\x02\xbd\xff\x82\x82\xd2\xf7\xf9\x24\xf6\x93\xd8\x7f\x95\xff\x90\x2f\x8f\xd0\xfa\xf9\xa4\xf5\x93\xd6\x1f\xa5\xf5\xe3\x52\xca\x75\xdc\x9f\x76\x7d\xd1\x1c\x58\x1c\xa3\xe6\x9f\xbf\xbd\x12\x71\xee\xcd\x1f\x64\x42\x2a\xeb\xef\x4b\xc1\x03\xbe\x93\x64\x3f\xb5\x64\x7f\x4d\x1d\x9c\xf4\xfa\x07\xd2\xeb\xc1\x3f\xe7\xc7\x08\xf6\x8b\x49\xb0\x27\xc1\x7e\x42\xc1\xb6\xa8\x0d\x2c\xad\xf8\x08\xcb\xd5\x1e\xe1\x01\xf1\x76\x76\xdf\xf8\xcf\xd8\x37\xce\x21\x5e\xea\x24\xe9\xf0\x9d\xa4\xf2\x28\xa9\xe4\x10\x8f\x55\xc6\xa4\x96\xff\x87\x5a\x9e\x54\xc7\xba\xbe\x73\x2d\xe5\xbc\x8e\x66\x65\x6e\xa8\x8d\x53\xc8\xd8\x5f\x60\xac\xd0\xee\xec\xf9\xbc\x84\x71\x2f\xab\x6f\xd7\x66\x53\x5a\x22\x4b\x82\xaf\xcb\x08\x59\x2e\x19\x0a\x95\x0c\xbf\xe4\xb7\x1f\xb6\x7d\x21\x36\xeb\xeb\xb2\x6b\xa9\xd2\xf7\x67\xd1\x45\x56\x05\x9d\xa2\xae\x40\xda\xd9\x97\x8b\x78\xe3\x87\x64\xb5\xbb\x62\xbf\x14\x0a\xc1\x6c\x99\x0c\x0b\x91\x5e\xb4\xa5\xd6\xf8\xe6\x5f\xce\xc3\x97\x28\x6b\x9f\x2f\x82\xe7\x28\x7c\x39\x9f\x85\x2b\x41\x27\xce\x83\xe7\xa8\xfa\x96\xdf\x75\xf5\xa3\xf6\xc3\x96\x56\x01\xab\xc7\xcb\x6f\xe1\x14\x25\x99\x56\x02\xb5\xa9\x7f\xa0\xa4\x85\xd7\x68\xfa\xea\xf2\x3a\x7b\xf1\xf7\xe6\x5d\x15\xed\x6d\x93\x91\x68\x76\x72\xf8\x27\x00\x00\xff\xff\x22\xec\x09\x54\x3e\x21\x00\x00")

func es_dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_es_dashboard_dataJson,
		"es_dashboard_data.json",
	)
}

func es_dashboard_dataJson() (*asset, error) {
	bytes, err := es_dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "es_dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x46, 0xe9, 0xd1, 0x18, 0xcb, 0xff, 0x63, 0x5e, 0xd6, 0x30, 0x59, 0x59, 0x16, 0x1e, 0xc9, 0x1c, 0xa7, 0x6b, 0xe1, 0x2e, 0x3, 0x1b, 0x66, 0xeb, 0xb9, 0xfa, 0xec, 0xe6, 0x5f, 0xb2, 0x5a}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xbd\x4e\xc4\x30\x10\x84\xfb\x3c\x85\x15\x51\x51\xb8\x49\x4d\x45\x49\xc9\x03\xac\x36\xeb\x11\x58\xf9\x95\x77\x7d\x10\x9d\xee\xdd\x91\x92\xb8\xb8\x23\x84\xce\xd2\xcc\xf7\x79\x76\xca\x36\x67\x73\x75\x1c\xd5\x78\x14\x68\xed\xae\x95\x73\x17\xee\x33\xdc\x8b\xab\x9f\xae\xfc\xa5\x54\x52\xcf\xf3\x4c\x8a\x74\x41\xf2\xcf\xb7\xba\xba\x55\x55\x11\x84\xf6\xb5\xcf\x6a\x48\x87\x82\x14\x94\x64\xcb\x7d\x68\xcb\xf3\xde\xc0\x1f\x18\xed\x9f\xff\xfb\x89\x83\x41\x8d\xd6\xf2\xe3\x86\x01\x96\xa2\xe8\xfb\x3a\xf0\x5c\xb4\x57\xf7\x63\xee\x35\x73\x9a\xbe\x97\x73\x7c\xad\x1c\xc2\xe8\x59\x2d\xca\xc9\x86\xbd\xa1\xe0\x24\x9f\x14\xa6\x81\xe3\xe8\x71\x3c\x45\x9b\x36\x4b\x07\xdb\x44\xbf\x54\xda\xd0\x96\xfb\x52\x7c\xc4\xdf\xb0\xfc\xc1\x46\x1e\x88\x45\xa0\x4a\x1d\x16\xaf\x4d\x87\x65\xa5\x7f\x02\x00\x00\xff\xff\x3c\xc7\x94\x07\x13\x02\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0x33, 0x41, 0x76, 0x86, 0x79, 0xa8, 0x17, 0x9f, 0xd3, 0x29, 0x10, 0x3b, 0xf1, 0x6, 0x24, 0xeb, 0xa3, 0x90, 0xc0, 0x68, 0x2e, 0xfe, 0xd2, 0xec, 0x16, 0x3e, 0x79, 0xb7, 0xef, 0xa6, 0xb2}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcf\x8e\x9b\x30\x10\xc6\xef\x3c\xc5\xc8\xbd\xb6\x28\x4d\x95\xfe\x39\x70\xec\x53\x54\x95\x35\x98\x09\xb1\x62\x6c\xaf\xc7\x26\xcb\xae\xf2\xee\x2b\x20\xd1\xc2\x82\xc2\x65\x7d\x9c\xdf\xf7\x7d\x9e\x19\x4d\x8b\x41\x63\x69\x08\x84\x32\x89\x23\x05\x69\xb1\x21\x01\xaf\xd9\x35\xcb\xde\x61\xeb\xd5\xa2\x86\xde\x4b\x6d\x39\xa2\x55\x24\x95\x4b\x36\x3e\x96\xc4\xce\x2f\x83\xb1\x26\x1b\x37\x63\xe6\xa2\x49\xd0\x17\xf8\x6b\x90\xa3\x56\x4c\x18\xd4\x09\xee\x1e\x9e\xda\x89\xb7\x3e\x98\x2a\x56\xdb\x24\x96\x2d\x05\xd6\xce\xae\x21\x2a\x59\x3a\x1f\xb5\xb3\xdc\x63\x80\x8a\x8e\x98\x4c\x84\x02\xfe\x65\x00\x30\xd4\xfa\xd7\x3a\x93\x9a\xf1\x0b\x28\x40\xd4\x7e\x2f\xe6\x84\xf5\x4b\x4f\xbe\xef\x86\xf2\xf5\x6b\x06\xf0\x7f\xfe\x9d\x0f\xee\xb9\xdb\xe8\xb6\x2a\xb7\x06\x9e\x2a\xc8\xd6\xda\x6e\x84\x18\x64\x5e\x53\x8c\xde\xe9\x6e\x00\x6e\xd3\x35\xe8\x67\x9b\x18\x77\x20\x30\x05\x17\xf0\x5b\xd3\xf1\x93\x11\xe3\xec\x05\x88\x43\xfe\x2b\x1f\x4a\x72\xe4\xf9\x3e\xdf\xfd\xc8\x6f\xdb\xb9\x7b\xbc\xe3\x58\x07\x1a\x8c\x05\x88\x3f\xf9\xcf\xfc\x77\xaf\xb8\x2e\xda\x4a\x4c\x61\xf5\x8e\xab\x52\x7a\x64\xbe\xb8\x50\x2d\x18\xf3\x49\xfa\x54\x1a\xad\xe4\x99\xba\x05\x6e\x30\x46\x0a\x8d\xe3\x28\x2b\x77\xb1\xc6\x61\x25\x53\x30\x8f\x74\x46\x2b\xb2\x4c\xf2\xa8\xcd\xb2\x95\x21\x20\xd2\x56\x5c\x70\x2e\xca\xd2\x38\x75\x96\x15\xb5\x5a\xd1\xe7\x5c\xd8\xe1\xc3\x85\xbd\x05\x00\x00\xff\xff\xcf\xfe\xa0\xd7\x08\x04\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xdb, 0x8d, 0x99, 0xf6, 0x74, 0x30, 0x5d, 0x60, 0x35, 0x1a, 0x84, 0xec, 0x7c, 0xa, 0x98, 0xd0, 0x1c, 0xd3, 0x97, 0xa7, 0x98, 0x18, 0x3b, 0x3f, 0xc4, 0x8b, 0x4d, 0x2f, 0x93, 0xfe, 0x70}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":             clusterTf,
	"dashboard.yaml":         dashboardYaml,
	"dashboard_data.json":    dashboard_dataJson,
	"datasource.yaml":        datasourceYaml,
	"es_dashboard_data.json": es_dashboard_dataJson,
	"outputs.tf":             outputsTf,
	"variables.tf":           variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":             &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":         &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json":    &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":        &bintree{datasourceYaml, map[string]*bintree{}},
	"es_dashboard_data.json": &bintree{es_dashboard_dataJson, map[string]*bintree{}},
	"outputs.tf":             &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":           &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
