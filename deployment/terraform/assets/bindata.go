// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (9.022kB)
// assets/dashboard.yaml (228B)
// assets/dashboard_data.json (26.459kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (327B)
// assets/variables.tf (560B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xe3\xb8\x11\xfe\xee\x5f\x31\xd5\x2e\x70\x6d\x51\x49\x4e\xe2\xcd\x26\x3d\xa4\xc5\xf6\x0d\x28\x70\xd7\x3b\xa0\x07\xf4\xc3\x22\x10\x28\x72\x2c\x13\xa6\x48\x96\xa4\x9c\x68\xb7\xe9\x6f\x2f\x48\x49\xb6\x2c\xcb\x2f\xeb\xbd\x6c\xee\x0e\xcd\x7e\x31\xc8\x79\xe3\x33\x33\x8f\x86\x5c\x6d\xd4\x8a\x33\x34\x10\x91\x07\x1b\xc1\xc7\x09\x80\x36\x6a\xce\x05\xc2\x1d\x44\x65\x19\x0b\x45\x98\x43\xeb\xa2\x09\x80\xc1\x82\x2b\x09\x7e\xa7\xb2\x31\x12\xeb\xe2\x4b\xbf\xbe\x42\x63\xfd\xc6\x1d\x44\xff\xfd\x03\x5c\x26\xb3\xb7\xd1\xe4\x69\x32\x31\x68\x55\x65\x28\x06\xdb\xd9\x12\xeb\x4c\x13\x6e\x22\x88\x96\x58\x37\xae\xfc\x9a\x24\x25\x42\xb0\xf9\xfa\xe3\x8a\x98\x84\x8a\xca\x3a\x34\x61\xfd\x29\x5e\x62\x1d\x94\x7c\x5c\x55\x2e\x38\xf5\x76\xe0\x0e\x7c\x84\xbf\xf6\xe2\xd6\x2e\xb2\xcd\xce\x6f\x76\xfd\x72\x69\x1d\x91\x14\x23\x88\x88\xd6\x99\x45\xb3\x42\xd3\xb8\x77\xa4\xb0\x70\x17\x7e\x02\xfc\xc3\xc7\xb1\x27\x0a\xa2\x75\xfc\xfa\x23\x55\x95\x74\x09\x97\x0c\x1f\x9f\x7c\x40\x4f\x93\x09\x00\x55\x52\x22\x75\xfe\xf8\x8d\x9d\x57\xf0\xc3\x02\x81\xe1\x9c\x54\xc2\x41\x65\xd1\x84\x13\xce\x95\x01\x55\x19\x78\xf7\xed\xdf\x83\x98\xab\x75\x70\x67\xed\x22\x0a\x0b\x5e\x32\x20\x9b\x57\xd2\x55\xcd\xda\x42\x59\x07\x77\x60\x51\xcc\x93\xf6\x90\x5c\x77\x9e\x49\xc9\x61\xf3\x77\x07\x11\x29\x79\x3c\x9d\xd3\xcb\x29\x63\x17\x8c\xcc\xa6\xd7\x6f\x6f\xa6\x79\x04\xaf\xe0\xe2\x26\x99\xce\xe0\x9b\x1f\xfe\x39\x01\xe8\xe0\xc8\xba\x00\xe8\x9b\xe4\x51\x10\x53\x60\x04\xfd\xbf\x57\xf0\x4e\x3c\x90\xda\xfa\xb8\x60\x2d\x13\x8e\x41\x95\xb4\xdc\x3a\x94\xb4\xde\xce\x61\x08\xa3\x9f\xeb\x64\x89\x75\xc2\x59\x80\xa9\x92\xae\x17\xac\xc7\xd8\xa7\x63\x1d\x4e\x10\xf0\xb5\xa4\x69\x66\x91\x56\x86\xbb\x3a\x2b\x8c\xaa\x74\xc6\x99\xcf\xd2\xfb\x80\x48\xf4\xfa\xa3\x77\xb0\x2d\xe1\x2d\x25\x9c\x3d\x45\xbf\x3b\x2c\x93\x15\xca\x5a\xde\x88\x7a\x04\xef\x27\x4d\xb9\xaf\xb8\x2f\x5f\xdf\x04\xbe\xac\xa2\x36\x91\x6d\x11\xf5\x02\x2e\x89\x73\x68\x4a\x65\x5d\x26\x38\x45\x69\x31\xf3\x0a\x41\x9a\xa1\x75\x5c\x12\xd7\xf6\x41\xba\x50\x25\xa6\x4d\x2e\xd3\x8d\x5e\xcf\x44\xdc\x9a\x58\x57\xd2\x56\x20\x06\x4b\xe5\x30\xc6\x47\xa4\x5d\x3c\x5c\x0a\x2e\x71\x8d\x04\x40\xf4\xb0\xf0\x7d\xfa\x1e\x7e\x05\xf1\x1c\xd2\x15\x31\xa9\xe0\x79\x4a\x85\xaa\x58\xda\x01\x9b\xe6\x4a\xb9\x78\xce\x25\xb7\x0b\x64\x70\xff\x35\x30\x05\x48\x17\x0a\xbe\xfa\x17\xe1\x8e\xcb\xa2\xc9\xa9\x57\x8a\xb9\xe4\x2e\x49\x92\xaf\xbe\x06\x2b\x10\x35\x5c\x78\x69\x89\x2d\xae\xde\x63\x81\x0e\xe2\x58\xaa\x98\x2e\x90\x2e\x63\x8a\xc6\xf1\x39\xa7\xc4\x21\xc4\xff\xfe\x0e\x62\x58\x38\xa7\xed\xef\xd3\xd4\x5e\xc5\x58\xc5\x0f\x68\x5d\x7c\x91\x90\x92\x7c\x50\x92\x3c\xd8\x84\xaa\x32\x65\x98\x27\x46\xe5\x95\x75\x1a\x0d\x45\xed\x31\x4b\xb8\x4a\x67\x17\x7f\xfd\xdb\x9f\x6f\x6f\xff\x92\x14\xba\x80\xff\x80\xad\x98\x02\xa2\x9d\xe7\x00\x20\x8c\x41\xbc\x89\x63\xbd\x17\xe2\xa9\xa1\xd2\x8c\x38\xdc\xb3\x1f\xa0\x10\xc2\xcb\x69\xa3\x4a\x74\x0b\xac\x6c\x2c\x15\xf3\xf8\x6a\x65\x1c\x9a\xe1\x09\xbf\x83\x5e\xa2\x18\xb7\x2e\x71\xc4\x24\xc5\x07\x68\xd8\xa1\x57\x08\x4c\x3d\x48\xcf\x91\x59\x65\xc4\xd3\xc6\x8c\x23\x06\x1e\x3f\xcc\xf7\x98\x19\x04\x5a\xae\x7a\x72\x90\x2a\xed\xd2\xa6\xff\xef\x43\x6d\x1c\xa2\xb4\x12\x9d\xe1\xd4\x9e\x47\x6b\xad\xf2\x2f\x87\xcb\xdc\x65\xd2\x50\xd9\x89\xbc\x74\x2e\xdf\xb4\xc0\xad\x39\x67\x97\x48\xfe\xdf\xbf\xcf\xdc\xbf\x03\x59\x5b\x5b\x87\x25\x75\x02\x50\x92\x5c\xe0\x7e\xc9\x11\xab\x84\xb1\x50\xb1\x82\xe7\x73\x25\x1d\x55\x72\xce\x8b\x8b\x01\x6a\x1d\x30\x4c\x24\x85\x21\x73\x22\x49\x00\x43\x59\x9b\x1a\x14\x48\x2c\xa6\xed\x7a\x76\x9d\x5c\x27\x97\x19\x29\xd9\xf5\x2c\x61\x98\x0f\x02\x60\x7a\x59\x40\xcc\xe1\x34\xe9\xcd\xc1\x18\xc1\x52\xc9\xd8\xa0\xa7\x9b\x63\xc7\x6f\x8d\xc7\x2d\x2f\x0c\xa4\xd1\xac\x38\x1d\x0a\x81\x75\xc4\xb8\x53\x89\x47\x1b\xf5\x58\x9f\x47\x3b\x41\xb5\x21\x9d\x61\xe7\x6f\xff\xed\xe5\x81\x9d\xde\xdf\xd1\x2b\x67\xdd\x54\xe3\x7d\x58\xab\x28\x27\x0e\xb3\x35\xf1\x64\x84\x31\x83\xd6\x07\xec\x4c\x85\xe7\x12\x41\x38\x4a\x33\x4f\x34\xa0\xad\x59\x67\x2f\xe1\xbc\x1c\xc9\xfe\x1c\x08\xea\x5c\x62\x90\x05\x97\x8f\x3f\x4e\xeb\x8c\x99\x32\x65\x40\x00\x1d\x4d\xc3\x76\x6a\xb9\x43\x1b\x37\x1a\x2c\x6d\x93\x37\x50\x12\x12\xe2\xb9\xdd\xd5\x22\x2b\xc2\x85\x57\x4c\xfb\x5f\xfd\x7d\xb6\x37\x32\x83\xd6\x1c\xf4\xa6\x61\x36\xeb\xfa\xac\xd7\xa7\xc3\xa5\xf6\x92\xb7\x3d\x8f\x0f\xba\xc7\xb7\x2c\xcb\x77\x67\x73\xce\x50\xfa\xcf\x05\x9a\xb1\x56\x1d\x6b\x75\x96\x8f\xdc\x9b\xd6\x21\xed\x9a\x6b\xba\xa6\x77\x14\x1f\x47\xf7\x33\x5c\x24\x36\x41\x09\x62\xed\xb1\xc0\xbd\xcc\x04\x00\x3d\xb0\x43\x96\xd8\xa7\xd4\x08\x7b\xda\xd0\x5a\xd4\x19\x2f\x4b\x64\x9e\x3c\x44\xdd\xd7\x6a\x59\x83\x54\x4e\x65\x25\x97\xca\x64\xed\x2d\x38\xab\x74\x61\x08\xf3\x7d\x34\x27\xc2\xe2\x2e\x8b\xf6\x8e\x17\x41\xb4\x39\x60\x9b\x99\x11\x74\xf6\xa2\xeb\xe1\x64\xc4\x91\x9c\x58\xec\x4d\x3b\x7b\x14\x1a\xf9\x92\x84\x95\x35\xd1\x6c\xa1\xd0\xad\x6e\xe4\x34\xb1\xf6\x41\x19\xb6\x2d\xd7\xad\x4e\x00\xec\x92\xeb\x6c\xce\x25\x11\x99\x95\x44\xdb\x85\x72\x3d\x7c\x46\x30\x5c\x6f\x8e\xa5\xe5\x40\x3e\x9a\x1f\x1d\xce\x03\xf1\xed\xcd\xf7\xe3\x46\xee\x0f\x4f\x7c\xe3\x1c\xcf\xf2\x40\xf0\xf7\x07\x3f\x87\xdd\x33\x49\x46\x0a\x94\xee\x53\x9f\x17\xbc\xce\xc9\x0f\x0c\x5f\x6c\xda\xde\x33\x61\xfb\x54\x56\xe5\xa9\x23\xf6\xf8\xd5\x7f\x1b\xae\x96\x60\xce\xc8\x4d\x50\x6f\xd3\xf3\x0b\xf9\xc2\x75\x17\x50\x57\xea\xed\x4b\x67\xb8\x65\x06\xd0\x8e\xdc\x39\x37\x9a\x9b\xbd\xad\x2b\x66\x78\xd4\x8b\xbd\xa9\x58\x16\xbf\xdd\xb7\xb1\x51\x36\x65\xdf\xe6\xa1\x01\x71\x3b\x3d\xcd\x93\x5b\x03\x7e\x8f\x9c\x0e\xbd\xb2\x75\x06\xe2\xc6\xc0\x24\x3c\xac\x50\xc3\x75\xf7\xb0\xf2\x4e\x6b\xe8\x84\x20\x08\x05\xf0\xbb\x82\xea\xe8\x13\x46\x1c\x84\x37\x1f\x2e\x8b\x30\xf7\x35\x05\x31\x37\xaa\xcc\xb4\x32\x2e\x44\x75\x79\xd9\x34\x98\xea\x96\x7a\x8b\xda\x28\xa7\xa8\x12\x6d\xfc\x8e\xea\x06\x08\xca\x99\xc9\x72\xa1\xe8\xb2\x29\xd3\x69\x12\xfe\xa5\xd3\xe8\xbe\x9d\x70\x0f\x79\xbc\x99\x5e\xbf\x19\xf1\xb9\x5e\xfe\xf1\xbd\x06\xe3\x6f\x07\x3e\x7b\x8b\x1b\x8f\x7d\x7f\xaf\xe0\x5b\x52\xe7\x08\x06\xad\xbf\xf9\x3a\x50\x52\xd4\xc1\x2a\x7c\xbf\xbe\x68\x41\x7b\x8f\xf8\x63\xab\xf2\xa7\xca\xc1\x82\x48\x56\x43\xd3\x65\x8e\x2c\x7d\xaf\xb4\xef\xcb\x16\x1e\xb8\x5b\xa8\xca\x41\x49\x64\x45\x84\xa8\xc1\xda\x45\xec\x25\xb8\x74\x0a\xdc\x02\x5b\x83\xc9\x67\x03\xdd\xc0\x77\x7b\x31\x9d\xee\x80\x3d\xd8\xea\x03\x3e\x04\x7d\xbb\xb8\x0f\xb0\x52\xff\x79\xa0\x0b\x0e\xf7\x17\xc1\x6e\x50\xdd\xda\x20\xfd\xf1\xc5\x69\xd9\x3f\xa9\x2d\xdb\xc7\xd0\xcf\xe8\xce\xb8\xb5\x70\x72\x93\x36\xf2\x27\xf6\xea\xf1\x7c\xde\x4c\xdf\xce\xf6\xe4\x73\xbd\x35\x92\xcf\x8a\x7d\x6a\x3e\xbb\xe7\xe5\x53\x0b\xed\xcc\xc0\x3e\xbd\xd0\xce\x08\x6c\x97\x6e\x06\x5b\x2f\x85\xd8\x39\x81\x7d\x3e\x62\x5f\xb8\x2d\x8f\xf5\x25\xcb\x7b\xfd\xb8\xff\x4e\x35\xfc\x4a\x9e\x80\xf0\xd5\xd5\xf4\x7a\x0f\xc2\xeb\xad\x67\x40\xf8\x84\xc8\xde\xcc\xae\x76\xbf\xbb\x83\xad\x67\x88\xec\x04\x92\xdc\x8c\xf2\xa7\xf0\x63\x18\xe2\x8f\xce\x2f\xdf\x74\xe4\x17\xe4\x7f\x56\xa3\xcc\xc1\xa9\x62\x36\xdd\xf9\xb8\xf6\x16\xc7\xa7\x0a\x7f\x3b\xe9\x30\x6d\xaf\x84\xc1\xcb\x4f\xeb\x5b\xd9\xfd\x2f\xc9\xd1\xc6\x6c\x05\x3f\xad\x3b\x5f\x62\xea\xbc\x9d\xde\x8e\xe1\xb8\x5e\x7e\x1e\xaf\x57\xbb\x15\xb2\xb5\x7c\xbe\xd7\x9f\x56\xbd\x34\xcf\xdb\xa7\xd2\x46\x90\x3e\x4e\x1b\xdf\x7b\xb1\x67\x63\x8b\x9b\x31\x98\x6e\x3e\x2f\x2d\x2f\x43\x50\x5f\xb6\x14\xfe\x17\x00\x00\xff\xff\xea\xe4\x1f\xe5\x3e\x23\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0xbf, 0x27, 0x49, 0xd, 0x70, 0xb2, 0x68, 0xb3, 0xff, 0xf6, 0x81, 0x7c, 0x42, 0xb6, 0xc2, 0xa2, 0x49, 0x43, 0x72, 0xc3, 0xda, 0x96, 0x99, 0xb6, 0x2c, 0xb3, 0x46, 0x15, 0x5c, 0xbd, 0xe2}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x4e\x03\x41\x0c\x44\xfb\xfd\x8a\xe9\x52\xa1\x0b\xa2\xdb\x9a\x26\x35\x0a\xbd\x0f\xfb\x12\x4b\xce\x7a\x65\x6f\x0e\xf1\xf7\x68\xaf\x40\xa2\x9d\xf7\xe6\x51\xd7\x4f\x89\x54\x6f\x15\xaf\xa5\xf4\xf0\x5d\x59\x22\x6b\x79\x41\xa3\x87\x54\x9c\x92\x1e\xdd\xe4\x54\x00\x8f\xdb\x85\xa7\x07\x6c\x6e\x2c\xf1\x8f\x8e\x9f\x2e\x15\x9b\x9a\x14\x80\x35\x69\x35\x79\x17\x93\x71\xc4\x37\xb2\x9c\x40\x58\xc7\x24\x15\x23\x9e\x73\x78\x76\xa6\x21\x97\x36\x24\x76\xb2\x0f\xf9\xf2\xc6\x59\xf1\x76\x3e\x17\x80\xcc\xfc\xfb\xaa\xd7\xc3\xc9\xbf\x8f\xf7\x19\xcd\x5a\x00\xa0\xd3\xb8\x57\x2c\x3b\xc5\x62\xba\x2e\xb7\xa0\x8d\x1a\x2d\x4c\x79\x5f\x9d\x82\xf3\x37\x00\x00\xff\xff\x94\x42\xcd\x38\xe4\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x3e, 0x13, 0x14, 0xd7, 0xd7, 0xbd, 0xed, 0xe7, 0xca, 0xfc, 0xe7, 0x3a, 0x3a, 0x0, 0xc1, 0x74, 0x2d, 0xef, 0xf0, 0x9d, 0x47, 0xe0, 0x99, 0xba, 0x23, 0x47, 0x12, 0x37, 0x12, 0x52, 0xd9}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5d\x4f\x1b\x3d\xf6\xbf\xef\xa7\xb0\xac\xfe\xff\x0a\x15\xf0\x64\x02\x69\x29\xd2\x6a\x45\x5b\xb5\x5b\xa9\xec\x76\x4b\xfb\xec\x45\x8b\x46\xce\xcc\xc9\xc4\xc2\x63\x4f\x6d\x0f\x90\x07\xb1\x9f\x7d\x35\x9e\x37\xcf\x0b\x4d\x88\x48\x13\x5a\x73\x01\x99\x63\x8f\x7d\x7c\x5e\x7f\x73\xc6\x31\x37\x4f\x10\xc2\x84\x73\xa1\x89\xa6\x82\x2b\x7c\x8c\x32\x12\x42\x98\x51\xa5\xf1\x31\xfa\x6a\xae\x50\x41\x35\x2d\x93\x94\x32\xfd\x9e\xe3\x63\xe4\xed\xd6\xd4\x90\x68\xa2\x44\x2a\x03\xc0\xc7\x08\xef\xed\xa1\x77\x92\x4c\x09\x27\x68\x6f\x0f\x5b\xdd\x80\x93\x09\xcb\xba\x68\x99\x82\x45\x9f\xd1\xb0\x87\x4a\x03\xc1\x5f\x0b\x26\x64\x36\xa6\x8c\x26\x64\x30\xdc\x45\x23\xcf\xdb\x45\xa3\xf1\x78\x17\x79\x3b\xf6\xd0\x9c\xc4\x66\xee\x93\x7a\x39\xe8\xff\xd1\x09\x03\xa9\x95\xdd\x4f\xcf\x13\xd3\x2f\x24\x6a\x36\x11\x44\x86\xb8\x68\xbb\x35\x7f\xcf\x9f\x20\x74\x9b\x75\xc7\x10\x52\xdd\xe2\x16\x47\x1c\xf4\xfb\x10\x1f\xa3\xd1\xf8\x70\x94\x53\x24\x49\x66\x9f\x85\x60\x9a\x26\xa5\x4c\x30\x35\x5d\xf2\x8f\x1a\xa4\xe1\x26\x6b\x1c\x1f\x3d\x3f\x1c\x0d\x87\xa3\xe1\xd1\xd1\x81\x69\x65\x94\x5f\x64\x52\xff\x7a\x6e\x2e\x13\xc2\x81\xa9\x4a\xee\xa5\xd4\x31\x61\x94\x28\x23\x09\xa3\xa2\xdb\x72\x39\x78\x42\x0c\x65\x4a\x98\xaa\x04\x67\x56\xf6\x01\x78\xa4\x67\xd9\x9c\xc3\x06\x1d\xfa\xba\x5b\xaa\xe3\x29\x63\x55\xcb\x94\x32\x66\xeb\xd9\x10\xde\x49\x12\x52\xe0\x99\x75\xd4\x43\x47\x92\x86\x1f\x45\x6d\x3f\xb9\x52\xf1\x31\x3a\xb2\x24\x7f\x95\x8d\x35\xb2\x08\xd7\xf6\x18\x08\xe1\x79\x76\x5d\x6a\xa3\x1a\x7b\x46\xc3\x10\xf8\x19\x48\xda\xc3\xbc\x91\xb4\xf7\xb2\xba\x66\x10\x01\x0f\x9b\x7c\x90\xcb\xa8\x7d\x1f\x42\x38\x48\xa5\xcc\x97\xd1\x6e\x89\xc9\x75\x1f\x95\xf2\x1e\xaa\x9a\x89\xab\xae\xe1\x6a\xa1\x09\xeb\xe9\x7d\x49\x58\x5a\x2f\xa2\xb3\x52\x46\xb9\x69\xb5\x47\x33\xc4\x2b\x1a\xe6\xca\xac\xa8\x99\x9e\x3e\x0a\xca\xf5\xa9\x30\x9e\x63\x08\x95\x99\x63\x91\x34\xfd\xb9\x52\xf4\x87\xca\xe0\x3a\xb3\x27\x20\x03\xe0\x9a\x44\xd0\x91\x72\x92\xcd\x94\xe9\x3d\x55\xa5\x61\xd7\xf4\xae\x52\x24\xf0\x10\x24\x18\xb7\x9d\x32\xa1\x6b\xbe\x94\xd1\xe2\xbf\x2e\x41\x4a\x1a\x42\x6d\xf9\x79\x63\x42\x02\xe8\x33\x5c\xa5\x49\x70\xd1\x99\x45\x69\x48\x12\x08\x3f\x50\xde\x65\x58\x13\x19\x81\x56\x56\x04\xb3\x63\x58\xe6\xdc\xd7\x89\x61\x4f\xa5\xf1\x80\xf2\x40\x02\x51\x30\x88\x89\xd6\x20\x63\xa1\xb4\x1f\x4e\x7c\xa5\x85\x04\x5f\xd3\x18\xfc\x40\xa4\x5c\xdf\xc4\xa0\x67\x22\xfc\xdb\x7f\xbf\xe1\xa7\x5a\x24\x59\x17\x43\xff\x86\x6f\xbf\x8e\xe3\xf3\x9d\x1d\x34\x99\xa3\x41\xde\xc9\x8e\x4c\x95\x55\xbe\x15\x32\x26\x99\xc1\xe1\x9b\x62\xac\xdb\xdb\x66\x3f\x09\x53\x13\x5d\xf0\x09\xae\xc8\xb7\xc5\xa7\x5a\x4e\x7a\x26\x41\xcd\x04\x0b\x5b\xf2\xcb\x58\x7d\x2b\x45\xdc\x76\xe3\x8c\xfe\x09\xa2\xc2\x20\x5a\x37\x9c\xcd\xe8\x54\x77\xef\xd0\x26\xee\xe1\xcf\x22\x41\xde\x10\xbd\x79\x85\xbe\xa7\x46\x75\xd9\x1a\xcd\xaa\x6b\x9d\xea\x2a\xf8\xdd\xd8\x7e\x41\x24\x84\x5d\xcf\x50\x42\xea\x96\xd7\x1b\xa7\xf0\xcb\xb0\x4c\x79\x48\x2f\x69\x98\x12\x86\x3b\x16\x5a\xf6\x31\x31\xb7\x66\xe0\x9a\x5c\xd3\x96\xa9\x4f\xd2\xe0\x22\xd7\xbf\xbd\xae\xcc\x8b\x0b\x77\xc9\x96\xde\x93\x3d\x5a\xbd\xfb\xbd\xbb\xf2\xe2\x1e\x27\x9a\x93\x6b\xf8\x81\xd9\x4d\x2b\x13\x50\xb3\x4c\x12\x4d\x2b\x21\x13\x60\x1d\x26\xb2\x06\x11\xbd\x22\x0a\x9a\x29\xb7\x0a\x54\x9d\xee\x79\xa4\xea\x90\xad\xc5\xd4\xc6\xb5\xfb\x48\xf8\xec\x38\xc1\xbc\xab\x74\xc2\x68\xd4\x17\xa3\x0d\xfd\x03\x5c\x56\x4c\x37\x12\x7e\x21\x82\x5f\x20\xd7\xbe\x5c\x94\x6b\x1b\x84\x95\x93\xed\x0b\x97\x6c\x5d\xb2\x7d\xd0\x64\x4b\x12\x6a\xe7\xd9\x19\xe1\x21\x03\x59\x25\xda\xac\xb9\x27\xd3\x16\xdd\x5a\xa9\x96\x72\x0d\xf2\x92\xb0\xb7\x24\xd0\xe6\xc1\xe1\x60\x41\x26\x2e\x86\xd9\xfa\x54\xac\xf3\x54\x7c\xf2\xf1\xfd\x03\xe7\xe2\xd1\x6f\x9f\x8b\x63\xb5\xf9\x04\xe7\x12\xf1\xe6\x12\x31\x66\x82\x84\x1a\x94\xde\x2b\x48\x55\xb7\x9e\x1a\x40\x4e\x97\xd2\x04\x97\xe6\xa0\x9b\x78\x5e\x3e\x5a\x21\x85\xff\x2e\x19\x7c\x64\x53\x2f\x5a\x11\xb7\x93\xd4\x03\xc1\x39\x04\x1a\xc2\x9f\x94\xd9\xc7\xbf\x50\x66\xef\xcb\xea\x49\xf6\xcb\xa8\xf6\x86\x72\xa5\x09\x0f\xc0\xa4\x74\x05\xf2\x12\x64\x96\xcb\xbd\xf8\xbc\x95\xbd\xeb\x70\x67\xf0\x40\xbe\xce\x05\x09\xde\x5b\x90\xe0\xcb\xc9\xdb\x19\x3e\x06\x2d\x69\x60\xe2\x7f\x1f\xd3\x77\xc2\x81\x66\x8c\xd4\x90\x65\xdb\xf1\xc2\x40\xbe\x08\x03\x2d\x27\xad\xb5\x8b\xeb\x73\x77\xe9\xab\xc9\xe9\xd5\x22\x39\x6d\x12\x4b\xfd\x33\x8d\x27\x20\x91\x98\xa2\x53\x50\x8a\x44\xa0\x50\x02\x12\x9d\x41\x20\x78\xb8\x00\x4d\xc5\xea\x13\x28\xc1\xd2\xa2\xa6\xdb\x8d\x70\xae\xf0\x91\xff\xdc\x1f\xc7\xe0\xd7\x0d\x34\x8b\x1c\xe4\x42\x0e\x72\x6d\x1e\x72\x75\xca\x26\x2f\x57\xc0\x5c\x96\x7c\x1c\xe8\x72\xa0\x6b\x5d\xa0\x6b\xa6\x75\xe2\x4b\xf8\x9e\x82\xd2\xea\xd1\xa1\x2f\xc3\xbd\x71\x74\xb5\x11\x10\x76\x4f\xe9\x6d\x0d\x1a\x5b\x56\x6e\x5b\x0d\xca\x3e\x15\x72\x77\x50\xcc\x41\xb1\xfb\xb0\xea\xa0\xd8\xef\x03\xc5\xda\xd5\x2f\xef\xf9\x0a\x50\xec\xb9\x43\x62\x0e\x89\x3d\x28\x12\x6b\xa7\xe2\x2b\x98\x28\x61\xa2\xff\x0f\x41\xc4\x36\xa2\xaf\x36\xeb\x6b\x44\x60\x2b\x4a\x6d\x13\xa8\xeb\x71\x20\xa8\xba\xac\xf5\xba\x74\x66\xf4\x06\x2e\x69\x00\x0a\x0d\xfe\x03\x93\x33\x23\xdd\xb2\x31\x9b\x61\xc7\x21\x2c\x87\xb0\x1c\xc2\x72\x08\x0b\xa1\xbb\x8a\x5d\xde\x8b\x15\x20\x96\xe7\x20\x96\x83\x58\xeb\x82\x58\xe1\xc4\x8f\x89\xd2\x20\xfd\xa0\xce\x64\x8f\x09\x68\xfd\x60\x01\x3f\x07\x6e\xdd\x5f\x82\x5b\x53\xea\xba\xbf\xec\x1e\x17\x64\x33\xdf\x5b\xd1\x02\x9d\x9a\x45\xa2\x37\x44\x93\x49\x96\x6a\x1d\x4e\x73\x38\xcd\xe1\xb4\xdf\x06\xa7\x2d\xdc\xcb\xdd\xae\x84\x8d\x0e\x57\x81\x69\xbf\x0b\x4e\xf3\x1c\x4e\xdb\x92\x97\x92\x7e\x98\xe6\xdf\x87\xf4\x95\x79\xc5\xa3\x7c\x95\xc6\x77\xbd\x64\x1b\xc7\xe7\x3b\xe8\x0f\x84\xd0\xfd\x47\xcd\xb7\x92\xff\x60\xdc\x2d\xc3\x84\x0b\x65\xb4\x2a\x32\xdc\x24\xba\x39\x05\xc2\xcd\x8e\xf5\xe2\xdd\x1e\xfa\x6c\x27\x7a\x07\x65\xd6\x02\x65\xee\x80\x31\x0e\xc1\x38\x04\xb3\xdd\x95\xa6\xd1\x78\x05\x08\x33\x76\x08\xc6\x21\x98\x07\x45\x30\x91\xf0\x63\x88\x95\x26\x5a\xf9\x84\x31\x11\xf8\x93\xb9\x06\x75\x07\x96\xf8\xc3\x1b\x8e\x0e\xcd\xaf\x75\x03\x8a\x93\x8c\x97\xbd\x65\x60\xc5\x1d\x2b\x58\x6b\x85\xc9\x9e\xd3\x28\xc7\xa7\x3c\x55\xb0\x2e\xd9\x15\x07\x86\xb4\xbc\xec\xfe\x42\x3d\xcb\x58\x5d\xaf\x64\x17\xd6\x9f\xee\x21\xd9\x19\x90\xe4\x71\x08\xf6\x1f\x40\x92\xf5\xca\xf5\xf5\x76\x23\xdf\x58\xc8\x39\xfa\xa2\x48\x04\x68\x40\x39\x3a\x7d\xe5\xde\xb5\x6e\xae\x86\x77\xfa\xca\xc1\x5f\x07\x7f\xb7\x0a\xfe\xb6\x0b\x78\x07\x07\x2b\xa0\x5f\xef\xc0\xc1\x5f\x07\x7f\x1f\x14\xfe\xf6\x7e\x39\x51\x8a\x00\x94\xf2\x83\x24\xad\x4a\x52\x0b\x77\xc7\x3f\x43\xde\x70\xb8\xb9\x2a\xdb\xe3\xa8\x90\xbd\xfe\xf8\x05\x7d\xd1\x94\xd1\xbf\x4c\xc1\x0f\x7d\x22\x1a\xd0\xe0\xff\x1c\x56\xd8\x1c\x56\xf8\xa1\x3a\x90\x43\x0f\xc8\xa1\x87\xcd\xa3\x87\x4e\xf1\x6c\x25\xf8\x70\xe8\xd0\x83\x43\x0f\x0f\x8a\x1e\x22\xe1\x47\x42\x8a\x54\x67\x2a\xd9\xe2\xdd\x58\x0d\x3e\xd7\xb8\xe9\x6a\x19\x79\x6c\x76\x6f\xd5\x32\x92\x78\x24\x5b\xa8\xde\x09\xf4\xa9\xbd\x10\x87\x9f\xdc\x7e\xa9\x5f\x1c\x30\x3d\x29\x86\xcd\xfc\x35\xf3\xba\x6c\xd5\xde\x30\x77\x01\xac\x82\x19\xc4\xe4\x4f\x90\x2a\x37\xf5\x51\x7e\x2c\xb5\xd2\x73\x56\x1c\x83\x2d\x2f\xf2\x9e\x9a\x44\xb5\xee\xad\xad\x09\x85\xec\x2c\xca\x5e\x02\x72\x8a\xab\x69\x35\xc4\x09\x23\x9a\xf2\x68\x99\xf3\xc3\x09\x63\x7f\x66\x26\xd8\xb5\xd7\x1a\x59\x34\x54\xa9\xe1\xda\x28\xd2\x7b\x31\xda\x3f\xf0\xf6\xbd\x83\x7d\x6f\x38\x3e\x3e\x1a\x3e\x7f\xd1\xd4\xea\x65\x31\xea\x57\x8b\x88\x7a\x6f\xb3\x3a\x9c\xf7\x59\xd2\x92\xb0\x30\xeb\x08\x53\xca\x69\x11\x45\x72\xbb\xf2\x73\x07\x1b\x94\xb1\xbe\x71\x48\x79\x51\x5d\xb7\x03\x08\xe5\x01\x4b\x43\x38\x61\x7d\xc0\xa7\x72\xaa\x3c\x59\xd8\x43\xc5\x29\xd3\xb4\xeb\xde\xe5\x31\xe8\xdd\x1b\x6a\x0c\x53\x87\x57\x84\xf0\xf7\x14\xe4\x7c\x39\xee\x6b\xfb\xf2\x1a\xd4\x08\xae\x5b\x3b\x0c\xb0\xba\xa0\xc9\x17\xc9\xce\xe6\x3c\xe8\x8b\xaf\xdd\x38\xaa\x49\x64\xcc\x42\xfd\xbb\xe0\xa7\x65\x1c\xa5\x75\x9e\xb7\x68\x77\x75\x2f\x82\x6d\xbe\x3a\xab\x21\x55\xf0\x39\x1f\xaa\x17\x4b\x3e\x84\xa1\x9e\x30\xb6\x94\x65\x3e\xf5\x7d\xc2\xd8\xda\xac\xd1\x2c\xdd\x97\xa0\x52\xa6\x07\x5a\x24\x17\x03\x6f\xb8\x8b\x96\x3b\x83\xf3\xeb\xd3\x1b\xdf\x97\x84\x47\xe0\xab\x5b\xd5\x3e\x71\x73\xe7\x5e\x36\xdd\x32\xd0\xfe\xe0\xbb\xc8\x9c\x1b\xe7\x80\xde\x61\xd5\x15\xb1\xd7\xbc\x7f\x96\x38\x16\x38\xc9\xfe\xb3\xf2\x78\xd3\x6f\x78\xb0\xff\xec\xef\x3b\xdf\xf0\xfe\xb3\x87\xf5\x9c\x86\x23\x2e\xf2\x9b\x66\xe7\x0d\x78\x8d\x02\x96\x3f\x6c\xf5\xbd\x74\x5c\xe8\x52\x1d\x27\xfa\xe9\x8e\xd3\x73\x52\x7c\xf7\x38\xf8\x0d\x79\x4c\x79\x44\xfd\x4f\x70\x98\x15\xc4\xb0\xd0\x53\x8a\x03\xf7\x7f\x01\x47\x31\x7f\xeb\x7f\x2d\x62\xf0\x7b\x85\x95\xa6\xf9\xf3\x10\xe6\xe2\x6a\xcf\x1b\x97\x1b\x3d\xb1\x16\x05\x11\x37\xee\x4b\x68\x70\x61\x4a\x01\xc5\xdd\x85\x14\xfd\xf2\x99\xd0\xd6\x2c\x1e\x5b\x0f\x42\x25\x24\x34\x17\x07\xf6\x85\x57\x6f\x2e\xc5\x63\xeb\xb3\x67\x5f\x1c\x0c\xed\x16\xeb\x01\x66\x64\x7d\xf6\x8a\xff\xa6\x72\x5e\xae\x21\x33\x86\xae\xc5\xdd\x3d\x8b\x3d\xf0\x73\x7b\x60\x7b\x96\xd1\xa1\x7d\x61\x95\x69\x5e\x84\x36\xbf\x25\x2f\x0d\xf1\xfd\x25\x4c\x79\x03\x4f\xa4\xb8\x52\x05\x40\xb2\x5e\xdb\x57\x06\x8d\x3e\x82\x34\x0f\x11\x3c\x00\x74\x2a\x38\xd5\x42\x66\x08\xd7\xf4\x4f\x4d\xf5\x0c\x0f\xf3\x1f\xcf\xcb\xa9\x97\x15\xc8\x3e\x7c\x72\xfb\xbf\x00\x00\x00\xff\xff\x21\xe8\x07\xc8\x5b\x67\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0xa7, 0x0, 0x3e, 0x97, 0x29, 0xa0, 0x50, 0xec, 0x6e, 0x8e, 0xca, 0xc6, 0xe3, 0xeb, 0xc8, 0xb6, 0x3f, 0x2f, 0x43, 0x13, 0x79, 0x42, 0x28, 0xb7, 0x15, 0xa2, 0x88, 0x46, 0x4d, 0xf7, 0x2e}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\xc8\x7b\x2c\xd4\x0a\x10\x8b\x9c\x65\x34\x89\xa7\xc5\xc2\xb1\x8d\x67\xdc\x2a\x42\xbd\x3b\x8a\xbb\x80\xca\x05\xb2\xcc\x7b\xff\xeb\xcb\x73\xa2\xe2\x69\x0a\x0c\x66\x0e\x55\x94\x0b\x46\x5a\xd8\xc0\xe7\x70\x19\x86\x6f\x48\x39\xa3\x8f\xa2\x14\x67\xc6\x39\xd5\xa8\x9d\x12\x12\x39\x65\x51\xa4\x23\x47\xfd\x45\x72\xd3\x7f\x35\x3f\x0d\x8e\x47\x1f\xfb\x31\x37\x25\x81\x44\xee\x19\xd7\x2c\x9e\xb8\x88\x4f\x71\x33\x00\x74\xcd\x0c\x23\x2c\x94\x07\x00\xc7\x07\xaa\x41\x61\x6c\x08\xc0\x50\x2d\xa9\xd0\xc3\xb2\xca\x47\x30\xd0\xbe\x11\xcc\x93\x7d\xb1\xed\x17\x5e\xb9\xdd\xd9\xc7\xbd\xdd\x99\x9b\x4c\x4e\xa2\xc7\xc2\x2d\x38\x82\x79\xb5\xcf\x76\xbf\x19\x97\x6e\x56\x15\x2e\x77\x5f\xd8\x4d\x98\x49\xe4\x9c\x8a\xeb\x98\xc8\x1b\xe6\x3a\x05\x3f\xe3\x3b\xaf\x1d\x5e\x48\x95\xcb\x92\x44\xd1\xa5\x73\xdc\x0e\x81\xb5\x84\xbf\xbc\xe0\x67\x8e\xc2\x78\xf0\xa1\x9f\xd2\x0a\xda\x29\xfb\xba\xaf\x00\x00\x00\xff\xff\xb4\x82\x23\x39\x30\x02\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0xa1, 0xc8, 0x99, 0x32, 0x37, 0x1c, 0xdc, 0xb1, 0x38, 0xcb, 0x56, 0x9d, 0x23, 0xd7, 0xdd, 0x79, 0xb1, 0xd5, 0xda, 0x30, 0x2a, 0x2d, 0xb9, 0x4b, 0x8c, 0xef, 0x78, 0xdc, 0x9c, 0xc3, 0x2b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
