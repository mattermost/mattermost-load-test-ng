// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (14.116kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (30.867kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (531B)
// assets/variables.tf (1.168kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xeb\x8f\xdb\x36\x12\xff\xee\xbf\x62\x4e\x09\xd0\xa4\x88\x64\x7b\x77\x9b\xc7\xb6\x69\x91\x3e\x51\x20\x6d\x82\x6b\xef\xfa\x21\x58\x08\x34\x39\xb6\x79\x4b\x91\x3a\x92\xf2\xc6\xd9\xf3\xfd\xed\x07\x52\x94\xac\x97\x1f\xd9\x64\x9b\xf6\xd2\xcd\x17\x87\x9c\x19\x0e\xe7\xf1\x9b\x21\xa9\x5c\xab\x15\x67\xa8\x21\x22\x57\x26\x82\xeb\x11\x40\xae\xd5\x9c\x0b\x84\xa7\x10\x65\x59\x2c\x14\x61\x16\x8d\x8d\x46\x00\x1a\x17\x5c\x49\x70\x33\x85\x89\x91\x18\x1b\x9f\xb8\xf1\x15\x6a\xe3\x26\x9e\x42\xf4\xdf\x2f\xe1\x24\x39\x7b\x14\x8d\x36\xa3\x11\x23\x96\x78\xb9\x69\xc9\x18\x41\x44\x0b\xad\x51\xda\x08\xae\x5b\xf3\x94\x08\x81\x3a\xe5\x0c\xa5\xe5\x76\xbd\x9b\xd0\x14\x33\x89\x36\xe5\xcc\x44\x10\x19\x14\x48\x2d\xb2\x52\xed\x55\x4e\x53\xce\x9c\x0e\x77\xaf\x57\x44\x27\xab\x9c\x6e\xbc\x1a\x1a\x8d\x2a\x34\xc5\x52\xc2\x25\xae\xd3\x9c\x70\x1d\x41\x74\x89\xeb\x92\xd5\x8d\x49\x92\x21\xc0\x96\x9d\x8a\xc2\x58\xd4\x7e\x7c\x13\x5f\xe2\xda\x33\x39\xf3\x14\x33\xc1\xa9\x93\x03\x4f\xc1\x19\xea\x9e\x23\x37\x66\x99\x6e\x67\xee\xf7\xd7\xe5\xd2\x58\x22\x29\x46\x10\x91\x3c\x4f\x0d\xea\x15\xea\x72\x79\x4b\x16\x06\x9e\xfa\x9f\x00\x3f\x3b\x3d\x76\x68\x41\xf2\x3c\xbe\x7b\x4d\x55\x21\x6d\xc2\x25\xc3\xd7\x1b\xa7\xd0\x66\x34\x02\xa0\x4a\x4a\xa4\xd6\x79\xa1\x94\x73\x07\x7e\x5d\x22\x30\x9c\x93\x42\x58\x28\x0c\x6a\xbf\xc3\xb9\xd2\xa0\x0a\x0d\xcf\x7e\xfa\xd1\x93\xd9\x75\xee\x97\x33\x66\x19\xf9\x01\x47\xe9\x1d\x3c\x2b\xa4\x2d\xca\xb1\xa5\x32\x16\x9e\x82\x41\x31\x4f\xc2\x26\x79\x5e\xad\x4c\x32\x0e\xdb\xbf\xa7\x10\x91\x8c\xc7\x93\x39\x3d\x99\x30\x36\x65\xe4\x6c\xf2\xf0\xd1\xe3\xc9\x2c\x82\x3b\x30\x7d\x9c\x4c\xce\xe0\xf9\xaf\xbf\x8c\x00\x2a\x73\xa4\x41\x01\xb7\x59\x67\x97\xd6\x78\xdb\x35\x5e\x7a\xd3\x85\xc9\x25\xae\x13\xce\xfc\xee\x0b\x69\x1b\x3a\xf4\xa4\x79\x82\x10\x24\x06\x69\xa1\xb9\x5d\xa7\x0b\xad\x8a\xdc\xc5\x12\x3c\x85\x57\x7e\xa3\xd1\xdd\x6b\x1f\x65\x2d\x0a\x27\x29\xe1\x6c\x13\x3d\xd8\x4f\x93\x2e\x94\x31\xbc\x24\x1d\x01\x5c\x38\xe3\xb0\xb5\x24\x19\xa7\x10\x69\xa5\x6c\x3a\x13\x8a\x5e\xa6\x0c\x57\xdc\xc5\x41\xe9\xa7\xb9\xd2\x29\x12\xba\x0c\x5a\xf7\xe8\x3c\x11\x55\xd2\xa2\xb4\x81\x05\x60\xa5\x44\x91\x61\x6a\xf8\x1b\x67\x3b\xa1\xd4\x65\x91\xdf\xeb\xb1\x26\x2b\x22\x0a\x7c\x00\x51\x83\x3c\x7a\x00\xb2\x10\xe2\x7e\x5b\x50\x70\xc2\xb1\x82\x1c\x79\x4b\xd0\xa6\x0a\x06\x0f\x27\x0e\x0b\x1c\xa2\xb8\xe4\xa8\xb6\x19\x52\xa1\xe1\x9f\x8c\x58\x8b\x3a\x53\xc6\xa6\x82\x53\x94\x06\x53\xc7\xe0\xa9\x19\x1a\xcb\x25\xb1\x01\x54\xc6\x4b\x95\xe1\xb8\x8c\xc8\xf1\x96\xaf\x21\x22\x0e\x22\xa2\x41\x45\x34\x66\xca\x62\x8c\xaf\x91\x56\xfa\x70\x29\xb8\xc4\xda\xf1\x00\xd1\xd5\xd2\x81\xde\x2b\xf8\x1b\xc4\x73\x18\xaf\x88\x1e\x0b\x3e\x1b\x53\xa1\x0a\x36\xae\xe2\x68\x3c\x53\xca\xc6\x73\x2e\xb9\x59\x22\x83\x8b\xcf\x81\x29\x40\xba\x54\xf0\xc9\x6f\x84\x5b\x2e\x17\x3e\xc1\x3c\x53\xcc\x25\xb7\x49\x92\x7c\xf2\x39\x18\x81\x98\xc3\xd4\x51\x4b\x0c\x61\xe4\x56\x5c\xa0\x85\x38\x96\x2a\xa6\x4b\xa4\x97\x31\x45\x6d\xf9\x9c\x53\x62\x11\xe2\x7f\xbf\x80\x18\x96\xd6\xe6\xe6\x7c\x3c\x36\xa7\x31\x16\xf1\x15\x1a\x1b\x4f\x13\x92\x91\x37\x4a\x92\x2b\x93\x50\x95\x8d\x19\xce\x12\xad\x66\x85\xb1\x39\x6a\x8a\xb9\xb3\x59\xc2\xd5\xf8\x6c\xfa\xdd\xf7\xdf\x3c\x79\xf2\x6d\xb2\xc8\x17\xf0\x1f\x30\x05\x53\x40\x72\xeb\x90\x0c\x08\x63\x10\x6f\xf5\xa8\xe7\xbc\x3e\x6b\x28\x72\x46\x2c\xee\x98\xf7\xa6\x10\xc2\xd1\xe5\x5a\x65\x68\x97\x58\x98\x58\x2a\xe6\xec\x9b\x2b\x6d\x51\x77\x77\xf8\x02\x1a\x8e\x62\xdc\xd8\xc4\x12\x9d\x2c\xde\x40\x89\x71\x8d\x40\x60\xea\x4a\xba\x82\x93\x16\x5a\x6c\xb6\x62\x2c\xd1\xf0\xfa\xcd\x7c\x87\x98\x8e\xa2\xd9\xaa\x41\x07\x63\x95\xdb\x71\x89\x62\x17\x3e\x36\xf6\x01\x73\x86\x56\x73\x6a\x6e\x06\xce\x81\xf9\xff\x06\x91\x23\x7b\x92\x08\xa2\x17\x3e\xa7\x8e\x81\xe1\x9b\xc2\x6b\x30\x5c\x0d\xb1\x7f\x01\xe7\x5f\x78\x75\xcb\x78\xd5\xa1\x35\x6b\x63\x31\xa3\x56\x00\x4a\x32\x13\xb8\x9b\x72\x40\x2a\x61\xcc\x67\xa8\xe0\xb3\xb9\x92\x96\x2a\x39\xe7\x8b\x69\xc7\x6a\x95\x61\x98\x48\x16\x9a\xcc\x89\x24\xde\x18\xca\x98\xb1\x46\x81\xc4\xe0\x38\x8c\xa7\x0f\x93\x87\xc9\x49\x4a\x32\xf6\xf0\x2c\x61\x38\xeb\x28\xc0\xf2\xcb\x05\xc4\x1c\x0e\x52\xb7\x96\x5d\x70\xbb\x2c\x66\x7e\x49\x2e\x67\x05\xbd\x44\xbb\xfd\x11\x14\x30\xe3\x0a\x7d\xc7\xab\x93\x64\x9a\x4c\x6a\x8a\xd4\xff\x37\x15\x5c\x16\xaf\x0f\x2a\xf6\x56\x4c\x5b\xc3\x33\x82\x99\x92\xb1\x46\xa7\xc0\x21\xf7\x84\xcd\xc7\x01\xa7\x3b\xd4\xa8\x5d\xea\x75\x88\xc0\x58\xa2\xed\x21\xc1\x95\xf2\x3b\x44\x56\xd3\x41\xd8\x91\x55\x25\xd7\xea\xf5\xfa\x66\x35\xc5\xb3\x96\x15\xa5\x0b\xeb\xed\xbf\x9d\x20\xdf\x03\xf6\x2e\x9f\x5b\xb4\xd4\xb0\xdb\x7a\xb7\x9b\xea\x21\xbe\x7e\x8b\x0d\x5f\xc2\x14\xbe\x82\x29\x9c\xc3\xc4\xa9\x6c\x8c\xa2\x9c\x58\x4c\xeb\x22\x95\x12\xc6\x34\x1a\xb7\x7f\xab\x0b\xbc\x69\xd1\xf0\x2a\x6f\x5b\xed\x46\x85\xda\x59\x9c\x3e\xb6\x92\xf2\xe1\x1a\x90\x3f\x43\x31\xbb\xbd\xa6\x77\x17\xa7\x5c\x70\xf9\xfa\xfd\x00\xe0\x90\x28\x9d\x79\xdb\xa1\xa5\x63\x3f\x3d\x36\xdc\xa2\x89\x4b\x0e\x36\x0e\x6e\xef\x30\x09\x09\xf1\xdc\xf4\xb9\xc8\x8a\x70\xe1\x18\xc7\xcd\x5e\x7a\x97\xec\x2d\xcd\x7e\x4c\x24\x59\x1a\xa0\xd4\xd5\x85\x4b\x64\xa9\x56\xee\x88\x18\x61\xb8\x7a\x2a\x13\xbd\xa4\x08\xc9\x1c\xa1\x69\x77\x10\x03\x77\x3a\x28\x88\xb1\x9c\x1a\x24\x9a\x2e\x53\xa6\x32\xc2\xa5\x97\x7a\x33\xd4\xdd\xf2\x55\x01\x5d\x8a\x6c\x74\xc0\x15\xe8\x0e\xb3\x3b\xbe\xb6\x4e\xdb\x1b\x32\x47\x8f\xa6\x1a\xa8\x9a\x66\xe5\xfb\x20\x53\x1d\x96\xeb\x5b\xae\x46\x8e\xa0\xc0\x0c\xa5\xbd\x67\x95\xe0\xc6\xde\x63\xc4\x92\xa4\x7d\x25\x96\x54\x17\x62\x09\x67\xe6\xfe\x03\x98\xdc\xaf\xbd\x01\x30\x8c\xb0\xc3\xe0\x1a\x74\xf7\xf0\x7a\x51\xd9\x00\x67\xa6\xa3\xa6\x1b\x09\x21\xb0\x45\xf3\x2e\x8e\x85\xfd\x3a\xda\x50\x57\xba\x90\xd9\xa0\x70\x23\x35\x7c\x05\xa3\x96\x0d\x55\x8d\x1c\xfd\x6b\x23\x34\xbd\xd2\x55\x1e\x83\x28\x45\x63\xd2\x5c\x09\x4e\x39\xba\xed\x7e\xf1\xc5\x37\x2f\x7e\xfe\xfe\xc7\x1f\x46\x50\xa3\x77\xf4\xcf\xd2\x11\xd1\x39\x44\x27\x93\xe9\x49\x3c\x9d\xc4\xd3\x47\xdb\x2c\xf9\xc5\x12\xeb\xed\x1e\x9d\xd7\x9e\x70\x7f\xd7\xa3\x76\x41\x8c\x9e\x79\xa4\x75\x62\xd0\x9c\x7f\x5a\x0b\xa8\xe7\x5f\x6a\x2e\x29\xcf\x89\x70\x24\x03\xf3\xdf\xcd\xe7\x48\xdd\x2a\xd1\x33\x21\xd4\x55\x9f\xe0\xef\x21\xe4\x1d\x09\xd1\xf2\x9c\x5c\x99\x73\x34\xe7\x77\xaf\xeb\x48\x28\x6f\x59\x93\x70\x75\x9a\xf8\x68\x6c\xce\x77\x6e\x59\x6b\x42\x42\x7d\xed\x4e\x39\xdb\x9c\x97\x91\x3e\x1e\x8e\xeb\xf1\xa7\x51\x43\xab\x4d\xf8\x7d\x11\xfa\x93\x60\x5b\x97\x2e\x98\xa3\x64\x26\xf5\x01\x5f\x5a\x6d\x4f\xfe\x27\x68\xea\x63\x5f\xd9\x44\xf4\xfc\x5a\xb7\x14\x9b\xd1\x10\xa8\xb8\x02\x15\x41\x64\x4e\xcb\x1f\xce\x37\x65\xaa\xee\xc8\xd0\x40\xd8\x59\xef\x40\x37\x33\x08\x67\x21\xc6\xfc\x4d\x72\x64\x4e\xeb\x1b\x65\x5f\x32\x43\x2b\x52\x69\x98\x94\xcb\xbe\x9a\x5c\x78\xd7\xbc\xe3\xea\xe6\x34\x0d\xbd\xaa\x5b\xb8\xfa\xe9\xd6\x0e\x3d\xea\xf0\xde\x93\x9a\xd6\x67\x88\x08\x38\x96\x6b\xbe\x72\xe5\x6f\xdb\xf6\x1d\xd9\xe1\x1d\x0d\xaa\xcd\x75\x7d\x7a\xce\x95\xa6\x98\x32\x34\x56\xab\x75\x85\x1f\x83\x46\x76\x56\x2b\xd3\x78\x5d\x7b\xb9\xfa\xef\x91\xbe\x0e\xe4\xb7\xe1\x19\xd7\xef\x78\xe9\x1e\x60\xbe\x7b\xf1\xfd\xc8\xe9\xb4\x07\x57\x06\x31\xa5\x89\x27\x7b\xb1\x60\x0b\x34\xaf\xba\x08\x61\x4e\xcf\x9f\x73\x63\xbf\x6e\x1f\x61\x9a\xd3\x3f\x60\x98\x7d\xae\xa8\xbf\x5d\x6d\xe6\xf3\x45\x6b\x99\x21\xb8\x31\xa7\xe7\xe7\xe7\xa1\x62\x54\xe1\x57\x07\x94\xb3\x5e\xe8\xc7\x3d\x3a\x3c\x18\xda\xd9\x5e\xe5\x9f\xcd\x94\xb6\x3f\x15\xc2\xf2\x9c\x68\xfb\x8f\xbc\xd5\x09\x35\x09\xbf\x45\x81\x16\x5f\xcc\xfe\xe5\xac\xb4\x63\x9f\xc7\xcc\x3e\xa3\x62\x90\xe0\x65\xb1\x8f\xbd\x9e\x75\xec\x3b\xed\xb7\xd7\x87\x37\x35\xee\x16\x80\x37\x1e\x31\x37\x23\x17\x6f\x7d\x50\xd4\xcc\xa4\x55\x1a\x34\x4e\xa2\xdd\xa1\xd0\x75\xed\x39\xe8\x95\x19\xc0\x66\xfd\x97\x94\xb2\x8a\xcc\xb9\xcb\xa6\x1e\xd3\x60\x26\xb2\xd9\xc0\xe3\x55\xad\x52\x5f\x5c\x99\xa3\x8d\xad\x38\x3d\xaa\x9f\xfe\xd9\x67\xab\x94\x20\xc6\x1c\x52\xdc\xd1\xb8\x3e\xc6\x75\xb0\xdd\x73\xf0\x2e\xa6\x92\xd8\x41\x65\x9e\x8b\x75\xca\xb3\x0c\x99\x3b\xcf\x8a\x75\x93\x2b\xb4\x3e\xa4\xb0\x2a\xcd\xb8\x54\xba\x6a\xef\xd2\x22\x5f\x68\xc2\x1c\x28\xce\x89\x30\x03\xf8\xd6\xd8\x5e\x04\xd1\x76\x83\xc1\x33\x03\xd6\xd9\x69\x5d\x67\x4e\x57\xeb\x67\xc4\x60\xb3\x55\x1d\x66\x28\xe9\x33\xe2\x47\xea\xb3\x60\xcb\x0a\xd5\xe8\x96\x2e\x27\xc6\x5c\x29\xcd\xda\x74\xd5\xe8\x08\xc0\x5c\xf2\x3c\x9d\x73\x49\x44\x6a\x24\xc9\xcd\x52\xd9\x86\x7d\x06\x6c\x58\x4f\x0e\xb9\x65\x8f\x3f\xca\x1f\x75\x5f\xdd\x26\x6f\x4f\xbe\x1a\x16\x72\xb1\xff\xc2\x7a\xb8\x33\x66\xb3\xd0\x14\xef\xbb\xf0\xa9\x9e\xcc\x53\xb2\x28\x9f\xb0\xdf\xea\x8d\xd7\xf1\x1c\xfd\xca\xfb\xbb\x3d\x16\xec\x7a\xb2\x75\xda\xbe\xcf\x47\xdb\xb6\xbc\x12\x6c\x6e\xe0\x27\x2f\x27\xb8\xea\x23\xbc\xfa\xf9\xb8\x2f\x60\xaa\x57\x47\x9b\xe5\xed\x97\x46\xff\xb4\xe8\x33\xf3\xc0\x43\xe3\x96\x73\x3b\xd7\x7a\x57\xf4\x9f\xc5\xc4\x4e\x54\x2c\x17\x9f\xee\x9a\xd8\x32\xeb\xac\x29\x73\xdf\x25\x49\x3b\x90\xcb\xaf\x45\x9a\x6d\xee\xde\x12\x4b\xf2\x3c\xae\x04\xc4\xa5\x00\x7f\x1c\x33\x54\xf3\xbc\x7a\x4d\x7f\x96\xe7\xf5\x6d\x00\x78\x22\xef\xb6\x0a\xb5\xaa\xa2\x03\x03\x0b\x44\x23\x8f\x03\x0b\x7f\x81\x1b\x12\x47\xab\x2c\x75\x1e\xf0\x5a\x9d\x9c\x94\xb0\xa4\xaa\xa1\xc6\x60\xae\x95\x55\x54\x55\x47\x0e\x4b\xf3\xd2\x10\x94\x33\x5d\xc6\x79\x99\xd0\x93\xc4\xff\x1b\x4f\xa2\xea\x64\xb9\x6f\xc5\xc7\x93\x87\x9f\x0d\xac\x59\x0f\xbf\xff\x55\xbd\xf0\x47\x9d\x35\x1b\x83\xdb\x15\x9b\xeb\xdd\x81\x9f\xc8\x7a\x86\xa0\xdd\x81\x87\x53\x0b\x4a\x8a\xb5\x97\x0a\x2f\xeb\x88\x86\xf0\x58\xf1\x55\x60\xf9\xba\xb0\xb0\x24\x92\xad\xa1\xcc\x4f\x4b\x2e\x5d\x96\x85\x2f\xb4\x0c\x5c\x71\xbb\x54\x85\x85\x8c\xc8\x82\x08\xb1\x06\x63\x96\xb1\xa3\xe0\xd2\x2a\xb0\x4b\x0c\x02\x93\x77\x36\x74\x69\xbe\x27\xd3\xc9\xa4\x67\xec\xce\x54\xd3\xe0\x5d\xa3\xb7\x83\x7b\x0f\x7e\x37\xdf\x84\x2b\xe5\x70\x77\x10\xf4\x95\xaa\xc6\x3a\xee\x8f\xa7\xc7\x79\xff\xa8\xb4\x0c\x1f\xfc\xbc\x43\x76\xc6\x41\xc2\xd1\x49\x5a\xd2\x1f\x99\xab\x87\xfd\xf9\x78\xf2\xe8\x6c\x87\x3f\xeb\xa9\x01\x7f\x16\xec\x6d\xfd\x59\x7d\x42\x75\x6c\xa0\xdd\x50\xb1\xb7\x0f\xb4\x1b\x28\xd6\x87\x9b\xce\xd4\x87\xb2\xd8\x4d\x14\x7b\x77\x8b\xfd\xce\x69\x79\x28\x2f\xd9\xac\x91\x8f\xbb\x4f\xa2\xdd\x2a\x79\x84\x85\x4f\x4f\x27\x0f\x77\x58\xb8\x9e\xba\x05\x0b\x1f\xa1\xd9\x67\x67\xa7\xfd\xba\xdb\x99\xba\x05\xcd\x8e\x00\xc9\xed\x01\xe8\x18\x7c\xf4\x47\x9f\x83\xfd\xcb\xf3\x0a\xfc\x3c\xfd\x9f\xaa\x95\xd9\xdb\x55\x9c\x4d\x7a\xc5\xb5\x31\x38\xdc\x55\xb8\x33\x5d\x65\xd3\x70\x90\x3e\x2a\x62\x3e\x60\x21\xff\xc3\x55\xf2\xea\xc3\xbd\x83\xb0\x11\x08\xdf\x0e\x3b\x3e\x44\x4f\xfc\x64\xf2\x64\xc8\x8e\xf5\xf0\xed\xac\x7a\xda\x8f\xdf\xd6\xf0\xcd\x57\xfd\x63\xc5\x4b\x78\x1d\x3d\x1c\x2f\x81\xf0\x30\xa2\xfd\xd2\x87\xb0\xc0\x5b\x5f\xba\x1c\x55\xa1\xce\xce\x4e\x77\x24\x75\x35\x73\x3b\xf5\x69\x8f\x7f\x86\x54\x1a\x56\xe7\x7d\xa8\xb2\x19\x8d\xee\xc0\x6f\x08\x12\x91\x01\x01\x83\x39\xd1\xc4\x62\xb7\x46\xe8\xc2\x9d\xa5\x14\xe4\x1a\x57\xae\x84\xd0\x35\x15\x9c\x86\x67\x4b\x94\x74\x0d\x33\xb4\x57\x88\x72\x74\xc7\x1f\xa2\x48\x9e\x07\x4e\x22\x19\x04\x18\x28\x47\x92\xbd\xd1\x92\xba\x95\xca\xc3\x42\x6c\x55\x5c\x7f\x5e\x56\x5e\x09\xf6\x3f\xc7\xaa\x9d\x12\x3c\xed\xac\xd1\x75\x73\x83\xec\xe4\x33\x9f\x5a\x5d\x77\xf7\x29\xba\x6e\x87\xbe\xff\x7b\xb7\x6b\x5b\x92\xbd\xb0\x3e\xaa\xbe\xed\xef\xdf\xcf\x0d\xb3\x96\x2e\x3b\x22\xcf\xca\x8f\xdf\x8e\x6d\x1e\x3c\xf5\xe1\x54\x7b\xe9\xc8\x6e\xad\x67\x78\x3c\x04\x47\x8f\xdf\x0d\xfe\xfe\x58\x6d\x4a\xe5\x83\x8f\xa9\x81\xf8\x5f\x00\x00\x00\xff\xff\x37\x66\x79\x29\x24\x37\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0x84, 0xe, 0xef, 0x42, 0x9f, 0x98, 0x6f, 0x53, 0xa1, 0x87, 0x45, 0x5f, 0x31, 0x74, 0xc0, 0x1b, 0x8d, 0x66, 0x20, 0x5b, 0x77, 0xe4, 0xe2, 0x96, 0xb9, 0x3, 0x4d, 0xc4, 0x97, 0xfa, 0x2}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x73\xdb\x36\xf2\xc0\xdf\xe7\x53\x60\x30\xff\xff\x8d\xd3\xb1\x5b\x4b\x89\xe3\xd8\x33\x7d\xe1\xa8\x49\x2e\x33\x71\xeb\xf3\x43\xaf\x73\x49\x86\x03\x91\x2b\x09\x63\x12\x60\x00\x50\xb6\x9a\x73\x3f\xfb\x0d\xc0\x27\xf0\x41\x32\xa5\x48\xb6\xd2\xa0\x2f\x6a\x11\x04\x81\xdd\xc5\x62\xf1\xcb\x02\xa2\xbe\x3c\x41\x08\x13\xc6\xb8\x22\x8a\x72\x26\xf1\x31\xd2\x45\x08\xe1\x90\x4a\x85\x8f\xd1\x07\x73\x85\xb2\x52\x73\x67\x98\xd0\x50\xbd\x63\xf8\x18\xf5\x76\xcb\xd2\x80\x28\x22\x79\x22\x7c\xc0\xc7\x08\xef\xed\xa1\xb7\x82\x8c\x08\x23\x68\x6f\x0f\x5b\xd5\x80\x91\x61\xa8\xab\x28\x91\x80\x55\x3e\xa1\x41\x4b\x29\xf5\x39\x1b\xf0\x90\x0b\xdd\xa6\x18\x0f\xc9\xce\xfe\x2e\xea\xf7\x7a\xbb\xa8\x7f\x70\xb0\x8b\x7a\x4f\xed\xa6\x19\x89\x4c\xdf\x27\xa5\x3a\xe8\x1f\xe8\x24\x04\xa1\xa4\x5d\x4f\xcd\x62\x53\x2f\x20\x72\x32\xe4\x44\x04\x38\xbb\x77\x67\xfe\x7e\x7a\x82\xd0\x9d\xae\x8e\x21\xa0\xaa\x26\x2d\x1e\x33\x50\xef\x02\x7c\x8c\xfa\x07\xcf\xfb\x69\x89\x20\xf1\xe4\x92\xf3\x50\xd1\x38\xb7\x09\xa6\xa6\x4a\xfa\x51\x81\x30\xd2\xe8\x9b\x07\x2f\x8f\x8e\x0e\x8f\x7a\x87\x87\x07\x47\x2f\xcd\xdd\x90\xb2\x6b\x6d\xf5\x0f\x9f\xcc\x65\x4c\x18\x84\xb2\xb0\x7b\x6e\x75\x4c\x42\x4a\xa4\xb1\x84\x19\xa2\xbb\x5c\x1d\x3c\x24\xa6\x64\x44\x42\x59\x18\xce\x68\xf6\x1e\xd8\x58\x4d\x74\x9f\xfb\x95\x72\x68\xab\x6e\x0f\x5d\xc8\x49\xa0\x40\xaa\xbd\xac\xa8\xa8\xd6\x62\x8e\xb4\x5c\x08\x33\x40\xd5\x46\x47\x34\x0c\x6d\x17\x31\x05\x6f\x05\x09\x28\x30\xed\x58\xa5\x54\x63\x41\x83\x33\x5e\xba\x5e\xea\x0f\xf8\x18\x1d\x59\x83\x76\xa3\xdb\xea\x5b\x05\xb7\x76\x1b\x08\xe1\x99\xbe\xce\x07\xb2\x68\x7b\x42\x83\x00\xd8\x05\x08\xda\xa2\xb7\x19\xa4\xc3\xe2\x32\x84\x31\xb0\xa0\x2a\x06\x99\x8e\xeb\x8f\x21\x84\xfd\x44\x88\x54\x8b\xfa\x9d\x88\xdc\xb6\x95\x52\xd6\x52\x2a\x27\xfc\xa6\xe9\xf2\x8a\x2b\x12\xb6\xd4\x9e\x92\x30\x29\x75\x68\x28\x1a\x52\x66\xee\x56\x46\x46\x17\xde\xd0\x20\x75\x03\xbb\xd4\x72\xb9\x74\xea\x24\x61\x78\xc6\x29\x53\xa7\xdc\x4c\x43\xec\x73\xc6\xc0\x57\x10\x94\xc3\xcf\xe3\x6a\x84\x28\x5c\xe7\x7d\xd1\x5e\x43\xaa\x18\x84\x0f\x4c\x91\x31\x34\x8c\x1f\xeb\xee\xb4\x3b\x24\xfa\xd9\x83\x6a\x79\x73\xac\x04\xb0\x00\x04\x98\x40\x30\x0a\xb9\x2a\xe5\x92\x66\x70\x7f\x9b\x82\x10\x34\x80\x9a\x62\x32\x26\x3e\xb4\x4d\x05\xa9\x88\x7f\xdd\xe8\x45\x2a\x88\x63\x08\xde\x53\xd6\x14\x58\x11\x31\x06\x25\xad\x98\x68\x47\x45\x3d\x0f\x6e\xe3\x34\x4e\x11\x05\x3b\x11\x51\x0a\x44\xc4\xa5\xf2\x62\xfd\x3f\x33\xac\x5f\x28\x93\x8a\x30\x1f\x7e\xfe\xeb\x23\xfe\x3f\x09\x62\x0a\xe2\x23\xbe\xfb\xd0\x8b\x3e\xd9\x91\x4c\x4f\x16\x2e\x22\xa2\x1d\x0c\x2b\x1a\x81\x97\xea\x58\xad\x42\x99\x02\x31\x25\xe1\x1b\xe2\x2b\x33\xff\x7a\x95\xdb\xa9\x37\xbf\x29\xda\xf9\x52\x74\x7e\x77\x57\x6d\x28\x02\x25\xa8\xaf\xeb\xb4\x0a\x5d\xad\x2c\x60\x64\xc2\x1f\x3e\xa9\x96\x6b\xcb\xe9\x71\x2c\xca\xee\x76\x17\x5b\x49\x26\xd1\xce\x6a\x96\xda\xb8\xa9\x2e\x9b\x6a\xaf\x66\xa3\x57\xf7\xd9\x28\xfb\x54\xfa\xab\x9a\x08\x90\x13\x1e\x06\x35\x3f\xd6\xaa\xbd\x11\x3c\xc2\xc7\x48\xcf\xd5\x4a\xf9\x39\x8c\xb3\x89\x59\x7b\xe0\x62\x42\x47\xaa\xf9\x84\x32\x21\x1c\x9f\x71\xa9\x24\x8a\x41\xa0\x0b\xf0\x39\xb3\x66\xba\x2a\x16\x33\x6b\xa6\x47\xf2\x1c\x24\x0f\x93\x6c\x25\x6b\x06\x33\x22\x20\x68\x86\x33\xc9\x85\xaa\x45\x6a\x13\xc9\xbc\x7c\x15\xa6\x2c\xa0\x53\x1a\x24\x24\xc4\x8d\xf0\x91\xd7\x31\x4b\x6c\x29\xdf\x2d\xb9\xa5\xb5\x38\x34\x4c\xfc\xeb\x74\x72\xda\xca\x6a\xb1\xb3\x80\xa6\xed\xd1\x02\x0b\xb5\xda\xed\x21\xb9\x08\xbd\x2d\x11\x6e\x46\x6e\x61\x41\x4c\x28\x9d\x53\x4e\xb4\x25\xaa\x7e\x47\x86\xa0\x43\x3d\x1e\xf0\x84\xd5\xef\xf1\xf1\x2b\x22\xa1\xe1\xab\xe9\x02\x53\x15\xbb\x58\x61\x1a\xc5\x96\x3e\xf7\x4e\xcc\x4e\xa2\x36\x7a\xd8\xa0\x9c\x8d\xc9\x31\x6b\x8e\x3b\x09\xe9\xb8\xcd\x1d\x4d\xf9\x7b\x98\x16\x42\x57\x10\x2f\x33\x81\xa3\xab\xfc\xba\x95\xae\x2a\x05\xab\xe2\x95\x65\x9f\xf9\x7c\x55\x9b\x6f\xf7\xe1\x55\xad\x7a\xea\x53\xf5\xb8\xb3\x1a\x5c\x59\x1e\xe8\xd8\xea\x1b\x60\xab\x89\x52\xb1\x27\xe0\x73\x02\x52\xc9\x6d\x80\x2c\x94\xf7\x8e\x3a\x61\x96\x91\xdf\x4c\x71\xf9\xe0\xb4\xb5\xa4\xed\xb6\x06\xbb\xba\xda\x6c\xab\xe9\xeb\x3c\xb3\xbb\x03\x30\x07\x60\xcb\x88\xea\x00\xec\xfb\x01\xb0\x7a\x7a\xeb\x68\x05\xfe\x7a\xd1\x01\xbf\x5c\x7a\xcb\x21\x58\x77\x04\xab\xaf\xc4\x37\x30\x94\xdc\x04\xff\x85\x0c\xb1\x65\xf9\xad\x56\xd1\x37\x08\x5f\x2b\x5a\xed\x31\xa0\xeb\xdb\x00\xa8\x5f\x93\x68\x08\x02\xf1\x11\x1a\xe4\x93\x19\xfd\x02\x53\xea\x83\x44\x3b\xff\x86\xe1\x85\xb1\x6e\x7e\x53\xf7\xf0\xd4\x01\x96\x03\x2c\x07\x58\x0e\xb0\x10\x9a\x97\xe1\x5a\x85\xb0\x7a\x8e\xb0\x1c\x61\x6d\x8a\xb0\x82\xa1\x17\x11\xa9\x40\x78\x7e\xb9\x90\x7d\x4b\x9c\xb5\x40\x81\x87\xa1\xad\xe5\x2d\xb8\x35\x89\xae\xe5\x6d\xf7\x6d\x11\x9b\x39\xa1\xa3\x38\x3a\x35\x4a\xa2\x5f\x88\x22\x43\xbd\xd2\x3a\x4c\x73\x98\xe6\x30\xcd\x61\x1a\x9a\x93\x07\xeb\xbd\x5c\x05\xd3\x1c\xa7\x39\x4e\x5b\x2f\xa7\x69\xd2\xa0\xcc\x17\x40\x64\x65\x63\x8d\xc4\xd4\x4b\x59\x21\x89\xd2\xad\x33\x34\x9c\xa1\x9d\x9c\x36\x9e\xa2\x9f\xd0\xbd\x8f\xfa\x3a\x12\xb7\x3d\xbc\x34\x9c\x64\x27\x6b\x6b\x6e\xf6\x00\x7b\x9b\xb6\x19\x36\xc4\x7a\x13\x2a\x15\x1f\x0b\x12\x79\x9f\x13\xc2\x14\x0d\x61\x67\xff\xc7\xa3\x5d\xd4\xb6\xdd\x59\x88\x93\x2e\xd1\x2d\xb6\xdd\x0d\x61\x85\x5d\xce\xb9\xf6\xad\x1b\xf0\x68\x3f\xde\x9b\x4f\xcf\x16\xc3\x6d\x07\xae\x9d\x02\x61\xe8\xe4\xec\x1d\xca\xb6\x2a\xd1\xa5\x4d\x2e\x8e\xcd\x36\xc2\x66\x73\xb8\xcc\x21\x99\x43\xb2\xad\x42\xb2\x46\xe6\x6c\x25\x26\x3b\x70\x48\xe6\x90\x6c\xad\x48\x36\xe6\x5e\x04\x91\x54\x44\x49\x8f\x84\x21\xf7\xbd\xe1\x4c\x81\x7c\xa4\x5c\xd9\x89\x96\x60\xc1\x9a\x5f\x62\xd3\x1c\xb9\x37\x9a\x28\xb3\xfb\x34\x43\xe2\x51\x96\x48\x58\xaf\xc5\xd6\x45\x9f\x17\x5a\xc0\xcd\xda\xf3\xde\xe4\xd9\x12\xf6\x9c\x00\x89\xb7\xd9\x9c\xff\x04\x12\x6f\xd6\x9a\x83\x6d\x4e\x45\x9e\x42\xc4\xc5\x0c\x5d\x49\x1d\x1d\x1d\xd2\x6e\x12\x69\x8d\xa7\x38\xac\x9d\x27\xa7\x4d\x14\x8e\x6b\xf3\xf2\xad\x49\x35\xf6\x0f\x57\xc0\xda\xde\x33\xc7\xb5\x8e\x6b\xd7\xca\xb5\xb4\xf1\x55\x49\xc1\x7d\x90\xd2\xf3\xe3\xc4\x93\xe6\xf8\x78\x87\x23\xfc\x3f\xa0\xde\xfe\xfe\xe3\x6d\x10\x77\x27\xd7\xc7\x64\x83\xc1\xd9\x15\xba\x52\x34\xa4\x7f\x9a\x6f\xed\xa3\x73\xa2\x00\xed\xfc\xbf\x3b\x3d\xf6\x78\xdb\x92\x0b\x87\x03\x7d\xb7\xec\xe0\x52\x62\xdb\x84\x0e\x8d\x94\xd8\x4a\xec\xf0\xdc\xa1\x83\x43\x87\xb5\xa2\xc3\x98\x7b\x63\x2e\x78\xa2\xf4\x90\x6c\xf1\xa1\xb1\x8a\x9c\x1b\x3c\x1b\xd6\xc5\x1e\x8f\x7b\x04\xac\x8b\x25\xbe\x91\x93\x5e\x6f\x39\x3a\xaf\x2b\xe2\xf8\xc9\x1d\xeb\x72\xc0\x84\x36\x02\x4c\x95\xf9\x18\x80\xf4\x05\x8d\xb3\x19\x55\x66\xdb\x1e\x25\x93\xf2\xec\xc5\x0a\x34\xd4\xef\x72\x68\x6b\xee\xdb\x23\xea\xef\x89\xe8\xfc\xf2\x08\x41\xc7\x13\x75\xd1\x9a\x6a\x7f\xac\x17\x4b\x34\x90\x48\x17\x3c\x10\x0d\xf5\xff\x46\x34\x54\x9c\x0c\x62\x3c\x00\xcf\x8f\x93\x76\x02\xd8\xd5\x71\xfd\xe7\x8f\x38\x91\xd6\x0b\x10\x16\x1d\xc4\x5a\xb0\x31\xa3\xeb\xb7\xc0\x79\x0b\x15\x5c\x49\x10\xa8\x53\xfe\x64\x29\xe2\x59\x42\x5f\x39\x93\x0a\xa2\xaf\xd3\xb8\xb1\x75\x67\xda\xec\xa2\xd7\xab\x8d\xe9\x45\x83\x10\xd6\xab\xd5\xbb\x20\x84\x2e\x3a\x0d\x36\xa4\xd3\x5f\x1f\x31\x15\x9f\xff\x2b\xf9\x48\xe9\xbf\x94\xdf\x10\xaa\xd6\xab\xe2\x6f\x6a\xd2\xcd\x1f\x7f\xd9\x92\x23\x6b\x83\xb3\x2b\xf4\x9e\x93\x00\xed\xf4\xa2\xfb\xf2\x75\x0e\x28\x5b\x7d\x71\xeb\x28\xcd\xd1\xe4\xd6\xd0\xa4\x4f\x23\x12\xd6\x5d\xf6\x71\x72\x6b\xab\xd1\xe4\x7a\xf7\xe5\x74\x1c\x7d\x1d\xc5\x6a\x36\xe7\xde\x7f\x40\xf0\xaf\xcc\xc9\x6d\x00\x44\xbf\x3a\x5f\xe7\x48\x74\x3d\x24\x9a\xae\xf2\x91\x39\x89\xe2\x9d\x42\x74\xb9\x60\xf7\x0e\xed\xa1\x5a\xed\x37\x02\xa0\x5b\xe5\x57\xc9\x68\x04\x62\x5e\xa6\xab\x56\x79\x40\xfc\x09\x04\xdd\xb2\x62\xeb\x42\xde\x00\x2d\xfa\x6a\xc1\x2a\xd0\xbb\x84\x65\xf1\x42\xe9\xcc\x93\xdd\xc4\xdb\x9e\x63\xfb\x9d\x8f\x36\x39\x04\x6a\xf5\xa2\x4e\x67\x97\x1c\x02\x7d\x27\xa7\x97\x1e\x9c\x75\xea\x89\xb3\xe7\x07\xab\xa0\x4e\xb9\x83\x95\xef\x4c\x54\x53\x80\xdf\xc3\xcb\x58\x1d\xa9\xac\x89\x54\xaa\x89\x09\x06\xea\x86\x8b\x6b\x4f\x09\xc2\x64\x44\xd5\xc2\x13\xce\x6d\xe9\x88\xa7\x3f\xbc\x6c\xdf\x3c\x6b\x9e\x09\x5d\x76\x5b\xed\x8f\xf4\x7c\xc8\xba\x81\x62\x8e\x05\x04\xf8\x40\xa7\x8b\x8f\x78\x77\x32\xc0\x4a\x28\xb5\xa4\x6d\xce\x97\xb1\xcd\xb6\xd0\xcc\xaf\xa9\xa5\xd1\xf9\x1f\x3f\x65\x63\x7b\xdf\x3e\xa2\x83\x9a\x56\x4f\xb6\xa0\x26\x76\x48\xe3\x90\xe6\x41\x91\xa6\x91\xbe\x59\x8d\x69\xba\xfc\x54\x8f\xa3\x97\x15\xe9\x25\x4c\xc6\x94\xfd\x0e\x42\x66\xbb\xc5\x2f\x7e\x7c\xf1\x63\x1f\x7f\x07\x74\x93\xaf\xe8\x52\x11\xe5\x5d\xfa\xb1\x37\x48\x84\x78\x2d\x15\x19\x76\x4a\x19\xac\x25\x0b\x62\xba\x0b\xa9\x9c\x6c\x20\x19\x42\x2b\xdc\x92\x6b\xf9\xfa\x56\x79\x97\x83\xb3\x4b\x1a\x01\x4f\xd4\x42\x78\xd9\x80\xbe\x79\xb7\xcb\xc3\xc8\x3d\xca\x6a\x4e\x5b\x7a\x40\x57\xdd\x1f\x4b\xb3\x43\xd6\xd8\xad\x67\x0b\xf0\xab\x07\xec\xeb\xf4\xc9\x7b\xd8\xf2\xbd\xbe\xcb\xc1\x99\xfd\x1e\x31\x47\x85\x6e\xb7\xef\x6f\xc2\x85\x4f\xb2\x66\xf5\x9c\xd3\xd3\x49\xab\xdd\xdb\x4f\x3d\x1c\x4b\x7f\x02\x11\x29\xd7\xe9\x7e\xfa\x23\x93\x52\xcd\xd2\x69\x11\x10\x71\x9d\xd6\x54\x64\x5c\x8e\xbc\xf5\x5e\x9e\xcc\x78\x56\xc9\x5e\x0c\x62\x84\x8b\x6e\x15\x44\x71\x48\x14\x65\xe3\x2e\xbf\x06\x4a\xc2\xf0\x77\xed\x80\x4d\x6f\x2d\xd9\xab\x32\x96\x0a\x6e\x55\xf3\x1f\xfa\xd3\xac\x8d\xc2\x87\x2b\xce\xd0\xf1\x5b\x01\x66\x97\x72\x44\x19\xcd\x8f\xbc\x19\xd7\xf0\xd2\x09\xd2\x7a\x1c\x22\x0f\x8e\x76\x00\xa0\xcc\x0f\x93\x00\x4e\xc2\x36\xbc\x2b\xce\x54\xa6\x21\xd7\x6e\x2a\x4a\x42\x45\x9b\xd3\x33\xff\x59\xd2\xe6\x03\x25\xc2\x95\x91\x0f\x21\xfc\x39\x01\x31\xeb\x26\x7d\xe9\x21\xbd\x4a\xe9\x18\x6e\x6b\x26\xc6\xf2\x9a\xc6\x57\x22\xbc\x98\x31\xbf\x6d\x33\xb1\x19\x07\x15\x19\x9b\x81\x95\xff\xca\xe5\xc1\xd5\xbb\x0d\xc1\x75\x59\x7b\xe5\x2c\x50\xa6\x9a\x59\x37\x12\x09\x97\x69\x43\x95\x6d\x49\xf3\xb7\xfc\x1d\x56\x13\x1c\x0b\x57\x1c\xa5\xeb\x08\x66\xfc\x66\xaf\x77\x90\xbf\x59\x0a\x2b\x9e\x15\xe2\xca\x73\x31\xf5\xaf\x0d\x86\x66\x4f\x67\x16\xf3\xf2\xe4\x89\x1d\x1c\xf1\x81\xb5\x8c\xe4\x33\xce\x5c\x3c\xb3\x2f\x7a\xe5\xdb\xac\xf0\x81\xf5\xb9\x67\x5f\x3c\xdb\xb7\xef\x58\xab\x43\xdf\xfa\xdc\xcb\x7e\x7a\xf6\x53\xae\x03\x8d\xc0\xb3\xbc\xe2\xde\x5e\xec\x86\x5f\xd8\x0d\xdb\xbd\xf4\x9f\xdb\x17\xd6\x57\x28\x0e\x03\x5b\xde\x5c\x96\x8a\xf9\xfe\xe4\x06\xad\xf1\x50\xf0\x1b\x99\x79\xaf\xb5\xd7\x54\x84\x10\x73\xec\x66\xef\x12\xa4\x42\x67\x20\x4c\xb8\xd6\x48\x77\xca\x19\x55\x5c\xe8\x50\x62\x9e\x4c\xcc\x3f\xe4\xf0\x7e\xfa\x5f\xaf\x97\x96\x4e\x8b\x68\xf6\xec\xc9\xdd\x93\xff\x05\x00\x00\xff\xff\x31\x03\x1d\x25\x93\x78\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0x4f, 0x4c, 0x4a, 0x5, 0xa8, 0x41, 0x66, 0xee, 0xed, 0x45, 0x7f, 0x5f, 0x50, 0x74, 0x8, 0x73, 0xc8, 0x6d, 0xd0, 0x11, 0xa1, 0xa, 0x9a, 0x46, 0xcc, 0x88, 0x56, 0x1b, 0xdd, 0x6c, 0x37}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xbd\x4e\xc4\x30\x10\x84\xfb\x3c\x85\x15\x51\x51\xb8\x49\x4d\x45\x49\xc9\x03\xac\x36\xeb\x11\x58\xf9\x95\x77\x7d\x10\x9d\xee\xdd\x91\x92\xb8\xb8\x23\x84\xce\xd2\xcc\xf7\x79\x76\xca\x36\x67\x73\x75\x1c\xd5\x78\x14\x68\xed\xae\x95\x73\x17\xee\x33\xdc\x8b\xab\x9f\xae\xfc\xa5\x54\x52\xcf\xf3\x4c\x8a\x74\x41\xf2\xcf\xb7\xba\xba\x55\x55\x11\x84\xf6\xb5\xcf\x6a\x48\x87\x82\x14\x94\x64\xcb\x7d\x68\xcb\xf3\xde\xc0\x1f\x18\xed\x9f\xff\xfb\x89\x83\x41\x8d\xd6\xf2\xe3\x86\x01\x96\xa2\xe8\xfb\x3a\xf0\x5c\xb4\x57\xf7\x63\xee\x35\x73\x9a\xbe\x97\x73\x7c\xad\x1c\xc2\xe8\x59\x2d\xca\xc9\x86\xbd\xa1\xe0\x24\x9f\x14\xa6\x81\xe3\xe8\x71\x3c\x45\x9b\x36\x4b\x07\xdb\x44\xbf\x54\xda\xd0\x96\xfb\x52\x7c\xc4\xdf\xb0\xfc\xc1\x46\x1e\x88\x45\xa0\x4a\x1d\x16\xaf\x4d\x87\x65\xa5\x7f\x02\x00\x00\xff\xff\x3c\xc7\x94\x07\x13\x02\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0x33, 0x41, 0x76, 0x86, 0x79, 0xa8, 0x17, 0x9f, 0xd3, 0x29, 0x10, 0x3b, 0xf1, 0x6, 0x24, 0xeb, 0xa3, 0x90, 0xc0, 0x68, 0x2e, 0xfe, 0xd2, 0xec, 0x16, 0x3e, 0x79, 0xb7, 0xef, 0xa6, 0xb2}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xd1\xae\xd3\x30\x0c\x86\xef\xfb\x14\x56\xb9\x85\x68\x0c\x76\x80\x8b\x5e\xf2\x14\x08\x45\x6e\xea\xf5\x44\x27\x4d\x82\x9d\xf4\x30\xd0\xde\x1d\xb5\x63\x5b\xa3\x4e\x94\x5e\xfa\xff\xbf\xbf\x8e\xe3\x8c\xc8\x16\x5b\x47\x50\x1b\x97\x25\x11\x6b\x8f\x03\xd5\xf0\xbb\x3a\x57\xd5\x5d\x1c\xa3\x99\x6a\x00\xe9\x14\xa9\x91\xc4\xd6\xf7\xa5\x03\x63\xd4\xd6\x4b\x42\x6f\x48\x9b\x90\x7d\x5a\x85\x14\x96\x29\x68\xed\xe8\xc9\xa7\xcd\x98\xd2\xb4\x08\x7a\x03\x5f\x1d\x4a\xb2\x46\x08\xd9\x3c\xc3\x95\x91\x25\x4e\x72\x63\xef\x47\x82\x06\xda\x10\x5c\x05\xd0\xd1\x11\xb3\x4b\xd0\xc0\x11\x9d\x50\xf9\xeb\x05\x7b\xfb\xef\x2d\xe0\xef\x54\x96\x11\x35\x7f\x54\x0e\xb9\x27\x45\xcb\xc6\xea\x55\xea\x48\x2c\x36\xf8\xcd\xbc\x27\x75\x58\xc3\xd4\xca\xff\x75\xd3\xc7\xfd\x63\x5a\xec\xaf\x92\xf6\x79\x68\x89\x0b\xfa\xfd\xae\x44\x23\x87\x9f\xa7\x8d\xfb\xec\xda\xad\xcb\x5c\x3a\xc8\xf7\xd6\x6f\x84\x38\x14\x79\xe4\xb8\xb0\x0f\xe7\x38\x60\x2c\x0e\x32\x49\x00\x35\x66\x0e\x8c\xef\x86\x93\xfc\x70\x35\xcc\x5f\x03\xf5\x41\x7d\x52\x73\x49\x5f\x74\xb5\x57\xbb\x0f\x6a\x5f\x17\x4c\x0c\x92\x7a\xa6\x19\x6c\xa0\xfe\xa2\x9e\xd4\xe7\xc9\x71\x5e\xb5\x95\x85\xf8\xe1\x83\xea\x5a\x1d\x51\xe4\x35\x70\xb7\xd2\x44\x9e\x75\xcc\xad\xb3\x46\xbf\xd0\x69\x25\x0f\x98\x12\xf1\x10\x24\xe9\x2e\xbc\x7a\x17\xb0\xd3\x99\xdd\xbf\x7c\xce\x1a\xf2\x42\xfa\x68\xdd\xba\x95\x39\x20\xd1\x56\x1c\x87\x90\x74\xeb\x82\x79\xd1\x1d\x8d\xf6\xfa\x7a\xee\x73\xfd\x36\xcf\xe8\x32\x5d\x80\x31\xb8\x3c\x5c\xd6\xe2\xb6\x7a\x85\x32\xed\x1c\x34\x70\xd8\xcd\xe5\xf3\xdb\x0a\xe0\x7b\x75\xfe\x13\x00\x00\xff\xff\x35\xb7\x37\x29\x90\x04\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0x12, 0xd, 0x71, 0x17, 0xcc, 0xd4, 0x5d, 0x9a, 0x6b, 0xb5, 0x9a, 0x47, 0x20, 0x0, 0xc1, 0x22, 0x75, 0x1c, 0xc9, 0xfe, 0x69, 0x63, 0xfa, 0x37, 0x96, 0xf6, 0x67, 0xac, 0x6d, 0x5b, 0x16}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
