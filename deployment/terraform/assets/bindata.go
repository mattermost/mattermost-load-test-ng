// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (9.524kB)
// assets/outputs.tf (327B)
// assets/variables.tf (589B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\x1b\xb9\x11\xfe\xae\x5f\x31\xdd\x04\x48\x5b\x94\xbb\xf2\x4b\x1c\xfb\x0e\x4e\x91\x5e\x5b\xb4\xc0\x5d\x1b\xa0\x01\xfa\x21\x67\x2c\x28\x72\xb4\xcb\x8a\x4b\x6e\x49\xae\x6c\x25\x75\x7f\x7b\x41\x72\x57\x5a\xad\x5e\x2c\x2b\xe7\xe4\x52\x9c\x02\xc4\x02\x39\x9c\x19\x3e\x9c\x79\x38\x43\xd5\x46\xcf\x05\x47\x03\x09\xbd\xb5\x09\x7c\x1c\x01\xd4\x46\x4f\x85\x44\xb8\x86\x84\xe3\x94\x36\xd2\x25\x23\x00\x83\x85\xd0\x0a\xfc\x68\x63\x09\x52\xeb\xc8\xa9\x1f\x9f\xa3\xb1\x7e\xe2\x1a\x92\xff\xbe\x86\xd3\xf4\xfc\x55\x32\xba\x1f\x8d\x0c\x5a\xdd\x18\x86\x41\x6f\x3e\xc3\x45\x5e\x53\x61\x12\x48\x66\xb8\x88\x66\xfc\x98\xa2\x15\x42\xd0\xf9\xfc\xe3\x9c\x9a\x94\xc9\xc6\x3a\x34\x61\xfc\x9e\xcc\x70\x11\x16\x79\x9f\x9a\x89\x14\xcc\xeb\x81\x6b\xf0\xde\xfd\xda\x8b\x5b\x5b\xe6\xab\x99\xdf\x6c\xda\x15\xca\x3a\xaa\x18\x26\x90\xd0\xba\xce\x2d\x9a\x39\x9a\x68\xde\xd1\xc2\xc2\x75\xf8\x0a\xf0\x37\xef\xc7\x0e\x2f\x68\x5d\x93\xe7\x1f\x99\x6e\x94\x4b\x85\xe2\x78\x77\xef\x1d\xba\x1f\x8d\x00\x98\x56\x0a\x99\xf3\xdb\x8f\x7a\x9e\xc1\xbb\x12\xa1\x45\x0d\x1a\x8b\x26\xec\x70\xaa\x0d\xe8\xc6\xc0\x9b\x1f\xfe\x1a\xc4\xdc\xa2\x0e\xe6\xac\x2d\x93\x30\xe0\x25\x03\xb2\x93\x46\xb9\x26\x8e\x95\xda\x3a\xb8\x06\x8b\x72\x9a\xb6\x9b\x14\x75\x67\x99\x56\x02\x56\x9f\x6b\x48\x68\x25\xc8\x78\xca\x4e\xc7\x9c\x9f\x70\x7a\x3e\xbe\x78\x75\x39\x9e\x24\xf0\x0c\x4e\x2e\xd3\xf1\x39\x7c\xff\xee\x1f\x23\x80\x0e\x8e\xbc\x73\x80\xbd\x4c\xef\x24\x35\x05\x26\xd0\xff\x3c\x83\x37\xf2\x96\x2e\xac\xf7\x0b\x96\x32\x61\x1b\x4c\x2b\x2b\xac\x43\xc5\x16\xeb\x67\x18\xdc\xe8\x9f\x75\x3a\xc3\x45\x2a\x78\x80\xa9\x51\xae\xe7\xac\xc7\xd8\x1f\xc7\xd2\x9d\x20\xe0\x63\xa9\x66\xb9\x45\xd6\x18\xe1\x16\x79\x61\x74\x53\xe7\x82\xfb\x53\x7a\x1f\x10\x49\x9e\x7f\xf4\x06\xd6\x25\xbc\xa6\x54\xf0\xfb\xe4\x77\xfb\x65\xf2\x42\x5b\x2b\xa2\xa8\x47\xf0\x66\x14\x43\x7d\x2e\x7c\xf8\xfa\x04\xf0\x61\x95\xb4\x07\xd9\x06\x51\xcf\xe1\x8a\x3a\x87\xa6\xd2\xd6\xe5\x52\x30\x54\x16\x73\xbf\x20\x48\x73\xb4\x4e\x28\xea\xda\x3c\xc8\x4a\x5d\x61\x16\xcf\x32\x5b\xad\xeb\xa9\x20\xad\x8a\x65\x24\xad\x39\x62\xb0\xd2\x0e\x09\xde\x21\xeb\xfc\x11\x4a\x0a\x85\x4b\x24\x00\x92\xdb\xd2\xe7\xe8\x7b\xf8\x15\x90\x29\x64\x73\x6a\x32\x29\x26\x19\x93\xba\xe1\x59\x07\x6c\x36\xd1\xda\x91\xa9\x50\xc2\x96\xc8\xe1\xe6\x5b\xe0\x1a\x90\x95\x1a\x5e\xfc\x93\x0a\x27\x54\x11\xcf\xd4\x2f\x22\x42\x09\x97\xa6\xe9\x8b\x6f\xc1\x4a\xc4\x1a\x4e\xbc\xb4\xc2\x16\x57\x6f\xb1\x40\x07\x84\x28\x4d\x58\x89\x6c\x46\x18\x1a\x27\xa6\x82\x51\x87\x40\xfe\xfd\x77\x20\x50\x3a\x57\xdb\x6f\xb2\xcc\x9e\x11\x6c\xc8\x2d\x5a\x47\x4e\x52\x5a\xd1\x0f\x5a\xd1\x5b\x9b\x32\x5d\x65\x1c\x27\xa9\xd1\x93\xc6\xba\x1a\x0d\xc3\xda\x63\x96\x0a\x9d\x9d\x9f\xfc\xe9\xcf\xdf\x5d\x5d\xfd\x31\x2d\xea\x02\xfe\x03\xb6\xe1\x1a\x68\xed\x3c\x07\x00\xe5\x1c\xc8\xca\x8f\xe5\x5c\xf0\x67\x01\x4d\xcd\xa9\xc3\x1d\xf3\x01\x0a\x29\xbd\x5c\x6d\x74\x85\xae\xc4\xc6\x12\xa5\xb9\xc7\xb7\xd6\xc6\xa1\x19\xec\x30\x72\x40\xef\xb8\xb9\xbe\x55\x52\x53\x9e\x37\x46\xde\xaf\x84\x1d\x35\x70\xf7\x61\x0a\xbd\x53\xfd\x6d\xea\xa8\x49\x8b\x0f\x03\x5f\xaa\x79\x4f\x08\x32\x5d\xbb\x6c\x28\x31\xe3\xc2\x00\xa9\xe3\xe4\x4a\x38\xe3\xd4\xd1\x48\x07\x37\x21\x54\xf6\x31\x5c\x85\xce\x08\x66\x8f\x63\xb9\x76\xf1\xff\x0f\xb5\xb9\xd3\x34\x32\xdb\x81\x34\x75\x2c\xfd\xb4\xc0\x2d\x29\x68\x93\x57\x7e\x49\xe7\x27\x4e\xe7\x81\xac\x5d\x58\x87\x15\x73\x12\x50\xd1\x89\xc4\xdd\x92\x5b\xb4\x52\xce\x43\xc4\x4a\x31\x99\x6a\xe5\x98\x56\x53\x51\x9c\x0c\x50\xeb\x80\xe1\x32\x2d\x0c\x9d\x52\x45\x03\x18\xda\xda\xcc\xa0\x44\x6a\x31\x6b\xc7\xf3\x8b\xf4\x22\x3d\xcd\x69\xc5\x2f\xce\x53\x8e\x93\x81\x03\xbc\x9e\x15\x40\x04\x1c\x26\xbd\xda\x18\xa7\x58\x69\x45\x0c\x7a\x5e\x7a\x68\xfb\xad\x72\xd2\xf2\xc2\x40\x1a\xcd\x5c\xb0\xa1\x10\x58\x47\x8d\x3b\x94\x78\x6a\xa3\xef\x16\xc7\xd1\x4e\x58\x1a\x49\x67\x98\xf9\xeb\x9f\x9d\x3c\xb0\x91\xfb\x1b\xeb\xaa\xf3\xae\xc8\xf1\x36\xac\xd5\x4c\x50\x87\xf9\x92\x78\x72\xca\xb9\x41\xeb\x1d\x76\xa6\xc1\x63\x89\x20\x6c\x25\x96\x17\x11\xb4\x75\xd6\xd9\xcb\x3c\x5f\x8e\x6d\xbf\x06\xa6\x3a\x96\x21\x54\x21\xd4\xdd\x4f\x93\x43\xdb\x54\x99\x2a\x20\x80\x8e\x65\x61\x3a\xb3\xc2\xa1\x25\x71\x05\xcf\xba\xde\x69\x7d\x91\x54\x40\xa6\x76\x73\x15\x9d\x53\x21\xfd\xc2\xac\x5f\x2a\xec\xd2\xbd\x92\x19\xe4\xe8\x20\x49\x0d\xb7\x79\x97\x70\xbd\x84\x1d\x0e\xb5\x8d\xdf\x7a\x9d\xde\x46\xac\xcf\x59\x3e\xd9\xac\xd5\x05\x47\xe5\xef\x0b\x34\xfd\x5c\xdb\x96\xe3\x7c\xb2\xa5\x7f\x5a\xba\xb0\x52\x13\xb3\xa3\xe7\xb2\xb7\xdb\x7d\x0d\x8d\xc4\xca\x09\x49\xad\xdd\xe5\xa0\x9f\x1b\x01\xa0\x07\x0e\x1f\xd8\x4d\x14\xf2\xbc\x50\xd7\x72\x91\x8b\xaa\x42\xee\xd9\x41\x2e\xa0\xa3\x83\x0d\xe6\xeb\x79\x98\x40\xb2\xf2\xb1\x05\x71\x73\x63\xbb\x81\xf1\x48\xf8\x12\x6f\x42\x2d\xf6\xb9\x62\xfb\x82\x28\x5f\xd1\x30\xb2\xe4\x84\xb5\x8d\x75\xa3\x2b\xb9\x9a\x5a\x7b\xab\x0d\x5f\x97\xeb\x46\x47\x00\x76\x26\xea\x7c\x2a\x14\x95\xb9\x55\xb4\xb6\xa5\x76\x2b\x26\xdc\x02\xcb\x6a\x72\x0b\xc2\xfb\x20\x8e\x5f\xf2\xee\xc1\x60\x5d\x7c\x7d\xf2\xfd\x76\x25\x37\xfb\xab\xb4\xed\xbc\xcc\x27\x81\x94\x6f\xf6\x5e\x61\x9e\x03\x1c\x5a\x97\xd3\x02\x95\x7b\xec\x0b\x81\x5f\x73\xf0\x1b\xc1\x67\xab\x90\x77\x54\xc5\xfe\x28\x9b\xea\xd0\xb2\x78\x7b\xf7\xbe\x0e\x57\xcb\x09\x47\x9c\x4d\x58\xde\x1e\xcf\x01\x97\xd1\xd7\x71\x1d\x6d\x94\x88\x5a\x17\x12\x43\x85\x58\xe8\xac\xd0\x31\x84\x0a\xdd\x05\xfb\x7d\x2a\x85\x6a\xee\x48\x2c\xfb\xb6\x76\x90\xbe\xd7\x24\xdf\x41\xd6\x58\x93\x49\xcd\xa8\x04\xe2\x5b\xcf\xa3\x74\xd9\x12\x08\x83\x1f\x93\xb8\xff\xd8\x04\xc3\xdb\x37\xef\xfe\x72\xfd\xdc\xff\xff\xcd\xca\x88\x77\x77\x22\xd4\x0b\x78\xfd\x3a\x5e\x45\xed\xcb\xe0\x8f\xc9\x8e\xcd\x16\xc2\x95\xcd\x24\xec\xb4\xd7\xc3\xf6\x9f\x3d\x34\xe5\xc4\x07\x0e\x51\x45\x46\x0d\x2b\xc5\x1c\xb3\xb8\x87\x65\x48\xc5\x0c\xcd\x99\xe6\x98\x1b\x9c\xde\x6f\xec\x22\x80\xe1\xb7\xff\xd8\x85\x6b\x7d\xf8\x9a\x2f\xe4\x01\x55\xbb\xd6\xad\x74\xb3\x7a\x97\x4c\x16\x7b\x88\xcc\x8a\xaa\x96\xc8\xb4\x72\x46\x4b\xe9\x6f\xb7\x58\x20\xa4\xff\xb2\x5a\x3d\x7a\xb1\x5f\xf4\x18\xeb\xf1\xcf\xa3\x6c\xb6\x4b\x7a\x96\x6e\x60\x7b\x2f\xb0\x9e\xd5\xf1\xb1\x35\xe6\x6c\xbf\xfe\xdd\xf3\xbe\xda\x29\x20\x51\xc1\x28\x3c\xa9\x31\x23\xea\xee\x49\xed\x4d\x5d\x43\x27\x04\x41\x28\x64\x6c\x77\x60\xdd\xad\x0b\x5b\x0c\x84\xd7\x3e\xa1\x8a\x50\xe2\x47\x1e\x99\x1a\x5d\xe5\x21\xee\xbd\x57\xa7\xa7\x91\x97\x75\x37\xd4\x1b\xac\x8d\x76\x9a\x69\xd9\xfa\xef\x58\x1d\xf9\x99\x09\x6e\xf2\x89\xd4\x6c\x16\xd9\x6d\x9c\x86\x7f\xd9\x38\xb9\x69\x9b\x99\x7d\x16\x2f\xc7\x17\x2f\xb7\xd8\x5c\x0e\xff\xf4\x56\x83\xf2\x57\x03\x9b\xbd\xc1\x95\xc5\xbe\xbd\x67\xf0\x03\x5d\x4c\x10\x0c\x5a\x67\x04\x73\xa0\x95\x5c\x04\xad\xf0\x76\xd9\x53\x43\xdb\x32\xfe\xbe\x5d\xf2\x87\xc6\x41\x49\x15\x5f\x40\xa4\x66\x47\x67\x9e\x60\x5b\xee\xb0\x70\x2b\x5c\xa9\x1b\x07\x15\x55\x0d\x95\x72\x01\xd6\x96\xc4\x4b\x08\xe5\x34\xb8\x12\x5b\x85\xe9\x27\x03\x1d\xe1\xbb\x3a\x19\x8f\x37\xc0\x1e\x4c\xf5\x01\x1f\x82\xbe\x1e\xdc\x7b\x2e\xb3\xfe\x4b\x50\xe7\x1c\xee\x0e\x82\x4d\xa7\xba\xb1\xc1\xf1\x93\x93\xc3\x4e\xff\xa0\xb4\x6c\x9f\xc1\x3f\x21\x3b\x49\xab\xe1\xe0\x24\x8d\xf2\x07\xe6\xea\xc3\xe7\x79\x39\x7e\x75\xbe\xe3\x3c\x97\x53\x5b\xce\xb3\xe1\x8f\x3d\xcf\xee\x87\x85\x43\x03\xed\x48\xc7\x1e\x1f\x68\x47\x38\xb6\x49\x37\x83\xa9\x2f\x85\xd8\x31\x8e\x7d\x3a\x62\x9f\x39\x2d\x1f\xca\x4b\x3e\xe9\xe5\xe3\xee\x2e\x7a\x78\x4b\x1e\x80\xf0\xd9\xd9\xf8\x62\x07\xc2\xcb\xa9\x27\x40\xf8\x00\xcf\x5e\x9e\x9f\x6d\xde\xbb\x83\xa9\x27\xf0\xec\x00\x92\x5c\x75\x80\x87\xf0\x63\xe8\xfd\x1e\xac\x5f\xbe\xef\xc8\x2f\xc8\x7f\x55\xa5\xcc\xde\xaa\xe2\x7c\xbc\x71\xb9\xf6\x06\xb7\x57\x15\xbe\xa9\xed\x30\x6d\x5f\x12\x82\x95\x9f\xd7\x5d\xd9\xfd\x20\xf6\x60\x62\xb6\x82\x8f\xcb\xce\x2f\x51\x75\x5e\x8d\xaf\xb6\xe1\xb8\x1c\x7e\x1a\xab\x67\x9b\x11\xb2\x36\x7c\xbc\xd5\x9f\x57\xbc\xc4\x5f\x32\x0e\xa5\x8d\x20\xfd\x30\x6d\xbc\xf5\x62\x4f\xc6\x16\x97\xdb\x60\xba\xfc\xb4\x63\xf9\x32\x04\xf5\x79\x43\xe1\x7f\x01\x00\x00\xff\xff\x28\xd1\x68\xd4\x34\x25\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0x74, 0xa2, 0x6f, 0x9a, 0x17, 0x8c, 0xcb, 0x24, 0xab, 0x9a, 0x27, 0xde, 0x7b, 0xb3, 0x81, 0xbd, 0xdb, 0xd8, 0x6a, 0xc2, 0xbd, 0x30, 0x36, 0xe3, 0xa8, 0xc7, 0x1c, 0xb6, 0xa3, 0xee, 0x18}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x6b\xf3\x30\x0c\x86\xef\xf9\x15\xc2\xf7\xcf\x7c\xb4\x6c\x63\x87\xfc\x16\xa1\xc4\x6a\x66\xe6\xd8\x9e\x24\xb7\x94\xd1\xff\x3e\x9a\x1e\xd6\x92\x6c\xf3\xd1\xcf\x23\xf1\xa2\xf7\x48\x12\x69\x48\x0c\x6e\x4c\x4d\x8d\x05\x33\xcd\xec\xe0\xb3\xbb\x74\xdd\x37\xa4\x5a\x31\x66\x35\xca\x23\xe3\x58\x5a\xb6\x95\x92\x0a\x05\x63\x35\xa4\x89\xb3\xfd\x20\x85\xe1\xaf\x35\xf7\x06\xe7\x29\xe6\x75\x98\x87\x25\x89\x54\xb7\x8c\xdb\x2c\x1e\x59\x34\x96\x7c\x35\x00\xec\x5c\x19\x7a\x98\xa9\x76\x00\x81\x0f\xd4\x92\x41\xbf\x20\x00\x47\x4d\x8a\xd0\xbf\xf9\xac\x1f\xc9\xc1\xf2\x7a\x70\x4f\xfe\xc5\x2f\x5f\x78\xe3\x7e\xe7\xff\xef\xfd\xce\x3d\xcc\xd4\xa2\x36\x09\x2f\x83\x3d\xb8\x57\xff\xec\xf7\x57\xe3\xb2\x8a\xd5\x94\x65\xf3\xc2\x61\xc0\x4a\xaa\xa7\x22\x61\xc5\x54\xdf\xb0\xb6\x21\xc5\x11\xdf\xf9\xbc\xc2\x33\x99\xb1\xcc\x45\x0d\x43\x39\xe5\x6b\x11\xd8\x24\xfd\xe6\xa5\x38\x72\x56\xc6\x43\x4c\xeb\x28\x53\xb9\x3f\xdb\x76\xc9\x5a\x9a\x2c\x1d\x06\x46\xe1\xc3\x4d\xfc\x0a\x00\x00\xff\xff\x72\x3f\x4a\x9d\x4d\x02\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0xb1, 0xf7, 0x16, 0xdf, 0x7a, 0x8c, 0x5, 0x77, 0xbb, 0x8, 0x28, 0x99, 0xe8, 0x71, 0xf9, 0x17, 0x60, 0x85, 0x7c, 0xeb, 0x55, 0x28, 0xd7, 0xfe, 0xa4, 0x7a, 0x88, 0x59, 0xe2, 0xa8, 0xc2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":   clusterTf,
	"outputs.tf":   outputsTf,
	"variables.tf": variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":   &bintree{clusterTf, map[string]*bintree{}},
	"outputs.tf":   &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf": &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
