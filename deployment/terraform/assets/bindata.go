// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (10.463kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (36.319kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (327B)
// assets/variables.tf (779B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xe3\x36\x12\xfe\xee\x5f\x31\xa7\x5d\xa0\xed\x61\x25\xd9\x49\x9a\x4d\x5a\xa4\x45\xef\x0d\x38\xa0\xbd\x16\xb8\x02\xf7\x61\x11\x08\x34\x39\x96\x08\x53\x24\x8f\xa4\x9c\x78\xf7\x72\xbf\xfd\x40\x4a\xb2\x65\x59\x72\xbc\xde\x4d\x77\x7b\xbb\xc9\x17\x63\x38\x33\x1c\x3e\x33\xf3\xf0\x45\xda\xa8\x15\x67\x68\x20\x22\x77\x36\x82\x37\x13\x00\x6d\xd4\x82\x0b\x84\x1b\x88\xca\x32\x16\x8a\x30\x87\xd6\x45\x13\x00\x83\x39\x57\x12\xfc\x48\x65\x63\x24\xd6\xc5\x67\x5e\xbe\x42\x63\xfd\xc0\x0d\x44\xff\xfd\x0e\xce\x92\x8b\x97\xd1\xe4\x61\x32\x31\x68\x55\x65\x28\x06\xdf\xd9\x12\xd7\x99\x26\xdc\x44\x10\x2d\x71\x5d\x4f\xe5\x65\x92\x94\x08\xc1\xe7\xf3\x37\x2b\x62\x12\x2a\x2a\xeb\xd0\x04\xf9\x43\xbc\xc4\x75\x30\xf2\x71\x55\x73\xc1\xa9\xf7\x03\x37\xe0\x23\xfc\xd2\xab\x5b\x5b\x64\xdb\x91\xaf\xf6\xe7\xe5\xd2\x3a\x22\x29\x46\x10\x11\xad\x33\x8b\x66\x85\xa6\x9e\xde\x91\xdc\xc2\x4d\xf8\x09\xf0\x0f\x1f\xc7\x48\x14\x44\xeb\xf8\xf9\x1b\xaa\x2a\xe9\x12\x2e\x19\xde\x3f\xf8\x80\x1e\x26\x13\x00\xaa\xa4\x44\xea\xfc\xf2\x6b\x3f\xcf\xe0\xd7\x02\x81\xe1\x82\x54\xc2\x41\x65\xd1\x84\x15\x2e\x94\x01\x55\x19\xf8\xe1\xa7\xbf\x07\x35\xb7\xd6\x61\x3a\x6b\x8b\x28\x08\xbc\x66\x40\x76\x5e\x49\x57\xd5\xb2\x42\x59\x07\x37\x60\x51\x2c\x92\x66\x91\x5c\xb7\x33\x93\x92\xc3\xf6\xef\x06\x22\x52\xf2\x78\xba\xa0\x67\x53\xc6\x66\x8c\x5c\x4c\x2f\x5f\x5e\x4d\xe7\x11\x3c\x83\xd9\x55\x32\xbd\x80\x1f\x7f\xfd\xe7\x04\xa0\x85\x23\x6b\x02\xf0\x8b\xf5\xb8\xec\xc8\x77\x53\x13\xbc\x77\x53\x98\x2c\x71\x9d\x70\x16\x56\x5f\x49\xd7\x89\x61\xcf\x5b\x50\xf0\x25\xa2\x69\x66\x91\x56\x86\xbb\x75\x96\x1b\x55\xe9\x8c\x33\x0f\xfe\xab\xb0\xd0\xe8\xf9\x1b\x3f\xc1\xae\x86\xf7\x94\x70\xf6\x10\xbd\x38\xac\x93\xe5\xca\x5a\x5e\xab\x4e\x00\x6e\x3d\x38\x6c\x2d\x49\xc9\x29\x44\x46\x29\x97\xcd\x85\xa2\xcb\x8c\xe1\x8a\xfb\x3a\xa8\xf3\xb4\x50\x26\x43\x42\x8b\x26\xea\x3d\xbd\xa0\x44\x95\x74\x28\x5d\x63\x02\xb0\x52\xa2\x2a\x31\xb3\xfc\xb5\xc7\x4e\x28\xb5\xac\xf4\x97\x7b\xa6\xc9\x8a\x88\x0a\x5f\x40\xd4\x51\x8f\x5e\x80\xac\x84\xf8\x6a\xd7\x51\x93\x84\x63\x1d\x79\xf5\x1d\x47\x0f\x6d\x31\x84\x3e\xf6\x4d\xe8\x5b\xd9\x37\x47\xbb\xcc\xa6\x15\x3a\xf9\x29\x89\x73\x68\x4a\x65\x5d\x26\x38\x45\x69\x31\xf3\x06\x41\x9b\xa1\x75\x5c\x12\xd7\x74\x73\x5a\xa8\x12\xd3\xba\x22\xd3\xad\x5d\xc7\x45\xdc\xb8\x88\x06\x03\x31\x58\x2a\x87\x31\xde\x23\x6d\xe3\xe1\x52\x70\x89\x9b\xc4\x03\x44\x77\x85\x67\x9b\x57\xf0\x07\x88\x17\x90\xae\x88\x49\x05\x9f\xa7\x54\xa8\x8a\xa5\x6d\x1d\xa5\x73\xa5\x5c\xbc\xe0\x92\xdb\x02\x19\xdc\x7e\x0b\x4c\x01\xd2\x42\xc1\x17\xff\x22\xdc\x71\x99\x87\x06\x0b\x46\x31\x97\xdc\x25\x49\xf2\xc5\xb7\x60\x05\xa2\x86\x99\xd7\x96\xd8\x94\x91\x9f\x31\x47\x07\x71\x2c\x55\x4c\x0b\xa4\xcb\x98\xa2\x71\x7c\xc1\x29\x71\x08\xf1\xbf\x7f\x86\x18\x0a\xe7\xb4\xfd\x26\x4d\xed\x79\x8c\x55\x7c\x87\xd6\xc5\xb3\x84\x94\xe4\xb5\x92\xe4\xce\x26\x54\x95\x29\xc3\x79\x62\xd4\xbc\xb2\x4e\xa3\xa1\xa8\x3d\x66\x09\x57\xe9\xc5\xec\xaf\x7f\xfb\xf3\xf5\xf5\x5f\x92\x5c\xe7\xf0\x1f\xb0\x15\x53\x40\xb4\xf3\x4c\x06\x84\x31\x88\xb7\x71\x6c\xc6\x42\x3c\x6b\xa8\x34\x23\x0e\x47\xc6\x03\x14\x42\x78\x3d\x6d\x54\x89\xae\xc0\xca\xc6\x52\x31\x8f\xaf\x56\xc6\xa1\xe9\xaf\xf0\x67\xe8\x24\x8a\x71\xeb\x12\x47\x4c\x92\xbf\x86\x9a\xe3\x3a\x85\xc0\xd4\x9d\xf4\x4c\x9f\x55\x46\x3c\x6c\xdd\x38\x62\xe0\xfe\xf5\x62\xc4\x4d\x2f\xd0\x72\xd5\xd1\x83\x54\x69\x97\xd6\x2c\x76\x1b\x6a\xe3\x10\x31\x97\xe8\x0c\xa7\xf6\x34\x72\x6e\x8c\xff\x6f\x18\x39\x72\x67\x89\x20\x26\x0f\x3d\x75\x0c\x0d\x9f\x4a\xaf\x0d\x70\x1b\x8a\xfd\x4c\x9c\x9f\xf9\xea\x89\xf9\xaa\xa7\x6b\xd7\xd6\x61\x49\x9d\x00\x94\x64\x2e\x70\x5c\x73\xc0\x2b\x61\x2c\x74\xa8\xe0\xf3\x85\x92\x8e\x2a\xb9\xe0\xf9\xac\x87\x5a\x0b\x0c\x13\x49\x6e\xc8\x82\x48\x12\xc0\x50\xd6\xa6\x06\x05\x12\x8b\x69\x23\xcf\x2e\x93\xcb\xe4\x2c\x23\x25\xbb\xbc\x48\x18\xce\x7b\x01\x30\xbd\xcc\x21\xe6\x70\x9c\xf6\x76\x61\x8c\x60\xa9\x64\x6c\xd0\xd3\xeb\x63\xcb\x6f\x9c\xc7\x0d\x0f\xf6\xb4\xd1\xf8\xd2\xee\x29\x81\x75\xc4\xb8\x63\x89\x56\x1b\x75\xbf\x3e\x8d\x66\x83\x69\x4d\xb2\x7d\xa6\xdb\xfd\x1b\xe5\xbd\x3d\xae\xeb\xdb\xf9\x49\xeb\x08\xfb\xa7\xd1\xdd\x73\xe6\x90\xdd\xfe\xa9\x13\xbe\x83\x19\x7c\x0f\x33\xf8\x06\xa6\x3e\x64\x6b\x15\xe5\xc4\x61\xb6\xe1\xed\x8c\x30\x66\xd0\xfa\xf5\x3b\x53\xe1\xa9\x3c\x1a\x42\xde\x9e\x3e\x3b\xa4\x3d\xca\xd7\x9f\x1a\xcb\x7e\xb8\x3d\xf9\xf7\xc0\xef\x4f\x77\x0e\x1c\xb3\x94\x39\x97\xf7\xef\x87\xb3\x86\x5c\x99\x32\x60\x87\x8e\xa6\x61\x38\xb5\xdc\xa1\x8d\x6b\x0b\x96\x36\x69\xef\x19\x09\x09\xf1\xc2\xee\x5b\x91\x15\xe1\xc2\x1b\xa6\xdd\xe3\xe5\x98\xef\xad\x4e\x8f\x13\x7b\xa4\x68\x98\xcd\x5a\x82\xeb\x10\x64\x5f\xd4\xbc\x89\x1c\xe0\x9f\xba\x3f\xd9\x7c\xff\xce\xcb\x19\x4a\xbf\x4f\xa3\x19\xe2\xc8\x21\x8e\x65\xf3\x81\x67\x86\x4d\x48\xfb\xee\x6a\x7e\xe9\x2c\xc5\xc7\xd1\xfe\x0c\x17\xf4\x6d\x50\x82\x58\xfb\x58\xe0\x5e\x67\x02\x80\x1e\xd8\x3e\x3d\x8f\x19\xd5\xca\x9e\x60\xb5\x16\xeb\x8c\x97\x25\x32\x4f\xb3\x62\xdd\xb5\x6a\xf8\x95\x54\x4e\x65\x25\x97\xca\x64\xcd\xa3\x51\x56\xe9\xdc\x10\xe6\x3b\x70\x41\x84\xc5\xfd\xed\xab\xb3\xbc\x08\xa2\xed\x02\x9b\xcc\x0c\xa0\x33\x8a\xae\x87\x93\x11\x47\xe6\xc4\x62\xe7\x58\x3d\x62\x50\xeb\x97\x24\x48\x36\x14\xb5\x83\x42\x2b\xdd\xea\x69\x62\xed\x9d\x32\x6c\x57\xaf\x95\x4e\x00\xec\x92\xeb\x6c\xc1\x25\x11\x99\x95\x44\xdb\x42\xb9\x0e\x3e\x03\x18\x6e\x06\x87\xd2\x72\x20\x1f\xf5\x8f\x16\xe7\x9e\xfa\xee\xe0\xab\x61\x27\xb7\x87\xaf\x16\xc3\xbb\x21\x9b\x87\xad\xf0\xf6\xe0\x39\xa4\x7d\x55\xcc\x48\x8e\xd2\xbd\xed\x6b\x9c\xb7\x39\xfa\x3d\xee\x37\xbb\xd6\x8d\x3d\xae\xf9\x68\xdf\xe7\xf3\xda\xae\xbf\x9a\x6c\x4e\xc8\x53\xf0\xd3\xa4\xea\x13\x3c\x91\x7c\xda\xe7\x82\xf6\x7d\xc8\x95\x7a\xf7\x4d\x28\x3c\x02\x85\xce\x7c\xe4\x49\x68\x6b\xb9\x1d\xdb\x79\x01\x0a\x5f\x0e\x62\xef\x2a\x96\xf9\x1f\xc7\x06\xb6\xc6\xa6\xec\xfa\x3c\x74\x9f\xd9\x2d\xe4\xfa\x5d\xbf\x4e\x5b\x87\xd2\x0f\x3d\xe5\xb7\x0e\xe2\xda\xc1\x24\xbc\x7b\x52\xc3\x75\xfb\xee\xf9\x83\xd6\xd0\x2a\x41\x50\x0a\x69\x6b\x59\xab\xdd\x74\x60\x60\x82\x68\x12\x78\x20\x0f\xf7\x8a\xa6\x71\x8c\x2a\x33\x9f\x81\x10\xd5\xd9\x59\x4d\x4b\xaa\x15\x75\x84\xda\x28\xa7\xa8\x12\x4d\xfc\x8e\xea\x1a\x08\xca\x99\xa9\xeb\xbc\x6e\xe8\x69\x12\xfe\xd3\x69\x74\xdb\x5c\xc8\x0e\xcd\x78\x35\xbd\xfc\x7a\x60\xce\x8d\xf8\xfd\xcf\x1a\x9c\xbf\xec\xcd\xd9\x11\x6e\x67\xec\xce\xf7\x0c\x7e\x22\xeb\x39\x82\x41\xeb\x0c\xa7\x0e\x94\x14\xeb\xe0\x15\x7e\xd9\x54\x34\x34\xd7\xde\xef\x1b\x93\x3f\x55\x0e\x0a\x22\xd9\x1a\xea\xfe\x74\x64\xe9\xbb\xac\xf9\x88\x65\xe1\x8e\xbb\x42\x55\x0e\x4a\x22\x2b\x22\xc4\x1a\xac\x2d\x62\xaf\xc1\xa5\x53\xe0\x0a\x6c\x1c\x26\xef\x0c\x74\x0d\xdf\xf5\x6c\x3a\xdd\x03\xbb\x37\xd4\x05\xbc\x0f\xfa\x6e\x71\x1f\xe0\xef\xee\xeb\x5d\x1b\x1c\x8e\x17\xc1\x7e\x50\xad\xac\x97\xfe\x78\x76\x5c\xf6\x8f\x6a\xcb\xe6\xd3\xcc\x3b\x74\x67\xdc\x78\x38\xba\x49\x6b\xfd\x23\x7b\xf5\xf1\x7c\x5e\x4d\x5f\x5e\x8c\xe4\x73\x33\x34\x90\xcf\x8a\xbd\x6d\x3e\xdb\x8f\x5d\xc7\x16\xda\x89\x81\xbd\x7d\xa1\x9d\x10\xd8\x3e\xdd\xf4\x86\x3e\x14\x62\xa7\x04\xf6\xee\x88\xfd\xc6\x6d\xf9\x58\x5f\xb2\x79\xa7\x1f\xc7\x6f\xa2\xfd\x5d\xf2\x08\x84\xcf\xcf\xa7\x97\x23\x08\x6f\x86\x9e\x00\xe1\x23\x22\xfb\xfa\xe2\x7c\x7f\xdf\xed\x0d\x3d\x41\x64\x47\x90\xe4\xf6\x02\x74\x0c\x3f\x86\xab\xcf\xa3\xe7\x97\x1f\x5b\xf2\x0b\xfa\xbf\xab\xa3\xcc\xc1\x53\xc5\xc5\x74\x6f\x73\xed\x08\x87\x4f\x15\xfe\x4e\xd7\x62\xda\x5c\xa4\x8f\xaa\x98\x0f\xb8\x91\x7f\x74\x3b\x79\xfb\x89\xf5\x51\xda\x68\x14\xdf\x8e\x3b\x3e\xc4\x99\xf8\x7a\x7a\x3d\x84\xe3\x46\xfc\x34\xb3\x9e\xef\xd7\xef\x8e\xf8\xf4\x59\x3f\xae\x7a\xa9\xbf\x15\x1d\x4b\x6a\x41\xfb\x71\x52\xfb\xc5\xab\x3d\x19\x97\x5d\x0d\xc1\x74\xf5\x6e\x69\xf9\xb8\xe8\xf3\x53\x24\xb6\xff\x05\x00\x00\xff\xff\x25\x99\xf8\x63\xdf\x28\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x5d, 0x68, 0xc3, 0xaa, 0x14, 0xa7, 0xeb, 0xc5, 0x5c, 0xf7, 0x6, 0x28, 0x9f, 0x7b, 0x22, 0xb1, 0x92, 0x0, 0xa1, 0x16, 0x8e, 0xfe, 0xb4, 0xda, 0xf5, 0x14, 0x55, 0xf3, 0xa1, 0xba, 0x3d}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\x38\xf2\xc0\xdf\xf7\x53\x10\xc2\xfe\xff\x48\x8a\xa4\x6b\x39\x71\x37\x09\xb0\x38\xa4\xe9\x76\xaf\x40\xb3\x9b\xcb\xc3\xde\xe2\x9a\x40\xa0\xa5\xb1\x4d\x84\x12\x55\x92\x4a\xe2\xcd\x65\x3f\xfb\x41\xd4\x13\xf5\x60\x5b\x76\xed\xda\x69\xd8\x17\x4d\x4c\x51\x12\x67\x38\xc3\xf9\x69\x38\x56\x1e\x5f\x21\x64\xe1\x20\x60\x12\x4b\xc2\x02\x61\x1d\xa1\xb8\x09\x21\x8b\x12\x21\xad\x23\xf4\x59\x7d\x42\x69\xab\x3a\xd2\x8f\x08\x95\x1f\x03\xeb\x08\xd9\x3b\x45\xab\x87\x25\x16\x2c\xe2\x2e\x58\x47\xc8\xda\xdd\x45\xbf\x72\x3c\xc0\x01\x46\xbb\xbb\x96\xd6\x0d\x02\xdc\xa7\x71\x17\xc9\x23\xd0\xda\x47\xc4\x6b\x68\x25\x2e\x0b\x4e\x18\x65\x3c\xbe\x26\x1f\xf6\xf1\x56\x67\x07\x75\x6d\x7b\x07\x75\x7b\xbd\x1d\x64\x6f\xeb\x97\x0e\xb0\xaf\xee\x7d\x5c\x88\x83\xfe\x1f\x1d\x53\xe0\x52\xe8\xfd\xe4\x38\x54\xfd\x3c\x2c\x46\x7d\x86\xb9\x67\xa5\xc7\x9e\xd4\xcf\x9b\x57\x08\x3d\xc5\xdd\x2d\xf0\x88\xac\x8c\xd6\x1a\x06\x20\x3f\x7a\xd6\x11\xea\xf6\xf6\xbb\x49\x0b\xc7\xe1\xe8\x92\x31\x2a\x49\x98\xe9\xc4\x22\xaa\x4b\xf2\xab\x04\xae\x46\x13\x1f\xec\x1d\x1c\x76\x0f\xf6\x0f\xf6\xba\x6f\x3b\x1d\x75\x94\x92\xe0\x36\xd6\xfa\xe7\x1b\xf5\x31\xc4\x01\x50\x91\xeb\x3d\xd3\xba\x85\x29\xc1\x42\x69\x42\x4d\xd1\x53\x26\x8e\xd5\xc7\xaa\x65\x80\xa9\xc8\x15\xa7\x24\xfb\x04\xc1\x50\x8e\xe2\x7b\x76\x4a\xed\xd0\xd4\x5d\x9b\xba\x20\xa2\x34\x3f\x32\x20\x94\xea\xf3\xac\x1a\x7e\xe5\xd8\x23\x10\xc4\xd6\x51\x5c\x7a\xc8\x89\x77\xc6\x0a\xfb\x49\x26\xd5\x3a\x42\x07\x9a\xe6\xef\xe3\x6b\x75\xb5\x86\x07\xfd\x1a\x08\x59\xe3\xf8\x73\x36\x1b\xf9\xb5\x47\xc4\xf3\x20\xb8\x00\x4e\x1a\x06\xaf\x34\x6d\x1f\xe6\x9f\x29\x0c\x21\xf0\xca\xe3\xc0\x77\xc3\xea\x79\x08\x59\x6e\xc4\x79\x22\x46\xf5\x88\x8f\x1f\x9a\x5a\x49\xd0\xd0\x2a\x46\xec\xbe\x6e\xb8\x92\x49\x4c\x1b\x7a\xdf\x61\x1a\x15\x42\xd4\x24\xa5\x24\x50\x47\xf5\xab\xa9\xc6\x7b\xe2\x25\x93\x99\xb7\xc6\xf3\x74\xc6\x48\x20\x4f\x99\xf2\x1c\xd5\x90\x9b\xb9\xc5\xc2\xb2\x3f\xe7\x13\xfd\x29\x37\xb8\xda\xdd\x43\xe0\x2e\x04\x12\x0f\xa1\xa6\xe5\x30\xbe\x53\x3c\xef\x91\xc8\x0c\xbb\x68\xaf\x4f\x0a\x87\xc0\x03\x0e\xca\x6d\x07\x94\xc9\x62\x5c\x42\xcd\xe2\xef\x77\xc0\x39\xf1\xa0\xb0\xfc\xe4\x60\x88\x5d\x68\x32\x5c\x21\xb1\x7b\x5b\xbb\x8b\x90\x10\x86\xe0\x7d\x22\x41\x7d\xc0\x12\xf3\x21\x48\xa1\xad\x60\xfa\x1a\x16\x3b\xf7\x43\xa8\x86\x27\x22\x7f\x8b\x04\x2e\x07\x2c\x60\xcb\xc7\x52\x02\xf7\x99\x90\x8e\xd7\x77\x84\x64\x1c\x1c\x49\x7c\x70\x5c\x16\x05\xf2\xd1\x07\x39\x62\xde\xcf\x7f\x5f\x5b\x3f\x48\x16\xc6\x5d\x54\xfb\xb5\xf5\xf4\xd9\xf6\x6f\xb6\xb7\x51\x7f\x8c\xb6\x92\x4e\xfa\xca\x94\x5b\xe5\x07\xc6\x7d\x1c\x1b\x9c\xf5\x98\x5e\xeb\xe9\xa9\xdc\x8f\xc3\x40\xad\x2e\xd6\xb1\x95\x37\x3f\xa5\xbf\x15\x7a\x92\x23\x0e\x62\xc4\xa8\x57\xd1\x5f\x3c\xd4\x0f\x9c\xf9\x55\x37\x8e\xdb\xcf\x61\x98\x1a\x44\xe5\x84\x8b\x11\x19\xc8\xfa\x19\x52\xad\x7b\xd6\x25\x0b\x91\xdd\x41\xef\xdf\xa1\x2f\x91\x9a\xba\x58\x46\x25\x75\x31\xa7\x32\x5f\xfc\x1e\x75\xbf\xc0\x1c\xbc\xba\x67\x08\xc6\x65\xc5\xeb\x95\x53\x38\xd9\xb2\x4c\x02\x8f\xdc\x11\x2f\xc2\xd4\xaa\x59\x68\xd6\x47\xad\xb9\xc5\x00\x1e\xf0\x03\xa9\x98\x7a\x3f\x72\x6f\x93\xf9\xd7\xe5\x8a\xbd\x38\x75\x97\x58\xf4\x86\xe8\x51\xe9\xdd\xec\xdd\xb9\x17\x37\x38\xd1\x18\x3f\xc0\x14\xb3\x1b\xe4\x26\x20\x46\xb1\x26\xca\x56\x82\xfb\x40\x6b\x83\x88\x0f\xb0\xe1\x3b\x2c\xa0\x1c\x72\xf3\x85\xaa\xd6\x3d\x59\xa9\x6a\xcd\x9a\x30\x85\x71\xed\x3c\x93\x71\xd6\x9c\x60\x5c\x9f\x74\x4c\xc9\xb0\x69\x8d\x56\xed\x9f\xe0\x2e\x1f\x74\x29\xe0\xa7\x2a\xf8\x0e\x62\xed\xe1\xac\x58\x5b\x6a\x58\x38\xd8\xfe\x64\x82\xad\x09\xb6\x4b\x0d\xb6\x38\x24\x7a\x9c\x1d\xe1\xc0\xa3\xc0\xf3\x40\x1b\x1f\x6e\x88\xb4\x69\xb7\x4a\xa8\x25\x81\x04\x7e\x87\xe9\x07\xec\x4a\xf5\xe0\xb0\x37\x23\x12\xa7\x97\x79\x2e\xa1\xf8\xf8\xec\xe3\x92\x63\x71\xf7\xc5\xc7\x62\x5f\xac\x3f\xc0\x99\x40\xbc\xbe\x40\x6c\x51\x86\x3d\x09\x42\xee\xa6\x4d\x79\xb7\x86\x1c\x40\xd2\xce\xb9\x5a\x5c\xca\x17\x5d\xc7\xf3\xf2\xc1\x02\x21\xfc\xe5\x45\xf0\x72\x9e\x05\x35\x06\x75\x97\x05\x01\xb8\x12\xbc\x6f\x14\xd9\x7b\xdf\x51\x64\xe7\x58\x96\x22\x7a\x18\xff\xa7\xa6\xf5\x91\x04\x42\xe2\xc0\x05\x15\xce\x05\xf0\x3b\xe0\x59\x1c\x2f\xaf\x66\xc5\x52\xa7\x58\x20\x91\x71\x46\x70\xb7\x67\x04\xf7\xec\xe6\xd5\xe8\xee\x83\xe4\xc4\x55\x6b\x7f\xd3\xa0\x27\xa2\x40\x79\x7d\x94\x10\x47\xda\xde\xcc\x45\x5c\xe7\x9f\xc5\x34\xb5\x72\x55\x5d\xd6\xc5\x5e\x4c\x47\xef\x66\xe9\x68\x9d\x0c\xf5\x5b\xe4\xf7\x81\x23\x36\x40\x67\x4c\x48\x81\x42\xe0\xe8\x02\x5c\x16\x78\x33\x10\xca\x17\xe7\x20\x18\x8d\xd2\x44\x6e\x7d\x59\x33\xd9\x8e\xe4\xdf\xfc\xf0\x62\x9d\x94\x10\x16\x19\xce\x42\x86\xb3\xd6\xcf\x59\xb5\x5c\xc9\xe1\x02\xa0\xa5\xe9\xc7\x90\x96\x21\xad\x55\x90\xd6\x48\xca\xd0\xe1\xf0\x25\x02\x21\xc5\x26\x20\x17\xca\xee\x8e\x5a\x41\x97\x1a\xbf\x72\x73\xf1\xcd\xd9\x6b\x4e\xdd\x6d\x0c\x84\xb5\xd5\xd9\x46\xb3\xd8\x79\xaa\x77\x03\x61\x06\xc2\xe6\x19\xaa\x81\xb0\x97\x03\x61\xd5\x64\x97\xfd\x76\x01\x08\x7b\x6b\x18\xcc\x30\xd8\x52\x19\xac\x1a\x8a\xef\xa1\x2f\x98\x5a\xfd\xa7\x42\xc4\x86\xa5\xbb\x1a\x87\xbe\x42\xfa\x5a\x50\x6b\xeb\xa0\xae\xe7\x41\x50\x45\x36\xeb\x24\x73\x66\xf4\x1e\xee\x88\x0b\x02\x6d\xfd\x1b\xfa\x17\x4a\xbb\xd9\xc1\xf8\x0e\xdb\x86\xb0\x0c\x61\x19\xc2\x32\x84\x85\xd0\xa4\x34\x97\xfd\xd3\x02\x88\x65\x1b\xc4\x32\x88\xb5\x2a\xc4\xf2\xfa\x8e\x8f\x85\x04\xee\xb8\x45\x24\x7b\x4e\xa0\x35\x45\x80\x6f\x83\x5b\xf3\x6b\x70\x63\x52\x5d\xf3\xeb\xee\x79\x21\x9b\xfa\x9a\x8a\x64\xe8\x54\x09\x89\xde\x63\x89\xfb\x71\xa8\x35\x9c\x66\x38\xcd\x70\xda\x8b\xe1\xb4\x99\xa5\xdb\xd5\x4c\x58\x77\x7f\x11\x4c\x33\x9c\x66\x38\x6d\xb9\x9c\x36\xb3\xa4\x5b\x44\xbe\x56\xb3\x9d\xd1\xc6\x36\xfa\x11\xb5\xab\x06\x6f\x3a\x79\xc3\xf8\x4e\xdf\x46\x74\xbc\x28\xf9\xba\xa7\x23\xd4\x96\x96\x88\x15\xb0\x22\xca\x1b\x11\x21\xd9\x90\x63\xdf\xf9\x12\xe1\x40\x12\x0a\x5b\x9d\x37\x87\x3b\xa8\x69\xab\x33\x57\x6a\x12\x9c\x1b\xb4\xba\x43\x61\x81\x1d\xce\xaa\xea\x0e\x3b\xe1\xee\x64\xf5\x69\x90\xb6\x19\x3c\x76\x0a\x38\x50\x25\xf5\xe9\x6e\x24\xba\xd4\xd1\xc4\xc0\xd7\x4a\xe0\x6b\x02\x78\x19\xe6\x32\xcc\xb5\xd9\xb9\xb1\x6e\x6f\x01\xe8\xea\x19\xe6\x32\xcc\xb5\x54\xe6\x1a\x32\xc7\x07\x5f\x48\x2c\x85\x83\x29\x65\xae\xd3\x1f\x4b\x10\x6b\x4a\x86\x1d\xc7\x23\x98\x12\xf3\x0b\x64\x9a\x30\xee\x95\x66\xc2\xf4\x7b\xaa\x29\x71\x48\x10\x09\x58\xae\xc6\xd2\xb7\x97\x54\x3c\x6a\x7e\x55\x5e\xc4\x03\x5c\xad\x3e\x67\x66\xc7\xe6\xd0\xe7\x08\x70\xb8\xc9\xea\xfc\x27\xe0\x70\xb5\xda\x3c\xd9\xe4\x5c\xe3\x29\xf8\x8c\x8f\xd1\x95\x88\x57\x47\x83\xb4\xab\x44\x5a\x65\x29\x06\x6b\x27\x8d\x53\x27\x0a\xc3\xb5\x59\xfb\xc6\x54\xd5\xed\xed\x2d\x80\xb5\xf6\x9e\xe1\x5a\xc3\xb5\x4b\xe5\x5a\x52\xfb\x6e\x24\x67\x2e\x08\xe1\xb8\x61\x94\xa7\xd3\x66\x56\xe9\xbf\x46\x76\xa7\xb3\xbe\x0c\x61\x7b\x72\x5d\x27\x1b\x9c\x9c\x5d\xa1\x2b\x49\x28\xf9\x4b\x25\x2b\xd1\x39\x96\x80\xb6\xfe\xcf\xd4\x87\xad\x6f\xdf\x71\xea\x74\xa0\x17\xcb\x0e\x26\x25\xb6\x49\xe8\x50\x4b\x89\x2d\xc4\x0e\xfb\x06\x1d\x0c\x3a\x2c\x15\x1d\x86\xcc\x19\x32\xce\x22\x19\x4f\xc9\x06\x57\x85\x95\xc6\xb9\xc2\xe2\xaf\x36\xfa\x58\x6f\x8d\x57\x1b\x4d\x3c\x93\x52\xae\x5f\x19\x3a\xaf\x0a\x62\xf8\xc9\xd4\x6d\x19\x60\x42\x2b\x01\xa6\x92\x3f\x7a\x20\x5c\x4e\xc2\xd4\xa3\x8a\x6c\xdb\x5a\xaa\xb2\xf6\xed\x05\x68\xa8\xdb\xa6\x2a\xab\xe2\x4d\x05\x0d\x55\x0e\x24\x26\x53\x6d\x54\x06\x53\x69\xe4\x64\x38\x92\x17\x8d\xa9\xf6\x45\x31\x49\x33\x3d\xf3\x9e\xcd\xec\xe0\x9a\x8a\xb2\x54\x2e\x25\x60\x1e\x38\x6e\x18\x35\x13\xc0\x4e\xbc\xae\xff\x7c\x6d\x45\x42\x7b\xc7\xc1\xb4\x4a\xab\x29\x1b\x33\x71\xff\x06\x38\x6f\xa0\x82\x2b\x01\x1c\xb5\xca\x9f\xcc\x45\x3c\x73\xc8\x2b\xc6\x42\x82\x3f\x8f\xc4\x65\x47\x68\xda\xb9\x53\x97\x6c\x23\xd6\xbb\x95\x89\x45\x3c\x0a\x4b\x15\xea\xa3\x47\xa1\x8d\x48\x27\x2b\x12\xe9\xef\x6b\x8b\xf0\x2f\xff\x15\x6c\x20\xe3\x9f\x84\xdd\x63\x22\x97\x2a\xe1\xef\x72\xd4\xce\x18\xdf\x6f\x48\xbd\xda\xc9\xd9\x15\xfa\xc4\xb0\x87\xb6\x6c\x7f\x56\xb2\xce\xd0\x64\xa3\x29\x6e\x1c\xa2\x19\x94\xdc\x18\x94\x74\x89\x8f\x69\xd5\x64\xd7\x93\x58\x5b\x0c\x25\x97\xbb\x29\x17\x2f\xa3\xbf\xf8\xa1\x1c\x4f\x38\xf6\x1f\xe0\xec\x2b\x13\x72\x2b\xa0\xd0\xaf\x4e\xd6\x19\x0c\x5d\x0e\x86\x26\x41\xde\x57\x65\x28\xce\x29\xf8\x97\x53\xb6\xee\xd0\x2e\xaa\xf4\xfe\xc0\x01\xda\x75\x7e\x17\x0d\x06\xc0\x27\xa5\xb9\x2a\x9d\x4f\xb0\x3b\x02\xaf\x5d\x4a\x6c\x59\xbc\xeb\xa1\x69\xaf\x45\x5b\x84\x78\xe7\xd0\xec\xf4\x7a\x7d\x75\x66\xbb\xe1\x6d\x4e\xcd\x7e\xeb\xba\x26\x83\x40\x8d\x56\xd4\xaa\x70\xc9\x20\xd0\x0b\x29\x5d\xda\x00\xd6\x59\xe4\xdd\xaa\xdd\x36\x6f\xb1\x9f\x98\x36\x6b\x66\x96\x36\x79\xb3\x97\x91\x1b\xa3\xd1\x90\x04\x7f\x00\x17\x69\x5e\xf5\xed\x9b\xb7\x6f\xba\xd6\x0b\x80\x16\x15\x59\x03\x90\x42\x62\xe9\x5c\xba\xa1\x73\x12\x71\xfe\x8b\x90\xb8\xdf\x2a\xbe\x2e\x05\x19\xd4\xed\x28\x11\xa3\x15\x90\x03\x29\xd2\x2f\x9a\x94\xbf\x3c\x48\xe7\xf2\xe4\xec\x92\xf8\xc0\x22\x39\x09\xa5\x1a\xde\x20\xbb\x14\x79\xb3\xdb\xce\xcf\x21\x33\x84\x15\x91\x5f\x13\x75\xe6\x84\xb6\x95\xb0\x19\xa5\xb4\xb9\x5b\x4e\xba\xec\xab\x27\xec\xeb\xe4\xc9\xee\xb0\xe1\x89\xb1\xcb\x93\x33\xfd\x95\x1a\x86\x0b\x4d\x6a\xcc\x70\xe1\x33\xe3\xc2\xea\x6e\x6a\x6f\x91\x3f\x4f\xd8\x2d\xca\x9a\xb2\x72\x95\xf2\xbe\xb0\x81\x45\x93\xc1\x6a\x9d\xc1\x2a\xef\x57\x05\x20\xef\x19\xbf\x75\x24\xc7\x81\xf0\x89\x9c\xfa\xb5\xb7\xa6\x5d\xaa\xed\xd7\x07\xcd\x15\x55\xf5\x2f\x0a\xcd\x5b\x6b\xf5\x67\x52\x34\xbc\x6c\x5c\x9c\xa0\x01\x0e\x2e\x90\xbb\xe9\xdf\xfb\x6b\xa5\x80\x85\xf8\x71\x4e\xdd\x9c\xcf\xa3\x9b\x4d\xc9\x72\xfd\x96\x68\x1a\x9d\xff\xf9\x63\x3a\xb7\x06\x6a\xbe\x36\xd9\x15\x9a\x54\xd7\x46\x20\xcd\xab\xf4\xb2\xb1\xd7\xc5\x0e\x15\x8b\x6d\x77\x92\xc9\xb1\x84\x3b\x02\x1f\x17\xa9\x87\x6e\x37\x69\x96\xe3\xc4\x31\x3c\xcc\x6f\x93\x9e\x12\x0f\x8b\x79\xd7\x5e\xc8\x93\x2a\x4f\x6b\xd9\x0d\x81\x0f\xac\xfc\xb6\x12\xfc\x90\x62\x49\x82\x61\x2e\x8e\x45\x89\x90\x9a\x11\x95\x84\xa4\x7f\xc4\xe6\x57\xb7\xd5\x82\x10\x4a\x73\x29\xe1\x41\xd6\x17\xf4\xbb\xf4\x1a\x9f\xb5\x46\x84\x2c\x4b\xfb\x78\xd3\x64\x26\x2d\xbf\x2c\xa0\xf6\x2f\x07\x24\x20\x59\x25\x9c\x32\x1a\x27\x71\x9c\xc6\x3a\x89\x6c\xed\xd5\x17\x06\x12\xb8\x34\xf2\xe0\x98\x36\xe1\x49\x5e\x6a\x99\x2c\xf1\xfa\xa5\xfc\x88\x4a\x52\x77\xdb\xd4\xc5\x1b\x4e\x28\x10\xa4\x58\x15\x11\xb2\xbe\x44\xc0\xc7\xed\x46\x5f\xd8\x8e\x5d\x6a\x1d\xc2\x43\x45\xf9\x96\xb8\x25\xe1\x15\xa7\x17\xe3\xc0\x6d\xda\x66\xac\xaf\x8f\x12\x0f\xd5\x94\x8b\x7f\xa5\xe3\xa9\x4c\x7c\x66\x79\x37\x95\xb6\x49\xdd\xd3\x45\x34\x91\x4e\x3b\x10\x09\xb8\x4c\x2e\xd5\xb8\x69\xb9\x0c\x23\x3c\xa6\xb4\x95\x1d\xfe\xe0\x38\x98\xd2\x95\x59\xa3\x12\xdd\xe1\x20\x22\x2a\xb7\x24\x0b\x6f\xb7\xec\xce\x4e\xdb\x57\x80\xfd\xf0\xe8\x38\x1c\x07\x43\x70\xc4\x93\xa8\xfe\xf9\xe7\xed\xb9\x6c\xba\x62\xa0\xcd\x2b\xeb\x2c\x73\x2e\xfd\x51\xea\x79\xac\xfa\x5b\x69\x61\x86\x6f\xbc\x79\x9d\xfd\x89\xed\x6b\x6b\xeb\xcd\xeb\x7f\x6c\x5f\x5b\x6f\x5e\x2f\xd7\x61\x4a\xfe\x37\xcb\x5d\xca\x9d\x8d\xb3\xcc\x67\x26\x5e\xdf\x11\x92\x71\xd0\x6d\xa5\x97\xa3\xb7\x0f\x72\xc4\xbc\x75\x79\x89\xd7\x5f\xb5\x93\x2c\x20\xfd\x4c\xef\x48\xce\xfa\x1e\x9c\xe3\x55\x66\x9b\x4f\x09\xf8\x10\x35\x35\x29\xf2\x0c\x92\x27\x16\x2b\x60\xf7\xbb\x76\x2f\x7b\x4b\xa1\x25\x59\xda\x68\x95\xce\x0b\x89\x7b\xab\x1e\xda\xd3\xb3\x53\x2d\x3a\xd9\xc3\x98\x8e\xe0\x56\x4f\x7b\x58\xc9\xc8\x4e\x7d\xd8\xd3\x3f\xd8\xc5\x9b\x11\xad\x9e\xf6\xbb\xad\x7f\xd8\xeb\xe8\x47\xb4\x67\x90\xae\xf6\xbb\xed\x25\xce\x78\x93\xc9\x10\x1b\x83\x66\x68\x33\xef\xa2\x5f\xf8\xad\x7e\x61\xfd\x2e\xdd\x7d\xfd\x83\xf6\x3d\xbd\x9f\x3c\x7d\xbc\xd9\x58\x4a\xea\xfb\x8b\xa9\x44\x84\xd5\xe7\xec\x5e\xa4\x2c\xa4\xd5\x34\xe4\x06\xad\xca\x3b\x77\x2f\x41\x48\x74\x06\x5c\x3d\x16\xc4\xcf\xab\xa7\x2c\x20\x92\xf1\x18\x59\xd5\x99\x91\x4a\x76\x59\x9d\xe4\x9f\x6d\x27\xad\x77\x39\x35\xef\x1f\xbc\x7a\x7a\xf5\xbf\x00\x00\x00\xff\xff\x44\xa8\xe9\x57\xdf\x8d\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0x6c, 0x2a, 0xe, 0x43, 0x62, 0x8d, 0x38, 0xf3, 0x11, 0x2d, 0x99, 0x9, 0x5b, 0x96, 0xad, 0x3d, 0x3a, 0x8d, 0xed, 0xd1, 0xac, 0xe4, 0x72, 0x6d, 0x35, 0xac, 0xdd, 0x66, 0x7c, 0xd9, 0xed}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6e\x83\x30\x10\x85\xf7\x9c\x62\xe4\x75\x6b\x45\xa9\xd2\x9f\x05\x27\xa9\x2a\xcb\xd8\x13\x6a\xc5\xd8\xae\xc7\x26\xa5\x15\x77\xaf\x30\x55\xd3\x08\x14\x58\xce\xf7\xcd\x63\xf4\xa0\x97\xd1\xc8\xc6\x22\x30\x65\x33\x25\x8c\xc2\xc9\x0e\x19\x7c\x57\x63\x55\x5d\xa0\x0c\x41\x18\x47\x49\x3a\x85\x42\xf9\xec\xd2\x6d\x25\x0d\x61\x25\xa4\x45\x97\x36\x63\xae\xa5\xd5\xa0\x10\xfd\xe7\xb0\xe1\xe8\x66\xeb\x4d\xff\x0d\x74\xad\x71\x1b\x21\x56\x12\xad\x19\xf3\xae\xe8\x31\x92\xf1\x6e\x32\x00\xa6\x93\xa0\x86\x4e\x86\x0a\x40\xe3\x51\x66\x9b\xa0\x2e\x08\x80\xc9\x1c\x7d\x94\xf7\xdd\x40\x1f\x96\x41\x79\x6a\x60\x07\xfe\xc4\xcb\x48\xcc\x9c\xef\xf9\xee\x81\xef\xd9\xd5\x4e\xf0\x94\xda\x88\x65\xb1\x06\xf6\xc2\x1f\xf9\xf3\x64\x8c\x8b\xb3\x32\x61\x5c\xfd\x96\xba\x11\x41\x12\x9d\x7d\xd4\x0b\x46\xf4\x2e\x42\x6e\xac\x51\xe2\x84\xc3\x02\x77\x32\x25\x8c\x9d\xa7\x24\xb4\x3f\x3b\xeb\xa5\x16\x39\xda\x5b\x9e\x35\x0a\x1d\xa1\x38\x1a\xbb\x3c\xa5\x04\x24\xdc\x8a\x8b\xde\x27\xd1\x58\xaf\x4e\x42\x63\x6f\x14\xce\x25\x5f\x7a\x7d\x2d\x1d\xcd\xed\x02\xf4\xde\xe6\x6e\xfe\x2d\xa6\x8e\xda\xf0\xdb\xe1\x1f\x21\xf3\x35\x91\xc3\xae\x8c\xc7\xbb\x0a\xe0\xad\x1a\x7f\x02\x00\x00\xff\xff\x13\x26\x6f\x52\x0b\x03\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x86, 0xe, 0x94, 0xf, 0xf5, 0xd6, 0xbc, 0x4d, 0x91, 0xd2, 0xcd, 0x71, 0x7a, 0x6a, 0x8f, 0x4c, 0x1f, 0xeb, 0xe7, 0x50, 0x1b, 0xf, 0xb4, 0x63, 0xa9, 0xb4, 0x10, 0x3c, 0x21, 0x8e, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
