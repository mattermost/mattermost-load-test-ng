// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (10.463kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (40.384kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (327B)
// assets/variables.tf (779B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xe3\x36\x12\xfe\xee\x5f\x31\xa7\x5d\xa0\xed\x61\x25\xd9\x49\x9a\x4d\x5a\xa4\x45\xef\x0d\x38\xa0\xbd\x16\xb8\x02\xf7\x61\x11\x08\x34\x39\x96\x08\x53\x24\x8f\xa4\x9c\x78\xf7\x72\xbf\xfd\x40\x4a\xb2\x65\x59\x72\xbc\xde\x4d\x77\x7b\xbb\xc9\x17\x63\x38\x33\x1c\x3e\x33\xf3\xf0\x45\xda\xa8\x15\x67\x68\x20\x22\x77\x36\x82\x37\x13\x00\x6d\xd4\x82\x0b\x84\x1b\x88\xca\x32\x16\x8a\x30\x87\xd6\x45\x13\x00\x83\x39\x57\x12\xfc\x48\x65\x63\x24\xd6\xc5\x67\x5e\xbe\x42\x63\xfd\xc0\x0d\x44\xff\xfd\x0e\xce\x92\x8b\x97\xd1\xe4\x61\x32\x31\x68\x55\x65\x28\x06\xdf\xd9\x12\xd7\x99\x26\xdc\x44\x10\x2d\x71\x5d\x4f\xe5\x65\x92\x94\x08\xc1\xe7\xf3\x37\x2b\x62\x12\x2a\x2a\xeb\xd0\x04\xf9\x43\xbc\xc4\x75\x30\xf2\x71\x55\x73\xc1\xa9\xf7\x03\x37\xe0\x23\xfc\xd2\xab\x5b\x5b\x64\xdb\x91\xaf\xf6\xe7\xe5\xd2\x3a\x22\x29\x46\x10\x11\xad\x33\x8b\x66\x85\xa6\x9e\xde\x91\xdc\xc2\x4d\xf8\x09\xf0\x0f\x1f\xc7\x48\x14\x44\xeb\xf8\xf9\x1b\xaa\x2a\xe9\x12\x2e\x19\xde\x3f\xf8\x80\x1e\x26\x13\x00\xaa\xa4\x44\xea\xfc\xf2\x6b\x3f\xcf\xe0\xd7\x02\x81\xe1\x82\x54\xc2\x41\x65\xd1\x84\x15\x2e\x94\x01\x55\x19\xf8\xe1\xa7\xbf\x07\x35\xb7\xd6\x61\x3a\x6b\x8b\x28\x08\xbc\x66\x40\x76\x5e\x49\x57\xd5\xb2\x42\x59\x07\x37\x60\x51\x2c\x92\x66\x91\x5c\xb7\x33\x93\x92\xc3\xf6\xef\x06\x22\x52\xf2\x78\xba\xa0\x67\x53\xc6\x66\x8c\x5c\x4c\x2f\x5f\x5e\x4d\xe7\x11\x3c\x83\xd9\x55\x32\xbd\x80\x1f\x7f\xfd\xe7\x04\xa0\x85\x23\x6b\x02\xf0\x8b\xf5\xb8\xec\xc8\x77\x53\x13\xbc\x77\x53\x98\x2c\x71\x9d\x70\x16\x56\x5f\x49\xd7\x89\x61\xcf\x5b\x50\xf0\x25\xa2\x69\x66\x91\x56\x86\xbb\x75\x96\x1b\x55\xe9\x8c\x33\x0f\xfe\xab\xb0\xd0\xe8\xf9\x1b\x3f\xc1\xae\x86\xf7\x94\x70\xf6\x10\xbd\x38\xac\x93\xe5\xca\x5a\x5e\xab\x4e\x00\x6e\x3d\x38\x6c\x2d\x49\xc9\x29\x44\x46\x29\x97\xcd\x85\xa2\xcb\x8c\xe1\x8a\xfb\x3a\xa8\xf3\xb4\x50\x26\x43\x42\x8b\x26\xea\x3d\xbd\xa0\x44\x95\x74\x28\x5d\x63\x02\xb0\x52\xa2\x2a\x31\xb3\xfc\xb5\xc7\x4e\x28\xb5\xac\xf4\x97\x7b\xa6\xc9\x8a\x88\x0a\x5f\x40\xd4\x51\x8f\x5e\x80\xac\x84\xf8\x6a\xd7\x51\x93\x84\x63\x1d\x79\xf5\x1d\x47\x0f\x6d\x31\x84\x3e\xf6\x4d\xe8\x5b\xd9\x37\x47\xbb\xcc\xa6\x15\x3a\xf9\x29\x89\x73\x68\x4a\x65\x5d\x26\x38\x45\x69\x31\xf3\x06\x41\x9b\xa1\x75\x5c\x12\xd7\x74\x73\x5a\xa8\x12\xd3\xba\x22\xd3\xad\x5d\xc7\x45\xdc\xb8\x88\x06\x03\x31\x58\x2a\x87\x31\xde\x23\x6d\xe3\xe1\x52\x70\x89\x9b\xc4\x03\x44\x77\x85\x67\x9b\x57\xf0\x07\x88\x17\x90\xae\x88\x49\x05\x9f\xa7\x54\xa8\x8a\xa5\x6d\x1d\xa5\x73\xa5\x5c\xbc\xe0\x92\xdb\x02\x19\xdc\x7e\x0b\x4c\x01\xd2\x42\xc1\x17\xff\x22\xdc\x71\x99\x87\x06\x0b\x46\x31\x97\xdc\x25\x49\xf2\xc5\xb7\x60\x05\xa2\x86\x99\xd7\x96\xd8\x94\x91\x9f\x31\x47\x07\x71\x2c\x55\x4c\x0b\xa4\xcb\x98\xa2\x71\x7c\xc1\x29\x71\x08\xf1\xbf\x7f\x86\x18\x0a\xe7\xb4\xfd\x26\x4d\xed\x79\x8c\x55\x7c\x87\xd6\xc5\xb3\x84\x94\xe4\xb5\x92\xe4\xce\x26\x54\x95\x29\xc3\x79\x62\xd4\xbc\xb2\x4e\xa3\xa1\xa8\x3d\x66\x09\x57\xe9\xc5\xec\xaf\x7f\xfb\xf3\xf5\xf5\x5f\x92\x5c\xe7\xf0\x1f\xb0\x15\x53\x40\xb4\xf3\x4c\x06\x84\x31\x88\xb7\x71\x6c\xc6\x42\x3c\x6b\xa8\x34\x23\x0e\x47\xc6\x03\x14\x42\x78\x3d\x6d\x54\x89\xae\xc0\xca\xc6\x52\x31\x8f\xaf\x56\xc6\xa1\xe9\xaf\xf0\x67\xe8\x24\x8a\x71\xeb\x12\x47\x4c\x92\xbf\x86\x9a\xe3\x3a\x85\xc0\xd4\x9d\xf4\x4c\x9f\x55\x46\x3c\x6c\xdd\x38\x62\xe0\xfe\xf5\x62\xc4\x4d\x2f\xd0\x72\xd5\xd1\x83\x54\x69\x97\xd6\x2c\x76\x1b\x6a\xe3\x10\x31\x97\xe8\x0c\xa7\xf6\x34\x72\x6e\x8c\xff\x6f\x18\x39\x72\x67\x89\x20\x26\x0f\x3d\x75\x0c\x0d\x9f\x4a\xaf\x0d\x70\x1b\x8a\xfd\x4c\x9c\x9f\xf9\xea\x89\xf9\xaa\xa7\x6b\xd7\xd6\x61\x49\x9d\x00\x94\x64\x2e\x70\x5c\x73\xc0\x2b\x61\x2c\x74\xa8\xe0\xf3\x85\x92\x8e\x2a\xb9\xe0\xf9\xac\x87\x5a\x0b\x0c\x13\x49\x6e\xc8\x82\x48\x12\xc0\x50\xd6\xa6\x06\x05\x12\x8b\x69\x23\xcf\x2e\x93\xcb\xe4\x2c\x23\x25\xbb\xbc\x48\x18\xce\x7b\x01\x30\xbd\xcc\x21\xe6\x70\x9c\xf6\x76\x61\x8c\x60\xa9\x64\x6c\xd0\xd3\xeb\x63\xcb\x6f\x9c\xc7\x0d\x0f\xf6\xb4\xd1\xf8\xd2\xee\x29\x81\x75\xc4\xb8\x63\x89\x56\x1b\x75\xbf\x3e\x8d\x66\x83\x69\x4d\xb2\x7d\xa6\xdb\xfd\x1b\xe5\xbd\x3d\xae\xeb\xdb\xf9\x49\xeb\x08\xfb\xa7\xd1\xdd\x73\xe6\x90\xdd\xfe\xa9\x13\xbe\x83\x19\x7c\x0f\x33\xf8\x06\xa6\x3e\x64\x6b\x15\xe5\xc4\x61\xb6\xe1\xed\x8c\x30\x66\xd0\xfa\xf5\x3b\x53\xe1\xa9\x3c\x1a\x42\xde\x9e\x3e\x3b\xa4\x3d\xca\xd7\x9f\x1a\xcb\x7e\xb8\x3d\xf9\xf7\xc0\xef\x4f\x77\x0e\x1c\xb3\x94\x39\x97\xf7\xef\x87\xb3\x86\x5c\x99\x32\x60\x87\x8e\xa6\x61\x38\xb5\xdc\xa1\x8d\x6b\x0b\x96\x36\x69\xef\x19\x09\x09\xf1\xc2\xee\x5b\x91\x15\xe1\xc2\x1b\xa6\xdd\xe3\xe5\x98\xef\xad\x4e\x8f\x13\x7b\xa4\x68\x98\xcd\x5a\x82\xeb\x10\x64\x5f\xd4\xbc\x89\x1c\xe0\x9f\xba\x3f\xd9\x7c\xff\xce\xcb\x19\x4a\xbf\x4f\xa3\x19\xe2\xc8\x21\x8e\x65\xf3\x81\x67\x86\x4d\x48\xfb\xee\x6a\x7e\xe9\x2c\xc5\xc7\xd1\xfe\x0c\x17\xf4\x6d\x50\x82\x58\xfb\x58\xe0\x5e\x67\x02\x80\x1e\xd8\x3e\x3d\x8f\x19\xd5\xca\x9e\x60\xb5\x16\xeb\x8c\x97\x25\x32\x4f\xb3\x62\xdd\xb5\x6a\xf8\x95\x54\x4e\x65\x25\x97\xca\x64\xcd\xa3\x51\x56\xe9\xdc\x10\xe6\x3b\x70\x41\x84\xc5\xfd\xed\xab\xb3\xbc\x08\xa2\xed\x02\x9b\xcc\x0c\xa0\x33\x8a\xae\x87\x93\x11\x47\xe6\xc4\x62\xe7\x58\x3d\x62\x50\xeb\x97\x24\x48\x36\x14\xb5\x83\x42\x2b\xdd\xea\x69\x62\xed\x9d\x32\x6c\x57\xaf\x95\x4e\x00\xec\x92\xeb\x6c\xc1\x25\x11\x99\x95\x44\xdb\x42\xb9\x0e\x3e\x03\x18\x6e\x06\x87\xd2\x72\x20\x1f\xf5\x8f\x16\xe7\x9e\xfa\xee\xe0\xab\x61\x27\xb7\x87\xaf\x16\xc3\xbb\x21\x9b\x87\xad\xf0\xf6\xe0\x39\xa4\x7d\x55\xcc\x48\x8e\xd2\xbd\xed\x6b\x9c\xb7\x39\xfa\x3d\xee\x37\xbb\xd6\x8d\x3d\xae\xf9\x68\xdf\xe7\xf3\xda\xae\xbf\x9a\x6c\x4e\xc8\x53\xf0\xd3\xa4\xea\x13\x3c\x91\x7c\xda\xe7\x82\xf6\x7d\xc8\x95\x7a\xf7\x4d\x28\x3c\x02\x85\xce\x7c\xe4\x49\x68\x6b\xb9\x1d\xdb\x79\x01\x0a\x5f\x0e\x62\xef\x2a\x96\xf9\x1f\xc7\x06\xb6\xc6\xa6\xec\xfa\x3c\x74\x9f\xd9\x2d\xe4\xfa\x5d\xbf\x4e\x5b\x87\xd2\x0f\x3d\xe5\xb7\x0e\xe2\xda\xc1\x24\xbc\x7b\x52\xc3\x75\xfb\xee\xf9\x83\xd6\xd0\x2a\x41\x50\x0a\x69\x6b\x59\xab\xdd\x74\x60\x60\x82\x68\x12\x78\x20\x0f\xf7\x8a\xa6\x71\x8c\x2a\x33\x9f\x81\x10\xd5\xd9\x59\x4d\x4b\xaa\x15\x75\x84\xda\x28\xa7\xa8\x12\x4d\xfc\x8e\xea\x1a\x08\xca\x99\xa9\xeb\xbc\x6e\xe8\x69\x12\xfe\xd3\x69\x74\xdb\x5c\xc8\x0e\xcd\x78\x35\xbd\xfc\x7a\x60\xce\x8d\xf8\xfd\xcf\x1a\x9c\xbf\xec\xcd\xd9\x11\x6e\x67\xec\xce\xf7\x0c\x7e\x22\xeb\x39\x82\x41\xeb\x0c\xa7\x0e\x94\x14\xeb\xe0\x15\x7e\xd9\x54\x34\x34\xd7\xde\xef\x1b\x93\x3f\x55\x0e\x0a\x22\xd9\x1a\xea\xfe\x74\x64\xe9\xbb\xac\xf9\x88\x65\xe1\x8e\xbb\x42\x55\x0e\x4a\x22\x2b\x22\xc4\x1a\xac\x2d\x62\xaf\xc1\xa5\x53\xe0\x0a\x6c\x1c\x26\xef\x0c\x74\x0d\xdf\xf5\x6c\x3a\xdd\x03\xbb\x37\xd4\x05\xbc\x0f\xfa\x6e\x71\x1f\xe0\xef\xee\xeb\x5d\x1b\x1c\x8e\x17\xc1\x7e\x50\xad\xac\x97\xfe\x78\x76\x5c\xf6\x8f\x6a\xcb\xe6\xd3\xcc\x3b\x74\x67\xdc\x78\x38\xba\x49\x6b\xfd\x23\x7b\xf5\xf1\x7c\x5e\x4d\x5f\x5e\x8c\xe4\x73\x33\x34\x90\xcf\x8a\xbd\x6d\x3e\xdb\x8f\x5d\xc7\x16\xda\x89\x81\xbd\x7d\xa1\x9d\x10\xd8\x3e\xdd\xf4\x86\x3e\x14\x62\xa7\x04\xf6\xee\x88\xfd\xc6\x6d\xf9\x58\x5f\xb2\x79\xa7\x1f\xc7\x6f\xa2\xfd\x5d\xf2\x08\x84\xcf\xcf\xa7\x97\x23\x08\x6f\x86\x9e\x00\xe1\x23\x22\xfb\xfa\xe2\x7c\x7f\xdf\xed\x0d\x3d\x41\x64\x47\x90\xe4\xf6\x02\x74\x0c\x3f\x86\xab\xcf\xa3\xe7\x97\x1f\x5b\xf2\x0b\xfa\xbf\xab\xa3\xcc\xc1\x53\xc5\xc5\x74\x6f\x73\xed\x08\x87\x4f\x15\xfe\x4e\xd7\x62\xda\x5c\xa4\x8f\xaa\x98\x0f\xb8\x91\x7f\x74\x3b\x79\xfb\x89\xf5\x51\xda\x68\x14\xdf\x8e\x3b\x3e\xc4\x99\xf8\x7a\x7a\x3d\x84\xe3\x46\xfc\x34\xb3\x9e\xef\xd7\xef\x8e\xf8\xf4\x59\x3f\xae\x7a\xa9\xbf\x15\x1d\x4b\x6a\x41\xfb\x71\x52\xfb\xc5\xab\x3d\x19\x97\x5d\x0d\xc1\x74\xf5\x6e\x69\xf9\xb8\xe8\xf3\x53\x24\xb6\xff\x05\x00\x00\xff\xff\x25\x99\xf8\x63\xdf\x28\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x5d, 0x68, 0xc3, 0xaa, 0x14, 0xa7, 0xeb, 0xc5, 0x5c, 0xf7, 0x6, 0x28, 0x9f, 0x7b, 0x22, 0xb1, 0x92, 0x0, 0xa1, 0x16, 0x8e, 0xfe, 0xb4, 0xda, 0xf5, 0x14, 0x55, 0xf3, 0xa1, 0xba, 0x3d}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\x38\xf2\xc0\xdf\xf7\x53\x10\x44\xff\x7f\x24\x45\xd2\x8d\x9d\xba\xdd\x16\x58\x1c\xd2\x74\xdb\x2b\xd0\xee\xe6\x92\x74\x6f\x71\x6d\x20\xd0\xd2\xd8\x26\x42\x89\x2a\x49\xe5\x61\x73\xd9\xcf\x7e\x10\xf5\x44\x3d\xd8\x96\x15\x3b\x76\x1a\xee\x8b\x6d\x3c\xa2\x24\xce\x70\x86\xf3\xd3\x90\x96\x6f\x9e\x20\x84\x49\x10\x70\x45\x14\xe5\x81\xc4\x6f\x50\x2c\x42\x08\x33\x2a\x15\x7e\x83\xbe\xea\x4f\x28\x95\xea\x23\xc3\x88\x32\xf5\x31\xc0\x6f\x50\x6f\xa7\x90\x7a\x44\x11\xc9\x23\xe1\x02\x7e\x83\xf0\xee\x2e\xfa\x20\xc8\x88\x04\x04\xed\xee\x62\xa3\x19\x04\x64\xc8\xe2\x26\x4a\x44\x60\xc8\x27\xd4\x6b\x90\x52\x97\x07\x87\x9c\x71\x11\x5f\x53\x8c\x87\x64\x6b\x6f\x07\xf5\x7b\xbd\x1d\xd4\x1f\x0c\x76\x50\x6f\xdb\xbc\x74\x40\x7c\x7d\xef\x83\x42\x1d\xf4\xff\xe8\x80\x81\x50\xd2\x6c\xa7\xae\x43\xdd\xce\x23\x72\x32\xe4\x44\x78\x38\x3d\x76\xab\xff\x3d\x7b\x82\xd0\x6d\xdc\x1c\x83\x47\x55\xa5\xb7\x78\x1c\x80\xfa\xe8\xe1\x37\xa8\x3f\x78\xd1\x4f\x24\x82\x84\x93\x53\xce\x99\xa2\x61\x66\x13\x4c\x75\x93\xe4\x4f\x05\x42\xf7\x26\x3e\x38\xf8\xf9\xf5\xfe\xe0\xf5\x8b\x7e\xef\x55\x2f\x39\xca\x68\x70\x1e\x5b\xfd\xeb\x99\xfe\x18\x92\x00\x98\xcc\xed\x9e\x59\x1d\x13\x46\x89\xd4\x96\xd0\x43\x74\x9b\xa9\x83\x87\x44\x4b\x46\x84\xc9\xdc\x70\x5a\xb3\x4f\x10\x8c\xd5\x24\xbe\xe7\x5e\x49\x0e\x4d\xcd\x8d\xa1\x0b\x22\xc6\xf2\x23\x23\xca\x98\x39\xce\x5a\xf0\x41\x10\x8f\x42\x10\x7b\x47\x71\xe9\xb1\xa0\xde\x11\x2f\xfc\x27\x19\x54\xfc\x06\xbd\x36\x2c\x7f\x19\x5f\xab\x6f\x08\xae\xcc\x6b\x20\x84\xaf\xe3\xcf\xd9\x68\xe4\xd7\x9e\x50\xcf\x83\xe0\x04\x04\x6d\xe8\xbc\xb6\x74\x2f\xbf\x0b\x66\x30\x86\xc0\x2b\xf7\x83\x5c\x8c\xab\xe7\x21\x84\xdd\x48\x88\x44\x8d\xea\x11\x9f\x5c\x35\x49\x69\xd0\x20\x95\x13\x7e\xd9\x20\x56\x5c\x11\xd6\x20\xbf\x20\x2c\x2a\xb4\xa8\xa9\xca\x68\xa0\x8f\x9a\x71\xa0\x85\x97\xd4\x4b\x46\x33\x97\xc6\x03\x75\xc4\x69\xa0\x3e\x73\x1d\x3a\x5a\x90\xfb\x39\xe6\x61\x39\xa0\xf3\x91\xfe\x94\x7b\x5c\xed\xee\x21\x08\x17\x02\x45\xc6\x50\x33\x73\x18\xdf\x29\x1e\xf8\x48\x66\x9e\x5d\xc8\xeb\xa3\x22\x20\xf0\x40\x80\x8e\xdb\x11\xe3\xaa\xe8\x97\xd4\xc3\xf8\xfb\x05\x08\x41\x3d\x28\x5c\x3f\x39\x18\x12\x17\x9a\x3c\x57\x2a\xe2\x9e\xd7\xee\x22\x15\x84\x21\x78\x9f\x68\x50\xef\xb0\x22\x62\x0c\x4a\x1a\x53\x98\x39\x89\xc5\xd1\x7d\x15\xea\xee\xc9\xc8\xdf\xa2\x81\x2b\x80\x48\xd8\xf2\x89\x52\x20\x7c\x2e\x95\xe3\x0d\x1d\xa9\xb8\x00\x47\x51\x1f\x1c\x97\x47\x81\xba\xf1\x41\x4d\xb8\xf7\xcb\xdf\xdf\xf0\x53\xc5\xc3\xb8\x89\x96\x7f\xc3\xb7\x5f\x9f\x3a\x8e\x20\xc1\x18\xce\xb6\xb7\xd1\xf0\x1a\x6d\x25\x4d\xcd\x09\x2a\x77\xce\xf7\x5c\xf8\x24\xf6\x3b\x7c\x93\x5e\xf1\xf6\xb6\xdc\x4e\xc0\x48\x4f\x32\xf8\x00\xe7\xe2\xdb\xf4\xaf\xc2\x5a\x6a\x22\x40\x4e\x38\xf3\x2a\x56\x8c\x3b\xfc\x5e\x70\xbf\x1a\xcd\xb1\xfc\x18\xc6\xa9\x5b\x54\x4e\x38\x99\xd0\x91\xaa\x9f\xa1\xf4\xf4\x87\x4f\x79\x88\x4e\x62\x6b\xa0\x43\xc2\x98\x8c\x35\x3c\x8c\x35\x2f\xc6\x55\xe5\x33\xe0\x8d\x19\x1c\x44\x80\x57\x9f\xd7\x25\x17\xca\x74\xa3\x2c\x30\x9c\x6c\x6e\xa6\x81\x47\x2f\xa8\x17\x11\x86\x6b\x5e\x9a\xb5\xd1\x13\x6f\xd1\x81\x2b\x72\x45\x2b\xee\x3e\x8c\xdc\xf3\xc4\x07\x4c\xad\xe2\x50\x4e\x43\x26\x56\xbc\x21\x85\x54\x5a\xa7\x21\x5e\xd1\x21\x8f\xe4\x86\x40\xba\x26\x57\x30\xc3\xf5\x46\xb9\x03\xc8\x49\x6c\x89\xb2\x8f\x90\x21\xb0\x5a\x27\xe2\x03\x7c\xfc\x96\x48\x28\xe7\xdd\x7c\xb6\xaa\x35\x4f\xa6\xab\x9a\xd8\x50\xa6\x70\xad\x9d\x8d\xed\xa7\x39\x4d\x36\xc5\xc0\x75\x7d\xd4\x09\xa3\xe3\xa6\x99\x5a\xcb\x3f\xc1\x45\xde\xeb\x52\xda\x4f\x6d\xf0\x18\x32\x6e\x49\xd0\x39\xe5\xbe\x5a\x5b\xca\x15\x74\x3c\x51\x27\x09\x30\xda\x74\xfc\x48\xd2\x31\x09\xa9\x99\x89\x27\x24\xf0\x18\x88\x3c\x15\xc7\x87\xa7\xe6\xe2\xb4\x71\x25\x19\xd3\x40\x81\xb8\x20\xec\x3d\x71\x95\x7e\xc2\xe8\xcd\xc9\xd5\xe9\x65\x1e\x44\xb2\x3e\x38\xfa\x68\x53\x75\xa9\xc3\x36\x55\xdb\x54\xfd\xe0\x52\x75\xf5\xe1\xf8\x75\x87\x4c\xbd\xbf\x67\x1f\x8e\x6d\x36\x5e\xe5\xc3\xb1\x8c\xfc\x0e\x8f\xc6\xe8\x27\xb4\xde\x67\x6f\x94\xb4\x43\x0f\x22\xa1\x57\x9e\xbe\xdf\x45\x69\x51\xd1\x66\xf5\xbb\x65\x75\x9b\xd1\x6d\x46\xbf\xcf\x8c\x5e\x7b\xf8\xee\x94\xd2\x7b\x36\xa5\xdb\x94\xbe\xa2\x07\xec\x38\x9b\x77\x7a\xbc\x9e\x91\xd0\x97\xff\xf4\xde\x90\xce\xd3\x86\x0f\x23\x9f\x97\x1e\xd0\x6d\x36\xb7\xd9\xdc\x66\xf3\x44\x78\x97\x6c\x8e\x19\x27\x9e\x02\xa9\x76\x53\x51\xde\xac\x61\x2d\x3f\x91\x0b\xa1\x6b\x7f\xe5\x8b\xae\xe3\xd1\xbe\xf7\x73\x07\x10\x58\x5f\x11\xbe\x39\x8a\x57\x8f\x01\xe5\x0d\x13\xa8\x91\x0c\x5c\x1e\x04\xe0\x2a\xf0\xee\x09\x0f\x06\x3f\x10\x1e\x08\xa2\x4a\x99\x3b\x8c\xff\xa7\x87\xf5\x86\x06\x52\x91\xc0\x05\x9d\xb6\x25\x88\x0b\x10\x71\xbe\xee\xf9\x67\x95\xdc\x5c\x4c\x76\x09\x50\x24\x0e\x5c\x6a\xb2\x70\xf1\x3d\xbb\x79\x35\xb9\xfb\xa0\x04\x75\xe3\x36\x8d\x9d\x9e\x4a\x02\xe5\x19\x52\x41\x9c\x6a\x07\x73\xa7\x71\x13\xa2\xba\x59\x6a\xe5\xa6\x3a\xad\xab\xdd\xcd\x46\x6f\xe7\xd9\x68\x9d\x08\x75\xc4\xa5\x92\x28\x04\x81\x4e\xc0\xe5\x81\x37\x87\x9c\x7c\x79\x0c\x92\xb3\x28\xdd\x87\x55\x9f\xcc\x66\x82\xd5\x9e\x05\xab\xe9\xd0\x82\xcb\xab\x4b\xe8\xd1\xf2\x55\xb9\x9f\x16\xaf\xd6\x8b\x57\xb5\x3a\x4b\x27\xbe\xea\xad\x7d\xed\xc4\x02\xd6\x0f\x0e\x58\x13\xa5\x42\x47\xc0\xf7\x08\xa4\x92\x9b\x40\x5a\x28\xbb\x7b\xad\x90\xd2\xc8\x11\xba\xff\x3a\xce\xe5\xbd\x23\xd7\x82\xb6\xdb\x18\xf6\x6a\x6b\xb3\x8d\x46\xb0\xe3\xd4\xee\x96\xc2\x2c\x85\x2d\xd2\x55\x4b\x61\x8f\x87\xc2\xaa\x45\xae\xfe\xab\x0e\x10\xf6\xd2\x32\x98\x65\xb0\xa5\x32\x58\x35\x15\x5f\xc2\x50\x72\x3d\xfb\xcf\x84\x88\x0d\xab\x72\x35\x76\x7d\x85\xf4\xd5\xd1\x6a\xeb\xa0\xae\x87\x41\x50\xbf\x45\xfe\x10\x04\xe2\x23\x74\x98\x05\x33\x7a\x07\x17\xd4\x05\x89\xb6\xfe\x0d\xc3\x13\x6d\xdd\xec\x60\x7c\x87\x6d\x4b\x58\x96\xb0\x2c\x61\x59\xc2\x42\x68\x5a\x9d\xab\x13\x62\xad\x7d\x3f\x91\x45\xac\x1f\x17\xb1\xbc\xa1\xe3\x13\xa9\x40\x38\x6e\x91\xc9\x1e\x12\x68\xcd\x50\xe0\x7e\x70\x6b\x71\x0b\x6e\x4c\xa9\x6b\x71\xdb\x3d\x2c\x64\xd3\xaf\x99\x50\x1c\x7d\xd6\x4a\xa2\x77\x44\x91\x61\x9c\x6a\x2d\xa7\x59\x4e\xb3\x9c\x66\x39\x0d\x4d\xa9\x84\xed\xbf\xec\x82\x69\x96\xd3\x2c\xa7\x2d\x97\xd3\xda\x6c\x07\x4f\x16\xcf\xf4\x66\xec\x8c\x36\xda\x6f\xf6\x6e\x3a\x79\x61\x38\x99\x34\x7e\xdb\xff\x1e\x56\x37\x4d\x33\xac\x88\xf5\x26\x54\x2a\x3e\x16\xc4\x77\xbe\x47\x24\x50\x94\xc1\xd6\xde\xf3\xd7\x3b\xa8\x69\xc1\x33\xef\x4e\x92\xa2\x1b\x6c\xbb\xc3\xa0\xc3\x3a\xe7\x54\xfb\x56\x0d\xf8\x7a\x2f\xdc\x9d\x4e\xcf\x06\xc3\x6d\x06\xae\x7d\x06\x12\xe8\xad\xf6\xe9\x62\x25\x3a\x35\xc9\xc5\xb2\xd9\x3d\x6e\xc2\xc7\x16\xc9\x2c\x92\x6d\x14\x92\xd5\x4a\x67\x9d\x98\x6c\x60\x91\xcc\x22\xd9\x52\x91\x6c\xcc\x1d\x1f\x7c\xa9\x88\x92\x0e\x61\x8c\xbb\xce\xf0\x5a\x81\x5c\x53\xad\xec\x20\xee\xc1\x8c\x9c\x5f\x60\xd3\x94\x7e\xaf\xb4\x50\x66\xde\x53\x0f\x89\x43\x83\x48\xc2\x72\x2d\xb6\x2c\xfa\x3c\x89\x3b\xb8\x5a\x7b\xce\x2d\x9e\x2d\x60\xcf\x09\x90\x70\x93\xcd\xf9\x4f\x20\xe1\x6a\xad\x79\xb8\xc9\xa5\xc8\xcf\xe0\x73\x71\x8d\xbe\xc8\x78\x76\xb4\x48\xbb\x4a\xa4\xd5\x9e\x62\xb1\xd6\x7e\xb3\xf4\x41\x70\x6d\xb5\xd4\xf8\x62\xd0\x01\x6b\x7b\xfb\x96\x6b\x2d\xd7\x2e\x95\x6b\x69\xed\x1b\x93\x82\xbb\x20\xa5\xe3\x86\x91\x23\xf5\x06\xf2\x16\x9b\xf8\x9f\xa1\xde\xde\xde\xfa\x16\x88\xdb\x93\xeb\x3a\xd9\xe0\xf0\xe8\x0b\xfa\xa2\x28\xa3\x7f\xe9\xf7\x4a\xa0\x63\xa2\x00\x6d\xfd\x9f\xdd\x3e\xb6\xbe\x65\xc9\x99\xc3\x81\x1e\x2d\x3b\xd8\x92\xd8\x26\xa1\x43\xad\x24\xd6\x89\x1d\x5e\x58\x74\xb0\xe8\xb0\x54\x74\x18\x73\x67\xcc\x05\x8f\x54\x3c\x24\x1b\xbc\x69\xac\xd4\xcf\x15\xee\x0d\x6b\x63\x8f\xf5\x6e\x01\x6b\x63\x89\x07\xb2\xd3\xeb\x03\x47\xc7\x55\x45\x2c\x3f\xd9\x6d\x5d\x16\x98\xd0\x4a\x80\xa9\x14\x8f\x1e\x48\x57\xd0\x30\x8d\xa8\xa2\xda\xb6\x96\x4a\xca\xe0\x45\x07\x1a\xea\xb7\xd9\xb4\x55\x89\xa6\x82\x86\x2a\x07\x12\x97\xa9\x0a\xb5\xc3\x54\x84\x2d\x7e\x25\x63\x51\x4c\x32\x5c\xcf\xbe\xc2\x33\x3b\xb8\xa6\x3d\x5b\xba\x96\x12\x70\x0f\x1c\x37\x8c\x9a\x09\x60\x27\x9e\xd7\x7f\xf9\x86\x23\x69\xbc\x02\x61\xd6\x46\xac\x19\x0b\x33\x71\xfb\x06\x38\x6f\xa0\x82\x2f\x12\x04\x6a\x55\x3f\x59\x88\x78\x16\xd0\x57\x5e\x4b\x05\xfe\xdd\x34\xae\x2d\xdd\xe9\x6b\xb6\xd1\xeb\xed\xca\xf4\xa2\x1e\x83\xe5\x6a\xf5\xd1\x63\xd0\x46\xa7\xc3\x15\xe9\xf4\xf7\x37\x4c\xc5\xf7\xff\x4a\x3e\x52\xf1\xbf\x94\x5f\x12\xaa\x96\xab\xe2\xef\x6a\xd2\xce\x1f\xdf\x6d\xc8\x96\xb5\xc3\xa3\x2f\xe8\x13\x27\x1e\xda\xea\xf9\xf3\xea\x75\x16\x28\x1b\x7d\x71\xe3\x28\xcd\xd2\xe4\xc6\xd0\xa4\x4b\x7d\xc2\xaa\x2e\xbb\x9e\xda\x5a\x37\x9a\x5c\xee\xba\x5c\x3c\x8f\xfe\xea\x87\xea\x7a\xca\xb1\xff\x80\xe0\x77\xac\xc9\xad\x00\x44\xef\x5c\xaf\xb3\x24\xba\x1c\x12\x4d\xb2\xbc\xaf\x77\xa2\x38\x9f\xc1\x3f\x9d\xb1\x7a\x87\x76\x51\xa5\xf5\x7b\x01\xd0\xae\xf1\xdb\x68\x34\x02\x31\xad\xd2\x55\x69\x7c\x48\xdc\x09\x78\xed\xaa\x62\xcb\x42\x5e\x0f\xcd\xfa\x6a\x41\x17\xe8\x5d\xc0\xb2\x78\x66\xef\xf4\x99\xed\xba\xb7\x39\xdb\xf6\x5b\x6f\x6d\xb2\x08\xd4\xe8\x45\xad\xf6\x2e\x59\x04\x7a\x24\xbb\x97\xee\x9d\x75\xaa\x85\xb3\x97\xfb\x5d\x50\xa7\x58\xc1\xca\x56\x26\xca\x25\xc0\x0e\xe5\xb4\x66\x90\x69\x53\x4f\xb3\x35\xb3\x87\x4d\x2a\xe5\xc2\x44\x00\xea\x92\x8b\x73\x47\x09\x12\x48\x9f\xaa\x99\x3b\x9c\x9b\xca\x11\xdb\xcf\x7e\x6e\x5e\x3c\xab\xef\x09\x5d\x74\x59\xed\xcf\x64\x7f\xc8\xb2\x81\x62\x8a\x05\x04\xb8\x40\x2f\x66\x6f\xf1\x6e\x65\x80\x4e\x28\xb5\xa0\x6d\x8e\x17\xb1\xcd\xa6\xd0\xcc\x6f\x89\xa5\xd1\xf1\x9f\x3f\xa5\x63\x3b\x6f\x1d\xd1\x42\x4d\xa3\x27\x1b\x50\x13\x5a\xa4\xb1\x48\x73\xaf\x48\x53\x2b\xdf\x74\x63\x9a\x36\xbf\xd8\x63\xe9\xa5\x23\xbd\xb0\x68\x4c\x83\x3f\x40\xc8\x74\xb5\xf8\xe5\xf3\x97\xcf\xfb\xf8\x11\xd0\x4d\x96\xd1\xa5\x22\xca\x39\x75\x43\xe7\x30\x12\xe2\x57\xa9\xc8\xb0\x55\xc9\x60\x29\x55\x10\x7d\x3b\x46\xe5\x64\x05\xc5\x10\x5a\xe2\x96\x4c\xcb\x5f\xaf\x94\x73\x7a\x78\x74\x4a\x7d\xe0\x91\x9a\x09\x2f\x2b\xd0\x37\xbb\xed\xe2\x30\x32\x47\xd9\x98\xd3\x16\x1e\xd0\xae\xeb\x63\x49\x75\xc8\x18\xbb\xe5\x2c\x01\xde\x79\xc0\xee\xa6\x4f\x76\x87\x0d\x5f\xeb\x3b\x3d\x3c\x32\xdf\x23\x66\xa9\xd0\xae\xf6\xfd\x20\x5c\xf8\x24\xbd\x6c\x1c\x73\x71\x38\xc5\x6a\xf7\xf6\x12\x0f\xc7\xd2\x9d\x80\x4f\x8a\x3c\xdd\xef\x27\x62\x75\x9d\x84\x85\x47\xc4\x79\xd2\x52\x91\x71\x31\xf2\xc6\x7b\x79\x52\xe3\x19\x92\xdd\x10\xc4\x08\xe7\xb7\x55\xe0\x87\x8c\x28\x1a\x8c\x73\x75\x30\xa3\x52\x19\x6e\x54\x52\x92\xfd\x11\x3b\x60\xdd\x5b\x0b\xf6\x2a\x8d\xa5\x82\x2b\x55\x7f\xd0\xbf\x48\xaf\xf1\xd5\x10\x22\x84\xb1\xf1\xf1\xac\xc9\x4d\x5a\x7e\x5f\x40\xaf\x5f\x8e\x68\x40\xb3\xcd\x70\xda\x69\x9c\x24\x74\x1a\x37\x4a\x64\xd3\xa6\x39\x35\xd0\xc0\x65\x91\x07\x07\xac\x09\xfc\xf2\xdd\x96\xc9\x64\x6c\x5e\xca\x8f\x98\xa2\xf5\xc0\x4d\x83\xbc\xe1\x84\x02\xee\x8a\x39\x11\x21\xfc\x3d\x02\x71\xdd\xae\xf7\x85\xef\xf4\x4a\xd2\x31\x5c\x55\x8c\x8f\xe5\x39\x0d\xbf\x08\x76\x72\x1d\xb8\x4d\xcb\x8c\xf5\x19\x52\x91\xb1\x1e\x72\xf9\xaf\xb4\x3f\x95\x81\xcf\x3c\xef\xac\x22\x9b\xd6\x3c\x9d\x46\x13\xed\x8c\x03\x91\x84\xd3\xe4\x52\x8d\x8b\x96\xcb\x70\xc2\x03\xc6\x5a\xf9\xe1\x53\xc7\x21\x8c\xad\xcc\x1b\xb5\xea\x8e\x00\x19\x31\xb5\xa5\x78\x78\xbe\xd5\xdb\xdb\x69\xfb\x92\xb0\xa7\x37\xe9\xaf\x3e\x3b\xf2\x56\x56\x7f\xf9\x79\x7b\x21\x9f\xae\x38\x68\xf3\xcc\x3a\xcf\x9d\x4b\xbf\x4a\xbd\x88\x57\xdf\x97\x15\xe6\xc4\xc6\xf3\x67\xd9\x6f\x6c\x7f\xc3\x5b\xcf\x9f\xfd\x63\xfb\x1b\x7e\xfe\x6c\xb9\x01\x53\x8a\xbf\x79\xe1\x52\x6e\x6c\x83\x65\x31\x37\xf1\x86\x8e\x54\x5c\x80\xe9\x2b\x83\xbc\x24\xeb\x83\x9a\x70\x6f\x5d\x51\xe2\x0d\x57\x1d\x24\x1d\xb4\x9f\x1b\x1d\xc9\x59\x3f\x42\x70\x3c\xc9\x7c\xf3\x36\x01\x1f\xaa\x87\x26\x45\x9e\x51\xf2\xbc\x82\x03\x7e\xb9\xdb\x1b\x64\x6f\x30\xc4\x8a\xa7\x42\x5c\x3a\x2f\xa4\xee\xb9\x2e\x77\xa4\x67\xa7\x56\x74\xb2\x22\xbd\x09\xe1\x78\x60\x3c\xae\x64\x64\xa7\x3f\xec\x9b\x1f\x7a\xc5\x5b\x13\xf1\xc0\xf8\xbb\x67\x7e\xd8\xdf\x33\x8f\x18\x4f\x21\x7d\xe3\xef\x9e\x97\x04\xe3\x59\xa6\x43\xec\x0c\x86\xa3\xcd\xbd\x8b\x79\xe1\x97\xe6\x85\xcd\xbb\xf4\x5f\x98\x1f\x8c\xaf\xea\xbd\xf2\xcc\xfe\x66\x7d\x29\x99\xef\x2f\xae\x4b\x38\x78\x28\xf8\xa5\x4c\x59\xc8\xd8\xd3\x90\x3b\xb4\xde\xde\xb9\x7b\x0a\x52\xa1\x23\x10\xfa\xb1\x20\x70\x01\x7d\xe6\x01\x55\x5c\xc4\xc8\xaa\xcf\x8c\x74\xc1\x10\xef\x25\xff\xf5\x7a\x89\xf4\x22\xa7\xe6\x57\x4f\x6e\x9f\xfc\x2f\x00\x00\xff\xff\x6c\x40\x2c\x8e\xc0\x9d\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xba, 0x79, 0xdb, 0x41, 0x4f, 0x88, 0xfd, 0x97, 0x3d, 0xa6, 0xb3, 0x99, 0x96, 0x9b, 0x37, 0x26, 0x9f, 0x14, 0x7a, 0x24, 0xf5, 0xf4, 0x17, 0x82, 0xa8, 0x71, 0x9f, 0x1d, 0xf, 0x98, 0x2e, 0x6}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6e\x83\x30\x10\x85\xf7\x9c\x62\xe4\x75\x6b\x45\xa9\xd2\x9f\x05\x27\xa9\x2a\xcb\xd8\x13\x6a\xc5\xd8\xae\xc7\x26\xa5\x15\x77\xaf\x30\x55\xd3\x08\x14\x58\xce\xf7\xcd\x63\xf4\xa0\x97\xd1\xc8\xc6\x22\x30\x65\x33\x25\x8c\xc2\xc9\x0e\x19\x7c\x57\x63\x55\x5d\xa0\x0c\x41\x18\x47\x49\x3a\x85\x42\xf9\xec\xd2\x6d\x25\x0d\x61\x25\xa4\x45\x97\x36\x63\xae\xa5\xd5\xa0\x10\xfd\xe7\xb0\xe1\xe8\x66\xeb\x4d\xff\x0d\x74\xad\x71\x1b\x21\x56\x12\xad\x19\xf3\xae\xe8\x31\x92\xf1\x6e\x32\x00\xa6\x93\xa0\x86\x4e\x86\x0a\x40\xe3\x51\x66\x9b\xa0\x2e\x08\x80\xc9\x1c\x7d\x94\xf7\xdd\x40\x1f\x96\x41\x79\x6a\x60\x07\xfe\xc4\xcb\x48\xcc\x9c\xef\xf9\xee\x81\xef\xd9\xd5\x4e\xf0\x94\xda\x88\x65\xb1\x06\xf6\xc2\x1f\xf9\xf3\x64\x8c\x8b\xb3\x32\x61\x5c\xfd\x96\xba\x11\x41\x12\x9d\x7d\xd4\x0b\x46\xf4\x2e\x42\x6e\xac\x51\xe2\x84\xc3\x02\x77\x32\x25\x8c\x9d\xa7\x24\xb4\x3f\x3b\xeb\xa5\x16\x39\xda\x5b\x9e\x35\x0a\x1d\xa1\x38\x1a\xbb\x3c\xa5\x04\x24\xdc\x8a\x8b\xde\x27\xd1\x58\xaf\x4e\x42\x63\x6f\x14\xce\x25\x5f\x7a\x7d\x2d\x1d\xcd\xed\x02\xf4\xde\xe6\x6e\xfe\x2d\xa6\x8e\xda\xf0\xdb\xe1\x1f\x21\xf3\x35\x91\xc3\xae\x8c\xc7\xbb\x0a\xe0\xad\x1a\x7f\x02\x00\x00\xff\xff\x13\x26\x6f\x52\x0b\x03\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x86, 0xe, 0x94, 0xf, 0xf5, 0xd6, 0xbc, 0x4d, 0x91, 0xd2, 0xcd, 0x71, 0x7a, 0x6a, 0x8f, 0x4c, 0x1f, 0xeb, 0xe7, 0x50, 0x1b, 0xf, 0xb4, 0x63, 0xa9, 0xb4, 0x10, 0x3c, 0x21, 0x8e, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
