// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (17.423kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (40.044kB)
// assets/datasource.yaml (296B)
// assets/es_dashboard_data.json (8.51kB)
// assets/outputs.tf (487B)
// assets/variables.tf (1.13kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xc7\x64\x9a\xa4\x13\x92\x92\xed\x7c\xb9\x75\x3b\x69\xda\x74\x3a\x93\x36\x99\x6b\xef\xfa\x90\x7a\x38\x10\xb0\x92\x50\x93\x04\x0b\x80\x92\x95\x9c\xef\x6f\xbf\x01\x08\x52\x24\x45\x4a\xb4\xe2\xe6\xe3\xda\xf4\x45\x25\x76\x81\xc5\x7e\xfc\x76\x17\x80\x33\x29\x96\x9c\xa1\x04\x8f\xac\x94\x07\x6f\x47\x00\x99\x14\x33\x1e\x23\x9c\x81\x97\x24\x7e\x2c\x08\xd3\xa8\xb4\x37\x02\x90\x38\xe7\x22\x05\x33\x92\x2b\x1f\x89\xd2\xfe\xc4\x7c\x5f\xa2\x54\x66\xe0\x0c\xbc\xff\x7e\x05\xc7\xc1\xd8\x1b\x5d\x8d\x46\x8c\x68\x62\xa7\x8d\x0a\x3e\x0f\x3c\x9a\x4b\x89\xa9\xf6\xe0\x6d\x63\x9c\x92\x38\x46\x19\x71\x86\xa9\xe6\x7a\xdd\x4f\xa8\xf2\x69\x8a\x3a\xe2\x4c\x79\xe0\x29\x8c\x91\x6a\x64\x85\xd4\xcb\x8c\x46\x9c\xc1\x19\x2c\x89\x0c\x50\x45\xcb\x8c\x1a\x21\x24\x2a\x91\x4b\x8a\x05\xff\x05\xae\xa3\x8c\x70\xe9\x81\x77\x81\xeb\x82\xd1\x7c\x4b\x49\x82\x60\xf7\x75\xfb\xad\xe1\xa7\x71\xae\x34\x4a\xfb\xfd\xca\xbf\xc0\xb5\x65\x32\xba\xc9\xa7\x31\xa7\x66\x1e\x38\x03\xa3\xa5\xbb\x86\x5c\xa9\x45\xb4\x19\xb9\xb7\xbd\x2e\x4f\x95\x26\x29\x45\x0f\x3c\x92\x65\x91\x42\xb9\x44\x59\x2c\xaf\xc9\x5c\xc1\x99\xfd\x09\xf0\x93\x91\xa3\x47\x0a\x92\x65\xfe\xed\xb7\x54\xe4\xa9\x0e\x78\xca\xf0\xf2\xca\x08\x74\x35\x1a\x01\x50\x91\xa6\x48\xb5\x31\x41\x31\xcf\x2d\xf8\x65\x81\xc0\x70\x46\xf2\x58\x43\xae\x50\xda\x1d\xce\x84\x04\x91\x4b\x78\xfa\xe3\x0f\x96\x4c\xaf\x33\xbb\x9c\x52\x0b\xcf\x7e\x30\x94\xd6\xba\xd3\x3c\xd5\x79\xf1\x6d\x21\x94\x86\x33\x50\x18\xcf\x02\xb7\x49\x9e\x95\x2b\x93\x84\xc3\xe6\xdf\x19\x78\x24\xe1\xfe\x98\xd0\xc7\x63\x36\x7b\x88\xb3\xd9\x18\x1f\x8d\xa7\x0f\x3c\xb8\x05\x93\xc7\xc1\xf8\x04\x5e\xfc\xf2\xf3\x08\xa0\x54\x47\xe4\x04\x30\x9b\x35\x7a\x69\x7c\x6f\x9a\xc6\xce\x5e\x37\x61\x70\x81\xeb\x80\x33\xbb\xfb\x3c\xd5\x35\x19\xb6\x66\xb3\x04\xce\x45\x14\xd2\x5c\x72\xbd\x8e\xe6\x52\xe4\x99\xf1\x24\x38\x83\xd7\x76\xa3\xd6\xc1\x1a\xc3\x66\x9a\xd7\xe3\xf3\x80\xb3\xfb\x3b\x28\xa2\xb9\x50\x8a\x3b\xc2\x11\xc0\xb9\x51\x0c\x5b\xa7\x24\xe1\x14\x3c\x29\x84\x8e\xa6\xb1\xa0\x17\x11\xc3\x25\x37\x3e\x50\xd8\x68\x26\x64\x84\x84\x2e\x9c\xc4\x5b\x74\x96\x88\x8a\x54\x63\xaa\x1d\x0b\xc0\x52\xc4\x79\x82\x91\xe2\x6f\x8c\xde\x62\x21\x2e\xf2\xec\xee\x16\x6b\xb0\x24\x71\x8e\xf7\xc1\xab\x91\x7b\xf7\x21\xcd\xe3\xf8\x5e\x73\x22\x67\x80\xa1\x13\x19\xf2\xc6\x44\x57\xa5\x23\x58\x1c\x31\x20\x60\xa0\xc4\x04\x46\xb9\x4d\x17\x06\x35\xdb\x24\x44\x6b\x94\x89\x50\x3a\x8a\x39\xc5\x54\x61\x64\x18\x2c\x35\x43\xa5\x79\x4a\xb4\x43\x93\x70\x21\x12\x0c\x0b\x6f\x0c\x37\x7c\xb5\x29\x7c\x37\x85\xd7\x29\x88\xc4\x44\x68\xf4\xf1\x12\x69\x29\x0f\x4f\x63\x9e\x62\x65\x74\x00\x6f\xb5\x30\x68\xf7\x1a\xfe\x01\xfe\x0c\xc2\x25\x91\x61\xcc\xa7\x21\x8d\x45\xce\xc2\xd2\x87\xc2\xa9\x10\xda\x9f\xf1\x94\xab\x05\x32\x38\xff\x02\x98\x00\xa4\x0b\x01\x77\x7e\x25\x5c\xf3\x74\x6e\x83\xcb\x32\xf9\x3c\xe5\x3a\x08\x82\x3b\x5f\x80\x8a\x11\x33\x98\x18\xea\x14\xbd\xfb\xd5\x8a\x73\xd4\xe0\xfb\xa9\xf0\xe9\x02\xe9\x85\x4f\x51\x6a\x3e\xe3\x94\x68\x04\xff\x8f\x97\xe0\xc3\x42\xeb\x4c\x9d\x86\xa1\x3a\xf6\x31\xf7\x57\x68\x90\x36\x20\x09\x79\x23\x52\xb2\x52\x01\x15\x49\xc8\x70\x1a\x48\x31\xcd\x95\xce\x50\x52\xcc\x8c\xce\x02\x2e\xc2\x93\xc9\x77\xcf\x9f\x3d\x79\xf2\x6d\x30\xcf\xe6\xf0\x1f\x50\x39\x13\x40\x32\x6d\x50\x0c\x08\x63\xe0\x1f\x22\xc7\x6a\xb5\x0a\x32\xa1\xf4\x5c\xa2\xfa\x23\x0e\x84\x9c\x87\x09\x32\x4e\xc2\x0b\x5c\xab\xf0\xe9\xb3\x67\xcf\x4e\x9e\x3d\x7f\x1c\x10\x45\xf7\x2c\x69\xc7\xd4\x02\x7c\x0a\x77\xac\xfe\x7e\xf3\x18\x4e\xed\x3a\xa7\x61\x48\x32\xdd\x5e\x26\xcb\xa7\xa1\xc4\x4c\x28\x33\x08\xb7\xef\xc6\x6a\x1a\x49\x8c\x91\x28\x04\x9f\xaa\x7b\x7e\x36\x67\x73\x48\x08\x4f\x7f\xf3\xe0\x2b\x08\x51\x53\x43\x19\x16\x7e\xa7\x82\x98\x2b\x1d\xb0\xd0\x50\xd9\xdf\x77\x5a\xb2\x18\x39\xad\x1a\xd6\x90\x67\x8c\x68\xec\x19\xb7\x9e\x10\xc7\x86\x2e\x59\xab\x3f\x62\x9f\xc6\x1c\x53\xed\x3f\x08\x1e\xed\xe7\xd8\xec\xa9\x64\x9b\x4c\x06\x70\x49\x91\xa0\x5e\x60\xae\xfc\x54\x30\xe3\xc6\x99\x90\x1a\x65\xdb\x80\x2f\xa1\x16\x0f\xcc\xec\x57\x13\x19\xcc\xdf\x40\x91\x46\x6a\xf1\xc6\xc4\x2a\x35\x09\x3d\xca\x65\x7c\xb5\x99\x46\x13\x09\x97\x6f\x66\x3d\xd3\xb4\x04\x4d\x96\x35\x3a\x08\x45\xa6\xc3\x22\x51\x9c\xdb\x10\xdc\x95\xfb\x12\xd4\x92\x53\x75\x58\xfe\x73\xcc\xff\x37\x49\xcf\xd3\xc7\xc1\x65\x4c\xe4\xdc\x62\xd7\xb0\x24\x06\x5f\xc1\x18\xbe\x86\x09\x9c\xc2\x78\x60\x7e\x3c\x28\xef\x39\x5d\x6f\x72\xdf\xdf\x39\xed\xef\x54\xb2\x1f\xd7\x0f\xc0\xd2\x0d\xc6\xb5\x73\xc4\x5a\x69\x4c\xa8\x8e\x01\x53\x32\x8d\xb1\x9f\xb2\x63\x56\xc2\x98\x8d\xea\x98\x4f\x67\x22\xd5\x54\xa4\x33\x3e\x9f\xb4\xb4\x56\x2a\x86\xc5\xc1\x5c\x92\x19\x49\x89\x55\x86\x50\x2a\x74\x09\x26\x74\xdf\xa3\x87\xc1\xc3\xe0\x28\x22\x09\x7b\x78\x12\x30\x9c\xb6\x04\x60\xd9\xc5\x1c\x7c\x0e\x7b\xa9\x1b\xcb\xce\xb9\x5e\xe4\x53\xbb\x24\x4f\xa7\x39\xbd\x40\xbd\xf9\xe1\x04\x50\x61\x89\xd8\xe1\xf2\x28\x98\x04\xe3\x8a\x22\xb2\xff\x1b\xc5\x3c\xcd\x2f\xf7\x0a\x36\x94\xa9\x4f\xbe\xdf\x73\xa5\x57\x44\xd3\x85\xf9\x1f\x8c\x89\xd2\x9c\x2a\x24\x92\x2e\xa2\x32\x27\x75\x49\x3c\xb1\x12\x77\xd3\xfb\x76\x30\xb0\xa2\xf8\x85\x28\xdd\xd9\xe6\x82\x71\x59\x64\x99\xee\x89\x5a\xf4\x26\x95\xf9\x6f\x2e\x97\x33\xb8\xe6\xba\xe0\x3f\xdb\xb5\x0c\xf8\xbe\xd2\x92\x67\x3e\x15\x49\x26\x52\x4c\xb5\x3a\x6b\xa7\xf0\x8d\xcb\x32\x82\x89\x48\x7d\x89\x46\x11\xfb\x1c\xdb\xb9\x8d\xef\xb2\x62\x8b\x1a\xa5\x01\xad\x16\x11\x28\x4d\xa4\xde\x37\x71\x69\xf6\x9e\x29\xcb\x61\x37\xd9\xc0\x1c\x9e\x49\x71\xb9\x3e\x2c\x83\x5b\xd6\x22\x7f\xb7\x93\x68\xf3\x5f\x6f\x4a\xdd\x4a\xa3\x6d\x3e\xb3\x68\x21\x61\xbb\x97\x6c\x26\xd8\x2e\xbe\xce\x74\x3b\xa9\xa5\x5b\xa2\x94\xa0\x9c\x68\x8c\xaa\x92\x20\x22\x8c\x49\x54\x66\xff\x5a\xe6\x78\x50\xb2\xb5\xf2\xd6\xba\xc7\x5a\x5e\xef\x4d\xe9\x7f\xb5\x54\xfc\xe1\x8a\xbd\x4f\xa1\x08\x78\xf7\xe4\xdb\xd7\x60\xf4\x71\xa6\x73\x9e\x5e\xde\x0c\xfc\x75\x4d\x25\x13\xab\x3b\xd3\xcb\xd9\xe1\x50\x71\x8d\xca\x2f\x38\x58\xe8\xcc\xde\x62\x8a\x53\xf0\x67\x6a\x9b\x8b\x2c\x09\x8f\x0d\x63\x58\xef\x5b\xfa\xe6\xde\xd0\xec\x46\x44\x92\x44\x0e\x48\x4d\x3e\xbd\x40\x16\x49\x11\x1b\x80\x44\x77\x8c\xba\x05\x38\xd5\xd1\x64\x0b\x64\x3e\xfb\xac\x1c\xa0\x12\x0d\xba\x98\x89\xea\xb0\xb3\x52\xd5\x52\x0e\x15\x3c\x54\xcd\x12\xce\xdb\x96\xb0\x99\xc7\x98\x30\x2d\xb2\x15\xef\x30\xf0\xde\xf0\x95\x91\x51\x4c\x59\x6b\x40\x4a\xec\xee\x66\x37\x7c\x4d\x99\x36\xc7\xc6\xe5\x99\x6d\xf1\xa1\xec\x59\x84\x2d\x44\x55\x79\x90\x54\x9d\xfd\xd6\x82\x0d\x63\x4c\x30\xd5\x77\xb5\x30\xbd\xfd\x5d\x46\x34\x09\x9a\x07\xc5\x41\x79\x4c\x1c\x70\xa6\xee\xdd\x87\xf1\xbd\xca\xac\x00\xdd\x40\xdd\x81\xd1\x4e\xf0\x02\xa5\xcf\x2b\x0d\x94\x28\x8c\x53\x55\x4a\xdb\x83\xbf\xa8\xa2\x1a\x51\x27\xf8\x9a\x71\xe7\x85\x9b\x74\xd2\x0b\xa6\xb5\xd9\x7a\x60\xd4\x9b\x67\x47\xde\xbd\x5d\xc8\xbe\x63\x0e\x87\xe9\x93\x71\x1b\x88\x9d\x55\x8b\x92\xba\xc2\xc0\xed\xf3\xdc\xba\x9f\xbb\x14\x5c\x34\xcf\x94\xa2\x52\x51\x26\x62\x4e\x39\x1a\x7d\x7f\xf9\xe5\xb3\x97\x3f\x3d\xff\xe1\xfb\x11\x54\xaa\xf0\xfe\x5d\x78\x82\x77\x0a\xde\xd1\x78\x72\xe4\x4f\xc6\xfe\xa4\x76\xce\xf2\xb3\x26\xda\x1a\xde\x3b\xad\x5c\xc1\xfc\x7b\x3b\x6a\x26\x76\xef\xa9\xcd\x19\x66\x1a\x54\xa7\x9f\x57\x13\x54\xe3\xaf\x24\x4f\x29\xcf\x48\x6c\x48\x3a\xc6\xbf\x9b\xcd\x90\x9a\x55\xbc\xa7\x71\x2c\x56\xdb\x04\xff\x74\x31\x67\x48\x88\x4c\x4f\xc9\x4a\x9d\xa2\x3a\xbd\xfd\xb6\x72\xc5\xe2\xf2\x23\x70\x37\x1a\x81\x0d\x87\xfa\x78\xeb\xf2\xa3\x22\x24\xd4\xc2\x43\xc4\xd9\xd5\x69\x11\x6a\x61\x77\x60\x85\x9f\x7b\x35\xa9\xae\xdc\xef\x73\x57\x67\x39\xdd\x1a\x6f\xc5\x0c\x53\xa6\x22\x1b\x71\x9b\x6a\xa4\x07\xc9\x02\x54\x55\xe3\x5f\xe0\x54\x0f\x7e\x19\xe4\xe9\x00\x47\x93\x68\x3d\xf0\xd4\x71\xf1\xc3\x58\xa6\x40\x8a\x1e\x80\x70\x84\xad\xd5\xf6\xd4\x64\x9d\xb0\xec\x3c\xcc\x5e\xf0\x78\xea\xb8\xba\xe8\xb1\xa9\xdf\x95\x54\xa5\x84\x41\xb1\xac\x89\x6b\x23\xc6\x3b\xae\xae\x8e\x23\x57\x71\x9b\x85\xcb\x9f\x66\x6d\x57\x69\x77\xef\x3d\xa8\x68\x6d\x7c\xc4\x0e\x46\x33\xc9\x97\x26\x8d\x6f\x72\xc9\xc0\x3a\x75\x30\xa6\xd7\xd7\xb5\xc1\x39\x13\x92\x62\xc4\x50\x69\x29\xd6\x25\x08\x75\x2a\xd9\x68\xad\x08\xe2\x75\x65\xe5\xf2\x7f\x07\xda\xda\x91\xff\x19\x96\x31\x75\x9b\x9d\xdd\xc2\xcb\x77\x2f\x9f\x8f\x8c\x4c\x3b\x50\xa5\x13\x51\xea\x68\xb2\x13\x09\x36\x30\xf3\xba\x8d\x0f\xea\xf8\xf4\x05\x57\xfa\x9b\x66\x23\x56\x1f\xfe\x1e\xdd\xe8\x0b\x41\xed\xc5\x47\x3d\x9a\xcf\x1b\xcb\x74\x81\x8d\x3a\x3e\x3d\x3d\xbd\xfd\xb6\xe1\x7e\x95\x43\x15\xf9\xea\xaa\x9c\xf1\xea\x7e\xd7\xce\x76\x0a\xff\x74\x2a\xa4\xfe\x31\x8f\x35\xcf\x88\xd4\xff\xca\x1a\x15\x5d\x9d\xf0\x5b\x8c\x51\xe3\xcb\xe9\xef\x46\x4b\x3d\xfb\x1c\x32\xfa\x94\xc6\x9d\x04\xaf\xf2\x5d\xec\xd5\xa8\x61\xef\xd5\xdf\x4e\x1b\x1e\xaa\xdc\x0d\xfc\x5e\x59\xbc\xbc\x1a\x19\x7f\xdb\x06\x45\xc9\x54\x54\x86\x41\xad\x9f\x6e\x7f\xea\xab\x1e\x37\xff\xf6\x1c\x0e\x9b\x41\x36\x6d\x8f\x15\xc8\x50\x24\x99\x19\x37\xe1\xb6\x35\x6b\x67\xa8\xb2\x69\xc7\xa5\x73\x25\xf3\xf6\x74\x45\x10\xd7\xf6\x6a\x64\x71\x3f\xab\x1e\x77\x23\x5b\x4c\x94\xea\xd8\x5c\x43\x7e\x43\x63\x6a\x47\x53\xad\xb7\x3b\xfe\x3e\xa6\x82\xd8\xc0\x69\x96\xc5\xeb\x88\x27\xf6\xb6\x4a\x63\xbc\xae\x73\xb9\x1a\x8b\xe4\x5a\x44\x09\x4f\x85\x2c\x2b\xd0\x28\xcf\xe6\x92\x30\x03\x9c\x33\x12\xab\x0e\x0c\xac\xed\xd0\x03\x6f\xb3\xc7\x7e\xeb\xed\x34\x9b\xeb\x01\xb6\xed\xd6\x3c\xf0\xef\x52\x7c\xaf\xe1\x8c\xa5\x4c\x95\x31\x25\x0a\xeb\x55\x7a\x37\x43\x41\x9f\x10\xfb\xa5\xea\xa7\x1b\xda\x2d\xbf\x6e\xe8\x32\xa2\xd4\x4a\x48\xd6\xa4\x2b\xbf\x8e\x00\xd4\x05\xcf\xa2\x19\x4f\x49\x1c\xa9\x94\x64\x6a\x21\x74\x4d\xef\x1d\xb6\xa9\x06\xbb\xcc\xbd\xc3\xce\xc5\x8f\xaa\xa5\x68\x92\x37\x07\x5f\x77\x4f\x72\xbe\xfb\xaa\xa4\xa3\x29\x60\xd3\xb2\x1f\xd8\x75\x60\x56\x3e\xa0\x89\xc8\xbc\x78\xd1\x72\xad\x47\x1f\x86\x67\xf0\xb3\x8f\x9b\xbe\xda\xda\x42\x88\x77\x38\x95\xb3\x3b\xd9\xf3\xc2\xa3\xcd\x37\xe4\xbd\xc7\x80\xb5\xca\xf7\x1f\x55\x53\xd8\xcb\x58\x2a\xbf\xa2\x1c\x76\xea\x77\x5d\xc7\xb1\xf2\x59\xc7\xf9\x0b\x1e\xe5\xfd\xb5\x0f\xd4\xca\x1b\x7b\x9d\x64\xcd\x5b\x7a\x7b\x2d\x6f\x71\x62\xcf\x25\xfd\x86\x73\x33\xd6\xb8\x93\xb7\x4f\xf6\x7c\x33\x95\x9f\xce\x3f\xef\x1b\xd8\x30\xcb\xa4\x3e\xe7\xae\x43\xaf\xa6\x1b\x17\x8f\xd9\xb6\x13\xde\xc0\xcb\xeb\x7a\xd8\xef\x78\xf2\x56\xae\xe9\x17\x6b\xda\x3e\x56\x51\xc9\xb3\xf2\x8d\xd0\xd3\x2c\xab\xce\x71\xc0\x12\x59\x4b\x97\xb0\x5b\xe6\x4c\xe8\x58\xc0\x1b\x59\xe8\x9a\xdb\x58\x76\xb1\x26\x45\x12\x19\xa3\x59\xa9\x8e\x8e\x0a\x5c\x15\xe5\xa7\xda\xc7\x4c\x0a\x2d\xa8\x28\xbb\x35\x4d\xb3\x42\x77\x94\x33\x59\x84\x86\x0d\x7f\x6f\x1c\xd8\xff\xc2\xb1\x57\xb6\xe4\xbb\x56\x7c\x3c\x7e\xf8\xa0\x63\xcd\xea\xf3\xcd\xaf\x6a\x27\x7f\xd4\x5a\xb3\xf6\x71\xb3\x62\x7d\xbd\x5b\xf0\x23\x59\x4f\x11\xa4\xe9\x15\x39\xd5\x20\xd2\x78\x6d\x67\x85\x57\x55\x10\x80\xbb\xad\xfa\xda\xb1\x7c\x93\x6b\x58\x90\x94\xad\xa1\x08\x69\x4d\x2e\x4c\x60\xba\x07\xa7\x0a\x56\x5c\x2f\x44\xae\x21\x21\x69\x4e\xe2\x78\x0d\x4a\x2d\x7c\x43\xc1\x53\x2d\x40\x2f\xd0\x4d\x18\xbc\xb3\xa2\x0b\xf5\x3d\x99\x8c\xc7\x5b\xca\x6e\x0d\xd5\x15\xde\x56\x7a\x33\x1e\xfa\xd0\xbe\xf1\x98\xa2\x14\x0d\xfb\x5d\x60\x5b\xa4\xf2\x5b\xcb\xf8\xc5\xe3\xdb\xfd\x8a\x18\x14\xc7\xee\x15\xe3\xfb\x0d\x67\xdf\x2d\x3a\x38\xaa\x0b\xfa\x9b\x08\xee\x32\xae\x1e\x9d\xf4\x78\x40\x35\xd4\xe1\x01\x39\xbb\x96\x07\x54\xcf\x48\x87\x3a\xe6\x81\x62\x5d\xd3\x31\x0f\x11\x6b\x1b\x9c\x5a\x43\x1f\x46\x5b\x87\x88\xf5\xae\xda\x7a\xcf\x21\xbc\x2f\x86\xd9\xb4\x1e\xbb\xd7\x8a\xda\xfe\xde\xbf\x9d\x7d\x07\x58\xe3\xf8\x78\xfc\xb0\xc7\x1a\xd5\xd0\x8d\x5b\x63\x80\x5c\x0f\x4e\x8e\xb7\xb3\x79\x6b\xe8\xc6\xe5\x1a\x00\xbd\x9b\xae\x70\x08\x84\xda\x7e\x70\x6f\x4d\xf4\xa2\xc4\x47\x4b\x7f\x78\x79\x54\xfd\x59\x85\x93\xa9\x4e\x52\x8c\xec\xdb\x61\x24\x73\x7b\x2b\xea\x04\x57\x0b\xd7\x00\x6f\xb5\x89\x67\xe0\x39\x0b\x9a\x65\xdb\xe6\xab\xea\xae\xb6\xf1\xaa\x81\xb6\xe9\xea\xc6\xab\x47\x57\x39\xd6\x8e\xb1\xad\xe6\xcd\xf5\x9f\x3d\xad\xdb\xf5\xf6\x4d\x32\x7e\xf8\xbe\x4f\xc6\xb6\x14\xe9\xda\xb9\x1b\xfa\xa8\xf7\x5e\xc0\xe4\x8e\xed\xe3\xce\xdd\xf7\x6d\xbd\x77\xdf\x05\xa4\x7e\xf0\x6d\xbb\xaa\xcf\xd7\xc2\xaf\xbd\x5c\xdc\x7d\xb6\x3b\x10\xb4\x3b\xce\x58\x86\xf9\xd2\x7e\x97\xda\xef\x59\x5b\x0e\xb6\xad\xc5\x8a\x64\x97\x32\xcb\xbf\x0c\xd9\x3e\x35\xe9\x66\x6c\x54\xd1\xd7\x33\x45\xb3\x15\xff\x48\x4c\xe0\x1a\x8c\x1d\x26\x70\x14\x9f\xa8\x09\x36\xcf\xfd\x6f\xba\x2c\x29\x23\xab\x9d\x05\x07\xfa\x44\xc5\x5e\xe6\xa2\x6d\x5f\x38\xd8\x09\x3e\x91\x24\x76\x50\x2c\x95\x7a\xdb\x8f\x66\x7f\xa2\xfa\x9e\x8c\x9f\xf4\x25\x04\x37\xf4\x29\xa8\xd0\x3d\xe6\xfd\x00\xfa\x3b\xee\xaf\x25\x8e\xdf\x6b\x2d\xf1\x4e\xfa\xab\x97\x14\x37\xab\xbe\x8f\xbd\x16\xb9\x2e\x04\xbb\x77\x6b\x83\xfb\x0b\x47\xbf\xbf\xc3\xf8\x79\xbb\xa5\x70\xbc\xd5\x5d\xd0\xa0\x6e\xf1\xe4\xe4\xb8\xa7\x29\x2b\x47\x6e\xb0\x27\xbb\xbf\x57\xa5\xe7\x9b\xbb\xb5\x1d\x4f\x9e\x1a\x9e\x74\x35\x1a\xdd\x82\x5f\x11\x52\x44\x06\x04\x14\x66\x44\x12\x8d\xed\xa6\xcb\xb8\x30\x68\x01\x99\xc4\xa5\xe9\xc9\xe8\x9a\xc6\x9c\xba\x47\x59\x98\xd2\x35\x4c\x51\xaf\x10\xd3\xd1\x2d\x7b\xd2\x49\xb2\xcc\x71\x92\x94\x81\x13\xb2\xf8\x12\x0c\xab\x7d\xb2\xcc\x14\x9f\xd5\x1f\x01\x7c\x24\x75\xcf\xd1\x83\x7d\x75\x8f\xa3\xb8\xf1\xba\xa7\x19\x3b\xd7\x2d\x7e\x2a\x27\x1a\x10\x75\xc5\x1f\x3a\x5c\xe7\x24\x75\x72\xbd\x93\x54\xbb\xc0\xfe\x20\x7d\x65\xc8\xfe\xb4\xcb\x91\xc7\x5d\xa7\x5c\x8f\x3b\x8f\xb9\x06\x5f\x53\x7c\x80\xfb\x98\x8f\xf9\x9e\xe0\xbd\x9f\x32\xfe\x2f\x00\x00\xff\xff\xaf\x5e\xbf\xe3\x0f\x44\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0x1a, 0xcb, 0x16, 0xc6, 0x80, 0x67, 0x55, 0xe7, 0xed, 0x11, 0x24, 0x57, 0x9a, 0x33, 0x20, 0x7e, 0x8a, 0x3, 0xae, 0xfa, 0xa, 0xdf, 0x92, 0x55, 0x7, 0xc, 0xe9, 0xa2, 0xf8, 0x48, 0x9}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\xb6\xf6\xc0\xdf\xe7\x53\x10\xc2\xff\x7f\x91\x0e\x71\x16\x3b\x71\xb2\x04\xd8\x8b\xd4\x6b\xbb\x02\xcd\x96\x9b\x87\xdd\xe1\xb6\x85\x40\x4b\xc7\x32\x11\x49\x54\x49\xca\x89\xd7\x65\x9f\xfd\x82\x94\x64\x53\x0f\xb6\x65\xc5\xae\x9d\x86\x7b\xb1\x46\x47\x14\xc5\x73\x78\x78\xf8\xcb\x21\xc5\x7c\xdd\x41\xc8\xc2\x61\x48\x05\x16\x84\x86\xdc\x3a\x43\x52\x84\x90\xe5\x13\x2e\xac\x33\xf4\x51\x5d\xa1\x54\xaa\xee\xf4\x63\xe2\x8b\xf7\xa1\x75\x86\xda\x7b\x53\xa9\x8b\x05\xe6\x34\x66\x0e\x58\x67\xc8\x6a\xb5\xd0\x3b\x86\x07\x38\xc4\xa8\xd5\xb2\xb4\x62\x10\xe2\xbe\x2f\x8b\x08\x16\x83\x26\x1f\x12\xb7\x42\x4a\x1c\x1a\xf6\xa8\x4f\x99\xac\x93\x79\x7d\xbc\x7b\xb0\x87\x3a\xed\xf6\x1e\xea\x74\xbb\x7b\xa8\xfd\x4a\xaf\x3a\xc4\x81\x7a\xf7\xf9\x54\x1d\xf4\x2f\x74\xee\x03\x13\x5c\x2f\x27\xc6\x91\x2a\xe7\x62\x3e\xec\x53\xcc\x5c\x2b\xbd\xf7\xa8\xfe\xfd\xbc\x83\xd0\xa3\x2c\x6e\x81\x4b\x44\xa1\xb5\x96\x17\x82\x78\xef\x5a\x67\xa8\xd3\x3d\xea\x24\x12\x86\xa3\xe1\x0d\xa5\xbe\x20\x51\x66\x13\x8b\xa8\x22\xc9\x8f\x02\x98\x6a\x8d\xbc\xd9\x3d\x3d\x3c\xf9\xe9\xf4\xa4\x7b\x72\xd8\x3d\x54\x77\x7d\x12\xde\x49\xab\x7f\xfc\xac\x2e\x23\x1c\x82\xcf\x27\x76\xcf\xac\x6e\x61\x9f\x60\xae\x2c\xa1\xba\xe8\x31\x53\xc7\xea\x63\x25\x19\x60\x9f\x4f\x0c\xa7\x34\xfb\x00\xa1\x27\x86\xf2\x9d\x07\x39\x39\x54\x15\xd7\xbb\xce\xa7\xd8\x15\xc0\x45\x2b\x15\x4d\x8a\x55\x98\x23\x91\x33\xa6\x3a\x28\x5f\xe9\x80\xf8\xbe\xee\x22\x4a\xf0\x8e\x61\x97\x40\x28\x1d\x6b\xda\x2a\x8f\x11\xf7\x92\x4e\x5d\x2f\xf1\x07\xeb\x0c\x9d\x6a\x9d\x76\x2f\xeb\xea\x68\x82\x07\xbd\x0e\x84\xac\xb1\xbc\xce\x3a\x72\x52\xf7\x90\xb8\x2e\x84\xd7\xc0\x48\x85\xde\xaa\x93\x4e\x26\x97\x3e\x78\x10\xba\xf9\x66\xe0\x91\x57\x7c\x0c\x21\xcb\x89\x19\x4b\xb4\x28\xde\x09\xf0\x43\x95\x94\x84\x15\x52\x3e\xa4\xf7\x65\x97\x17\x54\x60\xbf\xa2\xf4\x08\xfb\xf1\x54\x87\x92\xa2\x3e\x09\xd5\xdd\x5c\xcf\x48\xe1\x3d\x71\x13\x37\xd0\xa5\x9a\xcb\x25\x43\x27\xf6\xfd\x4b\x4a\x42\x71\x41\xd5\x30\xb4\x1c\x1a\x86\xe0\x08\x70\xa7\xdd\x4f\xa3\x7c\x84\x98\xb8\xce\x87\x49\x7d\xa5\x56\x45\xc0\x1c\x08\x05\xf6\xa0\x64\xfc\x48\xbe\x4e\xba\x43\x2c\x9f\xed\xe6\xe5\xe5\xbe\x62\x10\xba\xc0\x40\x05\x82\x81\x4f\xc5\xb4\x5d\x5c\x75\xee\xef\x23\x60\x8c\xb8\x50\x50\x8c\x47\xd8\x81\xaa\xa1\xc0\x05\x76\xee\x4a\x6f\xe1\x02\xa2\x08\xdc\x0f\x24\x2c\x37\x58\x60\xe6\x81\xe0\x5a\x4c\xd4\xa3\xa2\x1c\x07\x0f\x51\x12\xa7\xb0\x80\xdd\x00\x0b\x01\x2c\xa0\x5c\xd8\x91\xfc\x9f\xea\xd6\xaf\x24\xe4\x02\x87\x0e\xfc\xfc\xcf\x27\xeb\xff\x38\xb0\x11\xb0\x4f\xd6\xe3\xc7\x76\xf0\x59\x8f\x64\x72\xb0\x50\x16\x60\xe9\x60\x96\x20\x01\xd8\x89\x8e\xf9\x22\x24\x14\xc0\x46\xd8\x7f\x8b\x1d\xa1\xc6\x5f\x3b\x77\x3b\xf1\xe6\xb7\x93\x7a\xbe\x4e\x5e\xfe\xf8\x98\xaf\x28\x00\xc1\x88\x23\xcb\x54\x36\x3a\x5f\x98\xc1\x40\x85\x3f\xeb\x3c\x2f\x97\x96\x93\xfd\x38\x91\x3d\xee\xcd\xb7\x12\x8f\x83\xdd\x66\x96\x5a\xbb\xa9\x6e\xca\x6a\x37\xb3\xd1\xeb\x45\x36\x4a\x7f\x9a\xfa\xab\x18\x32\xe0\x43\xea\xbb\x05\x3f\x96\xaa\xbd\x65\x34\xb0\xce\x90\x1c\xab\x39\xf9\x15\x78\xe9\xc0\x2c\x3c\x70\x3d\x24\x03\x51\x7e\x42\xa8\x10\x6e\x5d\x52\x2e\x38\x8a\x80\xa1\x6b\x70\x68\xa8\x8d\x74\x31\x99\xcc\xb4\x91\x1e\xf0\x2b\xe0\xd4\x8f\xd3\x99\xac\x1c\xcc\x30\x03\xb7\x1c\xce\x38\x65\xa2\x10\xa9\x55\x24\xb3\xb3\x59\x98\x84\x2e\x19\x11\x37\xc6\xbe\x55\x0a\x1f\x59\x19\x35\xc5\x4e\xdb\xf7\x80\x1f\x48\x21\x0e\xf5\x63\xe7\x2e\x19\x9c\xba\xb2\xb2\xd9\x69\x40\x93\xf6\xa8\x80\x85\x42\xe9\xea\x90\x3c\x09\xbd\x15\x11\x6e\x8c\x1f\x60\x4e\x4c\x98\x3a\x27\x1f\x4a\x4b\xe4\xfd\x0e\xf7\x41\x86\x7a\xab\x47\xe3\xb0\x78\x8f\x7a\xaf\x31\x87\x92\xaf\x26\x13\x4c\xbe\xd9\x93\x19\xa6\x24\xd6\xf4\x59\x38\x30\x6b\x35\xb5\xf4\x86\x35\xb6\xb3\x34\x38\xc6\xe5\x7e\xc7\x3e\xf1\xaa\xdc\x51\xc9\x3f\xc0\x68\xd2\xe8\x1c\xe2\xa5\x26\x30\x74\x95\x5d\x57\xd2\x55\x4e\xd0\x14\xaf\x34\xfb\xcc\xe6\xab\xc2\x78\x5b\x84\x57\x85\xe2\x89\x4f\x15\xe3\x4e\x33\xb8\xd2\x3c\xd0\xb0\xd5\x33\x60\xab\xa1\x10\x91\xcd\xe0\x4b\x0c\x5c\xf0\x6d\x80\x2c\x94\xbd\x1d\xd5\xc2\x2c\xd5\x7e\x35\xc4\xf9\x37\xa7\xad\x25\x6d\xb7\x35\xd8\x55\xd7\x66\x5b\x4d\x5f\x57\xa9\xdd\x0d\x80\x19\x00\x5b\xa6\xa9\x06\xc0\x5e\x0e\x80\x15\xd3\x5b\xa7\x0d\xf8\xeb\xb8\x06\x7e\x99\xf4\x96\x41\xb0\xfa\x08\x56\x9c\x89\xef\xa1\xcf\xa9\x0a\xfe\x73\x19\x62\xcb\xf2\x5b\x95\x4d\x5f\x23\x7c\x35\xb4\xda\x26\xa0\xeb\x79\x00\xd4\x6f\x71\xd0\x07\x86\xe8\x00\xf5\xb2\xc1\x8c\x7e\x81\x11\x71\x80\xa3\xdd\xff\x40\xff\x5a\x59\x37\xbb\x29\xdf\xf0\xca\x00\x96\x01\x2c\x03\x58\x06\xb0\x10\x9a\x95\xe1\x6a\x42\x58\x6d\x43\x58\x86\xb0\xd6\x45\x58\x6e\xdf\x0e\x30\x17\xc0\x6c\x67\x3a\x91\x3d\x27\xce\x9a\xa3\xc0\xb7\xa1\xad\xe5\x2d\xb8\x35\x89\xae\xe5\x6d\xf7\xbc\x88\x4d\xed\xd0\x11\x14\x5d\x28\x25\xd1\x2f\x58\xe0\xbe\x9c\x69\x0d\xa6\x19\x4c\x33\x98\x66\x30\x0d\xcd\xc8\x83\xb5\x7f\x6a\x82\x69\x86\xd3\x0c\xa7\xad\x96\xd3\xaa\x16\xd5\x70\x44\xec\x84\x13\xe2\x20\x59\x36\x43\xfd\x31\xda\xcd\x48\xe3\x15\xfa\x11\xcd\x7d\xcc\x91\x11\xb8\xea\xc1\xa5\xa1\x24\xdd\x51\x5b\x70\xaf\xe5\x69\x05\x8f\xbc\xd6\xd2\xeb\x9a\xba\x19\xd6\xc4\x79\x43\xc2\x05\xf5\x18\x0e\xec\x2f\x31\x0e\x05\xf1\x61\xf7\x60\xff\xf4\x74\x6f\xbe\x7d\x93\xf9\xb9\xc2\xc0\x7b\x3e\x34\x58\xe2\x9c\x69\xe4\xa2\x15\xa3\xd3\xd3\xd6\x6c\x74\xd6\x00\x6e\x3b\x58\xed\xfc\xf2\x3d\x4a\x97\x28\xd1\x0d\x09\x00\xed\x5e\x2b\x3c\x36\x39\xb4\x35\xc3\xd9\x0c\x30\x33\x4c\x66\x98\x6c\xab\x99\xac\x73\xd2\x80\xc9\x0e\x8f\x0c\x93\x19\x26\x5b\x3b\x93\xb9\x7d\x9b\x0b\xca\xa0\x09\x98\xe5\x9f\x35\x74\x96\x49\x56\x4a\x67\x79\x23\x1b\x44\xab\x85\x68\xd7\xd2\x62\xa8\x87\x7d\xdf\x10\x9a\x21\x34\x43\x68\x86\xd0\xf2\x84\x56\x5a\xdc\x6c\x94\x36\x3b\xec\x18\x44\x33\x88\xb6\x1e\x44\xcb\x06\x53\x6e\x27\x7a\x6d\x48\x9b\xf3\xb4\xc1\xb4\x4c\xf2\x74\x4c\x9b\x63\x66\x03\x6a\x0d\x73\x69\x3d\x5f\xc6\x79\x43\x6a\x86\xd4\x0c\xa9\x25\x37\x5e\x34\xa9\xad\x24\x97\xd6\x3e\x34\xa0\x66\x40\x6d\xa5\xa0\x46\x4a\xe7\x33\x30\xea\x00\xe7\xb6\x13\xc5\x36\x57\xdf\xac\xd5\xf8\x6e\xf0\x07\xd4\x3e\x38\xd8\xdc\xae\xb4\xfa\xa8\xb4\x49\x46\xe8\x5d\xde\xa2\x5b\x41\x7c\xf2\x97\x3a\x2a\x08\x5d\x61\x01\x68\xf7\xff\x0d\x22\x6c\x6e\x2f\xd4\xdc\xee\x40\x06\x1d\x90\x41\x87\xcd\xa3\x43\x29\xc9\xd3\x88\x1d\xba\x06\x1d\x0c\x3a\xac\x14\x1d\x3c\x6a\x07\x10\x70\x81\x05\xb7\xb1\xef\x53\xc7\xee\x8f\x05\xf0\x0d\xed\x59\x3f\x97\x2d\x98\x93\x32\x98\x66\x5f\x66\xb4\x7b\xad\x1b\xd6\xf5\x77\xaa\x2e\xb1\x49\x18\x73\x58\xad\xc5\x56\x95\xc8\xba\x96\x0d\x5c\xaf\x3d\x17\x6e\x62\x5f\xc2\x9e\x43\xc0\xd1\x36\x9b\xf3\x57\xc0\xd1\x7a\xad\xd9\xdb\x66\xec\xbd\x80\x80\xb2\x31\xba\xe5\x32\x3a\x1a\xd4\x5d\x27\xea\x2a\x4f\x31\x19\xb1\x59\xed\xd4\x89\xe2\x3b\xe5\xda\xdc\x10\xdc\x44\x5e\xeb\xf0\xb8\x01\x9b\x76\x4e\x6b\xc0\xe9\x2a\x0e\x10\x5b\x11\x9a\x3e\xf5\x04\xb1\x12\x86\x4a\xc1\x37\x22\xd0\xce\x77\x44\xa0\x3c\x0e\x76\x49\xe8\x30\xc0\xbc\xb8\x88\x25\x63\x31\x8d\x6b\x9d\x79\x35\x6f\xf9\x70\x99\xc3\xbf\x34\x58\xac\xcd\x31\xab\xd1\x60\x7e\x9b\xe7\x1f\xff\xb0\x1d\x90\x90\xac\x96\xa9\xa5\x33\xa9\xb3\x3a\x31\xeb\x82\x84\xb1\x58\x84\x0c\x86\x09\x2a\xfd\x6b\x0b\x66\x5b\x43\x05\x5b\x43\x05\xcf\x3a\xdb\xd5\x88\x28\xcc\xa6\x73\x93\xed\x5a\x2d\x6b\x78\xd4\xf6\x28\xa3\xb1\x90\x5d\xb2\xc5\xe7\x32\xe4\xda\xb9\xc6\xe3\x17\xea\xd8\x63\xb3\xa7\x2c\xd4\xb1\xc4\x33\x39\x4c\xe1\x1d\x45\x57\x45\x45\x4c\x0a\xc5\x9c\x9c\xb0\x0d\x64\xf7\x3d\x02\x53\x6e\x3c\xba\xc0\x1d\x46\xa2\x74\x44\x4d\x13\x69\x1b\xc9\xaf\x1c\x75\x1b\xd0\x50\xa7\xce\xb9\x08\x33\xf3\x2b\xc5\x4c\x4a\xed\xf3\xd9\x19\xf1\x86\xe2\xba\x32\x8b\x6e\x32\x2f\xcf\x9b\x86\x26\x5b\x87\x43\xea\x82\xed\x44\x71\x35\x01\xec\xc9\xb8\xfe\xf3\x27\x2b\xe6\x35\xf3\x2d\x73\xd6\x5c\x64\xf9\x0a\x38\xaf\xa0\x82\x5b\x0e\x0c\xd5\xda\x2d\xb4\x14\xf1\x2c\xa1\x2f\x1f\x73\x01\xc1\xd3\x34\x2e\xad\xca\xa9\x3a\xeb\xe8\xf5\x7a\x6d\x7a\x11\xd7\x87\xd5\x6a\xf5\xde\xf5\xa1\x8e\x4e\xbd\x35\xe9\xf4\xcf\x27\x8b\xb0\x2f\x7f\x73\x3a\x10\xf2\x5f\x42\xef\x31\x11\xab\x55\xf1\x77\x31\xac\xe7\x8f\xbf\x6c\x4b\x32\xee\xf2\x16\x7d\xa0\xd8\x45\xbb\xed\x60\xd1\xee\x34\x03\x94\x95\xbe\xb8\x75\x94\x66\x68\x72\x4b\x68\x72\x23\x39\xb4\x46\xd4\x78\xf8\xf2\x4e\xd3\x32\x78\xb8\xf6\x85\x39\xfd\x8f\xba\x2c\x5e\x96\xe3\x02\x8b\x98\xdb\x0e\x75\x17\xad\xcc\x61\x0f\x42\x81\x5a\xe8\xeb\x57\xa4\x3d\x84\x1e\x1f\xd1\x8a\x57\xe9\x66\x9e\xe8\x35\x03\x33\xb4\xd6\xc8\x1b\x47\xfb\xfb\x7f\x77\xf7\xf7\x1b\xab\x19\x45\x55\x4a\x6e\xf9\xf2\xde\xaf\x37\x37\x97\xe8\x8d\xea\x79\xb3\xb4\x67\xd0\xc2\x2c\xed\x3d\x5f\xb6\x28\x26\xa4\xba\x47\x0d\xd0\xa2\x33\x5d\x19\xca\x32\xfe\xf9\xd4\xda\x4b\xf8\x3b\x82\x06\x36\x56\x03\x1b\xbb\xf9\x5f\xf8\x43\x10\xf7\x94\xdd\xd9\x82\xe1\x90\x07\x44\xcc\xdd\x14\x5c\xf5\x6b\xfe\xab\x1f\x7e\xaa\x5e\x94\x2a\x6f\xa3\x5c\x76\xb9\xea\xcf\xe4\x2b\xa3\x55\xef\x22\x9a\x61\x01\x06\x0e\x90\xd1\xfc\x5d\xd1\xb5\x0c\xd0\x28\x2b\xb7\xa4\x6d\xae\x96\xb1\xcd\xb6\x70\xcd\x6f\x89\xa5\xd1\xd5\x9f\x3f\xa6\x7d\xbb\x68\x7d\xce\x40\x4d\xa5\x27\x6b\x7b\x98\xa3\x19\x3b\x98\x0d\xd2\xbc\x44\xa4\x71\xc1\x21\x01\xf6\x8b\x1e\xbb\x99\x34\x4a\x33\xd6\x59\xed\x47\xfb\x32\x16\xbf\x09\x22\x31\x9e\x71\xef\xbf\xc0\xe8\x13\xb3\x2f\x6b\x58\xb7\x33\x99\x99\x6d\x81\x25\x45\x08\x81\xfa\x26\xc7\xbe\x80\xe0\x66\x4e\x1e\x06\xb5\x50\xa1\xf4\x5b\x06\x50\xaf\xf0\xeb\x78\x30\x00\x36\x8b\x3a\x0a\x85\x7b\xd8\x19\x82\x5b\x6f\x13\xd1\xaa\x56\x08\xdd\x95\x53\xd8\x12\x96\xad\xb1\x61\xfb\x79\x81\xd0\x12\x1f\x79\x19\x02\xaa\xf4\xa2\x5a\x5f\x71\x19\x06\x7a\x89\x0c\xb4\x11\xd6\x39\x3e\x6c\xc2\x3a\x27\x35\x58\xc7\x64\x70\x1a\x42\x89\x1f\x7b\x24\xfc\x03\x18\x4f\x77\xa2\x1d\xef\x1f\xef\x77\xac\x17\x00\x2d\x59\x56\x83\x0b\x2c\xec\x1b\x27\xb2\x7b\x31\x63\x6f\xb8\xc0\xfd\x5a\xf3\xeb\x4a\x90\x41\xbd\xce\x27\x7c\xb8\x06\x72\x20\xb9\xdc\x4d\xa6\xe5\x9b\x07\x61\xdf\xf4\x2e\xb3\x6f\xa2\xe6\x25\x70\xd6\xa0\xef\xe4\x53\xac\xa5\x39\x64\x81\xb2\x3c\x0e\x4a\xaa\x2e\xec\xd0\xa6\x7b\x6f\x12\x94\xd2\xfa\x6e\x35\xdb\x8b\x9e\xdc\x61\x4f\xd3\x27\x7b\xc3\x96\xef\x23\xba\xe9\x5d\xea\x7f\x06\xd0\x70\xa1\x59\xee\xfb\x4e\xb8\x70\x27\xad\x56\x8e\x39\x39\x9c\xa4\xda\xed\x83\xc4\xc3\x2d\xee\x0c\x21\xc0\xd3\x79\xba\xd3\x49\xc4\x62\x9c\x0c\x0b\x17\xb3\xbb\xa4\xa4\xc0\xde\xb4\xe7\xb5\x53\x81\x53\xe3\x69\x92\x56\x04\x6c\x60\x4d\x5e\x2b\x20\x88\x7c\x2c\x48\xe8\x4d\xd4\xb1\x7c\xc2\x85\xe6\x46\x39\x25\xfd\x3f\xa4\x03\x96\xbd\x75\xca\x5e\xb9\xbe\x14\xf0\x20\xca\x8b\x1d\xa3\xb4\x8e\x8f\x9a\x10\x21\xcb\xd2\x2e\x3f\x57\xb9\x49\xcd\x6f\x11\x55\xb2\x6f\x40\x42\x92\x6d\xb4\x57\x4e\x63\x27\x43\xa7\x72\x13\x66\x16\x36\xf5\xd0\x40\x42\xc7\x8f\x5d\x38\xf7\xab\xc0\x6f\xf2\x25\x47\x12\x8c\xf5\xaa\x82\xd8\x17\xa4\x3c\x70\xd3\x41\x5e\xf1\xc0\x14\xee\xa6\x31\x11\x21\xeb\x4b\x0c\x6c\x5c\xaf\xf5\x53\xdf\x69\xe7\xa4\x1e\x3c\x14\x8c\x6f\xf1\x3b\x12\xdd\x32\xff\x7a\x1c\x3a\x55\x39\xb9\x72\x84\x14\xd8\x53\x5d\xce\xff\x9d\xb5\xc7\xca\xdf\x2d\x35\x5c\xca\xaa\x0b\xa7\x21\x34\xd1\x4c\xbb\x11\x73\xb8\x49\x2a\xca\x65\xf7\x76\x32\x47\x78\x4c\x5c\x95\x28\x0b\xa6\x4e\x3a\x48\x66\x18\x2b\xa4\xf7\xad\x76\x37\x3b\xf1\xda\x12\x34\x15\x5a\xb9\xe7\x22\xe2\xdc\x29\x40\x4d\x9f\x4e\x2d\x66\x67\x4b\x4b\x7a\xd8\xb4\xba\xda\x04\x93\x8d\x45\x75\x71\xa8\x5f\xb4\xa7\xa7\x6c\x5b\x5d\xed\xe7\xb6\x7e\x71\x78\xa0\xdf\xd1\xe6\x8d\x8e\xf6\x73\xdb\x4d\x3c\xff\x73\xa6\x03\x09\xc0\xd6\xbc\x62\xe1\x5b\xf4\x8a\x8f\xf5\x8a\xf5\xb7\x74\x8e\xf4\x0b\xed\xc3\xcd\x13\x57\x6f\x6f\xd6\x96\x9c\xf9\xfe\xa2\x0a\xba\xad\x3e\xa3\xf7\x3c\xf5\x5e\x2d\x65\x33\x09\x2e\x6a\xb3\x6f\xeb\x06\xb8\x40\x97\xc0\x54\x20\x97\xb0\x77\x41\x43\x22\x28\x93\x41\x46\x3d\x19\xab\x5f\xf1\xac\x83\xe4\xbf\x76\x3b\x91\x8e\x26\x71\xee\x68\xe7\x71\xe7\x7f\x01\x00\x00\xff\xff\x30\x87\xdf\x20\x6c\x9c\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0x7d, 0xb6, 0xa9, 0x64, 0x71, 0x6e, 0xce, 0xb8, 0x31, 0x70, 0x59, 0x72, 0x15, 0xc2, 0x72, 0xbe, 0x2a, 0x68, 0xad, 0x28, 0xf6, 0x36, 0x93, 0xe4, 0x1f, 0x1e, 0xc5, 0x58, 0xe1, 0xa, 0xbc}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _es_dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xf8\x30\x74\x40\x82\x5a\xce\x52\x04\x7e\x4b\xd7\xb5\x28\x90\xa2\xdd\x32\xec\x25\x08\x0c\x5a\x3c\x96\x38\x53\xa4\x40\x1e\x39\x76\x0b\xff\xf7\x81\xd4\x8d\xba\xb4\xc9\x8c\xac\x6b\x51\x3d\x45\xfa\x78\x48\x7e\xe7\xfa\x21\xd6\xa7\x13\x42\x28\x53\x4a\x23\x43\xa1\x95\xa5\x0b\xe2\x20\x42\xa8\x14\x16\xe9\x82\xdc\xfa\x37\x52\xa1\x7e\x65\x55\x08\x89\x6f\x15\x5d\x90\xe8\xb4\x45\x39\x43\x66\x75\x61\x62\xa0\x0b\x42\xcf\xce\xc8\x1b\xc3\xd6\x4c\x31\x72\x76\x46\x03\x33\x50\x6c\x25\x9d\x09\x9a\x02\x02\x3c\x15\x7c\x04\x15\xb1\x56\xbf\x6a\xa9\x8d\x3b\xd3\x24\x2b\xf6\x6c\x76\x4a\xe6\x51\x74\x4a\xe6\x17\x17\xa7\x24\xfa\x39\x3c\x5a\xb1\xcc\xdf\x7d\xd5\xba\x43\x7e\x22\x57\x12\x0c\xda\xd0\x0e\xf7\xb9\xb7\xe3\xcc\xa6\x2b\xcd\x0c\xa7\xd5\xda\xc1\xff\xbd\x3b\x21\xe4\xe0\xcc\x29\x70\x81\x3d\xb6\x34\x51\x80\x6f\x39\x5d\x10\x55\x48\x59\x22\x86\xe5\xe9\x9f\x5a\x4b\x14\x39\x5d\x90\x99\x07\x85\x33\x39\xf7\x8f\x52\xa8\x8d\x8b\xeb\xed\x9d\x7f\xcd\x99\x02\x69\x9b\xc8\xd6\x71\xa5\x4c\x0a\x66\xbd\xaf\x3e\x09\x87\x9a\x30\x5d\x31\x8f\xac\x99\xb4\x4d\x68\x3c\xf7\x6b\x50\x09\xa6\x2e\x0d\xb3\x0e\x0e\x63\xe6\x41\x72\x6a\xe6\x7e\x65\x2d\xa4\x0c\x33\xe9\x81\x37\x86\x71\x01\x0a\x6b\x77\xfc\x42\x62\x04\xff\xa0\xdb\x0a\x29\xd3\x46\x17\xe4\x32\x88\xed\xbd\x3b\x6b\x1e\x00\xbb\xf0\x0c\x42\xe8\xde\xbd\xd7\xf1\x6e\xce\x4e\x05\xe7\xa0\x6e\xc0\x88\x11\xf2\x3e\x96\xcd\x25\x54\x42\x02\x8a\x77\x69\xb0\x6d\xd2\xdf\x46\x08\x8d\x0b\x63\x4a\x2f\xfa\x2b\x19\xdb\x8d\xa1\x42\x8d\xa0\x36\xd5\xf7\xc3\xca\x44\x8d\x4c\x8e\x58\x6f\x99\x2c\x5a\x1f\x06\x8e\x4a\xa1\xfc\x6a\x78\x9a\x07\xef\x05\x2f\x73\xd9\xa0\x2e\x4d\x1f\xb4\x50\xf8\x4e\xfb\xd6\xf0\x40\x53\xc7\x54\xe7\xdd\x86\x6d\xf2\x7c\xdd\xd4\xdb\xe0\xf6\x1c\x4c\x0c\x0a\x59\x02\x83\x20\xe7\xee\x26\x97\xf6\xc2\xed\x9d\x77\xf1\x61\x4e\x0c\x28\x0e\x06\x7c\x5f\xae\xa5\xc6\x96\x97\xf5\x49\x7c\xbf\x05\x63\x04\x87\xb6\xf0\xcb\xc5\x9c\xc5\x30\x56\xb7\x16\x59\xbc\x19\xdc\x62\x11\xf2\x1c\xf8\xb5\x50\x43\xc2\xc8\x4c\x02\x68\x83\x11\x15\x0e\x29\xd7\xbd\xbb\xbc\x1c\x1b\x0c\xe1\x19\x48\x66\x51\xc4\x16\x98\x89\xd3\xa5\x50\x5c\xc4\x60\x97\xd5\xeb\x1a\x30\x4e\x97\x3e\xa3\xb7\x51\x76\x17\x0e\x95\xa6\xde\x5e\x6b\x93\x31\xac\xcf\xeb\x5a\x18\x58\xfb\x91\x40\xaf\x68\x03\x1f\xaa\xa7\xd6\x77\x4c\x0d\xd8\x54\x4b\xde\x8b\x09\x8a\x0c\x5e\x1b\x9d\xf5\x3b\xd3\xe1\x7f\x40\x52\x25\xb9\xb7\xe1\x26\x15\x6b\x1c\xee\x40\x3f\xac\xe8\xef\x05\x98\x3d\xe9\x10\xa5\xd8\x4c\xa8\x4f\x61\x6d\x33\x03\x7c\x58\xdd\x56\x1b\xec\x35\xae\x2f\xec\x65\x3d\x3b\x5d\x04\xb7\x82\x17\x4c\xd2\x41\x95\xd5\x36\x7e\x30\xb6\x04\x76\x6c\x27\x7a\xe5\xba\x2a\xe2\x4d\x99\xc3\xd0\x0f\xd7\x89\x55\xc9\x3b\x57\x47\x46\x7c\xcf\x7a\xbc\x43\x9b\x4e\x1c\x69\x84\x3d\xdb\xc1\x17\x4a\x67\xdd\x24\x5b\x69\xd5\x4b\xb6\x64\x2b\x90\x75\x90\x05\xd8\xe7\xb6\xb7\xae\x93\x97\xcc\x42\x57\x1d\x9b\x91\xd3\x65\xde\xcc\x9c\x01\x1c\xb8\xd4\x96\xd4\xe9\x43\x6c\x6d\xea\xf2\x36\x4a\x77\x70\xc3\x7f\xc8\x73\x50\xfa\xfb\x61\xea\x99\x14\xc9\xd8\xb4\xf5\xf8\x35\x6c\x1b\xd2\x1d\x6d\xae\x42\xf0\x23\x88\x66\x07\x38\x56\x35\x7f\x99\x54\x73\x52\xcd\xa7\x56\x4d\xa1\x38\xec\x84\x4a\xca\x87\x47\xeb\x66\xbd\xed\x11\xda\xf9\x99\x41\xf7\x6f\xb8\x71\x90\x80\xf0\x68\x72\xde\xdc\x57\xc6\x38\xbb\x97\xdf\x88\xb2\xbf\xd2\x71\x91\x81\x42\x4b\x6a\x4f\x9f\xd7\xd4\x27\xbd\x7f\x02\xbd\xff\x82\x82\xd2\xf7\xf9\x24\xf6\x93\xd8\x7f\x95\xff\x90\x2f\x8f\xd0\xfa\xf9\xa4\xf5\x93\xd6\x1f\xa5\xf5\xe3\x52\xca\x75\xdc\x9f\x76\x7d\xd1\x1c\x58\x1c\xa3\xe6\x9f\xbf\xbd\x12\x71\xee\xcd\x1f\x64\x42\x2a\xeb\xef\x4b\xc1\x03\xbe\x93\x64\x3f\xb5\x64\x7f\x4d\x1d\x9c\xf4\xfa\x07\xd2\xeb\xc1\x3f\xe7\xc7\x08\xf6\x8b\x49\xb0\x27\xc1\x7e\x42\xc1\xb6\xa8\x0d\x2c\xad\xf8\x08\xcb\xd5\x1e\xe1\x01\xf1\x76\x76\xdf\xf8\xcf\xd8\x37\xce\x21\x5e\xea\x24\xe9\xf0\x9d\xa4\xf2\x28\xa9\xe4\x10\x8f\x55\xc6\xa4\x96\xff\x87\x5a\x9e\x54\xc7\xba\xbe\x73\x2d\xe5\xbc\x8e\x66\x65\x6e\xa8\x8d\x53\xc8\xd8\x5f\x60\xac\xd0\xee\xec\xf9\xbc\x84\x71\x2f\xab\x6f\xd7\x66\x53\x5a\x22\x4b\x82\xaf\xcb\x08\x59\x2e\x19\x0a\x95\x0c\xbf\xe4\xb7\x1f\xb6\x7d\x21\x36\xeb\xeb\xb2\x6b\xa9\xd2\xf7\x67\xd1\x45\x56\x05\x9d\xa2\xae\x40\xda\xd9\x97\x8b\x78\xe3\x87\x64\xb5\xbb\x62\xbf\x14\x0a\xc1\x6c\x99\x0c\x0b\x91\x5e\xb4\xa5\xd6\xf8\xe6\x5f\xce\xc3\x97\x28\x6b\x9f\x2f\x82\xe7\x28\x7c\x39\x9f\x85\x2b\x41\x27\xce\x83\xe7\xa8\xfa\x96\xdf\x75\xf5\xa3\xf6\xc3\x96\x56\x01\xab\xc7\xcb\x6f\xe1\x14\x25\x99\x56\x02\xb5\xa9\x7f\xa0\xa4\x85\xd7\x68\xfa\xea\xf2\x3a\x7b\xf1\xf7\xe6\x5d\x15\xed\x6d\x93\x91\x68\x76\x72\xf8\x27\x00\x00\xff\xff\x22\xec\x09\x54\x3e\x21\x00\x00")

func es_dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_es_dashboard_dataJson,
		"es_dashboard_data.json",
	)
}

func es_dashboard_dataJson() (*asset, error) {
	bytes, err := es_dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "es_dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x46, 0xe9, 0xd1, 0x18, 0xcb, 0xff, 0x63, 0x5e, 0xd6, 0x30, 0x59, 0x59, 0x16, 0x1e, 0xc9, 0x1c, 0xa7, 0x6b, 0xe1, 0x2e, 0x3, 0x1b, 0x66, 0xeb, 0xb9, 0xfa, 0xec, 0xe6, 0x5f, 0xb2, 0x5a}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbd\x6a\xc4\x30\x10\x84\x7b\x3d\x85\xb8\x32\x85\x1a\xd7\xa9\x52\xa6\xcc\x03\x2c\xeb\xd5\x90\x18\xff\x09\xed\xea\x12\x13\xee\xdd\x03\x3e\x0b\xee\xb0\xe3\x6e\xe1\xdb\x6f\x66\xe6\x62\xa9\x98\xbf\x74\x93\x1a\x4f\x02\xbd\xf8\x5f\xe7\xfd\x95\x87\x02\xff\xea\xf9\x5b\xa9\xa2\xc0\x29\x91\x22\x5f\x91\xc3\x8b\xbb\x39\x57\xdd\xd8\xbe\x0d\x45\x0d\x79\xef\xe6\xa8\x24\x77\x18\x62\x5b\xcf\x47\x99\x3f\x31\xd9\x59\xeb\x30\x73\x34\xa8\xd1\xfa\xf9\xdc\x3c\xc2\x72\x27\xfa\xb1\x8e\x3a\xc9\xd8\xfe\xb6\xf5\x8f\x09\x29\xcf\x3f\xcb\x89\xb9\xf2\x03\x0f\x03\xab\x75\xf2\x5f\xf3\x86\x15\x9c\xe5\x8b\xe2\x3c\x72\x37\x05\x1c\x0d\xd0\xa6\x2d\xd2\xc3\xf6\x19\xda\xd0\x1d\x85\xfa\xf3\xec\xbd\xe3\x68\x38\x8f\xc4\x22\x50\xa5\x1e\x4b\xd0\xa6\xc7\xe2\x6e\xee\x2f\x00\x00\xff\xff\xb7\xfc\x46\xbb\xe7\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x8d, 0xd8, 0xdb, 0x8c, 0x7, 0x4e, 0x5b, 0x95, 0x0, 0xb9, 0xa4, 0x7f, 0xf0, 0x75, 0xef, 0x99, 0xf4, 0x6, 0xf9, 0x7b, 0x9, 0x2c, 0xad, 0x62, 0x14, 0x9, 0x84, 0xa, 0xd1, 0x27, 0x2f}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcd\x8e\xd4\x30\x0c\xbe\xf7\x29\xac\x70\x85\x6a\x66\xa5\xd5\x8a\xc3\x1c\x79\x0a\x84\x22\x37\xf5\xce\x46\x9b\xc6\x21\x76\xba\x0c\x68\xde\x1d\x4d\x0b\x52\x4b\xc3\xf4\xb2\x39\xfa\xfb\x89\xfd\xc9\x1e\x31\x7b\xec\x02\x81\x71\xa1\x88\x52\xb6\x11\x07\x32\xf0\xab\xb9\x36\xcd\x16\x1c\x93\xb3\xbe\xff\x2f\x2c\xa5\x8b\xa4\x35\x06\xa6\x64\x7d\x14\xc5\xe8\xc8\x3a\x2e\x51\xef\x53\xf4\x92\xb6\x5d\xe0\x99\xa2\xee\xda\xac\x49\x0b\xa3\x0f\xf0\x25\xa0\xa8\x77\x42\x98\xdd\x0b\xfc\xd5\xc8\x52\x4e\xb2\xf7\xc1\x92\x51\x6d\x93\xc4\x8e\x94\xc5\x73\xac\x42\xc9\xd5\xca\x2e\x13\x2a\xd9\xcc\xa1\x6a\x48\x9d\x58\x4e\xea\x39\xca\x0d\x06\xe8\xe9\x19\x4b\x50\x38\xc1\xd7\x06\x00\xa6\xda\xed\x8d\x1c\xca\x30\x37\x06\x27\x30\xe7\xf4\x60\xd6\x88\xf8\x9f\x37\xe4\x78\x98\xca\xd7\x8f\x0d\xc0\xb7\xf5\x77\x29\xf3\x8f\xcb\xce\x8c\x7d\xb7\x17\xd3\x92\x41\xf1\xec\xe3\x8e\x49\x40\x91\x1a\x63\xd6\x2e\x13\x05\xf8\x33\xdd\x80\x69\x95\xc4\x9c\x81\xc1\x92\x39\xe3\xa7\xe1\x22\xdf\x83\x99\x67\x3f\x81\x79\x6c\x9f\xda\xa9\x64\x67\xbc\x7d\x68\x0f\x9f\xdb\x83\x59\x69\x12\x8b\x9e\x33\x4d\xc2\x13\x98\xe3\xb1\x7d\xba\x11\xae\x9b\xae\x8a\x50\xae\x5e\x4a\xdf\xd9\x84\x22\x6f\x9c\xb7\x47\x20\xf2\x62\x53\xe9\x82\x77\xf6\x95\x2e\x1b\x78\x40\x55\xca\x03\x8b\xda\x9e\xdf\x62\x60\xec\x6d\xc9\xe1\x1e\x2f\x78\x47\x51\xc8\x3e\xfb\xca\xda\x4c\x06\x4a\x7b\x76\x99\x59\x6d\x17\xd8\xbd\xda\x9e\x46\xef\xe8\x7d\x16\xec\xf1\x9f\x05\xfb\x1d\x00\x00\xff\xff\xe8\xd2\x91\x77\x6a\x04\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0xa7, 0x9e, 0x60, 0x63, 0x12, 0xbd, 0x78, 0x5f, 0x91, 0xe, 0x2b, 0x7f, 0xb0, 0xc5, 0x61, 0x73, 0x6b, 0xe2, 0x6f, 0x50, 0x30, 0x3a, 0x0, 0x7c, 0x10, 0xe4, 0x51, 0xb7, 0x86, 0xe0, 0xd8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":             clusterTf,
	"dashboard.yaml":         dashboardYaml,
	"dashboard_data.json":    dashboard_dataJson,
	"datasource.yaml":        datasourceYaml,
	"es_dashboard_data.json": es_dashboard_dataJson,
	"outputs.tf":             outputsTf,
	"variables.tf":           variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf": {clusterTf, map[string]*bintree{}},
	"dashboard.yaml": {dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": {dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml": {datasourceYaml, map[string]*bintree{}},
	"es_dashboard_data.json": {es_dashboard_dataJson, map[string]*bintree{}},
	"outputs.tf": {outputsTf, map[string]*bintree{}},
	"variables.tf": {variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
