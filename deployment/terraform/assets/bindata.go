// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (10.463kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (36.301kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (327B)
// assets/variables.tf (779B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xe3\x36\x12\xfe\xee\x5f\x31\xa7\x5d\xa0\xed\x61\x25\xd9\x49\x9a\x4d\x5a\xa4\x45\xef\x0d\x38\xa0\xbd\x16\xb8\x02\xf7\x61\x11\x08\x34\x39\x96\x08\x53\x24\x8f\xa4\x9c\x78\xf7\x72\xbf\xfd\x40\x4a\xb2\x65\x59\x72\xbc\xde\x4d\x77\x7b\xbb\xc9\x17\x63\x38\x33\x1c\x3e\x33\xf3\xf0\x45\xda\xa8\x15\x67\x68\x20\x22\x77\x36\x82\x37\x13\x00\x6d\xd4\x82\x0b\x84\x1b\x88\xca\x32\x16\x8a\x30\x87\xd6\x45\x13\x00\x83\x39\x57\x12\xfc\x48\x65\x63\x24\xd6\xc5\x67\x5e\xbe\x42\x63\xfd\xc0\x0d\x44\xff\xfd\x0e\xce\x92\x8b\x97\xd1\xe4\x61\x32\x31\x68\x55\x65\x28\x06\xdf\xd9\x12\xd7\x99\x26\xdc\x44\x10\x2d\x71\x5d\x4f\xe5\x65\x92\x94\x08\xc1\xe7\xf3\x37\x2b\x62\x12\x2a\x2a\xeb\xd0\x04\xf9\x43\xbc\xc4\x75\x30\xf2\x71\x55\x73\xc1\xa9\xf7\x03\x37\xe0\x23\xfc\xd2\xab\x5b\x5b\x64\xdb\x91\xaf\xf6\xe7\xe5\xd2\x3a\x22\x29\x46\x10\x11\xad\x33\x8b\x66\x85\xa6\x9e\xde\x91\xdc\xc2\x4d\xf8\x09\xf0\x0f\x1f\xc7\x48\x14\x44\xeb\xf8\xf9\x1b\xaa\x2a\xe9\x12\x2e\x19\xde\x3f\xf8\x80\x1e\x26\x13\x00\xaa\xa4\x44\xea\xfc\xf2\x6b\x3f\xcf\xe0\xd7\x02\x81\xe1\x82\x54\xc2\x41\x65\xd1\x84\x15\x2e\x94\x01\x55\x19\xf8\xe1\xa7\xbf\x07\x35\xb7\xd6\x61\x3a\x6b\x8b\x28\x08\xbc\x66\x40\x76\x5e\x49\x57\xd5\xb2\x42\x59\x07\x37\x60\x51\x2c\x92\x66\x91\x5c\xb7\x33\x93\x92\xc3\xf6\xef\x06\x22\x52\xf2\x78\xba\xa0\x67\x53\xc6\x66\x8c\x5c\x4c\x2f\x5f\x5e\x4d\xe7\x11\x3c\x83\xd9\x55\x32\xbd\x80\x1f\x7f\xfd\xe7\x04\xa0\x85\x23\x6b\x02\xf0\x8b\xf5\xb8\xec\xc8\x77\x53\x13\xbc\x77\x53\x98\x2c\x71\x9d\x70\x16\x56\x5f\x49\xd7\x89\x61\xcf\x5b\x50\xf0\x25\xa2\x69\x66\x91\x56\x86\xbb\x75\x96\x1b\x55\xe9\x8c\x33\x0f\xfe\xab\xb0\xd0\xe8\xf9\x1b\x3f\xc1\xae\x86\xf7\x94\x70\xf6\x10\xbd\x38\xac\x93\xe5\xca\x5a\x5e\xab\x4e\x00\x6e\x3d\x38\x6c\x2d\x49\xc9\x29\x44\x46\x29\x97\xcd\x85\xa2\xcb\x8c\xe1\x8a\xfb\x3a\xa8\xf3\xb4\x50\x26\x43\x42\x8b\x26\xea\x3d\xbd\xa0\x44\x95\x74\x28\x5d\x63\x02\xb0\x52\xa2\x2a\x31\xb3\xfc\xb5\xc7\x4e\x28\xb5\xac\xf4\x97\x7b\xa6\xc9\x8a\x88\x0a\x5f\x40\xd4\x51\x8f\x5e\x80\xac\x84\xf8\x6a\xd7\x51\x93\x84\x63\x1d\x79\xf5\x1d\x47\x0f\x6d\x31\x84\x3e\xf6\x4d\xe8\x5b\xd9\x37\x47\xbb\xcc\xa6\x15\x3a\xf9\x29\x89\x73\x68\x4a\x65\x5d\x26\x38\x45\x69\x31\xf3\x06\x41\x9b\xa1\x75\x5c\x12\xd7\x74\x73\x5a\xa8\x12\xd3\xba\x22\xd3\xad\x5d\xc7\x45\xdc\xb8\x88\x06\x03\x31\x58\x2a\x87\x31\xde\x23\x6d\xe3\xe1\x52\x70\x89\x9b\xc4\x03\x44\x77\x85\x67\x9b\x57\xf0\x07\x88\x17\x90\xae\x88\x49\x05\x9f\xa7\x54\xa8\x8a\xa5\x6d\x1d\xa5\x73\xa5\x5c\xbc\xe0\x92\xdb\x02\x19\xdc\x7e\x0b\x4c\x01\xd2\x42\xc1\x17\xff\x22\xdc\x71\x99\x87\x06\x0b\x46\x31\x97\xdc\x25\x49\xf2\xc5\xb7\x60\x05\xa2\x86\x99\xd7\x96\xd8\x94\x91\x9f\x31\x47\x07\x71\x2c\x55\x4c\x0b\xa4\xcb\x98\xa2\x71\x7c\xc1\x29\x71\x08\xf1\xbf\x7f\x86\x18\x0a\xe7\xb4\xfd\x26\x4d\xed\x79\x8c\x55\x7c\x87\xd6\xc5\xb3\x84\x94\xe4\xb5\x92\xe4\xce\x26\x54\x95\x29\xc3\x79\x62\xd4\xbc\xb2\x4e\xa3\xa1\xa8\x3d\x66\x09\x57\xe9\xc5\xec\xaf\x7f\xfb\xf3\xf5\xf5\x5f\x92\x5c\xe7\xf0\x1f\xb0\x15\x53\x40\xb4\xf3\x4c\x06\x84\x31\x88\xb7\x71\x6c\xc6\x42\x3c\x6b\xa8\x34\x23\x0e\x47\xc6\x03\x14\x42\x78\x3d\x6d\x54\x89\xae\xc0\xca\xc6\x52\x31\x8f\xaf\x56\xc6\xa1\xe9\xaf\xf0\x67\xe8\x24\x8a\x71\xeb\x12\x47\x4c\x92\xbf\x86\x9a\xe3\x3a\x85\xc0\xd4\x9d\xf4\x4c\x9f\x55\x46\x3c\x6c\xdd\x38\x62\xe0\xfe\xf5\x62\xc4\x4d\x2f\xd0\x72\xd5\xd1\x83\x54\x69\x97\xd6\x2c\x76\x1b\x6a\xe3\x10\x31\x97\xe8\x0c\xa7\xf6\x34\x72\x6e\x8c\xff\x6f\x18\x39\x72\x67\x89\x20\x26\x0f\x3d\x75\x0c\x0d\x9f\x4a\xaf\x0d\x70\x1b\x8a\xfd\x4c\x9c\x9f\xf9\xea\x89\xf9\xaa\xa7\x6b\xd7\xd6\x61\x49\x9d\x00\x94\x64\x2e\x70\x5c\x73\xc0\x2b\x61\x2c\x74\xa8\xe0\xf3\x85\x92\x8e\x2a\xb9\xe0\xf9\xac\x87\x5a\x0b\x0c\x13\x49\x6e\xc8\x82\x48\x12\xc0\x50\xd6\xa6\x06\x05\x12\x8b\x69\x23\xcf\x2e\x93\xcb\xe4\x2c\x23\x25\xbb\xbc\x48\x18\xce\x7b\x01\x30\xbd\xcc\x21\xe6\x70\x9c\xf6\x76\x61\x8c\x60\xa9\x64\x6c\xd0\xd3\xeb\x63\xcb\x6f\x9c\xc7\x0d\x0f\xf6\xb4\xd1\xf8\xd2\xee\x29\x81\x75\xc4\xb8\x63\x89\x56\x1b\x75\xbf\x3e\x8d\x66\x83\x69\x4d\xb2\x7d\xa6\xdb\xfd\x1b\xe5\xbd\x3d\xae\xeb\xdb\xf9\x49\xeb\x08\xfb\xa7\xd1\xdd\x73\xe6\x90\xdd\xfe\xa9\x13\xbe\x83\x19\x7c\x0f\x33\xf8\x06\xa6\x3e\x64\x6b\x15\xe5\xc4\x61\xb6\xe1\xed\x8c\x30\x66\xd0\xfa\xf5\x3b\x53\xe1\xa9\x3c\x1a\x42\xde\x9e\x3e\x3b\xa4\x3d\xca\xd7\x9f\x1a\xcb\x7e\xb8\x3d\xf9\xf7\xc0\xef\x4f\x77\x0e\x1c\xb3\x94\x39\x97\xf7\xef\x87\xb3\x86\x5c\x99\x32\x60\x87\x8e\xa6\x61\x38\xb5\xdc\xa1\x8d\x6b\x0b\x96\x36\x69\xef\x19\x09\x09\xf1\xc2\xee\x5b\x91\x15\xe1\xc2\x1b\xa6\xdd\xe3\xe5\x98\xef\xad\x4e\x8f\x13\x7b\xa4\x68\x98\xcd\x5a\x82\xeb\x10\x64\x5f\xd4\xbc\x89\x1c\xe0\x9f\xba\x3f\xd9\x7c\xff\xce\xcb\x19\x4a\xbf\x4f\xa3\x19\xe2\xc8\x21\x8e\x65\xf3\x81\x67\x86\x4d\x48\xfb\xee\x6a\x7e\xe9\x2c\xc5\xc7\xd1\xfe\x0c\x17\xf4\x6d\x50\x82\x58\xfb\x58\xe0\x5e\x67\x02\x80\x1e\xd8\x3e\x3d\x8f\x19\xd5\xca\x9e\x60\xb5\x16\xeb\x8c\x97\x25\x32\x4f\xb3\x62\xdd\xb5\x6a\xf8\x95\x54\x4e\x65\x25\x97\xca\x64\xcd\xa3\x51\x56\xe9\xdc\x10\xe6\x3b\x70\x41\x84\xc5\xfd\xed\xab\xb3\xbc\x08\xa2\xed\x02\x9b\xcc\x0c\xa0\x33\x8a\xae\x87\x93\x11\x47\xe6\xc4\x62\xe7\x58\x3d\x62\x50\xeb\x97\x24\x48\x36\x14\xb5\x83\x42\x2b\xdd\xea\x69\x62\xed\x9d\x32\x6c\x57\xaf\x95\x4e\x00\xec\x92\xeb\x6c\xc1\x25\x11\x99\x95\x44\xdb\x42\xb9\x0e\x3e\x03\x18\x6e\x06\x87\xd2\x72\x20\x1f\xf5\x8f\x16\xe7\x9e\xfa\xee\xe0\xab\x61\x27\xb7\x87\xaf\x16\xc3\xbb\x21\x9b\x87\xad\xf0\xf6\xe0\x39\xa4\x7d\x55\xcc\x48\x8e\xd2\xbd\xed\x6b\x9c\xb7\x39\xfa\x3d\xee\x37\xbb\xd6\x8d\x3d\xae\xf9\x68\xdf\xe7\xf3\xda\xae\xbf\x9a\x6c\x4e\xc8\x53\xf0\xd3\xa4\xea\x13\x3c\x91\x7c\xda\xe7\x82\xf6\x7d\xc8\x95\x7a\xf7\x4d\x28\x3c\x02\x85\xce\x7c\xe4\x49\x68\x6b\xb9\x1d\xdb\x79\x01\x0a\x5f\x0e\x62\xef\x2a\x96\xf9\x1f\xc7\x06\xb6\xc6\xa6\xec\xfa\x3c\x74\x9f\xd9\x2d\xe4\xfa\x5d\xbf\x4e\x5b\x87\xd2\x0f\x3d\xe5\xb7\x0e\xe2\xda\xc1\x24\xbc\x7b\x52\xc3\x75\xfb\xee\xf9\x83\xd6\xd0\x2a\x41\x50\x0a\x69\x6b\x59\xab\xdd\x74\x60\x60\x82\x68\x12\x78\x20\x0f\xf7\x8a\xa6\x71\x8c\x2a\x33\x9f\x81\x10\xd5\xd9\x59\x4d\x4b\xaa\x15\x75\x84\xda\x28\xa7\xa8\x12\x4d\xfc\x8e\xea\x1a\x08\xca\x99\xa9\xeb\xbc\x6e\xe8\x69\x12\xfe\xd3\x69\x74\xdb\x5c\xc8\x0e\xcd\x78\x35\xbd\xfc\x7a\x60\xce\x8d\xf8\xfd\xcf\x1a\x9c\xbf\xec\xcd\xd9\x11\x6e\x67\xec\xce\xf7\x0c\x7e\x22\xeb\x39\x82\x41\xeb\x0c\xa7\x0e\x94\x14\xeb\xe0\x15\x7e\xd9\x54\x34\x34\xd7\xde\xef\x1b\x93\x3f\x55\x0e\x0a\x22\xd9\x1a\xea\xfe\x74\x64\xe9\xbb\xac\xf9\x88\x65\xe1\x8e\xbb\x42\x55\x0e\x4a\x22\x2b\x22\xc4\x1a\xac\x2d\x62\xaf\xc1\xa5\x53\xe0\x0a\x6c\x1c\x26\xef\x0c\x74\x0d\xdf\xf5\x6c\x3a\xdd\x03\xbb\x37\xd4\x05\xbc\x0f\xfa\x6e\x71\x1f\xe0\xef\xee\xeb\x5d\x1b\x1c\x8e\x17\xc1\x7e\x50\xad\xac\x97\xfe\x78\x76\x5c\xf6\x8f\x6a\xcb\xe6\xd3\xcc\x3b\x74\x67\xdc\x78\x38\xba\x49\x6b\xfd\x23\x7b\xf5\xf1\x7c\x5e\x4d\x5f\x5e\x8c\xe4\x73\x33\x34\x90\xcf\x8a\xbd\x6d\x3e\xdb\x8f\x5d\xc7\x16\xda\x89\x81\xbd\x7d\xa1\x9d\x10\xd8\x3e\xdd\xf4\x86\x3e\x14\x62\xa7\x04\xf6\xee\x88\xfd\xc6\x6d\xf9\x58\x5f\xb2\x79\xa7\x1f\xc7\x6f\xa2\xfd\x5d\xf2\x08\x84\xcf\xcf\xa7\x97\x23\x08\x6f\x86\x9e\x00\xe1\x23\x22\xfb\xfa\xe2\x7c\x7f\xdf\xed\x0d\x3d\x41\x64\x47\x90\xe4\xf6\x02\x74\x0c\x3f\x86\xab\xcf\xa3\xe7\x97\x1f\x5b\xf2\x0b\xfa\xbf\xab\xa3\xcc\xc1\x53\xc5\xc5\x74\x6f\x73\xed\x08\x87\x4f\x15\xfe\x4e\xd7\x62\xda\x5c\xa4\x8f\xaa\x98\x0f\xb8\x91\x7f\x74\x3b\x79\xfb\x89\xf5\x51\xda\x68\x14\xdf\x8e\x3b\x3e\xc4\x99\xf8\x7a\x7a\x3d\x84\xe3\x46\xfc\x34\xb3\x9e\xef\xd7\xef\x8e\xf8\xf4\x59\x3f\xae\x7a\xa9\xbf\x15\x1d\x4b\x6a\x41\xfb\x71\x52\xfb\xc5\xab\x3d\x19\x97\x5d\x0d\xc1\x74\xf5\x6e\x69\xf9\xb8\xe8\xf3\x53\x24\xb6\xff\x05\x00\x00\xff\xff\x25\x99\xf8\x63\xdf\x28\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x5d, 0x68, 0xc3, 0xaa, 0x14, 0xa7, 0xeb, 0xc5, 0x5c, 0xf7, 0x6, 0x28, 0x9f, 0x7b, 0x22, 0xb1, 0x92, 0x0, 0xa1, 0x16, 0x8e, 0xfe, 0xb4, 0xda, 0xf5, 0x14, 0x55, 0xf3, 0xa1, 0xba, 0x3d}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6d\x6f\xdb\x38\xf2\xc0\xdf\xf7\x53\x10\xc2\xfe\xff\x48\x8a\xa4\x6b\x39\x71\x37\x0d\xb0\x38\xa4\xe9\x76\xaf\x40\xb3\x9b\xcb\xc3\xde\xe2\x9a\x40\xa0\xa5\xb1\x4d\x84\x12\x55\x92\x4a\xe2\xcd\x65\x3f\xfb\x41\xd4\x13\xf5\x60\x5b\x76\xec\xda\x69\xd8\x17\x4d\x4c\x51\x14\x67\x38\xc3\xf9\x69\x34\x56\x1e\x5e\x21\x64\xe1\x20\x60\x12\x4b\xc2\x02\x61\x1d\xa2\xb8\x09\x21\x8b\x12\x21\xad\x43\xf4\x45\x7d\x42\x69\xab\x3a\xd2\x8f\x08\x95\x9f\x02\xeb\x10\xd9\x3b\x45\xab\x87\x25\x16\x2c\xe2\x2e\x58\x87\xc8\xda\xdd\x45\xbf\x72\x3c\xc0\x01\x46\xbb\xbb\x96\xd6\x0d\x02\xdc\xa7\x71\x17\xc9\x23\xd0\xda\x47\xc4\x6b\x68\x25\x2e\x0b\x8e\x19\x65\x3c\x1e\x93\x0f\xfb\x78\xab\xb3\x83\xba\xb6\xbd\x83\xba\xbd\xde\x0e\xb2\xb7\xf5\xa1\x03\xec\xab\x6b\x1f\x15\xe2\xa0\xff\x47\x47\x14\xb8\x14\x7a\x3f\x39\x0e\x55\x3f\x0f\x8b\x51\x9f\x61\xee\x59\xe9\xb1\x47\xf5\xf3\xfa\x15\x42\x8f\x71\x77\x0b\x3c\x22\x2b\xb3\xb5\x86\x01\xc8\x4f\x9e\x75\x88\xba\xbd\xfd\x6e\xd2\xc2\x71\x38\xba\x60\x8c\x4a\x12\x66\x3a\xb1\x88\xea\x92\xfc\x2a\x81\xab\xd9\xc4\x07\x7b\x07\xef\xba\x07\xfb\x07\x7b\xdd\xb7\x9d\x8e\x3a\x4a\x49\x70\x13\x6b\xfd\xcb\xb5\xfa\x18\xe2\x00\xa8\xc8\xf5\x9e\x69\xdd\xc2\x94\x60\xa1\x34\xa1\x96\xe8\x31\x13\xc7\xea\x63\xd5\x32\xc0\x54\xe4\x8a\x53\x92\x7d\x86\x60\x28\x47\xf1\x35\x3b\xa5\x76\x68\xea\xae\x2d\x5d\x10\x51\x9a\x1f\x19\x10\x4a\xf5\x75\x56\x0d\xbf\x72\xec\x11\x08\x62\xeb\x28\x86\x1e\x72\xe2\x9d\xb2\xc2\x7e\x92\x45\xb5\x0e\xd1\x81\xa6\xf9\xbb\x78\xac\xae\xd6\x70\xaf\x8f\x81\x90\x35\x8e\x3f\x67\xab\x91\x8f\x3d\x22\x9e\x07\xc1\x39\x70\xd2\x30\x79\xa5\x69\xfb\x5d\xfe\x99\xc2\x10\x02\xaf\x3c\x0f\x7c\x3b\xac\x9e\x87\x90\xe5\x46\x9c\x27\x62\x54\x8f\xf8\xf8\xbe\xa9\x95\x04\x0d\xad\x62\xc4\xee\xea\x86\x2b\x99\xc4\xb4\xa1\xf7\x2d\xa6\x51\x21\x44\x4d\x52\x4a\x02\x75\x54\x1f\x4d\x35\xde\x11\x2f\x59\xcc\xbc\x35\x5e\xa7\x53\x46\x02\x79\xc2\x94\xe7\xa8\x86\xdc\xcc\x2d\x16\x96\xfd\x39\x5f\xe8\xcf\xb9\xc1\xd5\xae\x1e\x02\x77\x21\x90\x78\x08\x35\x2d\x87\xf1\x95\xe2\x75\x8f\x44\x66\xd8\x45\x7b\x7d\x51\x38\x04\x1e\x70\x50\x6e\x3b\xa0\x4c\x16\xf3\x12\x6a\x15\x7f\xbf\x05\xce\x89\x07\x85\xe5\x27\x07\x43\xec\x42\x93\xe1\x0a\x89\xdd\x9b\xda\x55\x84\x84\x30\x04\xef\x33\x09\xea\x13\x96\x98\x0f\x41\x0a\x6d\x07\xd3\xf7\xb0\xd8\xb9\xef\x43\x35\x3d\x11\xf9\x5b\x24\x70\x39\x60\x01\x5b\x3e\x96\x12\xb8\xcf\x84\x74\xbc\xbe\x23\x24\xe3\xe0\x48\xe2\x83\xe3\xb2\x28\x90\x0f\x3e\xc8\x11\xf3\x7e\xfe\xfb\xca\xfa\x41\xb2\x30\xee\xa2\xda\xaf\xac\xc7\x2f\xb6\x7f\xbd\xbd\x8d\xfa\x63\xb4\x95\x74\xd2\x77\xa6\xdc\x2a\x3f\x32\xee\xe3\xd8\xe0\xac\x87\x74\xac\xc7\xc7\x72\x3f\x0e\x03\xb5\xbb\x58\x47\x56\xde\xfc\x98\xfe\x56\xe8\x49\x8e\x38\x88\x11\xa3\x5e\x45\x7f\xf1\x54\x3f\x72\xe6\x57\xdd\x38\x6e\x3f\x83\x61\x6a\x10\x95\x13\xce\x47\x64\x20\xeb\x67\x48\xb5\xef\x59\x17\x2c\x44\x76\x07\x7d\x78\x8f\xbe\x46\x6a\xe9\x62\x19\x95\xd4\xc5\x9a\xca\x7c\xf3\x7b\xd0\xfd\x02\x73\xf0\xea\x9e\x21\x18\x97\x15\xaf\x57\x4e\xe1\x64\xdb\x32\x09\x3c\x72\x4b\xbc\x08\x53\xab\x66\xa1\x59\x1f\xb5\xe7\x16\x13\xb8\xc7\xf7\xa4\x62\xea\xfd\xc8\xbd\x49\xd6\x5f\x97\x2b\xf6\xe2\xd4\x5d\x62\xd1\x1b\xa2\x47\xa5\x77\xb3\x77\xe7\x5e\xdc\xe0\x44\x63\x7c\x0f\x53\xcc\x6e\x90\x9b\x80\x18\xc5\x9a\x28\x5b\x09\xee\x03\xad\x4d\x22\x3e\xc0\x86\xef\xb1\x80\x72\xc8\xcd\x37\xaa\x5a\xf7\x64\xa7\xaa\x35\x6b\xc2\x14\xc6\xb5\xf3\x4c\xe6\x59\x73\x82\x71\x7d\xd1\x31\x25\xc3\xa6\x3d\x5a\xb5\x7f\x86\xdb\x7c\xd2\xa5\x80\x9f\xaa\xe0\x3b\x88\xb5\xef\x66\xc5\xda\x52\xc3\xc2\xc1\xf6\x27\x13\x6c\x4d\xb0\x5d\x6a\xb0\xc5\x21\xd1\xe3\xec\x08\x07\x1e\x05\x9e\x07\xda\xf8\x70\x43\xa4\x4d\xbb\x55\x42\x2d\x09\x24\xf0\x5b\x4c\x3f\x62\x57\xaa\x1b\x87\xbd\x19\x91\x38\x1d\xe6\xb9\x84\xe2\xa3\xd3\x4f\x4b\x8e\xc5\xdd\x17\x1f\x8b\x7d\xb1\xfe\x00\x67\x02\xf1\xfa\x02\xb1\x45\x19\xf6\x24\x08\xb9\x9b\x36\xe5\xdd\x1a\x72\x00\x49\x3b\xe7\x6a\x73\x29\x0f\xba\x8e\xfb\xe5\x83\x05\x42\xf8\xcb\x8b\xe0\xe5\x3c\x0b\x6a\x0c\xea\x2e\x0b\x02\x70\x25\x78\xdf\x28\xb2\xf7\xbe\xa3\xc8\xce\xb1\x2c\x45\xf4\x30\xfe\x4f\x2d\xeb\x03\x09\x84\xc4\x81\x0b\x2a\x9c\x0b\xe0\xb7\xc0\xb3\x38\x5e\xde\xcd\x8a\xad\x4e\xb1\x40\x22\xe3\x8c\xe0\x6e\xcf\x08\xee\xd9\xc5\xab\xd1\xdd\x07\xc9\x89\xab\xf6\xfe\xa6\x49\x4f\x44\x81\xf2\xfe\x28\x21\x8e\xb4\xbd\x99\x9b\xb8\xce\x3f\x8b\x69\x6a\xe5\xaa\xba\xa8\x8b\xbd\x98\x8e\xde\xcf\xd2\xd1\x3a\x19\xea\xb7\xc8\xef\x03\x47\x6c\x80\x4e\x99\x90\x02\x85\xc0\xd1\x39\xb8\x2c\xf0\x66\x20\x94\x2f\xce\x40\x30\x1a\xa5\x89\xdc\xfa\xb6\x66\xb2\x1d\xc9\xbf\xf9\xe1\xc5\x3a\x2e\x21\x2c\x32\x9c\x85\x0c\x67\xad\x9f\xb3\x6a\xb9\x92\x77\x0b\x80\x96\xa6\x1f\x43\x5a\x86\xb4\x56\x41\x5a\x23\x29\x43\x87\xc3\xd7\x08\x84\x14\x9b\x80\x5c\x28\xbb\x3a\x6a\x05\x5d\x6a\xfe\xca\xcd\xc5\x37\x67\xaf\x39\x75\xb7\x31\x10\xd6\x56\x67\x1b\xcd\x62\x67\xa9\xde\x0d\x84\x19\x08\x9b\x67\xaa\x06\xc2\x5e\x0e\x84\x55\x93\x5d\xf6\xdb\x05\x20\xec\xad\x61\x30\xc3\x60\x4b\x65\xb0\x6a\x28\xbe\x83\xbe\x60\x6a\xf7\x9f\x0a\x11\x1b\x96\xee\x6a\x9c\xfa\x0a\xe9\x6b\x41\xad\xad\x83\xba\x9e\x07\x41\x15\xd9\xac\xe3\xcc\x99\xd1\x07\xb8\x25\x2e\x08\xb4\xf5\x6f\xe8\x9f\x2b\xed\x66\x07\xe3\x2b\x6c\x1b\xc2\x32\x84\x65\x08\xcb\x10\x16\x42\x93\xd2\x5c\xf6\x4f\x0b\x20\x96\x6d\x10\xcb\x20\xd6\xaa\x10\xcb\xeb\x3b\x3e\x16\x12\xb8\xe3\x16\x91\xec\x39\x81\xd6\x14\x01\xbe\x0d\x6e\xcd\xaf\xc1\x8d\x49\x75\xcd\xaf\xbb\xe7\x85\x6c\xea\x6b\x2a\x92\xa1\x13\x25\x24\xfa\x80\x25\xee\xc7\xa1\xd6\x70\x9a\xe1\x34\xc3\x69\x2f\x86\xd3\x66\x96\x6e\x57\x33\x61\xdd\xfd\x45\x30\xcd\x70\x9a\xe1\xb4\xe5\x72\xda\xcc\x92\x6e\x11\xf9\x5a\xcd\x76\x46\x1b\xdb\xe8\x47\xd4\xae\x1a\xbc\xe9\xe4\x0d\xe3\x3b\x5d\xd6\x15\x01\xdd\x88\x08\xc9\x86\x1c\xfb\xce\xd7\x08\x07\x92\x50\xd8\xea\xbc\x79\xb7\x83\x9a\x9e\x6a\xe6\xd3\x49\xe2\x70\x83\x02\x77\x28\x2c\xf0\x30\xb3\xaa\xa5\x77\x9d\x70\x77\xb2\xa6\x34\x1e\xdb\x0c\xf4\x3a\x01\x1c\xa8\xea\xf9\xf4\xc1\x23\xba\xd0\x29\xc4\x70\xd6\x4a\x38\x6b\x02\x63\x19\xbc\x32\x78\xb5\xd9\x69\xb0\x6e\x6f\x01\xbe\xea\x19\xbc\x32\x78\xb5\x54\xbc\x1a\x32\xc7\x07\x5f\x48\x2c\x85\x83\x29\x65\xae\xd3\x1f\x4b\x10\x6b\xca\x7b\x1d\xc5\x33\x98\x12\xf3\x0b\x3a\x9a\x30\xef\x95\x26\xbd\xf4\x6b\xaa\x25\x71\x48\x10\x09\x58\xae\xc6\xd2\x17\x95\x54\x3c\x6a\x7e\x55\x9e\xc7\x13\x5c\xad\x3e\x67\x26\xc2\xe6\xd0\xe7\x08\x70\xb8\xc9\xea\xfc\x27\xe0\x70\xb5\xda\x3c\xde\xe4\xb4\xe2\x09\xf8\x8c\x8f\xd1\xa5\x88\x77\x47\x83\xb4\xab\x44\x5a\x65\x29\x06\x6b\x27\xcd\x53\x27\x0a\xc3\xb5\x59\xfb\xc6\x14\xd0\xed\xed\x2d\x80\xb5\xf6\x9e\xe1\x5a\xc3\xb5\x4b\xe5\x5a\x52\xfb\x1a\x24\x67\x2e\x08\xe1\xb8\x61\xe4\x08\x55\x0c\xde\xa2\x20\xff\x35\xb2\x3b\x9d\xf5\x25\x03\xdb\x93\xeb\x3a\xd9\xe0\xf8\xf4\x12\x5d\x4a\x42\xc9\x5f\xea\x35\x74\xe8\x0c\x4b\x40\x5b\xff\x67\x4a\xc1\xd6\xf7\x88\x71\xea\x72\xa0\x17\xcb\x0e\x26\x25\xb6\x49\xe8\x50\x4b\x89\x2d\xc4\x0e\xfb\x06\x1d\x0c\x3a\x2c\x15\x1d\x86\xcc\x19\x32\xce\x22\x19\x2f\xc9\x06\x17\x80\x95\xe6\xb9\xc2\x3a\xaf\x36\xfa\x58\x6f\x39\x57\x1b\x4d\x3c\x93\xaa\xad\x5f\x19\x3a\xab\x0a\x62\xf8\xc9\x94\x68\x19\x60\x42\x2b\x01\xa6\x92\x3f\x7a\x20\x5c\x4e\xc2\xd4\xa3\x8a\x6c\xdb\x5a\x0a\xb0\xf6\xed\x05\x68\xa8\xdb\xa6\x00\xab\xe2\x4d\x05\x0d\x55\x0e\x24\x26\x53\x6d\x54\x06\x53\x69\xe4\x64\x38\x92\xe7\x8d\xa9\xf6\x45\x31\x49\x33\x3d\xf3\x4a\xcd\xec\xe0\x9a\xea\xaf\x54\x2e\x25\x60\x1e\x38\x6e\x18\x35\x13\xc0\x4e\xbc\xaf\xff\x7c\x65\x45\x42\x7b\x9d\xc1\xb4\xa2\xaa\x29\x0f\x66\xe2\xfe\x0d\x70\xde\x40\x05\x97\x02\x38\x6a\x95\x3f\x99\x8b\x78\xe6\x90\x57\x8c\x85\x04\xff\x69\x12\xd7\x1e\xdd\xa9\x31\xdb\xc8\xf5\x7e\x65\x72\x11\x8f\xc2\x72\xa5\xfa\xe4\x51\x68\x23\xd3\xf1\x8a\x64\xfa\xfb\xca\x22\xfc\xeb\x7f\x05\x1b\xc8\xf8\x27\x61\x77\x98\xc8\xe5\x8a\xf8\xbb\x1c\xb5\xb3\xc7\x0f\x1b\x52\xb2\x76\x7c\x7a\x89\x3e\x33\xec\xa1\x2d\xdb\x9f\x95\xaf\x33\x40\xd9\x68\x8b\x1b\x47\x69\x86\x26\x37\x86\x26\x5d\xe2\x63\x5a\x35\xd9\xf5\xe4\xd6\x16\xa3\xc9\xe5\x3e\x97\x8b\xf7\xd1\x5f\xfc\x50\x8e\x27\x1c\xfb\x0f\x70\xf6\xc4\x9c\xdc\x0a\x40\xf4\xc9\xf9\x3a\x43\xa2\xcb\x21\xd1\x24\xca\xfb\xaa\x12\xc5\x39\x01\xff\x62\xca\xd3\x3b\xb4\x8b\x2a\xbd\x3f\x72\x80\x76\x9d\xdf\x47\x83\x01\xf0\x49\x99\xae\x4a\xe7\x63\xec\x8e\xc0\x6b\x97\x15\x5b\x16\xf2\x7a\x68\xda\x4b\xd0\x16\x81\xde\x39\x34\x3b\xbd\x64\x5f\x9d\xd9\x6e\x7a\x9b\x53\xb6\xdf\xba\xb4\xc9\x20\x50\xa3\x15\xb5\xaa\x5d\x32\x08\xf4\x42\xaa\x97\x36\x80\x75\x16\x79\x93\x6a\xb7\xcd\x3b\xeb\x27\x66\xce\x9a\x99\xa5\x4d\xea\xec\x65\xa4\xc7\x68\x34\x24\xc1\x1f\xc0\x45\x9a\x5a\x7d\xfb\xe6\xed\x9b\xae\xf5\x02\xa0\x45\x45\xd6\x00\xa4\x90\x58\x3a\x17\x6e\xe8\x1c\x47\x9c\xff\x22\x24\xee\xb7\x8a\xaf\x4b\x41\x06\x75\x39\x4a\xc4\x68\x05\xe4\x40\x8a\xfc\x8b\x26\xe5\x2f\xf7\xd2\xb9\x38\x3e\xbd\x20\x3e\xb0\x48\x4e\x42\xa9\x86\xf7\xc5\x2e\x45\xde\xec\xb2\xf3\x73\xc8\x0c\x61\x45\xe4\xd7\x44\x9d\xb9\xa0\x8b\x26\x93\x12\x94\xd2\xd6\x6e\x39\xf9\xb2\x27\x2f\xd8\xd3\xe4\xc9\xae\xb0\xe1\x89\xb1\x8b\xe3\x53\xfd\x05\x1a\x86\x0b\x4d\x6a\xcc\x70\xe1\x33\xe3\xc2\xea\x03\xd5\xde\x22\x7f\x8c\xb0\x5b\x54\x36\x65\x15\x2b\xe5\x47\xc3\x06\x16\x4d\x06\xab\x75\x06\xab\xfc\xc0\x2a\x00\x79\xc7\xf8\x8d\x23\x39\x0e\x84\x4f\xe4\xd4\x6f\xbe\x35\x3d\xa6\xda\x7e\x7d\xd0\x5c\x54\x55\xff\xae\xd0\xbc\xe5\x56\x7f\x26\x75\xc3\xcb\xc6\xc5\x09\x1a\xe0\xe0\x02\xb9\x9d\xfe\xd5\xbf\x56\x0a\x58\x88\x1f\xe7\xd4\xcd\xd9\x3c\xba\xd9\x94\x2c\xd7\x6f\x89\xa6\xd1\xd9\x9f\x3f\xa6\x6b\x6b\xa0\xe6\xa9\xc9\xae\xd0\xa4\xba\x36\x02\x69\x5e\xa5\xc3\xc6\x5e\x17\x3b\x54\x2c\xb6\xdd\x49\x16\xc7\x12\xee\x08\x7c\x5c\xa4\x1e\xba\xdd\xa4\x59\x8e\x13\xc7\xf0\x30\xbf\x49\x7a\x4a\x3c\x2c\xd6\x5d\x7b\xfd\x4e\xaa\x3c\xad\x65\x37\x04\x3e\xb0\xf2\xcb\x4a\xf0\x43\x8a\x25\x09\x86\xb9\x38\x16\x25\x42\x6a\x46\x54\x12\x92\xfe\x11\x9b\x5f\xdd\x56\x0b\x42\x28\xad\xa5\x84\x7b\x59\xdf\xd0\x6f\xd3\x31\xbe\x68\x8d\x08\x59\x96\xf6\xf1\xba\xc9\x4c\x5a\x7e\x5f\x40\x3d\xbf\x1c\x90\x80\x64\xc5\x70\xca\x68\x9c\xc4\x71\x1a\x0b\x25\xb2\xbd\x57\xdf\x18\x48\xe0\xd2\xc8\x83\x23\xda\x84\x27\x79\xb5\x65\xb2\xc5\xeb\x43\xf9\x11\x95\xa4\xee\xb6\xa9\x8b\x37\x9c\x50\x20\x48\xb1\x2b\x22\x64\x7d\x8d\x80\x8f\xdb\xcd\xbe\xb0\x1d\xbb\xd4\x3a\x84\xfb\x8a\xf2\x2d\x71\x43\xc2\x4b\x4e\xcf\xc7\x81\xdb\xf4\x98\xb1\xbe\x3f\x4a\x3c\x54\x4b\x2e\xfe\x95\xce\xa7\xb2\xf0\x99\xe5\x5d\x57\xda\x26\x75\x4f\x37\xd1\x44\x3a\xed\x40\x24\xe0\x22\x19\xaa\xf1\xa1\xe5\x32\x8c\xf0\x88\xd2\x56\x76\xf8\x83\xe3\x60\x4a\x57\x66\x8d\x4a\x74\x87\x83\x88\xa8\xdc\x92\x2c\xbc\xd9\xb2\x3b\x3b\x6d\x5f\xf8\xf5\xc3\x83\xe3\x70\x1c\x0c\xc1\x11\x8f\xa2\xfa\xc7\x9e\xb7\xe7\xb2\xe9\x8a\x81\x36\xef\xac\xb3\xcc\xb9\xf4\x27\xa8\xe7\xb1\xea\x6f\xa5\x85\x19\xbe\xf1\xe6\x75\xf6\x07\xb5\xaf\xac\xad\x37\xaf\xff\xb1\x7d\x65\xbd\x79\xbd\x5c\x87\x29\xf9\xdf\x2c\x77\x29\x77\x36\xce\x32\x9f\x99\x78\x7d\x47\x48\xc6\x41\xb7\x95\x5e\x8e\xde\x3e\xc8\x11\xf3\xd6\xe5\x25\x5e\x7f\xd5\x4e\xb2\x80\xf4\x33\xbd\x23\x39\xeb\x7b\x70\x8e\x57\x99\x6d\x3e\x26\xe0\x43\xd4\xd2\xa4\xc8\x33\x48\xee\x58\xac\x80\xdd\xed\xda\xbd\xec\x45\x85\x96\x64\x69\xa3\x55\x3a\x2f\x24\xee\x8d\xba\x69\x4f\xcf\x4e\xb5\xe8\x64\x37\x63\x3a\x82\x5b\x3d\xed\x66\x25\x23\x3b\xf5\x61\x4f\xff\x60\x17\x2f\x47\xb4\x7a\xda\xef\xb6\xfe\x61\xaf\xa3\x1f\xd1\xee\x41\xba\xda\xef\xb6\x97\x38\xe3\x75\x26\x43\x6c\x0c\x9a\xa1\xcd\xbc\x8a\x3e\xf0\x5b\x7d\x60\xfd\x2a\xdd\x7d\xfd\x83\xf6\x55\xbd\x9f\x3c\x7d\xbe\xd9\x5c\x4a\xea\xfb\x8b\xa9\x44\x84\xd5\xe7\xec\x4e\xa4\x2c\xa4\xd5\x34\xe4\x06\xad\xca\x3b\x77\x2f\x40\x48\x74\x0a\x5c\xdd\x16\xc4\xf7\xab\x27\x2c\x20\x92\xf1\x18\x59\xd5\x99\x91\x4a\x76\x59\x9d\xe4\x9f\x6d\x27\xad\xb7\x39\x35\xef\x1f\xbc\x7a\x7c\xf5\xbf\x00\x00\x00\xff\xff\xd6\x2d\x80\x4c\xcd\x8d\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0x75, 0xb7, 0x83, 0x1b, 0x35, 0xa3, 0xc1, 0xa4, 0x24, 0x28, 0x27, 0xc8, 0x5b, 0xd1, 0xd5, 0xa7, 0xf8, 0x70, 0x42, 0x2a, 0xdb, 0x93, 0x84, 0x8e, 0xbc, 0xef, 0x2f, 0xa2, 0x6, 0x19, 0x49}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6e\x83\x30\x10\x85\xf7\x9c\x62\xe4\x75\x6b\x45\xa9\xd2\x9f\x05\x27\xa9\x2a\xcb\xd8\x13\x6a\xc5\xd8\xae\xc7\x26\xa5\x15\x77\xaf\x30\x55\xd3\x08\x14\x58\xce\xf7\xcd\x63\xf4\xa0\x97\xd1\xc8\xc6\x22\x30\x65\x33\x25\x8c\xc2\xc9\x0e\x19\x7c\x57\x63\x55\x5d\xa0\x0c\x41\x18\x47\x49\x3a\x85\x42\xf9\xec\xd2\x6d\x25\x0d\x61\x25\xa4\x45\x97\x36\x63\xae\xa5\xd5\xa0\x10\xfd\xe7\xb0\xe1\xe8\x66\xeb\x4d\xff\x0d\x74\xad\x71\x1b\x21\x56\x12\xad\x19\xf3\xae\xe8\x31\x92\xf1\x6e\x32\x00\xa6\x93\xa0\x86\x4e\x86\x0a\x40\xe3\x51\x66\x9b\xa0\x2e\x08\x80\xc9\x1c\x7d\x94\xf7\xdd\x40\x1f\x96\x41\x79\x6a\x60\x07\xfe\xc4\xcb\x48\xcc\x9c\xef\xf9\xee\x81\xef\xd9\xd5\x4e\xf0\x94\xda\x88\x65\xb1\x06\xf6\xc2\x1f\xf9\xf3\x64\x8c\x8b\xb3\x32\x61\x5c\xfd\x96\xba\x11\x41\x12\x9d\x7d\xd4\x0b\x46\xf4\x2e\x42\x6e\xac\x51\xe2\x84\xc3\x02\x77\x32\x25\x8c\x9d\xa7\x24\xb4\x3f\x3b\xeb\xa5\x16\x39\xda\x5b\x9e\x35\x0a\x1d\xa1\x38\x1a\xbb\x3c\xa5\x04\x24\xdc\x8a\x8b\xde\x27\xd1\x58\xaf\x4e\x42\x63\x6f\x14\xce\x25\x5f\x7a\x7d\x2d\x1d\xcd\xed\x02\xf4\xde\xe6\x6e\xfe\x2d\xa6\x8e\xda\xf0\xdb\xe1\x1f\x21\xf3\x35\x91\xc3\xae\x8c\xc7\xbb\x0a\xe0\xad\x1a\x7f\x02\x00\x00\xff\xff\x13\x26\x6f\x52\x0b\x03\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x86, 0xe, 0x94, 0xf, 0xf5, 0xd6, 0xbc, 0x4d, 0x91, 0xd2, 0xcd, 0x71, 0x7a, 0x6a, 0x8f, 0x4c, 0x1f, 0xeb, 0xe7, 0x50, 0x1b, 0xf, 0xb4, 0x63, 0xa9, 0xb4, 0x10, 0x3c, 0x21, 0x8e, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
