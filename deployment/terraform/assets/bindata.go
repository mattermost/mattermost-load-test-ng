// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (15.778kB)
// assets/dashboard.yaml (231B)
// assets/dashboard_data.json (35.097kB)
// assets/datasource.yaml (296B)
// assets/es_dashboard_data.json (8.51kB)
// assets/outputs.tf (531B)
// assets/variables.tf (1.066kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x73\xdb\x36\xf2\x7f\xaf\x4f\xb1\x7f\x26\xd3\x26\x9d\x90\x92\x6c\x37\x0f\x6e\xdd\x4e\xfa\x38\x9d\x49\x9b\xcc\xbf\xbd\xeb\x8b\x8c\x87\x03\x01\x2b\x09\x35\x09\xf0\x00\x50\xb6\xe2\xf3\x7d\xf6\x1b\x80\xe0\xa3\x48\x5a\x76\xe2\x24\xbd\xd6\x79\xa3\x00\xbb\x8b\xc5\x3e\xfc\x76\x01\x22\x53\x72\xc3\x19\x2a\x08\xc8\xb9\x0e\xe0\x72\x02\x90\x29\xb9\xe4\x09\xc2\x09\x04\x69\x1a\x26\x92\x30\x83\xda\x04\x13\x00\x85\x2b\x2e\x05\xd8\x99\x5c\x87\x48\xb4\x09\x0f\xec\xf8\x06\x95\xb6\x13\x27\x10\xfc\xe7\x2b\x38\x88\x8e\x9e\x04\x93\xab\xc9\x84\x11\x43\x9c\xdc\xb8\x60\x0c\x20\xa0\xb9\x52\x28\x4c\x00\x97\xad\x79\x4a\x92\x04\x55\xcc\x19\x0a\xc3\xcd\x76\x98\x50\xe7\x0b\x81\x26\xe6\x4c\x07\x10\x68\x4c\x90\x1a\x64\x85\xda\x9b\x8c\xc6\x9c\x59\x1d\xee\x5f\x6e\x88\x8a\x50\xc7\x9b\x8c\x5e\x39\x4d\x14\x6a\x99\x2b\x8a\x85\x90\x33\xdc\xc6\x19\xe1\x2a\x80\xe0\x0c\xb7\x05\xb7\x1d\x13\x24\x45\x80\x5a\x02\x4d\x72\x6d\x50\xb9\xf1\xab\xf0\x0c\xb7\x8e\xc9\x5a\x28\x5f\x24\x9c\x5a\x39\x70\x02\xd6\x56\x0f\x2c\xb9\xd6\xeb\xb8\x9e\x79\xb8\xbb\x2e\x17\xda\x10\x41\x31\x80\x80\x64\x59\xac\x51\x6d\x50\x15\xcb\x1b\xb2\xd2\x70\xe2\x7e\x02\xfc\x62\xf5\x18\xd0\x82\x64\x59\x78\xff\x92\xca\x5c\x98\x88\x0b\x86\x17\x57\x56\xa1\xab\xc9\x04\x80\x4a\x21\x90\x1a\xeb\x88\x42\xce\x3d\xf8\x6d\x8d\xc0\x70\x49\xf2\xc4\x40\xae\x51\xb9\x1d\x2e\xa5\x02\x99\x2b\x78\xfe\xf3\x4f\x8e\xcc\x6c\x33\xb7\x9c\xd6\xeb\xc0\x0d\x58\x4a\xe7\xe3\x45\x2e\x4c\x5e\x8c\xad\xa5\x36\x70\x02\x1a\x93\x65\xe4\x37\xc9\xb3\x72\x65\x92\x72\xa8\xff\x4e\x20\x20\x29\x0f\x67\x4b\x7a\x30\x63\x6c\xce\xc8\xd1\xec\xf1\x93\xa7\xb3\x45\x00\xf7\x60\xfe\x34\x9a\x1d\xc1\x8b\xdf\x7e\x9d\x00\x94\xe6\x88\xbd\x02\x76\xb3\xd6\x2e\xad\xf1\xb6\x6b\x9c\xf4\xa6\x0b\xa3\x33\xdc\x46\x9c\xb9\xdd\xe7\xc2\x34\x74\xd8\x91\xe6\x08\x7c\x9c\x68\xa4\xb9\xe2\x66\x1b\xaf\x94\xcc\x33\x1b\x4e\x70\x02\xaf\xdd\x46\x83\xfb\x97\x2e\xd0\x5a\x14\x56\xd2\xeb\xd9\x69\xc4\xd9\x55\xf0\x68\x9c\x2c\x5e\x49\xad\x79\x45\x3d\x01\x38\xb5\x26\x62\x5b\x41\x52\x4e\x21\x50\x52\x9a\x78\x91\x48\x7a\x16\x33\xdc\x70\x1b\x0d\x85\xb7\x96\x52\xc5\x48\xe8\xda\xeb\xbe\x43\xe7\x88\xa8\x14\x06\x85\xf1\x2c\x00\x1b\x99\xe4\x29\xc6\x9a\xbf\xb1\x16\x4c\xa4\x3c\xcb\xb3\x07\x3b\xac\xd1\x86\x24\x39\x3e\x82\xa0\x41\x1e\x3c\x02\x91\x27\xc9\xc3\xb6\x20\xef\x8a\x7d\x05\x59\xf2\x96\xa0\xab\x32\x24\x1c\xae\x58\x50\xb0\xd0\x62\x53\xa4\xdc\xa6\x4f\x88\x86\x97\x52\x62\x0c\xaa\x54\x6a\x13\x27\x9c\xa2\xd0\x18\x5b\x06\x47\xcd\x50\x1b\x2e\x88\xf1\xe8\x32\x5d\xcb\x14\xa7\x45\x5c\x4e\x6b\xbe\x86\x88\xd0\x8b\x08\x7a\x15\x51\x98\x4a\x83\x21\x5e\x20\x2d\xf5\xe1\x22\xe1\x02\x2b\xf7\x03\x04\xe7\x6b\x8b\x7e\xaf\xe1\xff\x20\x5c\xc2\x74\x43\xd4\x34\xe1\x8b\x29\x4d\x64\xce\xa6\x65\x34\x4d\x17\x52\x9a\x70\xc9\x05\xd7\x6b\x64\x70\xfa\x05\x30\x09\x48\xd7\x12\x3e\xfd\x9d\x70\xc3\xc5\xca\xa5\x99\x63\x0a\xb9\xe0\x26\x8a\xa2\x4f\xbf\x00\x9d\x20\x66\x30\xb7\xd4\x02\x7d\x24\xd9\x15\x57\x68\x20\x0c\x85\x0c\xe9\x1a\xe9\x59\x48\x51\x19\xbe\xe4\x94\x18\x84\xf0\x5f\x2f\x21\x84\xb5\x31\x99\x3e\x9e\x4e\xf5\x61\x88\x79\x78\x8e\xda\x84\xf3\x88\xa4\xe4\x8d\x14\xe4\x5c\x47\x54\xa6\x53\x86\x8b\x48\xc9\x45\xae\x4d\x86\x8a\x62\x66\x6d\x16\x71\x39\x3d\x9a\x7f\xff\xc3\xb7\xcf\x9e\x7d\x17\xad\xb2\x15\xfc\x1b\x74\xce\x24\x90\xcc\x58\x3c\x03\xc2\x18\x84\xb5\x1e\xd5\x9c\xd3\x67\x0b\x79\xc6\x88\xc1\x81\x79\x67\x8a\x24\xb1\x74\x99\x92\x29\x9a\x35\xe6\x3a\x14\x92\x59\xfb\x66\x52\x19\x54\xdd\x1d\xbe\x84\x86\xa3\x18\xd7\x26\x32\x44\x45\xab\x37\x50\x20\x5d\x23\x10\x98\x3c\x17\xb6\xf2\xc4\xb9\x4a\xae\x6a\x31\x86\x28\xb8\x78\xb3\x1c\x10\xd3\x51\x34\xdd\x34\xe8\x60\x2a\x33\x33\x2d\xb0\xec\xd4\xc5\xc6\x18\x3c\xa7\x68\x14\xa7\xfa\x76\x10\xed\x99\xff\x67\x70\x39\x30\x87\xd1\x45\x42\xd4\xca\x25\x55\x81\xb3\x43\xf8\x0a\x5f\xc1\x0c\xbe\x86\x39\x1c\xc3\x6c\x4f\xe8\xbe\x2d\x24\x7b\x33\x37\x61\xf9\x6f\xa4\xfd\x1b\xe0\xee\x18\xe0\x3a\xb4\x7a\xab\x0d\xa6\xd4\x24\x80\x82\x2c\x12\x1c\xa6\xec\x91\x4a\x18\x73\x29\x9d\xf0\xc5\x52\x0a\x43\xa5\x58\xf2\xd5\xbc\x63\xb5\xd2\x30\x2c\x89\x56\x8a\x2c\x89\x20\xce\x18\x52\xeb\xa9\xc2\x04\x89\xc6\xa9\x1f\x8f\x1f\x47\x8f\xa3\x83\x98\xa4\xec\xf1\x51\xc4\x70\xd1\x51\x80\x65\x67\x2b\x08\x39\x5c\x4b\xdd\x5a\x76\xc5\xcd\x3a\x5f\xb8\x25\xb9\x58\xe4\xf4\x0c\x4d\xfd\xc3\x2b\xa0\xa7\x25\x5c\x4f\x37\x07\xd1\x3c\x9a\x55\x14\xb1\xfb\x6f\x9c\x70\x91\x5f\x5c\xab\xd8\xbe\x4c\x43\xfa\xfd\x91\x6b\x73\x4e\x0c\x5d\xdb\xff\x60\x42\xb4\xe1\x54\x23\x51\x74\x1d\x97\x05\xa9\x4f\xe3\xb9\xd3\xb8\x9f\x3e\x74\x93\x91\x53\x25\x2c\x54\xe9\x2f\x35\x67\x8c\xab\xa2\xc4\xf4\x0b\xea\xd0\xdb\x3a\x16\xbe\xb9\xd8\x2c\xe1\x86\xeb\x42\xf8\xed\xd8\x32\x10\x86\xda\x28\x9e\x85\x54\xa6\x99\x14\x28\x8c\x3e\x99\x0f\x86\x2c\x23\x98\x4a\x11\x2a\xb4\x86\xb8\x2e\xb0\x7d\xd8\x84\xbe\x24\x76\xa8\x51\x59\xd0\xea\x10\x81\x36\x44\x99\xeb\x04\x97\x6e\x1f\x10\x59\x4e\x7b\x61\x7b\x16\xf0\x4c\xc9\x8b\xed\xed\xca\xb7\x63\x2d\x8a\x77\xb7\x82\xb6\xff\x06\xeb\xe9\x4e\x0d\xed\xf2\xd9\x45\x0b\x0d\xbb\x67\x9d\xf6\x29\xa6\x8f\xaf\xb7\xe6\xce\x1b\x35\x97\x68\x2d\x29\x27\x06\xe3\xaa\x1f\x88\x09\x63\x0a\xb5\xdd\xbf\x51\x39\xde\xb6\xe2\x3a\x95\x5b\x07\x9b\x46\x85\x1f\x2c\xee\x7f\xb5\x7a\xfc\xe1\xda\xbd\x3f\x43\x27\x70\x77\x47\x8c\x21\x4e\xb1\xe2\xe2\xe2\xdd\x60\x60\x9f\x28\x95\x3a\xdb\xa1\xa1\x53\x37\x3d\xd5\xdc\xa0\x0e\x0b\x0e\x36\xf5\x6e\xef\x30\x25\x02\xc2\xa5\xde\xe5\x22\x1b\xc2\x13\xcb\x38\x6d\x9e\x5c\x86\x64\xd7\x34\xe3\xb0\x48\xd2\xd8\xa3\xa9\x2d\xaa\x67\xc8\x62\x25\xed\x81\x3c\x40\x7f\xe3\xd7\xec\xe9\x51\x77\xe1\xe5\x93\x4f\xca\x09\xaa\xd0\xe2\x8a\xe5\x6e\x02\xce\xb9\xae\xe4\x7b\x28\x08\x50\xb7\x9b\xb7\x9e\x5b\xb8\x76\x05\x63\x32\x25\x5c\x38\x9d\x6e\x07\xdb\x35\x5f\x99\x0e\x85\xc8\xc6\xf9\xa3\x44\xed\x7e\x76\xcb\xd7\xd6\xa9\xbe\xd6\x2c\xef\x13\x8b\x81\xf2\xc8\x22\x5d\x0b\xaa\xcb\x8b\x8d\xea\x6a\xb2\x91\x61\x98\x60\x8a\xc2\x3c\x30\x32\xe1\xda\x3c\x60\xc4\x90\xa8\x7d\x8f\x19\x95\xb7\x98\x11\x67\xfa\xe1\x23\x98\x3d\xac\x7c\x09\xd0\x0f\xd1\xfd\xe8\xec\x75\x2f\xf1\xf9\xb4\x32\x43\x89\xbf\xb8\xd0\xa5\xca\x03\xc8\x8b\x3a\x6e\x10\xf5\xc2\xae\x9d\xf7\xf1\x57\x57\x93\x41\x18\x6d\x48\x1b\x00\xd0\x60\x95\x1d\x04\x0f\xc7\x30\x7d\x44\x86\x47\xf3\xf9\xac\x0b\xc1\xde\xb5\x45\x47\x5d\xa1\xdf\xee\x75\x63\x33\xd8\x7d\x05\x2e\x0e\xce\x94\xa2\xd6\x71\x26\x13\x4e\x39\x5a\xa3\x7f\xf9\xe5\xb7\x2f\x7f\xf9\xe1\xa7\x1f\x27\x50\x99\x22\xf8\x67\x11\x0e\xc1\x31\x04\x07\xb3\xf9\x41\x38\x9f\x85\xf3\x27\x75\xa6\xff\x6a\x88\x71\xde\x0f\x8e\xab\x78\xb0\x7f\x97\x93\x76\x5d\x0f\x9e\xbb\x6a\x61\xc5\xa0\x3e\xfe\xac\x12\x50\xcd\xbf\x52\x5c\x50\x9e\x91\xc4\x92\xf4\xcc\x7f\xbf\x5c\x22\xb5\xab\x04\xcf\x93\x44\x9e\xef\x12\xfc\xbf\x4f\x3c\x4b\x42\x94\x38\x26\xe7\xfa\x18\xf5\xf1\xfd\xcb\x2a\x1e\x8b\x0b\xfa\xc8\xdf\xba\x47\x2e\x27\x9a\xf3\x9d\x0b\xfa\x8a\x90\x50\x87\x11\x31\x67\x57\xc7\x45\xbe\x4d\xfb\xb3\x6b\xfa\x59\xd0\xd0\xea\xca\xff\x3e\xf5\x6d\x96\xb7\xad\x8d\x56\xcc\x50\x30\x1d\xbb\xb4\x2b\xac\x36\x82\x61\x11\xea\xea\xdc\x3f\x0a\x62\x16\x7e\x7a\x60\xd1\x96\xd8\x00\x02\x7d\x58\xfc\xb0\x9e\x29\xe0\x62\x00\x25\x3c\xe1\x3e\xd7\x20\x75\x4b\xd6\x0b\xc8\x3e\xc2\xdc\xf7\x87\x40\x1f\x56\xdf\x21\x5c\xd1\xf7\xcd\x54\xa9\x61\x54\x2c\x6b\x33\xdb\xaa\xf1\x96\xab\xeb\xc3\xd8\x37\xdc\x76\xe1\xf2\xa7\x5d\xdb\x37\xda\xfd\x7b\x8f\x2a\x5a\x97\x1f\x89\xc7\xd2\x4c\xf1\x8d\x2d\xe0\x75\xef\xba\xe7\xd5\xd0\xde\xc0\xde\x5c\xd7\x25\xe7\x52\x2a\x8a\x31\x43\x6d\x94\xdc\x96\x20\xd4\x6b\x64\x6b\xb5\x22\x89\xb7\x95\x97\xcb\xff\xee\xe9\x6b\x4f\x7e\x17\x9e\xb1\x1d\x9b\x93\xee\xe0\xe5\xfb\x97\x3f\x4c\xac\x4e\x23\xa8\xd2\x8b\x28\x4d\x34\x19\x45\x82\x1a\x66\x5e\x77\xf1\x41\x1f\x1e\xbf\xe0\xda\x7c\xd3\x3e\x87\x35\xa7\x7f\x44\x3f\xfb\x42\x52\x77\x1b\xdf\xcc\xe6\xd3\xd6\x32\x7d\x60\xa3\x0f\x8f\x8f\x8f\x7d\xd5\x2a\xc3\xaf\x0a\xa8\xc6\x89\xc2\x61\xc3\xa3\xbe\x9d\x8d\x2a\xff\x7c\x21\x95\xf9\x39\x4f\x0c\xcf\x88\x32\xff\xc8\x5a\xbd\x5c\x93\xf0\x3b\x4c\xd0\xe0\xcb\xc5\x1f\xd6\x4a\x03\xfb\xdc\x67\xf6\x39\x4d\x7a\x09\x5e\xe5\x63\xec\xd5\xac\x65\x1f\xb4\xdf\xa8\x0f\x6f\x6b\xdc\x1a\x7e\xaf\x1c\x5e\x5e\x4d\x6c\xbc\xed\x82\xa2\x62\x3a\x2e\xd3\xa0\x71\x9c\xee\x0e\xb5\xfa\xc6\xde\xbf\x6b\x50\xc0\x4e\xb2\x45\x77\xae\x40\x86\xa2\xc8\x2c\xb9\x4d\xb7\x1d\xa9\xbd\xa9\xca\x16\x3d\xdf\x44\x2b\x9d\x77\xc5\x15\x49\xdc\xd8\xab\xd5\xc5\xff\x2c\x0c\xd6\x3c\xc2\xd3\x84\x68\xdd\xb3\xb9\x96\xfe\x96\xc6\x36\x90\xb6\x4f\xef\x1e\xf8\x87\x98\x0a\x62\x0b\xa7\x59\x96\x6c\x63\x9e\xa6\xc8\xec\xc1\x3d\xd9\x36\xb9\x7c\x8f\x45\x72\x23\xe3\x94\x0b\xa9\xca\x36\x34\xce\xb3\x95\x22\xcc\x02\xe7\x92\x24\xba\x07\x03\x1b\x3b\x0c\x20\xa8\xf7\x38\xec\xbd\x3d\xc1\xbb\xcf\xb6\x83\xbe\xb1\xce\xb0\x8d\xc4\x82\x68\x6c\x76\xe3\xfd\x0c\x05\x7d\x4a\xdc\x48\x75\x58\x6e\x19\xb0\x1c\xad\xe9\x32\xa2\xf5\xb9\x54\xac\x4d\x57\x8e\x4e\x00\xf4\x19\xcf\xe2\x25\x17\x24\x89\xb5\x20\x99\x5e\x4b\xd3\x30\x6d\x8f\xf9\xab\xc9\x3e\x8f\x8e\xb8\xb2\xf8\x51\x1d\x1d\xda\xe4\xed\xc9\xd7\xfd\x42\x4e\xc7\xbf\x88\xf4\x37\xff\x6c\x51\xf7\xfd\x63\xf7\x62\xe5\x6b\x8e\x98\xac\x8a\xd7\x15\x37\x7a\x7b\x60\x79\xf6\x7e\x7d\xf0\xde\x3e\x5f\x0d\x3d\x25\xb0\xda\xbe\xcb\xc7\x04\x6d\x79\x45\x5b\x79\x0b\x57\x39\x39\xde\x55\x7f\xc1\xeb\xb1\xbf\xf6\x25\x55\xf9\x1d\xdc\xa4\x59\xfb\xdb\xb7\xfb\xd8\xed\x32\xf3\x9a\x4f\xdf\x35\x67\x3d\xd7\xfa\xd2\xed\x5e\x6c\x85\x56\x54\x28\x56\x9f\x0d\x4d\xd4\xcc\x2a\x6d\xca\x1c\xbb\x48\x6a\x07\x72\xf1\x8a\x69\xb7\x94\xec\x59\x42\x9a\xd7\x32\x23\x6f\x9d\xca\x35\xc3\x62\x4d\x77\x42\xd4\x54\xf1\xac\x7c\x12\xf2\x3c\xcb\xaa\x6b\x12\x70\x44\xce\xd3\x25\xd0\x95\xa5\x0a\x7a\x16\x08\x26\x0e\x3a\x56\xee\x6a\xdc\xe7\x9a\x92\x69\x6c\x9d\xe6\xb4\x3a\x38\x28\x90\x4c\x96\x43\x8d\xc1\x4c\x49\x23\xa9\x2c\xcf\x41\x86\x66\x85\xed\x28\x67\xaa\x48\x8d\x02\x03\x66\x91\xfb\x37\x9d\x05\xe5\x61\x77\x6c\xc5\xa7\xb3\xc7\x9f\xf7\xac\x59\x0d\xbf\xfb\x55\x9d\xf0\x27\x9d\x35\x1b\x83\xf5\x8a\xcd\xf5\xee\xc1\xcf\x64\xbb\x40\x50\xf6\x14\xc6\xa9\x01\x29\x92\xad\x93\x0a\xaf\xaa\x24\x00\xff\x19\xe8\x6b\xcf\xf2\x4d\x6e\x60\x4d\x04\xdb\x42\x91\xd2\x86\x9c\xd9\xc4\xf4\xef\x0d\x35\x9c\x73\xb3\x96\xb9\x81\x94\x88\x9c\x24\xc9\x16\xb4\x5e\x87\x96\x82\x0b\x23\xc1\xac\xd1\x0b\x8c\xde\xda\xd0\x85\xf9\x9e\xcd\x67\xb3\x1d\x63\x77\xa6\x9a\x06\xef\x1a\xbd\x9d\x0f\x23\x90\xdf\x79\xaa\x50\xea\x87\xc3\x71\xb0\xab\x57\x39\xd6\x89\x80\x70\xbe\x5f\x00\xec\x95\xcc\xfe\xed\xda\xfb\xcd\xe9\xd0\x2f\xba\x77\x6a\x17\xf4\x7b\x66\xf8\xf5\x51\xf0\x74\xf6\xe4\x68\x20\x0a\xaa\xa9\x9e\x28\xc8\xd9\x4d\xa3\xa0\xf1\x86\x70\xdf\x08\xbd\xa5\x6e\x37\x8f\xd0\xdb\xe9\xb6\x0b\x55\x9d\xa9\x0f\x68\xb7\xdb\xe8\xf6\x4e\xec\xf6\x9e\xb3\xfa\xba\xb4\x66\x8b\xb7\x4b\xe7\xe1\x23\x77\xb7\x34\xef\xe1\x97\xc3\xc3\xd9\xe3\x01\xbf\x54\x53\x77\xe3\x97\x3d\x94\xfb\xfc\xe8\x70\xb7\xde\x77\xa6\xee\x46\xb9\x3d\xc0\xb9\x3e\xae\xb5\xbf\x67\x8d\x1e\xd5\xc6\x9b\x27\xc7\xfc\xa2\x44\x51\xc7\xf1\xa7\xea\xa4\xf6\x70\xe9\xd1\x6c\xb0\xc2\x57\x53\xe3\x2e\x4d\x96\x00\x4d\x6b\x57\x5f\xbc\x9a\xda\x15\x53\xbd\x1a\x7e\x44\x35\x3e\x56\xb9\xfb\xea\x5b\xc4\x86\xef\x49\x42\x23\xc3\xc6\x9b\xb5\xf1\x6b\xbd\x3d\x5f\xa0\xf4\xbc\x79\xa9\x4c\xeb\x3d\x66\x37\xd4\x75\xd7\xae\x73\xba\x5e\xdb\xa5\xe8\x3a\x0f\x76\xbd\xb8\x73\x36\xaf\x49\x46\x4e\xe7\x93\xf2\xa5\xfa\xee\xd9\xbe\x9f\xb1\xd5\xe3\xdd\xcc\x15\xed\xb3\xe2\x47\xe2\x02\xdf\x01\x8f\xb8\xc0\x53\xfc\x49\x5d\x50\xbf\xf2\xee\xb3\xf8\x2d\x1a\xde\x41\x2c\x2e\x33\xed\x46\xf5\xf2\x43\x1c\x3e\x9f\xcd\x9e\xf5\x61\x52\x35\x7c\x37\xab\x1e\xf6\x61\x74\x63\xf8\xf6\xab\x7e\x44\xd8\x1b\x40\xe0\xdf\x67\x34\x8a\xf8\xd0\x53\x94\x82\xf0\xfa\xab\x8f\x5f\x77\x8b\xb5\xe7\xad\x2e\x44\xf7\xea\xca\x8e\x8e\x0e\x87\x8a\xa4\x9f\x79\xd7\x6d\xcf\xa3\xfd\xde\xf4\x9f\xd6\x97\xcb\x63\x0f\x94\x9a\x39\x79\x35\x99\xdc\x83\xdf\x11\x04\x22\x03\x02\x1a\x33\xa2\x88\xc1\x6e\x63\x63\xf1\x17\x8c\x84\x4c\xe1\xc6\xf6\x3d\x74\x4b\x13\x4e\xfd\xeb\x03\x14\x74\x0b\x0b\x34\xe7\x88\x62\x72\xcf\x5d\x3c\x90\x2c\xf3\x9c\x44\x30\xf0\x6a\x16\x23\xd1\x7e\x48\x9f\x65\xb6\xd4\x56\x8f\x5d\x3f\x12\x94\x3f\xf8\xfc\x3a\x94\xf7\x14\xef\x1c\xe5\xdb\x60\x7d\x53\xa8\xaf\x62\x69\x8f\xc4\x2b\x1e\xf4\xde\xe4\x10\x34\xbf\xd9\x9d\x86\x5b\xe0\xfa\x74\x7d\x65\xc9\xee\xac\xc3\x7e\xda\x07\x69\x4f\xdf\x0e\x42\x3f\xce\xa6\xfe\xc3\x5e\xdb\xbd\xf7\xba\xf2\xdf\x00\x00\x00\xff\xff\x97\xf6\xb9\x14\xa2\x3d\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0xe5, 0xbb, 0xe9, 0xa5, 0xbf, 0x94, 0xcf, 0x9f, 0xa5, 0x18, 0xa9, 0xc6, 0x8b, 0xa2, 0x81, 0x78, 0x2, 0x82, 0x34, 0x80, 0xd3, 0xbd, 0x92, 0x18, 0x27, 0xd1, 0xd9, 0x72, 0x7a, 0x38, 0xef}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x6e\x02\x41\x0c\x44\xfb\xfd\x8a\xe9\xa8\xa2\x23\x4a\xb7\x75\x1a\xea\x88\xf4\x3e\xec\x03\x4b\x66\x77\x65\x9b\x8b\xf2\xf7\xd1\x52\x44\xa2\x9d\xf7\xe6\xd1\xd0\x6f\xf1\xd0\xde\x2a\xde\x4b\x19\xde\x77\x65\xf1\xa8\xe5\x0d\x8d\xee\x52\x71\xb8\x4b\xba\x5e\xe2\x50\x80\xee\xd7\x13\x4f\x11\xd8\xba\xb1\xf8\x2b\xce\xdf\x21\x15\x9b\x9a\x14\x80\x35\x68\x35\xf9\x14\x93\x7c\xe6\x37\xb2\x98\x40\x58\x73\x92\x8a\xf4\xc7\x1c\x1e\x83\x29\xe5\xd4\x52\x7c\x27\xfb\x92\x4b\x6f\x1c\x15\x1f\xc7\x63\x01\xc8\xac\xff\x9c\xf5\xfc\x74\xe2\xff\xd3\xc7\x8c\x46\x2d\x00\x30\x28\x6f\x15\xcb\x4e\xbe\x98\xae\xcb\xd5\x69\xa3\x46\x0b\x53\xdc\xd6\x4e\xce\x51\xfe\x02\x00\x00\xff\xff\x4e\xda\x5e\xba\xe7\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0xd3, 0xf5, 0x60, 0x9d, 0xb1, 0xc3, 0x4f, 0x3f, 0x8, 0x37, 0x26, 0x8f, 0xe5, 0x97, 0x54, 0xbb, 0xa4, 0x6b, 0x3d, 0xee, 0xdf, 0x22, 0x37, 0xc, 0xdd, 0xb7, 0x38, 0xb7, 0xdb, 0x2a, 0x9f}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x6f\x53\xe3\xb6\xd6\xc0\xdf\xf3\x29\x34\x9a\xe7\xb9\xc3\x76\x80\x92\x40\x76\x0b\x33\x7d\xc1\xd2\xdd\x76\x67\x96\x96\x0b\xa1\xb7\x73\x77\x77\x3c\x8a\x7d\x92\x68\xb0\x25\xaf\x24\x03\xe9\x96\x7e\xf6\x3b\x92\xed\x44\xfe\x93\xc4\x09\x09\x84\xa2\xbe\xe8\xe2\x63\xd9\xd6\x39\x3a\x3a\xfa\x71\x74\x6c\xbe\x6d\x21\x84\x09\x63\x5c\x11\x45\x39\x93\xf8\x18\x69\x11\x42\x38\xa4\x52\xe1\x63\xf4\xc9\x1c\xa1\x4c\x6a\xce\xf4\x12\x1a\xaa\x0f\x0c\x1f\xa3\xd6\xce\x44\x1a\x10\x45\x24\x4f\x84\x0f\xf8\x18\xe1\xdd\x5d\xf4\xb3\x20\x7d\xc2\x08\xda\xdd\xc5\x56\x33\x60\xa4\x17\xea\x26\x4a\x24\x60\xc9\x87\x34\xa8\x91\x52\x9f\xb3\x53\x1e\x72\xa1\xef\x29\x06\x3d\xb2\xbd\xbf\x83\xda\xad\xd6\x0e\x6a\x77\x3a\x3b\xa8\xf5\xca\xbe\x35\x23\x91\x79\xf6\xc9\x44\x1d\xf4\x2f\x74\x12\x82\x50\xd2\x6e\xa7\x46\xb1\x69\x17\x10\x39\xec\x71\x22\x02\x9c\x9d\xbb\x37\xff\x7e\xd9\x42\xe8\x5e\x37\xc7\x10\x50\x55\xea\x2d\x1e\x30\x50\x1f\x02\x7c\x8c\xda\x9d\xc3\x76\x2a\x11\x24\x1e\x76\x39\x0f\x15\x8d\x73\x9b\x60\x6a\x9a\xa4\x3f\x2a\x10\xa6\x37\xfa\x64\xe7\xa8\xb5\xbf\xdf\x79\xd3\x7a\x73\x70\x98\x36\x0c\x29\xbb\xd6\x56\xff\xf4\xc5\x1c\xc6\x84\x41\x28\xc7\x76\xcf\xad\x8e\x49\x48\x89\x34\x96\x30\x43\x74\x9f\xab\x83\x7b\xc4\x48\xfa\x24\x94\x63\xc3\x19\xcd\x3e\x02\x1b\xa8\xa1\x7e\xe6\x7e\x41\x0e\x75\xcd\xed\xa1\x0b\x39\x09\x14\x48\xb5\x9b\x89\xc6\xcd\x6a\xcc\x91\xca\x85\x30\x03\x54\xbc\x69\x9f\x86\xa1\xed\x22\x46\xf0\xb3\x20\x01\x05\xa6\x1d\x6b\xd2\xab\x81\xa0\xc1\x39\x9f\xb8\x5e\xea\x0f\xf8\x18\x1d\x59\x83\x76\xab\xef\xd5\xb6\x04\x77\xf6\x3d\x10\xc2\x23\x7d\x9c\x0f\xe4\xf8\xde\x43\x1a\x04\xc0\x2e\x41\xd0\x1a\xbd\xcd\x20\xbd\x19\x1f\x86\x30\x00\x16\x14\xbb\x41\x6e\x06\xe5\xcb\x10\xc2\x7e\x22\x44\xaa\x45\xf9\x4c\x44\xee\xea\xa4\x94\xd5\x48\xe5\x90\xdf\x56\x5d\x5e\x71\x45\xc2\x9a\xd6\x37\x24\x4c\x26\x3a\x54\x14\x0d\x29\x33\x67\x0b\x23\xa3\x85\xb7\x34\x48\xdd\xc0\x96\x5a\x2e\x97\x4e\x9d\x24\x0c\xcf\x39\x65\xea\x8c\x9b\x69\x88\x7d\xce\x18\xf8\x0a\x82\xc9\xf0\xf3\xb8\x18\x21\xc6\xae\xf3\x71\x7c\xbf\x4a\xaf\x62\x10\x3e\x30\x45\x06\x50\x31\x7e\xac\x1f\xa7\xdd\x21\xd1\xd7\x76\x8a\xf2\xea\x58\x09\x60\x01\x08\x30\x81\xa0\x1f\x72\x35\xe9\x97\x34\x83\xfb\xdb\x0d\x08\x41\x03\x28\x29\x26\x63\xe2\x43\xdd\x54\x90\x8a\xf8\xd7\x95\xa7\x48\x05\x71\x0c\xc1\x47\xca\xaa\x1d\x56\x44\x0c\x40\x49\x2b\x26\xda\x51\x51\xcf\x83\xbb\x38\x8d\x53\x44\xc1\x76\x44\x94\x02\x11\x71\xa9\xbc\x58\xff\xcf\x0c\xeb\x37\xca\xa4\x22\xcc\x87\x1f\xff\xfe\x8c\xff\x4f\x82\xb8\x01\xf1\x19\xdf\x7f\x6a\x45\x5f\xec\x48\xa6\x27\x0b\x17\x11\xd1\x0e\x86\x15\x8d\xc0\x4b\x75\x2c\x36\xa1\x4c\x81\xb8\x21\xe1\x7b\xe2\x2b\x33\xff\x5a\x85\xd3\xa9\x37\xbf\x1f\xdf\xe7\xdb\xf8\xe1\xf7\xf7\xc5\x1b\x45\xa0\x04\xf5\x75\x9b\xda\x4e\x17\x1b\x0b\xe8\x9b\xf0\x87\x4f\x8a\x72\x6d\x39\x3d\x8e\x63\xd9\xfd\xce\x6c\x2b\xc9\x24\xda\x5e\xce\x52\x6b\x37\x55\xb7\xaa\xf6\x72\x36\x7a\x3b\xcf\x46\xd9\x4f\x13\x7f\x55\x43\x01\x72\xc8\xc3\xa0\xe4\xc7\x5a\xb5\xf7\x82\x47\xf8\x18\xe9\xb9\x5a\x90\x5f\xc0\x20\x9b\x98\xa5\x0b\x2e\x87\xb4\xaf\xaa\x57\x28\x13\xc2\xf1\x39\x97\x4a\xa2\x18\x04\xba\x04\x9f\x33\x6b\xa6\xab\xf1\x62\x66\xcd\xf4\x48\x5e\x80\xe4\x61\x92\xad\x64\xd5\x60\x46\x04\x04\xd5\x70\x26\xb9\x50\xa5\x48\x6d\x22\x99\x97\xaf\xc2\x94\x05\xf4\x86\x06\x09\x09\x71\x25\x7c\xe4\x6d\xcc\x12\x3b\xe9\xdf\x1d\xb9\xa3\xa5\x38\xd4\x4b\xfc\xeb\x74\x72\xda\xca\xea\x6e\x67\x01\x4d\xdb\xa3\x06\x16\x4a\xad\xeb\x43\xf2\x38\xf4\xd6\x44\xb8\x11\xb9\x83\x19\x31\x61\xe2\x9c\x72\xa8\x2d\x51\xf4\x3b\xd2\x03\x1d\xea\xf1\x29\x4f\x58\xf9\x1c\x1f\xbc\x25\x12\x2a\xbe\x9a\x2e\x30\xc5\x6e\x8f\x57\x98\x8a\xd8\xd2\x67\xee\xc4\x6c\xd4\xd5\xca\x13\xd6\xd8\xcf\xca\xe4\x18\x55\xc7\x9d\x84\x74\x50\xe7\x8e\x46\xfe\x11\x6e\xc6\x9d\x2e\x20\x5e\x66\x02\x47\x57\xf9\x71\x2d\x5d\x15\x04\xcb\xe2\x95\x65\x9f\xe9\x7c\x55\x9a\x6f\xf3\xf0\xaa\xd4\x3c\xf5\xa9\x72\xdc\x59\x0e\xae\x2c\x0f\x74\x6c\xf5\x0c\xd8\x6a\xa8\x54\xec\x09\xf8\x9a\x80\x54\x72\x13\x20\x0b\xe5\x4f\x47\x8d\x30\xcb\xf4\xdf\x4c\x71\xf9\xe8\xb4\xb5\xa0\xed\x36\x06\xbb\x9a\xda\x6c\xa3\xe9\xeb\x22\xb3\xbb\x03\x30\x07\x60\x8b\x74\xd5\x01\xd8\xcb\x01\xb0\x72\x7a\xeb\x68\x09\xfe\x7a\xdd\x00\xbf\x5c\x7a\xcb\x21\x58\x73\x04\x2b\xaf\xc4\xb7\xd0\x93\xdc\x04\xff\x99\x0c\xb1\x61\xf9\xad\xda\xae\xaf\x11\xbe\x96\xb4\xda\x53\x40\xd7\xf3\x00\xa8\x5f\x93\xa8\x07\x02\xf1\x3e\x3a\xcd\x27\x33\xfa\x09\x6e\xa8\x0f\x12\x6d\xff\x07\x7a\x97\xc6\xba\xf9\x49\xfd\x84\x57\x0e\xb0\x1c\x60\x39\xc0\x72\x80\x85\xd0\xb4\x0c\xd7\x32\x84\xd5\x72\x84\xe5\x08\x6b\x5d\x84\x15\xf4\xbc\x88\x48\x05\xc2\xf3\x27\x0b\xd9\x73\xe2\xac\x19\x0a\x3c\x0e\x6d\x2d\x6e\xc1\x8d\x49\x74\x2d\x6e\xbb\xe7\x45\x6c\xa6\x42\x47\x71\x74\x66\x94\x44\x3f\x11\x45\x7a\x7a\xa5\x75\x98\xe6\x30\xcd\x61\x9a\xc3\x34\x34\x25\x0f\xd6\xfa\x61\x19\x4c\x73\x9c\xe6\x38\x6d\xb5\x9c\xa6\x49\x83\x32\x5f\x00\x91\x85\x8d\x35\x12\x53\x2f\x65\x85\x24\x4a\xb7\xce\x50\x6f\x84\xb6\x73\xda\x78\x85\xbe\x47\x73\x2f\xf5\x75\x24\xae\xbb\x78\x61\x38\xc9\x2a\x6b\x4b\x6e\xf6\x08\x7b\x9b\xb6\x19\xd6\xc4\x7a\x43\x2a\x15\x1f\x08\x12\x79\x5f\x13\xc2\x14\x0d\x61\x7b\x7f\xef\xe8\x68\x07\xd5\xed\x77\x8e\xfb\x93\xae\xd1\x35\xc6\xdd\x09\x61\x89\x6d\xce\xa9\x06\x2e\x5b\x30\x3e\x3a\xda\x9d\x8e\xcf\x16\xc4\x6d\x06\xaf\x9d\x01\x61\xe8\xe4\xfc\x03\xca\xf6\x2a\x51\xd7\x46\x17\x07\x67\x6b\x81\xb3\x29\x60\xe6\x98\xcc\x31\xd9\x46\x31\x59\x25\x75\xb6\x14\x94\x75\x1c\x93\x39\x26\x5b\x29\x93\x0d\xb8\x17\x41\x24\x15\x51\xd2\x23\x61\xc8\x7d\xaf\x37\x52\x20\x9f\x28\x59\x76\xa2\x7b\x30\x63\xcd\x9f\x70\xd3\x94\x7e\xaf\x35\x53\x66\x3f\xd3\x0c\x89\x47\x59\x22\x61\xb5\x16\x5b\x15\x7e\x5e\xea\x0e\xae\xd7\x9e\x73\xb3\x67\x0b\xd8\x73\x08\x24\xde\x64\x73\xfe\x02\x24\x5e\xaf\x35\x4f\x37\x39\x17\x79\x06\x11\x17\x23\x74\x25\x75\x74\x74\x48\xbb\x4e\xa4\x35\x9e\xe2\xb0\x76\x5a\x3f\x6d\xa2\x70\x5c\x9b\xcb\x37\x26\xd7\xd8\x7e\xb3\x04\xd6\xb6\x0e\x1c\xd7\x3a\xae\x5d\x29\xd7\xd2\xca\xbb\x92\x82\xfb\x20\xa5\xe7\xc7\x89\x27\x4d\xfd\x78\x83\x1a\xfe\xef\x50\x6b\x7f\xff\xe9\x76\x88\x9b\x93\xeb\x53\xb2\xc1\xe9\xf9\x15\xba\x52\x34\xa4\x7f\x9a\xd7\xf6\xd1\x05\x51\x80\xb6\xff\xdf\x95\x8f\x3d\xdd\xbe\xe4\xcc\xe1\x40\x2f\x96\x1d\x5c\x4a\x6c\x93\xd0\xa1\x92\x12\x5b\x8a\x1d\x0e\x1d\x3a\x38\x74\x58\x29\x3a\x0c\xb8\x37\xe0\x82\x27\x4a\x0f\xc9\x06\x57\x8d\x15\xfa\xb9\xc6\xe2\xb0\x26\xf6\x78\xda\x1a\xb0\x26\x96\x78\x26\xa5\x5e\x3f\x73\x74\x51\x56\xc4\xf1\x93\xab\xeb\x72\xc0\x84\xd6\x02\x4c\x85\xf9\xf8\x14\x09\x93\x83\xd7\x4b\x40\x4f\xfb\xa8\x01\xf5\xac\xe2\x2b\x11\x2b\x62\x9e\x87\x7e\x26\xa2\xc2\x37\x5a\xf0\x48\x68\xd3\xfe\x07\xa1\x4d\xa1\x8c\x2a\xff\x55\x21\x7d\xc1\x4e\xc7\x63\x9e\x34\xfa\xb0\xc1\xac\x02\xab\x45\xaa\xa0\x2c\x4a\x59\x08\x48\x1e\xae\xc1\xec\x3e\xcf\x7e\xc7\x6f\x33\x88\xa1\x9b\x29\x6b\xbe\x87\x70\x46\x59\xa2\xe6\xed\xcb\x38\x20\xa8\x75\xac\x8d\x5b\x65\x37\x97\x06\x5e\xc0\xd6\xcb\xa3\xe3\x40\x25\x09\xb2\x14\x0f\x1c\xbc\xbc\x62\x6d\x87\x04\x6b\x47\x02\xfb\x9b\x41\xf3\x81\x40\x2a\xa2\x12\xe9\xf9\x3c\x98\xc7\x04\x64\x00\x4c\xa1\x5d\xf4\xed\x1b\xb2\x2e\x42\xf7\xf7\x68\xc5\x7c\x30\xb5\x50\xbc\x5e\x9b\x1d\xab\x37\xfa\xc4\xe1\xde\xde\x5f\x9d\xbd\xbd\xa5\xd5\x8c\xe3\x3a\x25\x37\x1c\x2c\x7e\xe9\x76\xcf\xd1\x3b\x33\xf2\x8e\x2d\x1c\x5b\x38\xb6\x58\x0f\x5b\x04\x20\x7d\x41\xe3\x2c\x79\x37\x29\xec\x79\x92\x1c\xc4\x61\x67\x09\xe6\x68\x37\x61\x8e\xa9\x39\x88\x72\xb6\xa1\xf1\x87\x2a\x05\x1d\x0c\xd5\x65\x6d\x55\x9f\xcb\x4e\x3c\x7f\x14\x31\x65\x1b\x8c\x07\xe0\xf9\x71\x32\x65\x99\xd6\x51\xfd\xc7\xcf\x38\x91\x0d\x73\x12\x33\x6a\x40\x75\xfb\x1a\x02\xae\x59\xcd\xaf\x24\x08\xd4\xa8\x54\x63\x21\x56\x59\x40\x5f\x39\x92\x0a\xa2\x87\x69\x5c\xa9\x12\x36\xf7\x6c\xa2\xd7\xdb\xb5\xe9\x45\x83\x10\x56\xab\xd5\x87\x20\x84\x26\x3a\x9d\xae\x49\xa7\xbf\x3f\x63\x2a\xbe\xfe\x25\x79\x5f\xe9\x7f\x29\xbf\x25\x54\xad\x56\xc5\xdf\xd4\xb0\x99\x3f\xfe\xb4\x21\x5c\x79\x7a\x7e\x85\x3e\x72\x12\xa0\xed\x56\x34\xaf\x34\xc8\xe1\x64\xad\x2f\x6e\x00\xa6\x3d\x17\x9c\x7c\x61\x1b\x57\x01\xf8\x34\x22\x61\xd9\x65\x9f\x26\x83\xb5\x1c\x4d\xae\xb6\x04\x58\xc7\xd1\x77\x51\xac\x46\x53\xce\xfd\x17\x04\x7f\x60\xe2\x6b\x0d\x20\xea\x92\x62\x1b\x42\xa2\xe9\x2a\x1f\x99\x97\x5e\xbc\x33\x88\xba\x33\x52\x60\x68\x17\x95\x5a\xbf\x17\x00\xcd\x1a\xbf\x4d\xfa\x7d\x10\xd3\x8a\x6a\x4a\x8d\x4f\x89\x3f\x84\xa0\x59\x01\xce\xaa\x90\x37\x40\xab\xde\xc0\x5b\xc0\xb2\x0d\x76\xe9\x9a\x75\x6f\x53\x72\x6b\x0b\xbc\x45\xe5\x10\xa8\xd6\x8b\x1a\xbd\x26\xe5\x10\xe8\x25\x66\xd4\x9e\x22\x71\xd6\x39\x5c\x06\x75\x26\xc5\xb2\x79\x11\x64\x31\x05\xf8\x12\xfe\xf0\x8b\x23\x95\x15\x91\x4a\x31\x31\xc1\x40\xdd\x72\x71\xed\x29\x41\x98\x8c\xa8\x9a\xf9\x32\x75\x5d\x3a\xe2\xd5\x77\x3f\xd4\xd7\xe9\x56\x5f\x3f\x5d\xb4\x82\xf7\x8f\xf4\x55\x94\x55\x03\xc5\x14\x0b\x08\xf0\x81\xde\xcc\x7e\x9b\xbc\x91\x01\x96\x42\xa9\x05\x6d\x73\xb1\x88\x6d\x36\x85\x66\x7e\x4d\x2d\x8d\x2e\xfe\xf8\x3e\x1b\xdb\x79\x25\xcb\x0e\x6a\x6a\x3d\xd9\x82\x9a\xd8\x21\x8d\x43\x9a\x47\x45\x9a\x4a\xfa\x66\x39\xa6\x69\xf2\x67\x81\x1d\xbd\x2c\x49\x2f\x61\x32\xa0\xec\x77\x10\x32\xdb\x2d\x7e\xbd\xf7\x7a\xaf\x8d\x5f\x00\xdd\xe4\x2b\xba\x54\x44\x79\x5d\x3f\xf6\x4e\x13\x21\xde\x49\x45\x7a\x8d\x52\x06\x2b\xc9\x82\x98\xc7\x85\x54\x0e\xd7\x90\x0c\xa1\x05\x6e\xc9\xb5\x7c\x77\xa7\xbc\xee\xe9\x79\x5e\xe2\xdb\xfc\x0f\xf4\xad\x44\xdf\x71\x65\xf1\xc2\x30\x32\x47\x59\xcd\x69\x0b\x0f\xe8\xb2\xfb\x63\x69\x76\xc8\x1a\xbb\xd5\x6c\x01\x3e\x78\xc0\x1e\xa6\x4f\xfe\x84\x0d\xdf\xeb\xeb\x9e\x9e\xdb\xdf\x2c\x77\x54\xe8\x76\xfb\xfe\x21\x5c\xb8\x95\xdd\x56\xcf\x39\x3d\x9d\xb4\xda\xad\xfd\xd4\xc3\xb1\xf4\x87\x10\x91\xc9\x3a\xdd\x6e\xa7\x62\x35\x4a\xa7\x45\x40\xc4\x75\xda\x52\x91\xc1\x64\xe4\xad\x6f\x00\x67\xc6\xb3\x24\xbb\x31\x88\x3e\x1e\x3f\x56\x41\x14\x87\x44\x51\x36\x18\xab\x83\x43\x2a\x95\xe5\x46\x05\x25\xc3\xdf\xb5\x03\x56\xbd\x75\xc2\x5e\x85\xb1\x54\x70\xa7\xaa\xbf\xe8\xdf\x64\xf7\xf8\x64\x09\x11\xc2\xd8\x3a\xfc\x52\xe7\x26\x0d\x3f\x4d\x60\xf6\x2f\xfb\x94\xd1\xbc\x18\xce\x38\x8d\x97\x4e\x9d\xda\x42\x89\x3c\x6c\xda\xa1\x81\x32\x3f\x4c\x02\x38\x09\xeb\xc0\x6f\xfc\x62\x67\x1a\x8c\xed\x5b\x45\x49\xa8\x68\x75\xe2\x66\x93\xbc\xe6\x82\x09\xdc\x4d\x62\x22\x42\xf8\x6b\x02\x62\xd4\xac\xf7\x13\xdf\x69\x15\xa4\x03\xb8\x2b\x19\x1f\xcb\x6b\x1a\x5f\x89\xf0\x72\xc4\xfc\xba\x6d\xc6\x6a\x84\x54\x64\x60\x86\x5c\xfe\x3b\xef\x0f\x2e\x9e\xad\x74\x5c\xcb\xea\x1b\x67\x21\x34\xd5\xcc\x3a\x91\x48\xe8\xa6\x37\x2a\x6c\x58\x6e\xe5\x8e\x70\x9f\xba\x2a\x35\x16\xcc\x9c\xb4\x9f\xae\x30\x98\xf1\xdb\xdd\x56\x27\xff\xbe\x35\x56\x3c\x13\xe2\xc2\x75\x31\xf5\xaf\x0d\xa0\x66\x57\x67\x16\xf3\xf2\xb4\x8a\x1d\x36\x71\xc7\x5a\x60\xf2\xb9\x68\x0e\x0e\xec\x83\xd6\xe4\x9b\xda\xb8\x63\xfd\xdc\xb2\x0f\x0e\xf6\xed\x33\xd6\xba\xd1\xb6\x7e\x6e\x05\xa9\xe7\x7f\xc9\x75\xa0\x11\x78\x96\x57\xcc\x7d\x8a\x7d\xe3\xd7\xf6\x8d\xed\xa7\xb4\x0f\xed\x03\xeb\x3b\x0e\x6f\x02\xbb\xbf\x79\x5f\x0a\xe6\xfb\x93\x1b\xe8\xc6\x3d\xc1\x6f\x65\xe6\xbd\xd6\x2e\xd4\x38\xb8\x98\x82\x9c\xdd\x2e\x48\x85\xce\x41\x98\x40\xae\x61\xef\x8c\x33\xaa\xb8\xd0\x41\xc6\x5c\x99\x98\x5f\xf1\xf0\x7e\xfa\x5f\xab\x95\x4a\x6f\xc6\x71\xee\x70\xeb\x7e\xeb\x7f\x01\x00\x00\xff\xff\xbf\x99\xc5\x83\x19\x89\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xe7, 0x9d, 0x9c, 0x6e, 0x62, 0x9b, 0x32, 0x5f, 0x24, 0xf3, 0xd1, 0xfc, 0x7b, 0xb9, 0x67, 0xc0, 0x5d, 0xf, 0x96, 0xee, 0x99, 0xab, 0x9f, 0x85, 0x65, 0xfe, 0x20, 0xdf, 0x39, 0xa0, 0x98}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _es_dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xf8\x30\x74\x40\x82\x5a\xce\x52\x04\x7e\x4b\xd7\xb5\x28\x90\xa2\xdd\x32\xec\x25\x08\x0c\x5a\x3c\x96\x38\x53\xa4\x40\x1e\x39\x76\x0b\xff\xf7\x81\xd4\x8d\xba\xb4\xc9\x8c\xac\x6b\x51\x3d\x45\xfa\x78\x48\x7e\xe7\xfa\x21\xd6\xa7\x13\x42\x28\x53\x4a\x23\x43\xa1\x95\xa5\x0b\xe2\x20\x42\xa8\x14\x16\xe9\x82\xdc\xfa\x37\x52\xa1\x7e\x65\x55\x08\x89\x6f\x15\x5d\x90\xe8\xb4\x45\x39\x43\x66\x75\x61\x62\xa0\x0b\x42\xcf\xce\xc8\x1b\xc3\xd6\x4c\x31\x72\x76\x46\x03\x33\x50\x6c\x25\x9d\x09\x9a\x02\x02\x3c\x15\x7c\x04\x15\xb1\x56\xbf\x6a\xa9\x8d\x3b\xd3\x24\x2b\xf6\x6c\x76\x4a\xe6\x51\x74\x4a\xe6\x17\x17\xa7\x24\xfa\x39\x3c\x5a\xb1\xcc\xdf\x7d\xd5\xba\x43\x7e\x22\x57\x12\x0c\xda\xd0\x0e\xf7\xb9\xb7\xe3\xcc\xa6\x2b\xcd\x0c\xa7\xd5\xda\xc1\xff\xbd\x3b\x21\xe4\xe0\xcc\x29\x70\x81\x3d\xb6\x34\x51\x80\x6f\x39\x5d\x10\x55\x48\x59\x22\x86\xe5\xe9\x9f\x5a\x4b\x14\x39\x5d\x90\x99\x07\x85\x33\x39\xf7\x8f\x52\xa8\x8d\x8b\xeb\xed\x9d\x7f\xcd\x99\x02\x69\x9b\xc8\xd6\x71\xa5\x4c\x0a\x66\xbd\xaf\x3e\x09\x87\x9a\x30\x5d\x31\x8f\xac\x99\xb4\x4d\x68\x3c\xf7\x6b\x50\x09\xa6\x2e\x0d\xb3\x0e\x0e\x63\xe6\x41\x72\x6a\xe6\x7e\x65\x2d\xa4\x0c\x33\xe9\x81\x37\x86\x71\x01\x0a\x6b\x77\xfc\x42\x62\x04\xff\xa0\xdb\x0a\x29\xd3\x46\x17\xe4\x32\x88\xed\xbd\x3b\x6b\x1e\x00\xbb\xf0\x0c\x42\xe8\xde\xbd\xd7\xf1\x6e\xce\x4e\x05\xe7\xa0\x6e\xc0\x88\x11\xf2\x3e\x96\xcd\x25\x54\x42\x02\x8a\x77\x69\xb0\x6d\xd2\xdf\x46\x08\x8d\x0b\x63\x4a\x2f\xfa\x2b\x19\xdb\x8d\xa1\x42\x8d\xa0\x36\xd5\xf7\xc3\xca\x44\x8d\x4c\x8e\x58\x6f\x99\x2c\x5a\x1f\x06\x8e\x4a\xa1\xfc\x6a\x78\x9a\x07\xef\x05\x2f\x73\xd9\xa0\x2e\x4d\x1f\xb4\x50\xf8\x4e\xfb\xd6\xf0\x40\x53\xc7\x54\xe7\xdd\x86\x6d\xf2\x7c\xdd\xd4\xdb\xe0\xf6\x1c\x4c\x0c\x0a\x59\x02\x83\x20\xe7\xee\x26\x97\xf6\xc2\xed\x9d\x77\xf1\x61\x4e\x0c\x28\x0e\x06\x7c\x5f\xae\xa5\xc6\x96\x97\xf5\x49\x7c\xbf\x05\x63\x04\x87\xb6\xf0\xcb\xc5\x9c\xc5\x30\x56\xb7\x16\x59\xbc\x19\xdc\x62\x11\xf2\x1c\xf8\xb5\x50\x43\xc2\xc8\x4c\x02\x68\x83\x11\x15\x0e\x29\xd7\xbd\xbb\xbc\x1c\x1b\x0c\xe1\x19\x48\x66\x51\xc4\x16\x98\x89\xd3\xa5\x50\x5c\xc4\x60\x97\xd5\xeb\x1a\x30\x4e\x97\x3e\xa3\xb7\x51\x76\x17\x0e\x95\xa6\xde\x5e\x6b\x93\x31\xac\xcf\xeb\x5a\x18\x58\xfb\x91\x40\xaf\x68\x03\x1f\xaa\xa7\xd6\x77\x4c\x0d\xd8\x54\x4b\xde\x8b\x09\x8a\x0c\x5e\x1b\x9d\xf5\x3b\xd3\xe1\x7f\x40\x52\x25\xb9\xb7\xe1\x26\x15\x6b\x1c\xee\x40\x3f\xac\xe8\xef\x05\x98\x3d\xe9\x10\xa5\xd8\x4c\xa8\x4f\x61\x6d\x33\x03\x7c\x58\xdd\x56\x1b\xec\x35\xae\x2f\xec\x65\x3d\x3b\x5d\x04\xb7\x82\x17\x4c\xd2\x41\x95\xd5\x36\x7e\x30\xb6\x04\x76\x6c\x27\x7a\xe5\xba\x2a\xe2\x4d\x99\xc3\xd0\x0f\xd7\x89\x55\xc9\x3b\x57\x47\x46\x7c\xcf\x7a\xbc\x43\x9b\x4e\x1c\x69\x84\x3d\xdb\xc1\x17\x4a\x67\xdd\x24\x5b\x69\xd5\x4b\xb6\x64\x2b\x90\x75\x90\x05\xd8\xe7\xb6\xb7\xae\x93\x97\xcc\x42\x57\x1d\x9b\x91\xd3\x65\xde\xcc\x9c\x01\x1c\xb8\xd4\x96\xd4\xe9\x43\x6c\x6d\xea\xf2\x36\x4a\x77\x70\xc3\x7f\xc8\x73\x50\xfa\xfb\x61\xea\x99\x14\xc9\xd8\xb4\xf5\xf8\x35\x6c\x1b\xd2\x1d\x6d\xae\x42\xf0\x23\x88\x66\x07\x38\x56\x35\x7f\x99\x54\x73\x52\xcd\xa7\x56\x4d\xa1\x38\xec\x84\x4a\xca\x87\x47\xeb\x66\xbd\xed\x11\xda\xf9\x99\x41\xf7\x6f\xb8\x71\x90\x80\xf0\x68\x72\xde\xdc\x57\xc6\x38\xbb\x97\xdf\x88\xb2\xbf\xd2\x71\x91\x81\x42\x4b\x6a\x4f\x9f\xd7\xd4\x27\xbd\x7f\x02\xbd\xff\x82\x82\xd2\xf7\xf9\x24\xf6\x93\xd8\x7f\x95\xff\x90\x2f\x8f\xd0\xfa\xf9\xa4\xf5\x93\xd6\x1f\xa5\xf5\xe3\x52\xca\x75\xdc\x9f\x76\x7d\xd1\x1c\x58\x1c\xa3\xe6\x9f\xbf\xbd\x12\x71\xee\xcd\x1f\x64\x42\x2a\xeb\xef\x4b\xc1\x03\xbe\x93\x64\x3f\xb5\x64\x7f\x4d\x1d\x9c\xf4\xfa\x07\xd2\xeb\xc1\x3f\xe7\xc7\x08\xf6\x8b\x49\xb0\x27\xc1\x7e\x42\xc1\xb6\xa8\x0d\x2c\xad\xf8\x08\xcb\xd5\x1e\xe1\x01\xf1\x76\x76\xdf\xf8\xcf\xd8\x37\xce\x21\x5e\xea\x24\xe9\xf0\x9d\xa4\xf2\x28\xa9\xe4\x10\x8f\x55\xc6\xa4\x96\xff\x87\x5a\x9e\x54\xc7\xba\xbe\x73\x2d\xe5\xbc\x8e\x66\x65\x6e\xa8\x8d\x53\xc8\xd8\x5f\x60\xac\xd0\xee\xec\xf9\xbc\x84\x71\x2f\xab\x6f\xd7\x66\x53\x5a\x22\x4b\x82\xaf\xcb\x08\x59\x2e\x19\x0a\x95\x0c\xbf\xe4\xb7\x1f\xb6\x7d\x21\x36\xeb\xeb\xb2\x6b\xa9\xd2\xf7\x67\xd1\x45\x56\x05\x9d\xa2\xae\x40\xda\xd9\x97\x8b\x78\xe3\x87\x64\xb5\xbb\x62\xbf\x14\x0a\xc1\x6c\x99\x0c\x0b\x91\x5e\xb4\xa5\xd6\xf8\xe6\x5f\xce\xc3\x97\x28\x6b\x9f\x2f\x82\xe7\x28\x7c\x39\x9f\x85\x2b\x41\x27\xce\x83\xe7\xa8\xfa\x96\xdf\x75\xf5\xa3\xf6\xc3\x96\x56\x01\xab\xc7\xcb\x6f\xe1\x14\x25\x99\x56\x02\xb5\xa9\x7f\xa0\xa4\x85\xd7\x68\xfa\xea\xf2\x3a\x7b\xf1\xf7\xe6\x5d\x15\xed\x6d\x93\x91\x68\x76\x72\xf8\x27\x00\x00\xff\xff\x22\xec\x09\x54\x3e\x21\x00\x00")

func es_dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_es_dashboard_dataJson,
		"es_dashboard_data.json",
	)
}

func es_dashboard_dataJson() (*asset, error) {
	bytes, err := es_dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "es_dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x46, 0xe9, 0xd1, 0x18, 0xcb, 0xff, 0x63, 0x5e, 0xd6, 0x30, 0x59, 0x59, 0x16, 0x1e, 0xc9, 0x1c, 0xa7, 0x6b, 0xe1, 0x2e, 0x3, 0x1b, 0x66, 0xeb, 0xb9, 0xfa, 0xec, 0xe6, 0x5f, 0xb2, 0x5a}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xbd\x4e\xc4\x30\x10\x84\xfb\x3c\x85\x15\x51\x51\xb8\x49\x4d\x45\x49\xc9\x03\xac\x36\xeb\x11\x58\xf9\x95\x77\x7d\x10\x9d\xee\xdd\x91\x92\xb8\xb8\x23\x84\xce\xd2\xcc\xf7\x79\x76\xca\x36\x67\x73\x75\x1c\xd5\x78\x14\x68\xed\xae\x95\x73\x17\xee\x33\xdc\x8b\xab\x9f\xae\xfc\xa5\x54\x52\xcf\xf3\x4c\x8a\x74\x41\xf2\xcf\xb7\xba\xba\x55\x55\x11\x84\xf6\xb5\xcf\x6a\x48\x87\x82\x14\x94\x64\xcb\x7d\x68\xcb\xf3\xde\xc0\x1f\x18\xed\x9f\xff\xfb\x89\x83\x41\x8d\xd6\xf2\xe3\x86\x01\x96\xa2\xe8\xfb\x3a\xf0\x5c\xb4\x57\xf7\x63\xee\x35\x73\x9a\xbe\x97\x73\x7c\xad\x1c\xc2\xe8\x59\x2d\xca\xc9\x86\xbd\xa1\xe0\x24\x9f\x14\xa6\x81\xe3\xe8\x71\x3c\x45\x9b\x36\x4b\x07\xdb\x44\xbf\x54\xda\xd0\x96\xfb\x52\x7c\xc4\xdf\xb0\xfc\xc1\x46\x1e\x88\x45\xa0\x4a\x1d\x16\xaf\x4d\x87\x65\xa5\x7f\x02\x00\x00\xff\xff\x3c\xc7\x94\x07\x13\x02\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0x33, 0x41, 0x76, 0x86, 0x79, 0xa8, 0x17, 0x9f, 0xd3, 0x29, 0x10, 0x3b, 0xf1, 0x6, 0x24, 0xeb, 0xa3, 0x90, 0xc0, 0x68, 0x2e, 0xfe, 0xd2, 0xec, 0x16, 0x3e, 0x79, 0xb7, 0xef, 0xa6, 0xb2}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcd\x8e\xd4\x30\x0c\xbe\xf7\x29\xac\x70\x85\x6a\x59\xb4\xfc\x1c\x7a\xe4\x29\x10\x8a\xdc\xd4\xdb\x8d\x36\x8d\x43\x9c\x74\x28\x68\xde\x1d\xb5\x9d\x11\x2d\x13\x4d\x2f\xe4\xe8\xef\x27\xf6\xa7\x6f\xc4\x68\xb1\x75\x04\xca\xb8\x2c\x89\xa2\xf6\x38\x90\x82\xdf\xd5\xb9\xaa\xfe\x82\x18\x82\xb6\x5e\x12\x7a\x43\xda\x70\xf6\xe9\x3e\x25\x4d\xa1\x60\xd2\x93\x4f\x87\x36\x7b\xd2\xc6\xe8\x0d\x7c\x75\x28\xc9\x1a\x21\x8c\xe6\x05\xae\x1a\xd9\xca\x49\x8e\x3e\xd8\x32\x8a\x6b\x92\xe8\x91\xa2\x58\xf6\x45\x28\x98\xd2\xd8\x44\xc2\x44\x3a\xb2\x2b\x1a\x52\x2b\x9a\x43\xb2\xec\x65\x86\x01\x3a\x7a\xc6\xec\x12\x34\xf0\xad\x02\x80\x65\x36\xbf\x91\x5d\x1e\xd6\xc5\xa0\x01\xd5\x87\x47\xb5\x47\xc4\xfe\x9a\x91\xf7\x0f\xcb\xf8\xfc\xb6\x02\xf8\xbe\xff\x2e\x44\xfe\x39\x1d\xdc\xd8\xb5\x47\x31\x6d\x19\xe4\x7b\xeb\x0f\x4c\x1c\x8a\x94\x18\xab\x76\x9b\x28\xc0\xe5\xba\x01\xc3\x2e\x89\x35\x03\x85\x39\x72\xc4\x77\xc3\x24\x3f\x9c\x5a\x6f\x6f\x40\x3d\xd5\x9f\xea\x65\xa4\x57\xbc\x7e\xac\x1f\x3e\xd4\x97\x74\xae\x9a\xc0\x92\xfa\x48\x8b\xb0\x01\xf5\xa5\xfe\x58\x7f\x9e\x19\xe7\x9b\xb5\xb2\x50\x2c\x36\xbd\x6b\x75\x40\x91\x13\xc7\xee\x06\x13\x79\xd1\x21\xb7\xce\x1a\xfd\x4a\xd3\x0d\x3c\x60\x4a\x14\x07\x96\xa4\x3b\x3e\x79\xc7\xd8\xe9\x1c\xdd\x3d\x9e\xb3\x86\xbc\x90\x7e\xb6\x85\xde\x2c\x06\x89\x8e\xec\x22\x73\xd2\xad\x63\xf3\xaa\x3b\x1a\xad\xa1\xff\xd3\xb0\xa7\x7f\x1a\xf6\x27\x00\x00\xff\xff\x4f\x42\x2e\xe6\x2a\x04\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0xa7, 0x46, 0xd8, 0x98, 0x87, 0x46, 0x7a, 0x69, 0xcc, 0x9, 0xbe, 0xea, 0x39, 0xa1, 0xd6, 0x9c, 0x39, 0xd5, 0x17, 0x0, 0x30, 0xd3, 0x4d, 0x39, 0x4d, 0x43, 0x4c, 0xa9, 0xc5, 0x1c, 0x53}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":             clusterTf,
	"dashboard.yaml":         dashboardYaml,
	"dashboard_data.json":    dashboard_dataJson,
	"datasource.yaml":        datasourceYaml,
	"es_dashboard_data.json": es_dashboard_dataJson,
	"outputs.tf":             outputsTf,
	"variables.tf":           variablesTf,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":             &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":         &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json":    &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":        &bintree{datasourceYaml, map[string]*bintree{}},
	"es_dashboard_data.json": &bintree{es_dashboard_dataJson, map[string]*bintree{}},
	"outputs.tf":             &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":           &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
