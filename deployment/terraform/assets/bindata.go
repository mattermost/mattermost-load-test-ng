// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (7.688kB)
// assets/outputs.tf (276B)
// assets/variables.tf (484B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\xe3\xb8\x11\xfe\xee\x5f\x31\xd5\x2e\x70\x6d\x51\x49\x4e\xe2\xcd\x26\x3d\xa4\xc5\xf6\x0d\x28\xd0\x6b\x0f\xe8\x01\xfd\xb0\x08\x04\x8a\x1c\x5b\xac\x29\x92\x47\x52\x76\xb4\xdb\xf4\xb7\x17\xa4\x24\x4b\x96\x5f\xd7\x7b\xb9\x6d\x8b\x4b\xbe\x18\xe4\xc3\x99\xe1\x33\x33\x0f\x49\x69\xa3\x56\x9c\xa1\x81\x88\xac\x6d\x04\x1f\x27\x00\xda\xa8\x39\x17\x08\x0f\x10\x31\x9c\x93\x4a\xb8\x68\x02\x60\x70\xc1\x95\x04\x3f\x5a\xd9\x18\x89\x75\xf1\xb5\x1f\x5f\xa1\xb1\x7e\xe2\x01\xa2\x7f\xff\x06\xae\x93\xd9\xdb\x68\xf2\x3c\x99\x18\xb4\xaa\x32\x14\x83\xdd\x6c\x89\x75\xa6\x09\x37\x11\x44\x4b\xac\x1b\x37\x7e\x4c\x92\x12\x21\xd8\x7c\xfd\x71\x45\x4c\x42\x45\x65\x1d\x9a\x30\xfe\x1c\x2f\xb1\x0e\x8b\x7c\x4c\x55\x2e\x38\xf5\x76\xe0\x01\x7c\x74\x3f\xf7\x70\x6b\x8b\xac\x9f\xf9\xc5\xae\x5f\x2e\xad\x23\x92\x62\x04\x11\xd1\x3a\xb3\x68\x56\x68\x1a\xf7\x8e\x2c\x2c\x3c\x84\x9f\x00\x7f\xf5\x71\x1c\x88\x82\x68\x1d\xbf\xfe\x48\x55\x25\x5d\xc2\x25\xc3\xa7\x67\x1f\xd0\xf3\x64\x02\x40\x95\x94\x48\x9d\xdf\x7e\x63\xe7\x15\x7c\x57\x20\xb4\xac\x41\x65\xd1\x84\x1d\xce\x95\x01\x55\x19\x78\xf7\xcd\x9f\x03\xcc\xd5\x3a\xb8\xb3\xb6\x88\xc2\x80\x47\x06\x66\xf3\x4a\xba\xaa\x19\x2b\x94\x75\xf0\x00\x16\xc5\x3c\x69\x37\xc9\x75\xe7\x99\x94\x1c\xfa\xbf\x07\x88\x48\xc9\xe3\xe9\x9c\x5e\x4f\x19\xbb\x62\x64\x36\xbd\x7d\x7b\x37\xcd\x23\x78\x05\x57\x77\xc9\x74\x06\x7f\xf9\xee\xef\x13\x80\x8e\x8e\xac\x0b\x80\xbe\x49\x9e\x04\x31\x0b\x8c\x60\xf8\xf7\x0a\xde\x89\x35\xa9\xad\x8f\x0b\x36\x98\xb0\x0d\xaa\xa4\xe5\xd6\xa1\xa4\xf5\x76\x0e\x43\x18\xc3\x5c\x27\x4b\xac\x13\xce\x02\x4d\x95\x74\x83\x60\x3d\xc7\x3e\x1d\x9b\x70\x02\xc0\xd7\x92\xa6\x99\x45\x5a\x19\xee\xea\x6c\x61\x54\xa5\x33\xce\x7c\x96\xde\x07\x46\xa2\xd7\x1f\xbd\x83\x6d\x84\xb7\x94\x70\xf6\x1c\xfd\xea\x38\x26\x5b\x28\x6b\x79\x03\xf5\x0c\x3e\x4e\x9a\x52\x5f\x71\x5f\xbe\xbe\x01\x7c\x59\x45\x6d\x22\xdb\x22\x1a\x04\x5c\x12\xe7\xd0\x94\xca\xba\x4c\x70\x8a\xd2\x62\xe6\x17\x04\x34\x43\xeb\xb8\x24\xae\xed\x83\xb4\x50\x25\xa6\x4d\x2e\xd3\x7e\xdd\xc0\x44\xdc\x9a\xd8\x54\xd2\x56\x20\x06\x4b\xe5\x30\xc6\x27\xa4\x5d\x3c\x5c\x0a\x2e\x71\xc3\x04\x40\xb4\x2e\x7c\x8f\xbe\x87\x9f\x41\x3c\x87\x74\x45\x4c\x2a\x78\x9e\x52\xa1\x2a\x96\x76\xc4\xa6\xb9\x52\x2e\x9e\x73\xc9\x6d\x81\x0c\x1e\xbf\x06\xa6\x00\x69\xa1\xe0\xab\x7f\x10\xee\xb8\x5c\x34\x39\xf5\x8b\x62\x2e\xb9\x4b\x92\xe4\xab\xaf\xc1\x0a\x44\x0d\x57\x1e\x2d\xb1\xe5\xd5\x7b\x5c\xa0\x83\x38\x96\x2a\xa6\x05\xd2\x65\x4c\xd1\x38\x3e\xe7\x94\x38\x84\xf8\xfb\xbf\x41\x0c\x85\x73\xda\xfe\x3a\x4d\xed\x4d\x8c\x55\xbc\x46\xeb\xe2\xab\x84\x94\xe4\x83\x92\x64\x6d\x13\xaa\xca\x94\x61\x9e\x18\x95\x57\xd6\x69\x34\x14\xb5\xe7\x2c\xe1\x2a\x9d\x5d\xfd\xf1\x4f\xbf\xbf\xbf\xff\x43\xb2\xd0\x0b\xf8\x17\xd8\x8a\x29\x20\xda\x79\x0d\x00\xc2\x18\xc4\x7d\x1c\x9b\xb9\x10\x4f\x0d\x95\x66\xc4\xe1\x81\xf9\x40\x85\x10\x1e\xf7\xcf\xef\x4f\x63\xb4\x51\x25\xba\x02\x2b\x1b\x4b\xc5\x7c\x0e\xb4\x32\x0e\xcd\x88\x85\x46\x27\x06\x25\xc1\xd4\x5a\x0a\x45\x58\x56\x19\xf1\xdc\x83\x1d\x31\xf0\xf4\x61\x0e\x83\xcc\xff\x32\x71\xc4\x24\x8b\x0f\xa3\x58\xca\xd5\x00\x04\xa9\xd2\x2e\x1d\x23\x96\x8c\x1b\x88\x75\x33\xd9\x83\x53\x46\x1c\x69\x24\xe3\x31\x94\xd3\x31\x15\x2c\xd1\x19\x4e\xed\x65\x4a\xd8\x2e\xfe\xff\x91\x3f\x77\x9d\x34\xea\x77\xa6\x94\x5d\x2a\x51\x2d\x71\x1b\x99\xda\xd5\x9e\x9f\x5a\xfe\x45\x5a\xbe\x6f\xe7\x11\xd6\xd6\xd6\x61\x49\x9d\x00\x94\x24\x17\x78\x18\xb9\xc7\x2a\x61\x2c\x54\xac\xe0\xf9\x5c\x49\x47\x95\x9c\xf3\xc5\xd5\x88\xb5\x8e\x18\x26\x92\x85\x21\x73\x22\x49\x20\x43\x59\x9b\x1a\x14\x48\x2c\xa6\xed\x78\x76\x9b\xdc\x26\xd7\x19\x29\xd9\xed\x2c\x61\x98\x8f\x02\x60\x7a\xb9\x80\x98\xc3\x79\xe8\x7e\x63\x8c\x60\xa9\x64\x6c\xd0\xeb\xd2\xa9\xed\xb7\xc6\xe3\x56\x17\x46\x68\x34\x2b\x4e\xc7\x20\xb0\x8e\x18\x77\xae\xf0\x68\xa3\x9e\xea\xcb\x64\x27\x2c\x6d\x44\x67\xdc\xf9\xdb\x7f\x07\x75\x60\xa7\xf7\x77\xd6\x95\xb3\xee\x22\xe4\x7d\x58\xab\x28\x27\x0e\xb3\x8d\xf0\x64\x84\x31\x83\xd6\x07\xec\x4c\x85\x97\x0a\x41\xd8\x4a\x73\x05\x69\x48\xdb\x56\x9d\xa3\xca\xf3\xe5\xd4\xf6\x7f\x41\xa9\x2e\x55\x08\xb9\xe0\xf2\xe9\x87\xe9\xa1\x7d\xa6\x4c\x19\x18\x40\x47\xd3\x30\x9d\x5a\xee\xd0\xc6\xcd\x0a\x96\x76\xef\xab\xed\x45\x42\x42\x3c\xb7\xbb\xab\xc8\x8a\x70\xe1\x17\xa6\xc3\xab\xc2\x21\xdb\x3d\x66\xd4\xa3\xa3\x26\x35\xcc\x66\x5d\xc3\x0d\x1a\x76\x3c\xd4\x3e\x0e\xb7\xef\xf2\x6d\xc5\xfa\x9e\x65\xf9\xee\x7d\x9e\x33\x94\xfe\xbc\x40\x33\xec\xb5\x7d\x3d\xce\xf2\x3d\x6f\xac\x4d\x08\xbd\x99\xa6\x3b\x06\x21\x7b\xbf\xdd\xcf\xf0\xd8\xe8\x83\x10\xc4\xda\x43\x01\xfa\xb9\x09\x00\x7a\xe2\xf0\xc4\x6e\x1a\x90\xd7\x05\xad\x45\x9d\xf1\xb2\x44\xe6\xd5\x41\xd4\xd0\xc9\xc1\x8e\xf2\x0d\x22\x8c\x20\xea\x63\x6c\x49\xdc\xdd\xd8\x61\x62\x3c\x13\xfe\x8a\x97\x13\x8b\x43\xad\xd8\xbf\xa0\xc1\x97\x24\x8c\x6c\x34\x61\x6b\x63\xdd\x68\x8f\xd3\xc4\xda\xb5\x32\x6c\x1b\xd7\x8d\x4e\x00\xec\x92\xeb\x6c\xce\x25\x11\x99\x95\x44\xdb\x42\xb9\x5e\x09\xf7\xd0\xd2\x4f\xee\x61\xf8\x18\xc5\xcd\x8f\xac\xfb\xa8\xb0\x0d\xdf\x9e\x7c\xbf\xdf\xc8\xe3\xf1\x5b\xda\x7e\x5d\x66\x79\x10\xe5\xc7\xdd\x44\x6e\x03\x9b\xef\x08\x4d\x12\x87\xb2\x7d\xe4\xd3\x41\x67\x20\x6e\x0c\x4c\xc2\x6b\x91\x1a\xae\xbb\xd7\xe2\x3b\xad\xa1\x03\x41\x00\x05\xdd\xf3\x8a\xe3\xd0\xba\xae\x58\x60\x8f\x83\xf0\x90\xe5\x72\x11\x4e\xa6\x46\x8b\xe7\x46\x95\x99\x7f\xb3\x84\xa8\xae\xaf\x9b\x23\x40\x75\x43\x83\x41\x6d\x94\x53\x54\x89\x36\x7e\x47\x75\xa3\x13\x94\x33\x93\xe5\x42\xd1\x65\x43\xd8\x34\x09\xff\xe9\x34\x7a\x6c\xcf\xe0\x63\x1e\xef\xa6\xb7\x6f\xf6\xf8\xdc\x0c\xff\xf0\x5e\x83\xf1\xb7\x23\x9f\x83\xc1\xde\xe3\xd0\xdf\x2b\xf8\x86\xd4\x39\x82\x41\xeb\xef\xe6\x0e\x94\x14\x75\xb0\x0a\xdf\x6e\xae\x82\xd0\xde\x74\x7e\xdb\x2e\xf9\x5d\xe5\xa0\x20\x92\xd5\xd0\x1c\x70\x8e\x2c\xfd\x31\xd5\x7e\x30\xb3\xb0\xe6\xae\x50\x95\x83\x92\xc8\x8a\x08\x51\x83\xb5\x45\xec\x11\x5c\x3a\x05\xae\xc0\xd6\x60\xf2\xd9\x44\x37\xf4\xdd\x5f\x4d\xa7\x3b\x64\x8f\xa6\x86\x84\x8f\x49\xdf\x2e\xee\x23\xfd\x31\x7c\xc0\x74\xc1\xe1\xe1\x22\xd8\x0d\xaa\x1b\x1b\xa5\x3f\xbe\x3a\x2f\xfb\x67\xb5\x65\xfb\x85\xe7\x33\xba\x33\x6e\x2d\x9c\xdd\xa4\x0d\xfe\xcc\x5e\x3d\x9d\xcf\xbb\xe9\xdb\xd9\x81\x7c\x6e\xa6\xf6\xe4\xb3\x62\x9f\x9a\xcf\xee\x9b\xd9\xb9\x85\x76\x61\x60\x9f\x5e\x68\x17\x04\xb6\x2b\x37\xa3\xa9\x2f\xc5\xd8\x25\x81\x7d\x3e\x63\x3f\x72\x5b\x9e\xea\x4b\x96\x0f\xfa\xf1\xf0\xe5\x6f\x7c\x4a\x9e\xc1\xf0\xcd\xcd\xf4\xf6\x00\xc3\x9b\xa9\x17\x60\xf8\x8c\xc8\xde\xcc\x6e\x76\xcf\xdd\xd1\xd4\x0b\x44\x76\x5a\x24\xbb\x0f\x78\x27\x33\xd2\x02\x3f\x2d\x2d\x5f\xe2\xba\x71\x3f\xbd\xdf\x57\xd5\x9b\xe1\x97\xf1\x7a\x33\xdd\x73\xee\x0e\x86\x2f\xf7\xfa\xdf\x75\xa8\x36\x5f\x5e\xce\x3d\x4f\x03\xfa\xf4\x7d\xf7\x5b\x0f\x7b\xb1\x1b\xef\xdd\x3e\x9a\xee\x3e\x2f\x2d\x5f\xa0\xea\x7f\xf4\x52\xf8\x4f\x00\x00\x00\xff\xff\x6d\x40\xac\x4a\x08\x1e\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 7688, mode: os.FileMode(0644), modTime: time.Unix(1585232302, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0x9c, 0xc5, 0xd7, 0xfb, 0xc4, 0x2d, 0x38, 0x17, 0xc9, 0xa, 0xe, 0x7a, 0x44, 0xbc, 0xb7, 0x4c, 0x83, 0x83, 0x1e, 0xae, 0x7b, 0xd6, 0xd6, 0xd6, 0x77, 0x62, 0x39, 0x46, 0x1d, 0x4f, 0xba}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\x3d\x0a\x02\x31\x10\x05\xe0\x3e\xa7\x18\x82\x95\x45\x6e\x60\x65\x65\x27\x78\x80\x90\x9f\x29\x02\x31\x1b\x66\x32\xab\xb2\xec\xdd\xc5\xdd\x4d\xb1\xa0\x76\x03\xef\xf1\xf1\x66\x90\x56\xa5\x81\x4e\x85\x9b\x2b\x01\x59\xc3\xa4\x00\x46\x97\x05\xe1\x04\xfa\x30\xb9\x07\xdb\x9e\x1a\x57\xab\x65\xa4\x11\xc9\x1c\x67\xad\x66\xa5\x3a\x10\xfd\x39\x0b\x37\xa4\xaf\x00\x45\xb6\x61\xcd\x4d\xf4\xfd\xdc\x0b\x77\x6c\x94\x02\xdf\x16\xfe\xff\x8c\xad\xba\x4d\xd9\x33\x95\x86\xe7\xeb\x72\x5d\x81\xdf\xc4\x52\xeb\xbf\x54\xf1\x39\x05\x1b\x0b\x7f\xac\x77\x00\x00\x00\xff\xff\xde\x45\x82\x8c\x14\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 276, mode: os.FileMode(0644), modTime: time.Unix(1585232304, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0x4c, 0x2d, 0xf9, 0xab, 0x22, 0x98, 0x3b, 0xa9, 0x1, 0xa8, 0x93, 0xc5, 0xc2, 0x1, 0x44, 0x7e, 0x2f, 0x5e, 0xc, 0xf3, 0x69, 0x72, 0xba, 0xb5, 0x7f, 0x65, 0xdc, 0xd, 0x7a, 0x31, 0x4f}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xc1\x6a\x2b\x31\x0c\x45\xf7\xf3\x15\xc2\xfb\x67\x1e\x09\x6d\xe9\x62\xbe\x45\x68\xc6\x4a\x6a\xaa\xb1\x5d\xc9\x4e\x18\x4a\xfe\xbd\x64\x52\x28\xc1\xa1\x50\x2f\x7d\xce\x95\x2e\x3a\x91\x46\x9a\x84\xc1\xcd\xd2\xac\xb2\x62\xa2\x85\x1d\x7c\x0e\x97\x61\xf8\x81\x54\x0a\xc6\x64\x95\xd2\xcc\x38\xe7\x96\x6a\xa7\x84\xe9\x2f\x06\xa7\x63\x4c\xfd\x9e\xbb\x21\x42\x66\x8f\x8c\x5b\x16\x4f\xac\x16\x73\xba\x1a\x00\x75\x2d\x0c\x23\x2c\x54\x06\x80\xc0\x07\x6a\x52\x61\xdc\x10\x80\xa3\xa6\x59\xe9\xdf\xb2\xda\x87\x38\xd8\xde\x08\xee\xc9\xbf\xf8\xed\x0b\x6f\xdc\xef\xfc\xff\xbd\xdf\xb9\xbb\x4c\xc9\x56\x8f\xca\x5b\x70\x04\xf7\xea\x9f\xfd\xfe\x6a\x5c\xba\x5a\xcd\x58\x1f\x1e\x2f\x4c\x58\xc8\xec\x9c\x35\x74\xcc\xec\x0d\x4b\x9b\x24\xce\xf8\xce\x6b\x87\x17\xaa\x95\x75\xc9\x56\x31\xe4\x73\x92\x4c\x01\x9b\xca\x6f\x9e\xc4\x99\x93\x31\x1e\xa2\x7c\x57\xf9\x0a\x00\x00\xff\xff\x32\x02\xbb\x2a\xe4\x01\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 484, mode: os.FileMode(0644), modTime: time.Unix(1585232306, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0xda, 0x65, 0x95, 0x47, 0x98, 0x11, 0x8a, 0xda, 0xd7, 0x30, 0x52, 0x64, 0x32, 0x74, 0x52, 0x21, 0x3f, 0xcd, 0x7b, 0x1c, 0x84, 0x23, 0x5e, 0x91, 0xf, 0xec, 0xd6, 0x8d, 0x4f, 0xb7, 0x9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":   clusterTf,
	"outputs.tf":   outputsTf,
	"variables.tf": variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":   &bintree{clusterTf, map[string]*bintree{}},
	"outputs.tf":   &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf": &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
