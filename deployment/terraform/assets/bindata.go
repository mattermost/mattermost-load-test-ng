// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/cluster.tf (10.463kB)
// assets/dashboard.yaml (228B)
// assets/dashboard_data.json (26.726kB)
// assets/datasource.yaml (296B)
// assets/outputs.tf (327B)
// assets/variables.tf (779B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x6f\xe3\x36\x12\xfe\xee\x5f\x31\xa7\x5d\xa0\xed\x61\x25\xd9\x49\x9a\x4d\x5a\xa4\x45\xef\x0d\x38\xa0\xbd\x16\xb8\x02\xf7\x61\x11\x08\x34\x39\x96\x08\x53\x24\x8f\xa4\x9c\x78\xf7\x72\xbf\xfd\x40\x4a\xb2\x65\x59\x72\xbc\xde\x4d\x77\x7b\xbb\xc9\x17\x63\x38\x33\x1c\x3e\x33\xf3\xf0\x45\xda\xa8\x15\x67\x68\x20\x22\x77\x36\x82\x37\x13\x00\x6d\xd4\x82\x0b\x84\x1b\x88\xca\x32\x16\x8a\x30\x87\xd6\x45\x13\x00\x83\x39\x57\x12\xfc\x48\x65\x63\x24\xd6\xc5\x67\x5e\xbe\x42\x63\xfd\xc0\x0d\x44\xff\xfd\x0e\xce\x92\x8b\x97\xd1\xe4\x61\x32\x31\x68\x55\x65\x28\x06\xdf\xd9\x12\xd7\x99\x26\xdc\x44\x10\x2d\x71\x5d\x4f\xe5\x65\x92\x94\x08\xc1\xe7\xf3\x37\x2b\x62\x12\x2a\x2a\xeb\xd0\x04\xf9\x43\xbc\xc4\x75\x30\xf2\x71\x55\x73\xc1\xa9\xf7\x03\x37\xe0\x23\xfc\xd2\xab\x5b\x5b\x64\xdb\x91\xaf\xf6\xe7\xe5\xd2\x3a\x22\x29\x46\x10\x11\xad\x33\x8b\x66\x85\xa6\x9e\xde\x91\xdc\xc2\x4d\xf8\x09\xf0\x0f\x1f\xc7\x48\x14\x44\xeb\xf8\xf9\x1b\xaa\x2a\xe9\x12\x2e\x19\xde\x3f\xf8\x80\x1e\x26\x13\x00\xaa\xa4\x44\xea\xfc\xf2\x6b\x3f\xcf\xe0\xd7\x02\x81\xe1\x82\x54\xc2\x41\x65\xd1\x84\x15\x2e\x94\x01\x55\x19\xf8\xe1\xa7\xbf\x07\x35\xb7\xd6\x61\x3a\x6b\x8b\x28\x08\xbc\x66\x40\x76\x5e\x49\x57\xd5\xb2\x42\x59\x07\x37\x60\x51\x2c\x92\x66\x91\x5c\xb7\x33\x93\x92\xc3\xf6\xef\x06\x22\x52\xf2\x78\xba\xa0\x67\x53\xc6\x66\x8c\x5c\x4c\x2f\x5f\x5e\x4d\xe7\x11\x3c\x83\xd9\x55\x32\xbd\x80\x1f\x7f\xfd\xe7\x04\xa0\x85\x23\x6b\x02\xf0\x8b\xf5\xb8\xec\xc8\x77\x53\x13\xbc\x77\x53\x98\x2c\x71\x9d\x70\x16\x56\x5f\x49\xd7\x89\x61\xcf\x5b\x50\xf0\x25\xa2\x69\x66\x91\x56\x86\xbb\x75\x96\x1b\x55\xe9\x8c\x33\x0f\xfe\xab\xb0\xd0\xe8\xf9\x1b\x3f\xc1\xae\x86\xf7\x94\x70\xf6\x10\xbd\x38\xac\x93\xe5\xca\x5a\x5e\xab\x4e\x00\x6e\x3d\x38\x6c\x2d\x49\xc9\x29\x44\x46\x29\x97\xcd\x85\xa2\xcb\x8c\xe1\x8a\xfb\x3a\xa8\xf3\xb4\x50\x26\x43\x42\x8b\x26\xea\x3d\xbd\xa0\x44\x95\x74\x28\x5d\x63\x02\xb0\x52\xa2\x2a\x31\xb3\xfc\xb5\xc7\x4e\x28\xb5\xac\xf4\x97\x7b\xa6\xc9\x8a\x88\x0a\x5f\x40\xd4\x51\x8f\x5e\x80\xac\x84\xf8\x6a\xd7\x51\x93\x84\x63\x1d\x79\xf5\x1d\x47\x0f\x6d\x31\x84\x3e\xf6\x4d\xe8\x5b\xd9\x37\x47\xbb\xcc\xa6\x15\x3a\xf9\x29\x89\x73\x68\x4a\x65\x5d\x26\x38\x45\x69\x31\xf3\x06\x41\x9b\xa1\x75\x5c\x12\xd7\x74\x73\x5a\xa8\x12\xd3\xba\x22\xd3\xad\x5d\xc7\x45\xdc\xb8\x88\x06\x03\x31\x58\x2a\x87\x31\xde\x23\x6d\xe3\xe1\x52\x70\x89\x9b\xc4\x03\x44\x77\x85\x67\x9b\x57\xf0\x07\x88\x17\x90\xae\x88\x49\x05\x9f\xa7\x54\xa8\x8a\xa5\x6d\x1d\xa5\x73\xa5\x5c\xbc\xe0\x92\xdb\x02\x19\xdc\x7e\x0b\x4c\x01\xd2\x42\xc1\x17\xff\x22\xdc\x71\x99\x87\x06\x0b\x46\x31\x97\xdc\x25\x49\xf2\xc5\xb7\x60\x05\xa2\x86\x99\xd7\x96\xd8\x94\x91\x9f\x31\x47\x07\x71\x2c\x55\x4c\x0b\xa4\xcb\x98\xa2\x71\x7c\xc1\x29\x71\x08\xf1\xbf\x7f\x86\x18\x0a\xe7\xb4\xfd\x26\x4d\xed\x79\x8c\x55\x7c\x87\xd6\xc5\xb3\x84\x94\xe4\xb5\x92\xe4\xce\x26\x54\x95\x29\xc3\x79\x62\xd4\xbc\xb2\x4e\xa3\xa1\xa8\x3d\x66\x09\x57\xe9\xc5\xec\xaf\x7f\xfb\xf3\xf5\xf5\x5f\x92\x5c\xe7\xf0\x1f\xb0\x15\x53\x40\xb4\xf3\x4c\x06\x84\x31\x88\xb7\x71\x6c\xc6\x42\x3c\x6b\xa8\x34\x23\x0e\x47\xc6\x03\x14\x42\x78\x3d\x6d\x54\x89\xae\xc0\xca\xc6\x52\x31\x8f\xaf\x56\xc6\xa1\xe9\xaf\xf0\x67\xe8\x24\x8a\x71\xeb\x12\x47\x4c\x92\xbf\x86\x9a\xe3\x3a\x85\xc0\xd4\x9d\xf4\x4c\x9f\x55\x46\x3c\x6c\xdd\x38\x62\xe0\xfe\xf5\x62\xc4\x4d\x2f\xd0\x72\xd5\xd1\x83\x54\x69\x97\xd6\x2c\x76\x1b\x6a\xe3\x10\x31\x97\xe8\x0c\xa7\xf6\x34\x72\x6e\x8c\xff\x6f\x18\x39\x72\x67\x89\x20\x26\x0f\x3d\x75\x0c\x0d\x9f\x4a\xaf\x0d\x70\x1b\x8a\xfd\x4c\x9c\x9f\xf9\xea\x89\xf9\xaa\xa7\x6b\xd7\xd6\x61\x49\x9d\x00\x94\x64\x2e\x70\x5c\x73\xc0\x2b\x61\x2c\x74\xa8\xe0\xf3\x85\x92\x8e\x2a\xb9\xe0\xf9\xac\x87\x5a\x0b\x0c\x13\x49\x6e\xc8\x82\x48\x12\xc0\x50\xd6\xa6\x06\x05\x12\x8b\x69\x23\xcf\x2e\x93\xcb\xe4\x2c\x23\x25\xbb\xbc\x48\x18\xce\x7b\x01\x30\xbd\xcc\x21\xe6\x70\x9c\xf6\x76\x61\x8c\x60\xa9\x64\x6c\xd0\xd3\xeb\x63\xcb\x6f\x9c\xc7\x0d\x0f\xf6\xb4\xd1\xf8\xd2\xee\x29\x81\x75\xc4\xb8\x63\x89\x56\x1b\x75\xbf\x3e\x8d\x66\x83\x69\x4d\xb2\x7d\xa6\xdb\xfd\x1b\xe5\xbd\x3d\xae\xeb\xdb\xf9\x49\xeb\x08\xfb\xa7\xd1\xdd\x73\xe6\x90\xdd\xfe\xa9\x13\xbe\x83\x19\x7c\x0f\x33\xf8\x06\xa6\x3e\x64\x6b\x15\xe5\xc4\x61\xb6\xe1\xed\x8c\x30\x66\xd0\xfa\xf5\x3b\x53\xe1\xa9\x3c\x1a\x42\xde\x9e\x3e\x3b\xa4\x3d\xca\xd7\x9f\x1a\xcb\x7e\xb8\x3d\xf9\xf7\xc0\xef\x4f\x77\x0e\x1c\xb3\x94\x39\x97\xf7\xef\x87\xb3\x86\x5c\x99\x32\x60\x87\x8e\xa6\x61\x38\xb5\xdc\xa1\x8d\x6b\x0b\x96\x36\x69\xef\x19\x09\x09\xf1\xc2\xee\x5b\x91\x15\xe1\xc2\x1b\xa6\xdd\xe3\xe5\x98\xef\xad\x4e\x8f\x13\x7b\xa4\x68\x98\xcd\x5a\x82\xeb\x10\x64\x5f\xd4\xbc\x89\x1c\xe0\x9f\xba\x3f\xd9\x7c\xff\xce\xcb\x19\x4a\xbf\x4f\xa3\x19\xe2\xc8\x21\x8e\x65\xf3\x81\x67\x86\x4d\x48\xfb\xee\x6a\x7e\xe9\x2c\xc5\xc7\xd1\xfe\x0c\x17\xf4\x6d\x50\x82\x58\xfb\x58\xe0\x5e\x67\x02\x80\x1e\xd8\x3e\x3d\x8f\x19\xd5\xca\x9e\x60\xb5\x16\xeb\x8c\x97\x25\x32\x4f\xb3\x62\xdd\xb5\x6a\xf8\x95\x54\x4e\x65\x25\x97\xca\x64\xcd\xa3\x51\x56\xe9\xdc\x10\xe6\x3b\x70\x41\x84\xc5\xfd\xed\xab\xb3\xbc\x08\xa2\xed\x02\x9b\xcc\x0c\xa0\x33\x8a\xae\x87\x93\x11\x47\xe6\xc4\x62\xe7\x58\x3d\x62\x50\xeb\x97\x24\x48\x36\x14\xb5\x83\x42\x2b\xdd\xea\x69\x62\xed\x9d\x32\x6c\x57\xaf\x95\x4e\x00\xec\x92\xeb\x6c\xc1\x25\x11\x99\x95\x44\xdb\x42\xb9\x0e\x3e\x03\x18\x6e\x06\x87\xd2\x72\x20\x1f\xf5\x8f\x16\xe7\x9e\xfa\xee\xe0\xab\x61\x27\xb7\x87\xaf\x16\xc3\xbb\x21\x9b\x87\xad\xf0\xf6\xe0\x39\xa4\x7d\x55\xcc\x48\x8e\xd2\xbd\xed\x6b\x9c\xb7\x39\xfa\x3d\xee\x37\xbb\xd6\x8d\x3d\xae\xf9\x68\xdf\xe7\xf3\xda\xae\xbf\x9a\x6c\x4e\xc8\x53\xf0\xd3\xa4\xea\x13\x3c\x91\x7c\xda\xe7\x82\xf6\x7d\xc8\x95\x7a\xf7\x4d\x28\x3c\x02\x85\xce\x7c\xe4\x49\x68\x6b\xb9\x1d\xdb\x79\x01\x0a\x5f\x0e\x62\xef\x2a\x96\xf9\x1f\xc7\x06\xb6\xc6\xa6\xec\xfa\x3c\x74\x9f\xd9\x2d\xe4\xfa\x5d\xbf\x4e\x5b\x87\xd2\x0f\x3d\xe5\xb7\x0e\xe2\xda\xc1\x24\xbc\x7b\x52\xc3\x75\xfb\xee\xf9\x83\xd6\xd0\x2a\x41\x50\x0a\x69\x6b\x59\xab\xdd\x74\x60\x60\x82\x68\x12\x78\x20\x0f\xf7\x8a\xa6\x71\x8c\x2a\x33\x9f\x81\x10\xd5\xd9\x59\x4d\x4b\xaa\x15\x75\x84\xda\x28\xa7\xa8\x12\x4d\xfc\x8e\xea\x1a\x08\xca\x99\xa9\xeb\xbc\x6e\xe8\x69\x12\xfe\xd3\x69\x74\xdb\x5c\xc8\x0e\xcd\x78\x35\xbd\xfc\x7a\x60\xce\x8d\xf8\xfd\xcf\x1a\x9c\xbf\xec\xcd\xd9\x11\x6e\x67\xec\xce\xf7\x0c\x7e\x22\xeb\x39\x82\x41\xeb\x0c\xa7\x0e\x94\x14\xeb\xe0\x15\x7e\xd9\x54\x34\x34\xd7\xde\xef\x1b\x93\x3f\x55\x0e\x0a\x22\xd9\x1a\xea\xfe\x74\x64\xe9\xbb\xac\xf9\x88\x65\xe1\x8e\xbb\x42\x55\x0e\x4a\x22\x2b\x22\xc4\x1a\xac\x2d\x62\xaf\xc1\xa5\x53\xe0\x0a\x6c\x1c\x26\xef\x0c\x74\x0d\xdf\xf5\x6c\x3a\xdd\x03\xbb\x37\xd4\x05\xbc\x0f\xfa\x6e\x71\x1f\xe0\xef\xee\xeb\x5d\x1b\x1c\x8e\x17\xc1\x7e\x50\xad\xac\x97\xfe\x78\x76\x5c\xf6\x8f\x6a\xcb\xe6\xd3\xcc\x3b\x74\x67\xdc\x78\x38\xba\x49\x6b\xfd\x23\x7b\xf5\xf1\x7c\x5e\x4d\x5f\x5e\x8c\xe4\x73\x33\x34\x90\xcf\x8a\xbd\x6d\x3e\xdb\x8f\x5d\xc7\x16\xda\x89\x81\xbd\x7d\xa1\x9d\x10\xd8\x3e\xdd\xf4\x86\x3e\x14\x62\xa7\x04\xf6\xee\x88\xfd\xc6\x6d\xf9\x58\x5f\xb2\x79\xa7\x1f\xc7\x6f\xa2\xfd\x5d\xf2\x08\x84\xcf\xcf\xa7\x97\x23\x08\x6f\x86\x9e\x00\xe1\x23\x22\xfb\xfa\xe2\x7c\x7f\xdf\xed\x0d\x3d\x41\x64\x47\x90\xe4\xf6\x02\x74\x0c\x3f\x86\xab\xcf\xa3\xe7\x97\x1f\x5b\xf2\x0b\xfa\xbf\xab\xa3\xcc\xc1\x53\xc5\xc5\x74\x6f\x73\xed\x08\x87\x4f\x15\xfe\x4e\xd7\x62\xda\x5c\xa4\x8f\xaa\x98\x0f\xb8\x91\x7f\x74\x3b\x79\xfb\x89\xf5\x51\xda\x68\x14\xdf\x8e\x3b\x3e\xc4\x99\xf8\x7a\x7a\x3d\x84\xe3\x46\xfc\x34\xb3\x9e\xef\xd7\xef\x8e\xf8\xf4\x59\x3f\xae\x7a\xa9\xbf\x15\x1d\x4b\x6a\x41\xfb\x71\x52\xfb\xc5\xab\x3d\x19\x97\x5d\x0d\xc1\x74\xf5\x6e\x69\xf9\xb8\xe8\xf3\x53\x24\xb6\xff\x05\x00\x00\xff\xff\x25\x99\xf8\x63\xdf\x28\x00\x00")

func clusterTfBytes() ([]byte, error) {
	return bindataRead(
		_clusterTf,
		"cluster.tf",
	)
}

func clusterTf() (*asset, error) {
	bytes, err := clusterTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x5d, 0x68, 0xc3, 0xaa, 0x14, 0xa7, 0xeb, 0xc5, 0x5c, 0xf7, 0x6, 0x28, 0x9f, 0x7b, 0x22, 0xb1, 0x92, 0x0, 0xa1, 0x16, 0x8e, 0xfe, 0xb4, 0xda, 0xf5, 0x14, 0x55, 0xf3, 0xa1, 0xba, 0x3d}}
	return a, nil
}

var _dashboardYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xb1\x4e\x03\x41\x0c\x44\xfb\xfd\x8a\xe9\x52\xa1\x0b\xa2\xdb\x9a\x26\x35\x0a\xbd\x0f\xfb\x12\x4b\xce\x7a\x65\x6f\x0e\xf1\xf7\x68\xaf\x40\xa2\x9d\xf7\xe6\x51\xd7\x4f\x89\x54\x6f\x15\xaf\xa5\xf4\xf0\x5d\x59\x22\x6b\x79\x41\xa3\x87\x54\x9c\x92\x1e\xdd\xe4\x54\x00\x8f\xdb\x85\xa7\x07\x6c\x6e\x2c\xf1\x8f\x8e\x9f\x2e\x15\x9b\x9a\x14\x80\x35\x69\x35\x79\x17\x93\x71\xc4\x37\xb2\x9c\x40\x58\xc7\x24\x15\x23\x9e\x73\x78\x76\xa6\x21\x97\x36\x24\x76\xb2\x0f\xf9\xf2\xc6\x59\xf1\x76\x3e\x17\x80\xcc\xfc\xfb\xaa\xd7\xc3\xc9\xbf\x8f\xf7\x19\xcd\x5a\x00\xa0\xd3\xb8\x57\x2c\x3b\xc5\x62\xba\x2e\xb7\xa0\x8d\x1a\x2d\x4c\x79\x5f\x9d\x82\xf3\x37\x00\x00\xff\xff\x94\x42\xcd\x38\xe4\x00\x00\x00")

func dashboardYamlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardYaml,
		"dashboard.yaml",
	)
}

func dashboardYaml() (*asset, error) {
	bytes, err := dashboardYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x3e, 0x13, 0x14, 0xd7, 0xd7, 0xbd, 0xed, 0xe7, 0xca, 0xfc, 0xe7, 0x3a, 0x3a, 0x0, 0xc1, 0x74, 0x2d, 0xef, 0xf0, 0x9d, 0x47, 0xe0, 0x99, 0xba, 0x23, 0x47, 0x12, 0x37, 0x12, 0x52, 0xd9}}
	return a, nil
}

var _dashboard_dataJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\xdb\x6e\xdb\x3a\xd6\x80\xef\xfb\x14\x04\xd1\xff\x47\x52\x24\xd9\x96\x13\xb7\x69\x80\xc1\x20\x6d\xd1\x4e\x81\x66\xa6\xd3\xb4\x7b\x2e\xda\x40\xa0\xa5\x65\x99\x08\x45\xaa\x24\x95\xc3\x0e\x32\xcf\x3e\x20\x25\x4b\xd4\x21\xb5\x63\xc4\xb5\xd3\x32\x17\x89\xb5\x44\x51\xe4\xe2\x3a\x7c\xa2\x18\xfa\xe6\x09\x42\x98\x70\x2e\x34\xd1\x54\x70\x85\x8f\x90\x11\x21\x84\x19\x55\x1a\x1f\xa1\xaf\xf6\x08\x95\x52\x7b\x66\x9c\x53\xa6\xdf\x73\x7c\x84\x82\x9d\x5a\x1a\x13\x4d\x94\xc8\x65\x04\xf8\x08\xe1\xdd\x5d\xf4\x4e\x92\x09\xe1\x04\xed\xee\x62\xa7\x18\x70\x32\x66\xa6\x88\x96\x39\x38\xf2\x29\x8d\x7b\xa4\x34\x12\xfc\xb5\x60\x42\x9a\x3a\x65\x32\x26\x5b\x83\x1d\x34\x0c\x82\x1d\x34\x1c\x8d\x76\x50\xb0\xed\x56\xcd\x49\x6a\xef\x7d\x5c\x77\x07\xfd\x3f\x3a\x66\x20\xb5\x72\xcb\xe9\xeb\xcc\x96\x8b\x89\x9a\x8e\x05\x91\x31\x2e\xcf\xdd\xda\xbf\x67\x4f\x10\xba\x35\xc5\x31\xc4\x54\xb7\x5a\x8b\x13\x0e\xfa\x7d\x8c\x8f\xd0\x70\x74\x30\x2c\x24\x92\x64\xd3\xcf\x42\x30\x4d\xb3\x99\x4e\x30\xb5\x45\x8a\x8f\x1a\xa4\x6d\x8d\x39\x39\x3a\x7c\x7e\x30\x1c\x0c\x86\x83\xc3\xc3\x7d\x7b\x96\x51\x7e\x6e\xb4\xfe\xf5\xcc\x1e\x66\x84\x03\x53\x95\xde\x67\x5a\xc7\x84\x51\xa2\xac\x26\xec\x10\xdd\xce\xba\x83\xc7\xc4\x4a\x26\x84\xa9\x4a\x71\xb6\x67\x1f\x80\x27\x7a\x6a\xee\x39\x68\xc8\xa1\xaf\xb8\x33\x74\x3c\x67\xac\x3a\x33\xa1\x8c\xb9\xe3\x6c\x05\xef\x24\x89\x29\x70\x63\x1d\x75\xd5\x89\xa4\xf1\x47\x51\xdb\x4f\x31\xa8\xf8\x08\x1d\x3a\x9a\xbf\x34\x75\x0d\x1d\xc1\x95\x5b\x07\x42\xf8\xda\x1c\xcf\x46\xa3\xaa\x7b\x4a\xe3\x18\xf8\x29\x48\xda\xd3\x78\xab\xe9\xe0\x65\x75\xcc\x20\x01\x1e\x37\xdb\x41\x2e\x92\xf6\x75\x08\xe1\x28\x97\xb2\xe8\x46\xfb\x4c\x4a\xae\xfa\xa4\x94\xf7\x48\xd5\x54\x5c\x76\x0d\x57\x0b\x4d\x58\x4f\xe9\x0b\xc2\xf2\xba\x13\x9d\x9e\x32\xca\xed\x59\xb7\x36\x2b\xbc\xa4\x71\x31\x98\x95\xd4\x8c\xd3\x47\x41\xb9\x3e\x11\xd6\x73\xac\xa0\x32\x73\x2c\xb2\xa6\x3f\x57\x03\xfd\xa1\x32\xb8\xce\xdd\x33\x90\x11\x70\x4d\x12\xe8\x68\x39\x33\x77\x32\xe3\x9e\xab\x99\x61\xd7\xf2\xee\xa0\x48\xe0\x31\x48\xb0\x6e\x3b\x61\x42\xd7\xed\x52\x76\x14\xff\x75\x01\x52\xd2\x18\x6a\xcb\x2f\x4e\x66\x24\x82\x3e\xc3\x55\x9a\x44\xe7\x9d\xbb\x28\x0d\x59\x06\xf1\x07\xca\xbb\x0d\xd6\x44\x26\xa0\x95\x13\xc1\xdc\x18\x66\x9c\xfb\x2a\xb3\xcd\x53\x79\xba\x45\x79\x24\x81\x28\xd8\x4a\x89\xd6\x20\x53\xa1\x74\x18\x8f\x43\xa5\x85\x84\x50\xd3\x14\xc2\x48\xe4\x5c\xdf\xa4\xa0\xa7\x22\xfe\xdb\x7f\xbf\xe1\xa7\x5a\x64\xa6\x88\x95\x7f\xc3\xb7\x5f\x47\xe9\xd9\xf6\x36\x1a\x5f\xa3\xad\xa2\x90\x1b\x99\x2a\xab\x7c\x2b\x64\x4a\x8c\xc1\xe1\x9b\xb2\xae\xdb\xdb\x66\x39\x09\x13\x1b\x5d\xf0\x31\xae\xc4\xb7\xe5\xa7\x5a\x4f\x7a\x2a\x41\x4d\x05\x8b\x5b\xfa\x33\x4d\x7d\x2b\x45\xda\x76\x63\x23\xff\x04\x49\x69\x10\xad\x0b\x4e\xa7\x74\xa2\xbb\x57\x68\x1b\xf7\xf0\x67\x91\xa1\x60\x80\xde\xbc\x42\xdf\x73\x3b\x74\xa6\x8f\xb6\xd7\xf5\x98\xea\x2a\xf8\xdd\xb8\x7e\x41\x24\xc4\x5d\xcf\x50\x42\xea\x96\xd7\x5b\xa7\x08\x67\x61\x99\xf2\x98\x5e\xd0\x38\x27\x0c\x77\x2c\x74\x56\xc6\xc6\xdc\xba\x01\x57\xe4\x8a\xb6\x4c\x7d\x9c\x47\xe7\xc5\xf8\xbb\xfd\x32\x5e\x5c\xba\x8b\xe9\x7a\x4f\xf6\x68\x95\xee\xf7\xee\xca\x8b\x7b\x9c\xe8\x9a\x5c\xc1\x0f\xcc\x6e\x52\x99\x80\x9a\x1a\x4d\x34\xad\x84\x8c\x81\x75\x1a\x61\x4e\x88\xe4\x15\x51\xd0\x4c\xb9\x55\xa0\xea\x14\x2f\x22\x55\x47\xec\x74\xa6\x36\xae\x9d\x47\xd2\xce\x8e\x13\x5c\x77\x07\x9d\x30\x9a\xf4\xc5\x68\x2b\xff\x00\x17\x55\xa3\x1b\x09\xbf\x54\xc1\x2f\x90\x6b\x5f\xce\xcb\xb5\x0d\xc1\xd2\xc9\xf6\x85\x4f\xb6\x3e\xd9\x3e\x68\xb2\x25\x19\x75\xf3\xec\x94\xf0\x98\x81\xac\x12\xad\x39\xdd\x93\x69\xcb\x62\xad\x54\x4b\xb9\x06\x79\x41\xd8\x5b\x12\x69\xfb\xe0\xb0\x3f\x27\x13\x97\xd5\x6c\x7c\x2a\xd6\x45\x2a\x3e\xfe\xf8\xfe\x81\x73\xf1\xf0\xb7\xcf\xc5\xa9\x5a\x7f\x82\xf3\x89\x78\x7d\x89\x18\x33\x41\x62\x0d\x4a\xef\x96\xa2\xaa\x58\xcf\x1c\x40\x21\x97\xd2\x06\x97\x66\xa5\xeb\x78\x5e\x3e\x5c\x22\x85\xff\x2e\x19\x7c\xe8\x4a\xcf\x5b\x11\xb7\x93\xd4\x23\xc1\x39\x44\x1a\xe2\x9f\x94\xd9\x47\xbf\x50\x66\xef\xcb\xea\x99\xf9\x65\x87\xf6\x86\x72\xa5\x09\x8f\xc0\xa6\x74\x05\xf2\x02\xa4\xc9\xe5\x41\x7a\xd6\xca\xde\x75\xb8\xb3\x3c\x50\xf4\x73\x4e\x82\x0f\xe6\x24\xf8\xd9\xcd\xdb\x19\x3e\x05\x2d\x69\x64\xe3\x7f\x5f\xa3\xef\xc4\x81\x66\x8c\xd4\x60\xb2\xed\x68\x6e\x20\x9f\xc7\x40\x8b\x69\x6b\xe5\xea\xfa\xdc\xed\xfa\x72\x7a\x7a\x35\x4f\x4f\xeb\x64\xa9\x7f\xe6\xe9\x18\x24\x12\x13\x74\x02\x4a\x91\x04\x14\xca\x40\xa2\x53\x88\x04\x8f\xe7\xd0\x54\xaa\x3e\x81\x12\x2c\x2f\xe7\x74\xbb\x11\xce\x4f\x7c\x14\x3f\xf7\xe7\x18\xfc\xba\x41\xb3\xc8\x23\x17\xf2\xc8\xb5\x7e\xe4\xea\x4c\x9b\xbc\x5c\x82\xb9\x1c\xfd\x78\xe8\xf2\xd0\xb5\x2a\xe8\x9a\x6a\x9d\x85\x12\xbe\xe7\xa0\xb4\x7a\x74\xf4\x65\x5b\x6f\x1d\x5d\xad\x05\xc2\xee\xa9\xbd\x8d\xa1\xb1\x45\xf5\xb6\xd1\x50\xf6\xa9\xd4\xbb\x47\x31\x8f\x62\xf7\x69\xaa\x47\xb1\xdf\x07\xc5\xda\xb3\x5f\xc1\xf3\x25\x50\xec\xb9\x27\x31\x4f\x62\x0f\x4a\x62\xed\x54\x7c\x09\x63\x25\x6c\xf4\xff\x21\x44\x6c\x22\x7d\xb5\x9b\xbe\x42\x02\x5b\x52\x6b\xeb\xa0\xae\xc7\x41\x50\xf5\xb4\xd6\xeb\x99\x33\xa3\x37\x70\x41\x23\x50\x68\xeb\x3f\x30\x3e\xb5\xda\x9d\x9d\x34\x77\xd8\xf6\x84\xe5\x09\xcb\x13\x96\x27\x2c\x84\xee\x9a\xec\x0a\x5e\x2c\x81\x58\x81\x47\x2c\x8f\x58\xab\x42\xac\x78\x1c\xa6\x44\x69\x90\x61\x54\x67\xb2\xc7\x04\x5a\x3f\xe8\xc0\xcf\xc1\xad\xfb\x6b\x70\x63\xa6\xba\xee\xaf\xbb\xc7\x85\x6c\xf6\xff\x56\xb4\x40\x27\xb6\x93\xe8\x0d\xd1\x64\x6c\x52\xad\xe7\x34\xcf\x69\x9e\xd3\x7e\x1b\x4e\x9b\xbb\x96\xbb\x3d\x13\x36\x3c\x58\x06\xd3\x7e\x17\x4e\x0b\x3c\xa7\xad\xf1\xa5\x64\xb5\xbe\x5b\xe5\xe9\x8f\xde\xa7\xa1\x3f\x10\x42\x0b\x2c\x10\x7f\x3c\x2f\x34\xdd\x9e\xaf\x08\xed\xa6\x54\x69\x91\x48\x92\x86\xdf\x73\xc2\x35\x65\xb0\x35\xd8\x7b\xb9\x83\x0c\xf2\x49\xa2\xfb\xf5\x58\x64\xe4\xe2\x25\xa6\x5d\x4c\x3f\xeb\xd5\x0e\x83\xd5\xbf\xd6\x7c\x39\xc8\x76\x97\x55\x64\xd1\xf2\xc7\x88\x7a\x27\x40\xb8\x5d\xbe\x5f\xbe\xe8\x44\x9f\x5d\xea\xf1\x5c\xb7\x12\xae\xbb\x83\xe9\x3c\xce\x79\x9c\xdb\xec\x69\xb7\xe1\x68\x09\x9e\x1b\x79\x9c\xf3\x38\xf7\xa0\x38\x97\x88\x30\x85\x54\x69\xa2\x55\x48\x18\x13\x51\x38\xbe\xd6\xa0\xee\x40\xb0\x3f\x82\xc1\xf0\xc0\xfe\x5a\x35\x42\x1c\x9b\xb6\x2c\x04\x11\x77\xf4\x60\xa5\xd3\x6d\xee\x3d\xed\xe0\x84\x94\xe7\x0a\x56\xa5\xbb\x72\xf7\x94\x96\x97\xdd\x5f\xa9\xa7\xa6\xa9\xab\xd5\xec\x5c\x42\xbb\x87\x66\xa7\x40\xb2\xc7\xa1\xd8\x7f\x00\xc9\x56\xab\xd7\xd7\x9b\x4d\xbe\xa9\x90\xd7\xe8\x8b\x22\x09\x98\x47\x0d\x74\xf2\xca\xbf\x78\x5e\xdf\x84\xe6\xc9\x2b\x8f\xbf\x1e\x7f\x37\x0a\x7f\xdb\xb3\x99\xfb\xfb\x4b\xd0\x6f\xb0\xef\xf1\xd7\xe3\xef\x83\xe2\x2f\x6d\xcf\xa0\x65\x52\x44\xa0\x54\x18\x65\x79\xa8\xec\x1a\xf5\x05\xfe\x4f\xe0\x19\x0a\x06\x83\xf5\xcd\x4c\x2e\x8e\xb5\xeb\x84\x84\xd7\x1f\xbf\xa0\x2f\x9a\x32\xfa\x97\xdd\x2e\x0f\x7d\x22\x1a\xd0\xd6\xff\x79\x50\x58\x1f\x28\xfc\x70\x38\x90\x47\x07\xe4\xd1\x61\xfd\xe8\xd0\x99\x39\x5b\x8a\x1d\x0e\x3c\x3a\x78\x74\x78\x50\x74\x48\x44\x98\x08\x29\x72\x6d\x86\x64\x83\xd7\xa5\x35\xda\xb9\xc2\xe5\x67\x8b\xe8\x63\xbd\xab\xcc\x16\xd1\xc4\x46\xbf\x61\xac\x17\x93\xbd\x13\xe8\x53\xbb\x23\x9e\x9f\xfc\xca\xb1\x5f\x1c\x98\x9e\x94\xd5\x1a\x7f\x35\x5e\x67\x7a\x1d\x0c\x0a\x17\xc0\x2a\x9a\x42\x4a\xfe\x04\xa9\x0a\x53\x1f\x16\x1b\x74\x2b\x7d\xcd\xca\x0d\xc1\xe5\x79\x51\x52\x93\xa4\x1e\x7b\x67\x15\x42\xa9\x3b\x47\xb2\x9b\x81\x9c\xe0\xea\xb6\x1a\xd2\x8c\x11\x4d\x79\xb2\xc8\x4e\xea\x84\xb1\x3f\x8d\x09\x76\xed\xb5\x26\x8b\xc6\x50\x6a\xb8\xb2\x03\x19\xbc\x18\xee\xed\x07\x7b\xc1\xfe\x5e\x30\x18\x1d\x1d\x0e\x9e\xbf\x68\x8e\xea\x45\x59\xeb\x57\x47\x88\x7a\x2f\x73\x0a\x9c\xf5\x59\xd2\x82\x58\x68\x0a\xc2\x84\x72\x5a\x46\x91\xc2\xae\xc2\xc2\xc1\xaa\xb5\x25\x8d\xed\xda\xcb\xa9\x75\x37\x80\x50\x1e\xb1\x3c\x86\x63\xd6\x07\x3e\x95\x53\x15\xc9\xc2\xad\x2a\xcd\x99\xa6\x5d\xf7\x9e\x6d\x08\xdf\xbd\xa0\x66\x98\x3a\xbc\x22\x84\xbf\xe7\x20\xaf\x17\x6b\x7d\x6d\x5f\x41\x43\x9a\xc0\x55\x6b\x79\x01\x56\xe7\x34\xfb\x22\xd9\xe9\x35\x8f\xfa\xe2\x6b\x37\x8e\x6a\x92\x58\xb3\x50\xff\x2e\xdb\xd3\x32\x8e\x99\x75\x9e\xb5\x64\x77\x15\x2f\x83\x6d\xd1\x3b\xe7\x44\xae\xe0\x73\x51\x55\x2f\x4b\x3e\x84\xa1\x1e\x33\xb6\x90\x65\x3e\x0d\x43\xc2\xd8\xca\xac\xd1\x76\x3d\x94\xa0\x72\xa6\xb7\xb4\xc8\xce\xb7\x82\x41\xb1\x40\x6a\xfe\x62\xb3\xaf\x4f\x6f\xc2\x50\x12\x9e\x40\xa8\x6e\x55\x7b\xef\xd1\xed\x7b\xd9\x74\xcb\x40\xfb\x83\xef\x3c\x73\x6e\xec\x88\x7a\x87\x55\x57\xc2\x5e\xf3\xfe\x59\xea\x98\xe3\x24\x7b\xcf\x66\x1b\xbd\x7e\xc3\x5b\x7b\xcf\xfe\xbe\xfd\x0d\xef\x3d\x7b\x58\xcf\x69\x38\xe2\x3c\xbf\x69\x16\x5e\x83\xd7\x28\x60\xc5\xc3\x56\xdf\x1b\xc7\xb9\x2e\xd5\x71\xa2\x9f\xee\x38\x3d\x7b\xe6\x77\x37\xc6\x5f\x93\xc7\xcc\x36\xeb\xff\x09\x0e\xb3\x84\x1a\xe6\x7a\x4a\xf9\xd5\x03\xbf\x80\xa3\xd8\xbf\xf5\x97\xac\x58\x7e\xaf\x58\x69\x52\x3c\x0f\x61\x2e\x2e\x77\x83\xd1\x6c\xc5\x2c\xd6\xa2\x14\xe2\xc6\x75\x19\x8d\xce\xed\x54\x40\x79\x75\xa9\xc5\x70\xf6\x4c\xe8\x8e\x2c\x1e\x39\x0f\x42\x33\x24\xb4\x07\xfb\xee\x41\x50\xaf\xd2\xc5\x23\xe7\x73\xe0\x1e\xec\x0f\xdc\x33\xce\x03\xcc\xd0\xf9\x1c\x94\xdf\x2b\x73\x36\xeb\x83\x31\x86\xae\xc5\xdd\x7d\x17\xb7\xe2\xe7\x6e\xc5\xee\x5d\x86\x07\xee\x81\x33\x4d\xf3\x22\x76\xdb\x3b\x6b\x4b\x43\x7d\x7f\x09\x3b\xbd\x81\xc7\x52\x5c\xaa\x12\x90\x9c\x77\xf6\x95\x41\xa3\x8f\x20\xed\x43\x04\x8f\x00\x9d\x08\x4e\xb5\x90\x86\x70\x6d\xf9\xdc\xce\x9e\xe1\x41\xf1\x13\x04\x85\xf4\xa2\x82\xec\x83\x27\xb7\x4f\xfe\x17\x00\x00\xff\xff\xa2\x49\x40\x17\x66\x68\x00\x00")

func dashboard_dataJsonBytes() ([]byte, error) {
	return bindataRead(
		_dashboard_dataJson,
		"dashboard_data.json",
	)
}

func dashboard_dataJson() (*asset, error) {
	bytes, err := dashboard_dataJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard_data.json", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8e, 0x81, 0x5b, 0xc8, 0xae, 0x4, 0x2f, 0x28, 0x2, 0x1d, 0x4, 0x23, 0x9d, 0xfb, 0xfe, 0x74, 0xa4, 0x2a, 0xc0, 0xcd, 0xb, 0x30, 0x37, 0xb5, 0x5b, 0xe6, 0x9d, 0x90, 0x7c, 0xba, 0x89, 0x22}}
	return a, nil
}

var _datasourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\xc5\x45\x8c\x87\x37\x05\x45\x87\x2e\x9a\xb3\xe4\x07\xba\x33\xd6\xb5\xcd\x42\x96\x0c\x91\x72\x9b\xbf\x2f\x9c\x00\x6d\x37\x82\x87\x38\x38\x1c\x30\xd6\x32\xe9\x8c\x49\x33\xb1\xb3\x99\xd6\x12\x64\xd3\xf7\xe7\x18\xf1\x1a\xc2\x80\xac\xe6\xa8\x13\x92\xb8\x58\xed\x6d\xa4\xc1\x2b\xb4\x18\x9b\xbf\xf4\x2d\x89\x13\x89\x1b\x4b\xd2\x32\x87\x01\x9f\x8b\xf8\x7f\x83\xec\xa2\x59\x6e\x99\xd0\x02\x5f\xf8\x10\xdc\xc4\x18\xfe\x98\x62\x38\xa3\xc8\xca\x88\x5c\x25\x39\xcd\xcf\x4f\x12\x00\xbf\x6f\x8c\xd8\x5a\x5d\xe9\x0b\xbb\x05\x40\xc6\x91\x66\x8f\xe5\xd7\x3d\x00\xb5\xcd\xd7\x74\x74\x02\xbd\xe5\x88\x7f\xc7\x91\xda\x85\x93\xf4\xec\x11\xde\xfa\x61\xda\x7f\x1f\x02\x98\xd4\x8f\xac\x1f\xfa\x61\xb5\x5c\xc4\x25\x06\x00\x70\x5d\x79\x2d\xce\xb6\x4b\x8e\x38\xbd\xd9\xe9\x3b\x00\x00\xff\xff\x50\x28\x34\xbf\x28\x01\x00\x00")

func datasourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_datasourceYaml,
		"datasource.yaml",
	)
}

func datasourceYaml() (*asset, error) {
	bytes, err := datasourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datasource.yaml", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0x82, 0x88, 0xc0, 0xa4, 0xae, 0x3, 0xd5, 0x18, 0x5f, 0xf7, 0x9a, 0xce, 0x18, 0xcf, 0x8c, 0xeb, 0x4c, 0x24, 0x3f, 0xba, 0x8b, 0xe6, 0x78, 0x8f, 0xb9, 0x5e, 0x3f, 0xa9, 0x91, 0xc7, 0x9d}}
	return a, nil
}

var _outputsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x10\x5c\xb9\xe8\x0d\x5c\x79\x04\x0f\x10\xa6\xcd\x20\x85\x98\x84\x99\x49\x55\x4a\xef\x2e\xc4\x06\xac\x48\xdd\x05\xfe\xfb\x2f\x7f\x52\xd1\x5c\x14\xec\x18\x45\x31\x0e\x24\x16\x66\x03\x30\x61\x28\x04\x27\xb0\x87\x19\xef\xe2\x5a\xda\x61\xce\x4e\x88\x27\xe2\xee\xb8\x58\xb3\x18\xd3\x04\xbe\x3f\x87\x22\x4a\xfc\x53\xc0\x5e\xdc\xf0\xce\x3b\xdf\xb7\xe7\xd6\x80\x57\x8a\xfa\xe7\xff\x90\xd0\x2b\x89\xba\x0a\x7f\x6f\xb8\x91\xf2\x38\xc8\xa5\x0e\xdc\x17\xad\xe8\x7a\xcc\x56\x93\x39\x3d\x9e\xfb\xf5\x8a\x7c\x94\x5f\x01\x00\x00\xff\xff\x6f\xd3\xe1\x13\x47\x01\x00\x00")

func outputsTfBytes() ([]byte, error) {
	return bindataRead(
		_outputsTf,
		"outputs.tf",
	)
}

func outputsTf() (*asset, error) {
	bytes, err := outputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "outputs.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0xd7, 0xa7, 0xff, 0x49, 0x7d, 0xf7, 0xf2, 0xf0, 0xad, 0x3d, 0x63, 0x4d, 0x52, 0x40, 0x3f, 0x63, 0xb2, 0x30, 0x39, 0xfe, 0xb0, 0xbb, 0x6b, 0x82, 0xfe, 0xd3, 0xf7, 0xce, 0xb2, 0x30, 0x67}}
	return a, nil
}

var _variablesTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4d\x6e\x83\x30\x10\x85\xf7\x9c\x62\xe4\x75\x6b\x45\xa9\xd2\x9f\x05\x27\xa9\x2a\xcb\xd8\x13\x6a\xc5\xd8\xae\xc7\x26\xa5\x15\x77\xaf\x30\x55\xd3\x08\x14\x58\xce\xf7\xcd\x63\xf4\xa0\x97\xd1\xc8\xc6\x22\x30\x65\x33\x25\x8c\xc2\xc9\x0e\x19\x7c\x57\x63\x55\x5d\xa0\x0c\x41\x18\x47\x49\x3a\x85\x42\xf9\xec\xd2\x6d\x25\x0d\x61\x25\xa4\x45\x97\x36\x63\xae\xa5\xd5\xa0\x10\xfd\xe7\xb0\xe1\xe8\x66\xeb\x4d\xff\x0d\x74\xad\x71\x1b\x21\x56\x12\xad\x19\xf3\xae\xe8\x31\x92\xf1\x6e\x32\x00\xa6\x93\xa0\x86\x4e\x86\x0a\x40\xe3\x51\x66\x9b\xa0\x2e\x08\x80\xc9\x1c\x7d\x94\xf7\xdd\x40\x1f\x96\x41\x79\x6a\x60\x07\xfe\xc4\xcb\x48\xcc\x9c\xef\xf9\xee\x81\xef\xd9\xd5\x4e\xf0\x94\xda\x88\x65\xb1\x06\xf6\xc2\x1f\xf9\xf3\x64\x8c\x8b\xb3\x32\x61\x5c\xfd\x96\xba\x11\x41\x12\x9d\x7d\xd4\x0b\x46\xf4\x2e\x42\x6e\xac\x51\xe2\x84\xc3\x02\x77\x32\x25\x8c\x9d\xa7\x24\xb4\x3f\x3b\xeb\xa5\x16\x39\xda\x5b\x9e\x35\x0a\x1d\xa1\x38\x1a\xbb\x3c\xa5\x04\x24\xdc\x8a\x8b\xde\x27\xd1\x58\xaf\x4e\x42\x63\x6f\x14\xce\x25\x5f\x7a\x7d\x2d\x1d\xcd\xed\x02\xf4\xde\xe6\x6e\xfe\x2d\xa6\x8e\xda\xf0\xdb\xe1\x1f\x21\xf3\x35\x91\xc3\xae\x8c\xc7\xbb\x0a\xe0\xad\x1a\x7f\x02\x00\x00\xff\xff\x13\x26\x6f\x52\x0b\x03\x00\x00")

func variablesTfBytes() ([]byte, error) {
	return bindataRead(
		_variablesTf,
		"variables.tf",
	)
}

func variablesTf() (*asset, error) {
	bytes, err := variablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "variables.tf", size: 0, mode: os.FileMode(0644), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0x86, 0xe, 0x94, 0xf, 0xf5, 0xd6, 0xbc, 0x4d, 0x91, 0xd2, 0xcd, 0x71, 0x7a, 0x6a, 0x8f, 0x4c, 0x1f, 0xeb, 0xe7, 0x50, 0x1b, 0xf, 0xb4, 0x63, 0xa9, 0xb4, 0x10, 0x3c, 0x21, 0x8e, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.tf":          clusterTf,
	"dashboard.yaml":      dashboardYaml,
	"dashboard_data.json": dashboard_dataJson,
	"datasource.yaml":     datasourceYaml,
	"outputs.tf":          outputsTf,
	"variables.tf":        variablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.tf":          &bintree{clusterTf, map[string]*bintree{}},
	"dashboard.yaml":      &bintree{dashboardYaml, map[string]*bintree{}},
	"dashboard_data.json": &bintree{dashboard_dataJson, map[string]*bintree{}},
	"datasource.yaml":     &bintree{datasourceYaml, map[string]*bintree{}},
	"outputs.tf":          &bintree{outputsTf, map[string]*bintree{}},
	"variables.tf":        &bintree{variablesTf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
